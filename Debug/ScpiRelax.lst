
ScpiRelax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014968  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  08014968  0c014968  0001c968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  08014968  0c014968  0001c968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 Stack         00000800  1ffe8000  1ffe8000  00028000  2**0
                  ALLOC
  4 .data         00000924  1ffe8800  0c014970  00020800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00007338  1ffe9124  0c015294  00021124  2**2
                  ALLOC
  6 ETH_RAM       000030a0  20000000  20000000  00028000  2**2
                  ALLOC
  7 .no_init      00000014  2003ffc0  2003ffc0  00027fc0  2**2
                  ALLOC
  8 .debug_aranges 00001af8  00000000  00000000  00021128  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002692b  00000000  00000000  00022c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005753  00000000  00000000  0004954b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e849  00000000  00000000  0004ec9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000086dc  00000000  00000000  0005d4e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000aec7  00000000  00000000  00065bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e5f7  00000000  00000000  00070a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001810  00000000  00000000  0007f082  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 000014bc  00000000  00000000  00080892  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	f5 51 00 08 99 02 00 08 99 02 00 08 99 02 00 08     .Q..............
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 69 5c 00 08 00 00 00 00 99 02 00 08     ....i\..........
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c014970 	.word	0x0c014970
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000924 	.word	0x00000924
 8000254:	0c014970 	.word	0x0c014970
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe9124 	.word	0x1ffe9124
 8000264:	00007338 	.word	0x00007338
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	000030a0 	.word	0x000030a0

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	0800f20d 	.word	0x0800f20d
    blx  r0
#endif

    ldr  r0, =main
 8000294:	0800e0d1 	.word	0x0800e0d1

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 80002ae:	f00d fd6d 	bl	800dd8c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b2:	f00d fdd5 	bl	800de60 <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f00d fdb4 	bl	800de4c <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <SCPI_ErrorInit>:

/**
 * Initialize error queue
 * @param context - scpi context
 */
void SCPI_ErrorInit(scpi_t * context, scpi_error_t * data, int16_t size) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	4613      	mov	r3, r2
 800039c:	80fb      	strh	r3, [r7, #6]
    fifo_init(&context->error_queue, data, size);
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80003a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003a8:	4610      	mov	r0, r2
 80003aa:	68b9      	ldr	r1, [r7, #8]
 80003ac:	461a      	mov	r2, r3
 80003ae:	f000 f9e3 	bl	8000778 <fifo_init>
}
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <SCPI_ErrorEmitEmpty>:

/**
 * Emit no error
 * @param context scpi context
 */
static void SCPI_ErrorEmitEmpty(scpi_t * context) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
    if ((SCPI_ErrorCount(context) == 0) && (SCPI_RegGet(context, SCPI_REG_STB) & STB_QMA)) {
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f000 f871 	bl	80004a8 <SCPI_ErrorCount>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d11c      	bne.n	8000406 <SCPI_ErrorEmitEmpty+0x4e>
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	2100      	movs	r1, #0
 80003d0:	f000 fae0 	bl	8000994 <SCPI_RegGet>
 80003d4:	4603      	mov	r3, r0
 80003d6:	f003 0304 	and.w	r3, r3, #4
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d013      	beq.n	8000406 <SCPI_ErrorEmitEmpty+0x4e>
        SCPI_RegClearBits(context, SCPI_REG_STB, STB_QMA);
 80003de:	6878      	ldr	r0, [r7, #4]
 80003e0:	2100      	movs	r1, #0
 80003e2:	2204      	movs	r2, #4
 80003e4:	f000 fc42 	bl	8000c6c <SCPI_RegClearBits>

        if (context->interface && context->interface->error) {
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d00a      	beq.n	8000406 <SCPI_ErrorEmitEmpty+0x4e>
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d005      	beq.n	8000406 <SCPI_ErrorEmitEmpty+0x4e>
            context->interface->error(context, 0);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	6878      	ldr	r0, [r7, #4]
 8000402:	2100      	movs	r1, #0
 8000404:	4798      	blx	r3
        }
    }
}
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <SCPI_ErrorEmit>:
/**
 * Emit error
 * @param context scpi context
 * @param err Error to emit
 */
static void SCPI_ErrorEmit(scpi_t * context, int16_t err) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	460b      	mov	r3, r1
 8000416:	807b      	strh	r3, [r7, #2]
    SCPI_RegSetBits(context, SCPI_REG_STB, STB_QMA);
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	2100      	movs	r1, #0
 800041c:	2204      	movs	r2, #4
 800041e:	f000 fc09 	bl	8000c34 <SCPI_RegSetBits>

    if (context->interface && context->interface->error) {
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000426:	2b00      	cmp	r3, #0
 8000428:	d00c      	beq.n	8000444 <SCPI_ErrorEmit+0x38>
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d007      	beq.n	8000444 <SCPI_ErrorEmit+0x38>
        context->interface->error(context, err);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	4611      	mov	r1, r2
 8000442:	4798      	blx	r3
    }
}
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop

0800044c <SCPI_ErrorClear>:

/**
 * Clear error queue
 * @param context - scpi context
 */
void SCPI_ErrorClear(scpi_t * context) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
    scpi_error_t error;
    while (fifo_remove(&context->error_queue, &error)) {
        SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
    }
#endif
    fifo_clear(&context->error_queue);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	333c      	adds	r3, #60	; 0x3c
 8000458:	4618      	mov	r0, r3
 800045a:	f000 f9a9 	bl	80007b0 <fifo_clear>

    SCPI_ErrorEmitEmpty(context);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffaa 	bl	80003b8 <SCPI_ErrorEmitEmpty>
}
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop

0800046c <SCPI_ErrorPop>:
 * Pop error from queue
 * @param context - scpi context
 * @param error
 * @return
 */
scpi_bool_t SCPI_ErrorPop(scpi_t * context, scpi_error_t * error) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
    if (!error || !context) return FALSE;
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d002      	beq.n	8000482 <SCPI_ErrorPop+0x16>
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d101      	bne.n	8000486 <SCPI_ErrorPop+0x1a>
 8000482:	2300      	movs	r3, #0
 8000484:	e00c      	b.n	80004a0 <SCPI_ErrorPop+0x34>
    SCPI_ERROR_SETVAL(error, 0, NULL);
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	2200      	movs	r2, #0
 800048a:	801a      	strh	r2, [r3, #0]
    fifo_remove(&context->error_queue, error);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	333c      	adds	r3, #60	; 0x3c
 8000490:	4618      	mov	r0, r3
 8000492:	6839      	ldr	r1, [r7, #0]
 8000494:	f000 f9fe 	bl	8000894 <fifo_remove>

    SCPI_ErrorEmitEmpty(context);
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f7ff ff8d 	bl	80003b8 <SCPI_ErrorEmitEmpty>

    return TRUE;
 800049e:	2301      	movs	r3, #1
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <SCPI_ErrorCount>:
/**
 * Return number of errors/events in the queue
 * @param context
 * @return
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
    int16_t result = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	81fb      	strh	r3, [r7, #14]

    fifo_count(&context->error_queue, &result);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80004ba:	f107 030e 	add.w	r3, r7, #14
 80004be:	4610      	mov	r0, r2
 80004c0:	4619      	mov	r1, r3
 80004c2:	f000 fa57 	bl	8000974 <fifo_count>

    return result;
 80004c6:	89fb      	ldrh	r3, [r7, #14]
 80004c8:	b21b      	sxth	r3, r3
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop

080004d4 <SCPI_ErrorAddInternal>:

static scpi_bool_t SCPI_ErrorAddInternal(scpi_t * context, int16_t err, char * info, size_t info_len) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	607a      	str	r2, [r7, #4]
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	460b      	mov	r3, r1
 80004e2:	817b      	strh	r3, [r7, #10]
    scpi_error_t error_value;
    /* SCPIDEFINE_strndup is sometimes a dumy that does not reference it's arguments. 
       Since info_len is not referenced elsewhere caoing to void prevents unusd argument warnings */
    (void) info_len;
    char * info_ptr = NULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
    if (info) {
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SCPI_ErrorAddInternal+0x1e>
        info_ptr = SCPIDEFINE_strndup(&context->error_info_heap, info, info_len);
 80004ee:	2300      	movs	r3, #0
 80004f0:	617b      	str	r3, [r7, #20]
    }
    SCPI_ERROR_SETVAL(&error_value, err, info_ptr);
 80004f2:	897b      	ldrh	r3, [r7, #10]
 80004f4:	823b      	strh	r3, [r7, #16]
    if (!fifo_add(&context->error_queue, &error_value)) {
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	4610      	mov	r0, r2
 8000502:	4619      	mov	r1, r3
 8000504:	f000 f98e 	bl	8000824 <fifo_add>
 8000508:	4603      	mov	r3, r0
 800050a:	f083 0301 	eor.w	r3, r3, #1
 800050e:	b2db      	uxtb	r3, r3
 8000510:	2b00      	cmp	r3, #0
 8000512:	d016      	beq.n	8000542 <SCPI_ErrorAddInternal+0x6e>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        fifo_remove_last(&context->error_queue, &error_value);
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	4610      	mov	r0, r2
 8000520:	4619      	mov	r1, r3
 8000522:	f000 f9ed 	bl	8000900 <fifo_remove_last>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
 8000526:	f64f 63a2 	movw	r3, #65186	; 0xfea2
 800052a:	823b      	strh	r3, [r7, #16]
        fifo_add(&context->error_queue, &error_value);
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	4610      	mov	r0, r2
 8000538:	4619      	mov	r1, r3
 800053a:	f000 f973 	bl	8000824 <fifo_add>
        return FALSE;
 800053e:	2300      	movs	r3, #0
 8000540:	e000      	b.n	8000544 <SCPI_ErrorAddInternal+0x70>
    }
    return TRUE;
 8000542:	2301      	movs	r3, #1
}
 8000544:	4618      	mov	r0, r3
 8000546:	3718      	adds	r7, #24
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <SCPI_ErrorPushEx>:
 * @param context
 * @param err - error number
 * @param info - additional text information or NULL for no text
 * @param info_len - length of text or 0 for automatic length
 */
void SCPI_ErrorPushEx(scpi_t * context, int16_t err, char * info, size_t info_len) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	607a      	str	r2, [r7, #4]
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	460b      	mov	r3, r1
 800055a:	817b      	strh	r3, [r7, #10]
    int i;
    /* automatic calculation of length */
    if (info && info_len == 0) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d007      	beq.n	8000572 <SCPI_ErrorPushEx+0x26>
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d104      	bne.n	8000572 <SCPI_ErrorPushEx+0x26>
        info_len = SCPIDEFINE_strnlen(info, SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH);
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	21ff      	movs	r1, #255	; 0xff
 800056c:	f003 faac 	bl	8003ac8 <BSD_strnlen>
 8000570:	6038      	str	r0, [r7, #0]
    }
    scpi_bool_t queue_overflow = !SCPI_ErrorAddInternal(context, err, info, info_len);
 8000572:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000576:	68f8      	ldr	r0, [r7, #12]
 8000578:	4619      	mov	r1, r3
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	f7ff ffa9 	bl	80004d4 <SCPI_ErrorAddInternal>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	bf14      	ite	ne
 8000588:	2301      	movne	r3, #1
 800058a:	2300      	moveq	r3, #0
 800058c:	b2db      	uxtb	r3, r3
 800058e:	f083 0301 	eor.w	r3, r3, #1
 8000592:	b2db      	uxtb	r3, r3
 8000594:	74fb      	strb	r3, [r7, #19]
 8000596:	7cfb      	ldrb	r3, [r7, #19]
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	74fb      	strb	r3, [r7, #19]

    for (i = 0; i < ERROR_DEFS_N; i++) {
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
 80005a2:	e029      	b.n	80005f8 <SCPI_ErrorPushEx+0xac>
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
 80005a4:	4921      	ldr	r1, [pc, #132]	; (800062c <SCPI_ErrorPushEx+0xe0>)
 80005a6:	697a      	ldr	r2, [r7, #20]
 80005a8:	4613      	mov	r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	4413      	add	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	440b      	add	r3, r1
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	429a      	cmp	r2, r3
 80005bc:	dc19      	bgt.n	80005f2 <SCPI_ErrorPushEx+0xa6>
 80005be:	491b      	ldr	r1, [pc, #108]	; (800062c <SCPI_ErrorPushEx+0xe0>)
 80005c0:	697a      	ldr	r2, [r7, #20]
 80005c2:	4613      	mov	r3, r2
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	4413      	add	r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	440b      	add	r3, r1
 80005cc:	885b      	ldrh	r3, [r3, #2]
 80005ce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80005d2:	b21b      	sxth	r3, r3
 80005d4:	429a      	cmp	r2, r3
 80005d6:	db0c      	blt.n	80005f2 <SCPI_ErrorPushEx+0xa6>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].esrBit);
 80005d8:	4914      	ldr	r1, [pc, #80]	; (800062c <SCPI_ErrorPushEx+0xe0>)
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	4613      	mov	r3, r2
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	4413      	add	r3, r2
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	440b      	add	r3, r1
 80005e6:	889b      	ldrh	r3, [r3, #4]
 80005e8:	68f8      	ldr	r0, [r7, #12]
 80005ea:	2102      	movs	r1, #2
 80005ec:	461a      	mov	r2, r3
 80005ee:	f000 fb21 	bl	8000c34 <SCPI_RegSetBits>
    if (info && info_len == 0) {
        info_len = SCPIDEFINE_strnlen(info, SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH);
    }
    scpi_bool_t queue_overflow = !SCPI_ErrorAddInternal(context, err, info, info_len);

    for (i = 0; i < ERROR_DEFS_N; i++) {
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	2b08      	cmp	r3, #8
 80005fc:	ddd2      	ble.n	80005a4 <SCPI_ErrorPushEx+0x58>
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].esrBit);
        }
    }

    SCPI_ErrorEmit(context, err);
 80005fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	4619      	mov	r1, r3
 8000606:	f7ff ff01 	bl	800040c <SCPI_ErrorEmit>
    if (queue_overflow) {
 800060a:	7cfb      	ldrb	r3, [r7, #19]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d003      	beq.n	8000618 <SCPI_ErrorPushEx+0xcc>
        SCPI_ErrorEmit(context, SCPI_ERROR_QUEUE_OVERFLOW);
 8000610:	68f8      	ldr	r0, [r7, #12]
 8000612:	4907      	ldr	r1, [pc, #28]	; (8000630 <SCPI_ErrorPushEx+0xe4>)
 8000614:	f7ff fefa 	bl	800040c <SCPI_ErrorEmit>
    }

    if (context) {
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d003      	beq.n	8000626 <SCPI_ErrorPushEx+0xda>
        context->cmd_error = TRUE;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2201      	movs	r2, #1
 8000622:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
}
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	08013e0c 	.word	0x08013e0c
 8000630:	fffffea2 	.word	0xfffffea2

08000634 <SCPI_ErrorPush>:
/**
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	807b      	strh	r3, [r7, #2]
    SCPI_ErrorPushEx(context, err, NULL, 0);
 8000640:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	4619      	mov	r1, r3
 8000648:	2200      	movs	r2, #0
 800064a:	2300      	movs	r3, #0
 800064c:	f7ff ff7e 	bl	800054c <SCPI_ErrorPushEx>
    return;
 8000650:	bf00      	nop
}
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <SCPI_ErrorTranslate>:
/**
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
    switch (err) {
 8000662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000666:	f113 0f8a 	cmn.w	r3, #138	; 0x8a
 800066a:	d04c      	beq.n	8000706 <SCPI_ErrorTranslate+0xae>
 800066c:	f113 0f8a 	cmn.w	r3, #138	; 0x8a
 8000670:	dc1a      	bgt.n	80006a8 <SCPI_ErrorTranslate+0x50>
 8000672:	f113 0fe0 	cmn.w	r3, #224	; 0xe0
 8000676:	d04e      	beq.n	8000716 <SCPI_ErrorTranslate+0xbe>
 8000678:	f113 0fe0 	cmn.w	r3, #224	; 0xe0
 800067c:	dc0a      	bgt.n	8000694 <SCPI_ErrorTranslate+0x3c>
 800067e:	f513 7faf 	cmn.w	r3, #350	; 0x15e
 8000682:	d04c      	beq.n	800071e <SCPI_ErrorTranslate+0xc6>
 8000684:	f513 7f9b 	cmn.w	r3, #310	; 0x136
 8000688:	d047      	beq.n	800071a <SCPI_ErrorTranslate+0xc2>
 800068a:	f46f 72b5 	mvn.w	r2, #362	; 0x16a
 800068e:	4293      	cmp	r3, r2
 8000690:	d047      	beq.n	8000722 <SCPI_ErrorTranslate+0xca>
 8000692:	e048      	b.n	8000726 <SCPI_ErrorTranslate+0xce>
 8000694:	f113 0faa 	cmn.w	r3, #170	; 0xaa
 8000698:	d039      	beq.n	800070e <SCPI_ErrorTranslate+0xb6>
 800069a:	f113 0f97 	cmn.w	r3, #151	; 0x97
 800069e:	d034      	beq.n	800070a <SCPI_ErrorTranslate+0xb2>
 80006a0:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80006a4:	d035      	beq.n	8000712 <SCPI_ErrorTranslate+0xba>
 80006a6:	e03e      	b.n	8000726 <SCPI_ErrorTranslate+0xce>
 80006a8:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 80006ac:	d023      	beq.n	80006f6 <SCPI_ErrorTranslate+0x9e>
 80006ae:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 80006b2:	dc09      	bgt.n	80006c8 <SCPI_ErrorTranslate+0x70>
 80006b4:	f113 0f71 	cmn.w	r3, #113	; 0x71
 80006b8:	d021      	beq.n	80006fe <SCPI_ErrorTranslate+0xa6>
 80006ba:	f113 0f6d 	cmn.w	r3, #109	; 0x6d
 80006be:	d01c      	beq.n	80006fa <SCPI_ErrorTranslate+0xa2>
 80006c0:	f113 0f83 	cmn.w	r3, #131	; 0x83
 80006c4:	d01d      	beq.n	8000702 <SCPI_ErrorTranslate+0xaa>
 80006c6:	e02e      	b.n	8000726 <SCPI_ErrorTranslate+0xce>
 80006c8:	f113 0f67 	cmn.w	r3, #103	; 0x67
 80006cc:	d00f      	beq.n	80006ee <SCPI_ErrorTranslate+0x96>
 80006ce:	f113 0f67 	cmn.w	r3, #103	; 0x67
 80006d2:	dc03      	bgt.n	80006dc <SCPI_ErrorTranslate+0x84>
 80006d4:	f113 0f68 	cmn.w	r3, #104	; 0x68
 80006d8:	d00b      	beq.n	80006f2 <SCPI_ErrorTranslate+0x9a>
 80006da:	e024      	b.n	8000726 <SCPI_ErrorTranslate+0xce>
 80006dc:	f113 0f65 	cmn.w	r3, #101	; 0x65
 80006e0:	d003      	beq.n	80006ea <SCPI_ErrorTranslate+0x92>
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d11f      	bne.n	8000726 <SCPI_ErrorTranslate+0xce>
#if USE_FULL_ERROR_LIST
#define XE X
#else
#define XE(def, val, str)
#endif
        LIST_OF_ERRORS
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <SCPI_ErrorTranslate+0xdc>)
 80006e8:	e01e      	b.n	8000728 <SCPI_ErrorTranslate+0xd0>
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <SCPI_ErrorTranslate+0xe0>)
 80006ec:	e01c      	b.n	8000728 <SCPI_ErrorTranslate+0xd0>
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <SCPI_ErrorTranslate+0xe4>)
 80006f0:	e01a      	b.n	8000728 <SCPI_ErrorTranslate+0xd0>
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <SCPI_ErrorTranslate+0xe8>)
 80006f4:	e018      	b.n	8000728 <SCPI_ErrorTranslate+0xd0>
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <SCPI_ErrorTranslate+0xec>)
 80006f8:	e016      	b.n	8000728 <SCPI_ErrorTranslate+0xd0>
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <SCPI_ErrorTranslate+0xf0>)
 80006fc:	e014      	b.n	8000728 <SCPI_ErrorTranslate+0xd0>
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <SCPI_ErrorTranslate+0xf4>)
 8000700:	e012      	b.n	8000728 <SCPI_ErrorTranslate+0xd0>
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <SCPI_ErrorTranslate+0xf8>)
 8000704:	e010      	b.n	8000728 <SCPI_ErrorTranslate+0xd0>
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <SCPI_ErrorTranslate+0xfc>)
 8000708:	e00e      	b.n	8000728 <SCPI_ErrorTranslate+0xd0>
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <SCPI_ErrorTranslate+0x100>)
 800070c:	e00c      	b.n	8000728 <SCPI_ErrorTranslate+0xd0>
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <SCPI_ErrorTranslate+0x104>)
 8000710:	e00a      	b.n	8000728 <SCPI_ErrorTranslate+0xd0>
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <SCPI_ErrorTranslate+0x108>)
 8000714:	e008      	b.n	8000728 <SCPI_ErrorTranslate+0xd0>
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <SCPI_ErrorTranslate+0x10c>)
 8000718:	e006      	b.n	8000728 <SCPI_ErrorTranslate+0xd0>
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <SCPI_ErrorTranslate+0x110>)
 800071c:	e004      	b.n	8000728 <SCPI_ErrorTranslate+0xd0>
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <SCPI_ErrorTranslate+0x114>)
 8000720:	e002      	b.n	8000728 <SCPI_ErrorTranslate+0xd0>
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <SCPI_ErrorTranslate+0x118>)
 8000724:	e000      	b.n	8000728 <SCPI_ErrorTranslate+0xd0>
#if USE_USER_ERROR_LIST
        LIST_OF_USER_ERRORS
#endif
#undef X
#undef XE
        default: return "Unknown error";
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <SCPI_ErrorTranslate+0x11c>)
    }
}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	08013e44 	.word	0x08013e44
 8000738:	08013e50 	.word	0x08013e50
 800073c:	08013e64 	.word	0x08013e64
 8000740:	08013e78 	.word	0x08013e78
 8000744:	08013e88 	.word	0x08013e88
 8000748:	08013ea0 	.word	0x08013ea0
 800074c:	08013eb4 	.word	0x08013eb4
 8000750:	08013ec8 	.word	0x08013ec8
 8000754:	08013ed8 	.word	0x08013ed8
 8000758:	08013eec 	.word	0x08013eec
 800075c:	08013f00 	.word	0x08013f00
 8000760:	08013f14 	.word	0x08013f14
 8000764:	08013f24 	.word	0x08013f24
 8000768:	08013f3c 	.word	0x08013f3c
 800076c:	08013f4c 	.word	0x08013f4c
 8000770:	08013f5c 	.word	0x08013f5c
 8000774:	08013f74 	.word	0x08013f74

08000778 <fifo_init>:

/**
 * Initialize fifo
 * @param fifo
 */
void fifo_init(scpi_fifo_t * fifo, scpi_error_t * data, int16_t size) {
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	4613      	mov	r3, r2
 8000784:	80fb      	strh	r3, [r7, #6]
    fifo->wr = 0;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	2200      	movs	r2, #0
 800078a:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2200      	movs	r2, #0
 8000790:	805a      	strh	r2, [r3, #2]
    fifo->count = 0;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2200      	movs	r2, #0
 8000796:	809a      	strh	r2, [r3, #4]
    fifo->data = data;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	68ba      	ldr	r2, [r7, #8]
 800079c:	609a      	str	r2, [r3, #8]
    fifo->size = size;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	88fa      	ldrh	r2, [r7, #6]
 80007a2:	80da      	strh	r2, [r3, #6]
}
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <fifo_clear>:

/**
 * Empty fifo
 * @param fifo
 */
void fifo_clear(scpi_fifo_t * fifo) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
    fifo->wr = 0;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2200      	movs	r2, #0
 80007c2:	805a      	strh	r2, [r3, #2]
    fifo->count = 0;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2200      	movs	r2, #0
 80007c8:	809a      	strh	r2, [r3, #4]
}
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <fifo_is_empty>:
/**
 * Test if fifo is empty
 * @param fifo
 * @return
 */
scpi_bool_t fifo_is_empty(scpi_fifo_t * fifo) {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    return fifo->count == 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	889b      	ldrh	r3, [r3, #4]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bf0c      	ite	eq
 80007e6:	2301      	moveq	r3, #1
 80007e8:	2300      	movne	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <fifo_is_full>:
/**
 * Test if fifo is full
 * @param fifo
 * @return
 */
scpi_bool_t fifo_is_full(scpi_fifo_t * fifo) {
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
    return fifo->count == fifo->size;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	889a      	ldrh	r2, [r3, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	88db      	ldrh	r3, [r3, #6]
 8000808:	b212      	sxth	r2, r2
 800080a:	b21b      	sxth	r3, r3
 800080c:	429a      	cmp	r2, r3
 800080e:	bf0c      	ite	eq
 8000810:	2301      	moveq	r3, #1
 8000812:	2300      	movne	r3, #0
 8000814:	b2db      	uxtb	r3, r3
}
 8000816:	4618      	mov	r0, r3
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop

08000824 <fifo_add>:
 * @param fifo
 * @param err
 * @param info
 * @return
 */
scpi_bool_t fifo_add(scpi_fifo_t * fifo, const scpi_error_t * value) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
    /* FIFO full? */
    if (fifo_is_full(fifo)) {
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff ffe2 	bl	80007f8 <fifo_is_full>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <fifo_add+0x1a>
        return FALSE;
 800083a:	2300      	movs	r3, #0
 800083c:	e026      	b.n	800088c <fifo_add+0x68>
    }
    if (!value) {
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <fifo_add+0x24>
        return FALSE;
 8000844:	2300      	movs	r3, #0
 8000846:	e021      	b.n	800088c <fifo_add+0x68>
    }

    fifo->data[fifo->wr] = *value;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	b21b      	sxth	r3, r3
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4413      	add	r3, r2
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	8812      	ldrh	r2, [r2, #0]
 800085a:	801a      	strh	r2, [r3, #0]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	b21b      	sxth	r3, r3
 8000862:	3301      	adds	r3, #1
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	88d2      	ldrh	r2, [r2, #6]
 8000868:	b212      	sxth	r2, r2
 800086a:	fb93 f1f2 	sdiv	r1, r3, r2
 800086e:	fb02 f201 	mul.w	r2, r2, r1
 8000872:	1a9b      	subs	r3, r3, r2
 8000874:	b29a      	uxth	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	801a      	strh	r2, [r3, #0]
    fifo->count += 1;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	889b      	ldrh	r3, [r3, #4]
 800087e:	b29b      	uxth	r3, r3
 8000880:	3301      	adds	r3, #1
 8000882:	b29b      	uxth	r3, r3
 8000884:	b29a      	uxth	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	809a      	strh	r2, [r3, #4]
    return TRUE;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <fifo_remove>:
 * Remove element form fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove(scpi_fifo_t * fifo, scpi_error_t * value) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff ff98 	bl	80007d4 <fifo_is_empty>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <fifo_remove+0x1a>
        return FALSE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e024      	b.n	80008f8 <fifo_remove+0x64>
    }

    if (value) {
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d009      	beq.n	80008c8 <fifo_remove+0x34>
        *value = fifo->data[fifo->rd];
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	689a      	ldr	r2, [r3, #8]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	885b      	ldrh	r3, [r3, #2]
 80008bc:	b21b      	sxth	r3, r3
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	441a      	add	r2, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	8812      	ldrh	r2, [r2, #0]
 80008c6:	801a      	strh	r2, [r3, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	885b      	ldrh	r3, [r3, #2]
 80008cc:	b21b      	sxth	r3, r3
 80008ce:	3301      	adds	r3, #1
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	88d2      	ldrh	r2, [r2, #6]
 80008d4:	b212      	sxth	r2, r2
 80008d6:	fb93 f1f2 	sdiv	r1, r3, r2
 80008da:	fb02 f201 	mul.w	r2, r2, r1
 80008de:	1a9b      	subs	r3, r3, r2
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	805a      	strh	r2, [r3, #2]
    fifo->count -= 1;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	889b      	ldrh	r3, [r3, #4]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	3b01      	subs	r3, #1
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	809a      	strh	r2, [r3, #4]

    return TRUE;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <fifo_remove_last>:
 * Remove last element from fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove_last(scpi_fifo_t * fifo, scpi_error_t * value) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff62 	bl	80007d4 <fifo_is_empty>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <fifo_remove_last+0x1a>
        return FALSE;
 8000916:	2300      	movs	r3, #0
 8000918:	e028      	b.n	800096c <fifo_remove_last+0x6c>
    }

    fifo->wr = (fifo->wr + fifo->size - 1) % (fifo->size);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	b21a      	sxth	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	88db      	ldrh	r3, [r3, #6]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4413      	add	r3, r2
 8000928:	3b01      	subs	r3, #1
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	88d2      	ldrh	r2, [r2, #6]
 800092e:	b212      	sxth	r2, r2
 8000930:	fb93 f1f2 	sdiv	r1, r3, r2
 8000934:	fb02 f201 	mul.w	r2, r2, r1
 8000938:	1a9b      	subs	r3, r3, r2
 800093a:	b29a      	uxth	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	801a      	strh	r2, [r3, #0]

    if (value) {
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d009      	beq.n	800095a <fifo_remove_last+0x5a>
        *value = fifo->data[fifo->wr];
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	b21b      	sxth	r3, r3
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	441a      	add	r2, r3
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	8812      	ldrh	r2, [r2, #0]
 8000958:	801a      	strh	r2, [r3, #0]
    }
    fifo->count -= 1;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	889b      	ldrh	r3, [r3, #4]
 800095e:	b29b      	uxth	r3, r3
 8000960:	3b01      	subs	r3, #1
 8000962:	b29b      	uxth	r3, r3
 8000964:	b29a      	uxth	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	809a      	strh	r2, [r3, #4]

    return TRUE;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <fifo_count>:
 * Retrive number of elements in fifo
 * @param fifo
 * @param value
 * @return
 */
scpi_bool_t fifo_count(scpi_fifo_t * fifo, int16_t * value) {
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
    *value = fifo->count;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	889a      	ldrh	r2, [r3, #4]
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	801a      	strh	r2, [r3, #0]
    return TRUE;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SCPI_RegGet>:
/**
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	70fb      	strb	r3, [r7, #3]
    if ((name < SCPI_REG_COUNT) && context) {
 80009a0:	78fb      	ldrb	r3, [r7, #3]
 80009a2:	2b09      	cmp	r3, #9
 80009a4:	d808      	bhi.n	80009b8 <SCPI_RegGet+0x24>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d005      	beq.n	80009b8 <SCPI_RegGet+0x24>
        return context->registers[name];
 80009ac:	78fa      	ldrb	r2, [r7, #3]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3224      	adds	r2, #36	; 0x24
 80009b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80009b6:	e000      	b.n	80009ba <SCPI_RegGet+0x26>
    } else {
        return 0;
 80009b8:	2300      	movs	r3, #0
    }
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <writeControl>:
 * Wrapper function to control interface from context
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	70fb      	strb	r3, [r7, #3]
 80009d4:	4613      	mov	r3, r2
 80009d6:	803b      	strh	r3, [r7, #0]
    if (context && context->interface && context->interface->control) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d011      	beq.n	8000a02 <writeControl+0x3a>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d00d      	beq.n	8000a02 <writeControl+0x3a>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d008      	beq.n	8000a02 <writeControl+0x3a>
        return context->interface->control(context, ctrl, val);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	78f9      	ldrb	r1, [r7, #3]
 80009f8:	883a      	ldrh	r2, [r7, #0]
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	4798      	blx	r3
 80009fe:	4603      	mov	r3, r0
 8000a00:	e000      	b.n	8000a04 <writeControl+0x3c>
    } else {
        return 0;
 8000a02:	2300      	movs	r3, #0
    }
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b08b      	sub	sp, #44	; 0x2c
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	70fb      	strb	r3, [r7, #3]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	803b      	strh	r3, [r7, #0]
    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
 8000a1c:	78fb      	ldrb	r3, [r7, #3]
 8000a1e:	2b09      	cmp	r3, #9
 8000a20:	d802      	bhi.n	8000a28 <SCPI_RegSet+0x1c>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d100      	bne.n	8000a2a <SCPI_RegSet+0x1e>
        return;
 8000a28:	e0fd      	b.n	8000c26 <SCPI_RegSet+0x21a>
    }

    scpi_reg_group_info_t register_group;

    do {
        scpi_reg_class_t register_type = scpi_reg_details[name].type;
 8000a2a:	78fb      	ldrb	r3, [r7, #3]
 8000a2c:	4a7f      	ldr	r2, [pc, #508]	; (8000c2c <SCPI_RegSet+0x220>)
 8000a2e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000a32:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        register_group = scpi_reg_group_details[scpi_reg_details[name].group];
 8000a36:	78fb      	ldrb	r3, [r7, #3]
 8000a38:	4a7c      	ldr	r2, [pc, #496]	; (8000c2c <SCPI_RegSet+0x220>)
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	785b      	ldrb	r3, [r3, #1]
 8000a40:	497b      	ldr	r1, [pc, #492]	; (8000c30 <SCPI_RegSet+0x224>)
 8000a42:	f107 0208 	add.w	r2, r7, #8
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	440b      	add	r3, r1
 8000a4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a4e:	e882 0003 	stmia.w	r2, {r0, r1}

        scpi_reg_val_t ptrans;

        /* store old register value */
        scpi_reg_val_t old_val = context->registers[name];
 8000a52:	78fa      	ldrb	r2, [r7, #3]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3224      	adds	r2, #36	; 0x24
 8000a58:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000a5c:	83fb      	strh	r3, [r7, #30]

        if (old_val == val) {
 8000a5e:	8bfa      	ldrh	r2, [r7, #30]
 8000a60:	883b      	ldrh	r3, [r7, #0]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d100      	bne.n	8000a68 <SCPI_RegSet+0x5c>
            return;
 8000a66:	e0de      	b.n	8000c26 <SCPI_RegSet+0x21a>
        } else {
            context->registers[name] = val;
 8000a68:	78fa      	ldrb	r2, [r7, #3]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3224      	adds	r2, #36	; 0x24
 8000a6e:	8839      	ldrh	r1, [r7, #0]
 8000a70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }

        switch (register_type) {
 8000a74:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000a78:	2b06      	cmp	r3, #6
 8000a7a:	f200 80ce 	bhi.w	8000c1a <SCPI_RegSet+0x20e>
 8000a7e:	a201      	add	r2, pc, #4	; (adr r2, 8000a84 <SCPI_RegSet+0x78>)
 8000a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a84:	08000aa1 	.word	0x08000aa1
 8000a88:	08000aa1 	.word	0x08000aa1
 8000a8c:	08000b17 	.word	0x08000b17
 8000a90:	08000c25 	.word	0x08000c25
 8000a94:	08000b79 	.word	0x08000b79
 8000a98:	08000c25 	.word	0x08000c25
 8000a9c:	08000c25 	.word	0x08000c25
            case SCPI_REG_CLASS_STB:
            case SCPI_REG_CLASS_SRE:
            {
                scpi_reg_val_t stb = context->registers[SCPI_REG_STB] & ~STB_SRQ;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000aaa:	83bb      	strh	r3, [r7, #28]
                scpi_reg_val_t sre = context->registers[SCPI_REG_SRE] & ~STB_SRQ;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8000ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ab6:	837b      	strh	r3, [r7, #26]

                if (stb & sre) {
 8000ab8:	8bba      	ldrh	r2, [r7, #28]
 8000aba:	8b7b      	ldrh	r3, [r7, #26]
 8000abc:	4013      	ands	r3, r2
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d01d      	beq.n	8000b00 <SCPI_RegSet+0xf4>
                    ptrans = ((old_val ^ val) & val);
 8000ac4:	8bfb      	ldrh	r3, [r7, #30]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	883b      	ldrh	r3, [r7, #0]
 8000acc:	4013      	ands	r3, r2
 8000ace:	833b      	strh	r3, [r7, #24]
                    context->registers[SCPI_REG_STB] |= STB_SRQ;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                    if (ptrans & val) {
 8000ae2:	8b3a      	ldrh	r2, [r7, #24]
 8000ae4:	883b      	ldrh	r3, [r7, #0]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d012      	beq.n	8000b14 <SCPI_RegSet+0x108>
                        writeControl(context, SCPI_CTRL_SRQ, context->registers[SCPI_REG_STB]);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	2101      	movs	r1, #1
 8000af8:	461a      	mov	r2, r3
 8000afa:	f7ff ff65 	bl	80009c8 <writeControl>
                    }
                } else {
                    context->registers[SCPI_REG_STB] &= ~STB_SRQ;
                }
                break;
 8000afe:	e08c      	b.n	8000c1a <SCPI_RegSet+0x20e>
                    context->registers[SCPI_REG_STB] |= STB_SRQ;
                    if (ptrans & val) {
                        writeControl(context, SCPI_CTRL_SRQ, context->registers[SCPI_REG_STB]);
                    }
                } else {
                    context->registers[SCPI_REG_STB] &= ~STB_SRQ;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                }
                break;
 8000b12:	e082      	b.n	8000c1a <SCPI_RegSet+0x20e>
 8000b14:	e081      	b.n	8000c1a <SCPI_RegSet+0x20e>
            }
            case SCPI_REG_CLASS_EVEN:
            {
                scpi_reg_val_t enable;
                if(register_group.enable != SCPI_REG_NONE) {
 8000b16:	7a7b      	ldrb	r3, [r7, #9]
 8000b18:	2b0b      	cmp	r3, #11
 8000b1a:	d007      	beq.n	8000b2c <SCPI_RegSet+0x120>
                    enable = SCPI_RegGet(context, register_group.enable);
 8000b1c:	7a7b      	ldrb	r3, [r7, #9]
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f7ff ff37 	bl	8000994 <SCPI_RegGet>
 8000b26:	4603      	mov	r3, r0
 8000b28:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000b2a:	e002      	b.n	8000b32 <SCPI_RegSet+0x126>
                } else {
                    enable = 0xFFFF;
 8000b2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b30:	84fb      	strh	r3, [r7, #38]	; 0x26
                }

                scpi_bool_t summary = val & enable;
 8000b32:	883a      	ldrh	r2, [r7, #0]
 8000b34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b36:	4013      	ands	r3, r2
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	bf14      	ite	ne
 8000b3e:	2301      	movne	r3, #1
 8000b40:	2300      	moveq	r3, #0
 8000b42:	75fb      	strb	r3, [r7, #23]

                name = register_group.parent_reg;
 8000b44:	7b7b      	ldrb	r3, [r7, #13]
 8000b46:	70fb      	strb	r3, [r7, #3]
                val = SCPI_RegGet(context, register_group.parent_reg);
 8000b48:	7b7b      	ldrb	r3, [r7, #13]
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f7ff ff21 	bl	8000994 <SCPI_RegGet>
 8000b52:	4603      	mov	r3, r0
 8000b54:	803b      	strh	r3, [r7, #0]
                if (summary) {
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d004      	beq.n	8000b66 <SCPI_RegSet+0x15a>
                    val |= register_group.parent_bit;
 8000b5c:	89fa      	ldrh	r2, [r7, #14]
 8000b5e:	883b      	ldrh	r3, [r7, #0]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	803b      	strh	r3, [r7, #0]
                } else {
                    val &= ~(register_group.parent_bit);
                }
                break;
 8000b64:	e059      	b.n	8000c1a <SCPI_RegSet+0x20e>
                name = register_group.parent_reg;
                val = SCPI_RegGet(context, register_group.parent_reg);
                if (summary) {
                    val |= register_group.parent_bit;
                } else {
                    val &= ~(register_group.parent_bit);
 8000b66:	89fb      	ldrh	r3, [r7, #14]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	883b      	ldrh	r3, [r7, #0]
 8000b70:	4013      	ands	r3, r2
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	803b      	strh	r3, [r7, #0]
                }
                break;
 8000b76:	e050      	b.n	8000c1a <SCPI_RegSet+0x20e>
            }
            case SCPI_REG_CLASS_COND:
            {
                name = register_group.event;
 8000b78:	7a3b      	ldrb	r3, [r7, #8]
 8000b7a:	70fb      	strb	r3, [r7, #3]

                if(register_group.ptfilt == SCPI_REG_NONE && register_group.ntfilt == SCPI_REG_NONE) {
 8000b7c:	7afb      	ldrb	r3, [r7, #11]
 8000b7e:	2b0b      	cmp	r3, #11
 8000b80:	d111      	bne.n	8000ba6 <SCPI_RegSet+0x19a>
 8000b82:	7b3b      	ldrb	r3, [r7, #12]
 8000b84:	2b0b      	cmp	r3, #11
 8000b86:	d10e      	bne.n	8000ba6 <SCPI_RegSet+0x19a>
                    val = ((old_val ^ val) & val) | SCPI_RegGet(context, register_group.event);
 8000b88:	8bfb      	ldrh	r3, [r7, #30]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	883b      	ldrh	r3, [r7, #0]
 8000b90:	4013      	ands	r3, r2
 8000b92:	b29c      	uxth	r4, r3
 8000b94:	7a3b      	ldrb	r3, [r7, #8]
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f7ff fefb 	bl	8000994 <SCPI_RegGet>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4323      	orrs	r3, r4
 8000ba2:	803b      	strh	r3, [r7, #0]
                    ptrans = transitions & val;
                    ntrans = transitions & ~ptrans;

                    val = ((ptrans & ptfilt) | (ntrans & ntfilt)) | SCPI_RegGet(context, register_group.event);
                }
                break;
 8000ba4:	e038      	b.n	8000c18 <SCPI_RegSet+0x20c>
                name = register_group.event;

                if(register_group.ptfilt == SCPI_REG_NONE && register_group.ntfilt == SCPI_REG_NONE) {
                    val = ((old_val ^ val) & val) | SCPI_RegGet(context, register_group.event);
                } else {
                    scpi_reg_val_t ptfilt = 0, ntfilt = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000baa:	2300      	movs	r3, #0
 8000bac:	847b      	strh	r3, [r7, #34]	; 0x22
                    scpi_reg_val_t transitions;
                    scpi_reg_val_t ntrans;

                    if(register_group.ptfilt != SCPI_REG_NONE) {
 8000bae:	7afb      	ldrb	r3, [r7, #11]
 8000bb0:	2b0b      	cmp	r3, #11
 8000bb2:	d006      	beq.n	8000bc2 <SCPI_RegSet+0x1b6>
                        ptfilt = SCPI_RegGet(context, register_group.ptfilt);
 8000bb4:	7afb      	ldrb	r3, [r7, #11]
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f7ff feeb 	bl	8000994 <SCPI_RegGet>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	84bb      	strh	r3, [r7, #36]	; 0x24
                    }

                    if(register_group.ntfilt != SCPI_REG_NONE) {
 8000bc2:	7b3b      	ldrb	r3, [r7, #12]
 8000bc4:	2b0b      	cmp	r3, #11
 8000bc6:	d006      	beq.n	8000bd6 <SCPI_RegSet+0x1ca>
                        ntfilt = SCPI_RegGet(context, register_group.ntfilt);
 8000bc8:	7b3b      	ldrb	r3, [r7, #12]
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f7ff fee1 	bl	8000994 <SCPI_RegGet>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	847b      	strh	r3, [r7, #34]	; 0x22
                    }

                    transitions = old_val ^ val;
 8000bd6:	8bfa      	ldrh	r2, [r7, #30]
 8000bd8:	883b      	ldrh	r3, [r7, #0]
 8000bda:	4053      	eors	r3, r2
 8000bdc:	82bb      	strh	r3, [r7, #20]
                    ptrans = transitions & val;
 8000bde:	8aba      	ldrh	r2, [r7, #20]
 8000be0:	883b      	ldrh	r3, [r7, #0]
 8000be2:	4013      	ands	r3, r2
 8000be4:	833b      	strh	r3, [r7, #24]
                    ntrans = transitions & ~ptrans;
 8000be6:	8b3b      	ldrh	r3, [r7, #24]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	8abb      	ldrh	r3, [r7, #20]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	827b      	strh	r3, [r7, #18]

                    val = ((ptrans & ptfilt) | (ntrans & ntfilt)) | SCPI_RegGet(context, register_group.event);
 8000bf4:	8b3a      	ldrh	r2, [r7, #24]
 8000bf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	8a79      	ldrh	r1, [r7, #18]
 8000bfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c00:	400b      	ands	r3, r1
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	4313      	orrs	r3, r2
 8000c06:	b29c      	uxth	r4, r3
 8000c08:	7a3b      	ldrb	r3, [r7, #8]
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f7ff fec1 	bl	8000994 <SCPI_RegGet>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4323      	orrs	r3, r4
 8000c16:	803b      	strh	r3, [r7, #0]
                }
                break;
 8000c18:	bf00      	nop
            case SCPI_REG_CLASS_ENAB:
            case SCPI_REG_CLASS_NTR:
            case SCPI_REG_CLASS_PTR:
                return;
        }
    } while(register_group.parent_reg != SCPI_REG_NONE);
 8000c1a:	7b7b      	ldrb	r3, [r7, #13]
 8000c1c:	2b0b      	cmp	r3, #11
 8000c1e:	f47f af04 	bne.w	8000a2a <SCPI_RegSet+0x1e>
 8000c22:	e000      	b.n	8000c26 <SCPI_RegSet+0x21a>
                break;
            }
            case SCPI_REG_CLASS_ENAB:
            case SCPI_REG_CLASS_NTR:
            case SCPI_REG_CLASS_PTR:
                return;
 8000c24:	bf00      	nop
        }
    } while(register_group.parent_reg != SCPI_REG_NONE);
}
 8000c26:	372c      	adds	r7, #44	; 0x2c
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	08013f84 	.word	0x08013f84
 8000c30:	08013f98 	.word	0x08013f98

08000c34 <SCPI_RegSetBits>:
/**
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	70fb      	strb	r3, [r7, #3]
 8000c40:	4613      	mov	r3, r2
 8000c42:	803b      	strh	r3, [r7, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 8000c44:	78fb      	ldrb	r3, [r7, #3]
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f7ff fea3 	bl	8000994 <SCPI_RegGet>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	883b      	ldrh	r3, [r7, #0]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	78fa      	ldrb	r2, [r7, #3]
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	461a      	mov	r2, r3
 8000c60:	f7ff fed4 	bl	8000a0c <SCPI_RegSet>
}
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop

08000c6c <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	70fb      	strb	r3, [r7, #3]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	803b      	strh	r3, [r7, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f7ff fe87 	bl	8000994 <SCPI_RegGet>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	883b      	ldrh	r3, [r7, #0]
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4013      	ands	r3, r2
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	78fa      	ldrb	r2, [r7, #3]
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	f7ff feb5 	bl	8000a0c <SCPI_RegSet>
}
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    SCPI_ErrorClear(context);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff fbcb 	bl	800044c <SCPI_ErrorClear>
    int i;
    for (i = 0; i < SCPI_REG_GROUP_COUNT; ++i) {
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	e010      	b.n	8000cde <SCPI_CoreCls+0x36>
        scpi_reg_name_t event_reg = scpi_reg_group_details[i].event;
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <SCPI_CoreCls+0x48>)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000cc4:	72fb      	strb	r3, [r7, #11]
        if (event_reg != SCPI_REG_STB) {
 8000cc6:	7afb      	ldrb	r3, [r7, #11]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d005      	beq.n	8000cd8 <SCPI_CoreCls+0x30>
            SCPI_RegSet(context, event_reg, 0);
 8000ccc:	7afb      	ldrb	r3, [r7, #11]
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fe9a 	bl	8000a0c <SCPI_RegSet>
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
    SCPI_ErrorClear(context);
    int i;
    for (i = 0; i < SCPI_REG_GROUP_COUNT; ++i) {
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	ddeb      	ble.n	8000cbc <SCPI_CoreCls+0x14>
        scpi_reg_name_t event_reg = scpi_reg_group_details[i].event;
        if (event_reg != SCPI_REG_STB) {
            SCPI_RegSet(context, event_reg, 0);
        }
    }
    return SCPI_RES_OK;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	b25b      	sxtb	r3, r3
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	08013f98 	.word	0x08013f98

08000cf4 <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
    int32_t new_ESE;
    if (SCPI_ParamInt32(context, &new_ESE, TRUE)) {
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	4619      	mov	r1, r3
 8000d04:	2201      	movs	r2, #1
 8000d06:	f002 f841 	bl	8002d8c <SCPI_ParamInt32>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d008      	beq.n	8000d22 <SCPI_CoreEse+0x2e>
        SCPI_RegSet(context, SCPI_REG_ESE, (scpi_reg_val_t) new_ESE);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	2103      	movs	r1, #3
 8000d18:	461a      	mov	r2, r3
 8000d1a:	f7ff fe77 	bl	8000a0c <SCPI_RegSet>
        return SCPI_RES_OK;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <SCPI_CoreEse+0x30>
    }
    return SCPI_RES_ERR;
 8000d22:	23ff      	movs	r3, #255	; 0xff
 8000d24:	b25b      	sxtb	r3, r3
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop

08000d30 <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESE));
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	2103      	movs	r1, #3
 8000d3c:	f7ff fe2a 	bl	8000994 <SCPI_RegGet>
 8000d40:	4603      	mov	r3, r0
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	4619      	mov	r1, r3
 8000d46:	f001 fd4b 	bl	80027e0 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	b25b      	sxtb	r3, r3
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop

08000d58 <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESR));
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	2102      	movs	r1, #2
 8000d64:	f7ff fe16 	bl	8000994 <SCPI_RegGet>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f001 fd37 	bl	80027e0 <SCPI_ResultInt32>
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	2102      	movs	r1, #2
 8000d76:	2200      	movs	r2, #0
 8000d78:	f7ff fe48 	bl	8000a0c <SCPI_RegSet>
    return SCPI_RES_OK;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	b25b      	sxtb	r3, r3
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <SCPI_CoreIdnQ>:
 * 
 * example: MANUFACTURE,MODEL,0,01-02-01
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreIdnQ(scpi_t * context) {
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < 4; i++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e025      	b.n	8000de2 <SCPI_CoreIdnQ+0x5a>
        if (context->idn[i]) {
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3320      	adds	r3, #32
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d015      	beq.n	8000dd2 <SCPI_CoreIdnQ+0x4a>
            SCPI_ResultMnemonic(context, context->idn[i]);
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3320      	adds	r3, #32
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	685c      	ldr	r4, [r3, #4]
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3320      	adds	r3, #32
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f00e fb9a 	bl	800f4f8 <strlen>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	4621      	mov	r1, r4
 8000dca:	461a      	mov	r2, r3
 8000dcc:	f001 fc7e 	bl	80026cc <SCPI_ResultCharacters>
 8000dd0:	e004      	b.n	8000ddc <SCPI_CoreIdnQ+0x54>
        } else {
            SCPI_ResultMnemonic(context, "0");
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <SCPI_CoreIdnQ+0x6c>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f001 fc78 	bl	80026cc <SCPI_ResultCharacters>
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreIdnQ(scpi_t * context) {
    int i;
    for (i = 0; i < 4; i++) {
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	3301      	adds	r3, #1
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	ddd6      	ble.n	8000d96 <SCPI_CoreIdnQ+0xe>
            SCPI_ResultMnemonic(context, context->idn[i]);
        } else {
            SCPI_ResultMnemonic(context, "0");
        }
    }
    return SCPI_RES_OK;
 8000de8:	2301      	movs	r3, #1
 8000dea:	b25b      	sxtb	r3, r3
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd90      	pop	{r4, r7, pc}
 8000df4:	08013fb8 	.word	0x08013fb8

08000df8 <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	2102      	movs	r1, #2
 8000e04:	2201      	movs	r2, #1
 8000e06:	f7ff ff15 	bl	8000c34 <SCPI_RegSetBits>
    return SCPI_RES_OK;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	b25b      	sxtb	r3, r3
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop

08000e18 <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    /* Operation is always completed */
    SCPI_ResultInt32(context, 1);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	2101      	movs	r1, #1
 8000e24:	f001 fcdc 	bl	80027e0 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	b25b      	sxtb	r3, r3
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <SCPI_CoreRst>:
/**
 * *RST
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreRst(scpi_t * context) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
    if (context && context->interface && context->interface->reset) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00f      	beq.n	8000e62 <SCPI_CoreRst+0x2e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d00b      	beq.n	8000e62 <SCPI_CoreRst+0x2e>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d006      	beq.n	8000e62 <SCPI_CoreRst+0x2e>
        return context->interface->reset(context);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	4798      	blx	r3
 8000e5e:	4603      	mov	r3, r0
 8000e60:	e000      	b.n	8000e64 <SCPI_CoreRst+0x30>
    }
    return SCPI_RES_OK;
 8000e62:	2301      	movs	r3, #1
 8000e64:	b25b      	sxtb	r3, r3
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop

08000e70 <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    int32_t new_SRE;
    if (SCPI_ParamInt32(context, &new_SRE, TRUE)) {
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	2201      	movs	r2, #1
 8000e82:	f001 ff83 	bl	8002d8c <SCPI_ParamInt32>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d008      	beq.n	8000e9e <SCPI_CoreSre+0x2e>
        SCPI_RegSet(context, SCPI_REG_SRE, (scpi_reg_val_t) new_SRE);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	2101      	movs	r1, #1
 8000e94:	461a      	mov	r2, r3
 8000e96:	f7ff fdb9 	bl	8000a0c <SCPI_RegSet>
        return SCPI_RES_OK;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <SCPI_CoreSre+0x30>
    }
    return SCPI_RES_ERR;
 8000e9e:	23ff      	movs	r3, #255	; 0xff
 8000ea0:	b25b      	sxtb	r3, r3
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop

08000eac <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_SRE));
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	f7ff fd6c 	bl	8000994 <SCPI_RegGet>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f001 fc8d 	bl	80027e0 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	b25b      	sxtb	r3, r3
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop

08000ed4 <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_STB));
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f7ff fd58 	bl	8000994 <SCPI_RegGet>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f001 fc79 	bl	80027e0 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	b25b      	sxtb	r3, r3
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop

08000efc <SCPI_CoreWai>:
/**
 * *WAI
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
 8000f04:	2301      	movs	r3, #1
 8000f06:	b25b      	sxtb	r3, r3
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <isws>:
/**
 * Is white space
 * @param c
 * @return 
 */
static int isws(int c) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    if ((c == ' ') || (c == '\t')) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b20      	cmp	r3, #32
 8000f20:	d002      	beq.n	8000f28 <isws+0x14>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b09      	cmp	r3, #9
 8000f26:	d101      	bne.n	8000f2c <isws+0x18>
        return 1;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <isws+0x1a>
    }
    return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <isbdigit>:
/**
 * Is binary digit
 * @param c
 * @return 
 */
static int isbdigit(int c) {
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
    if ((c == '0') || (c == '1')) {
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b30      	cmp	r3, #48	; 0x30
 8000f48:	d002      	beq.n	8000f50 <isbdigit+0x14>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b31      	cmp	r3, #49	; 0x31
 8000f4e:	d101      	bne.n	8000f54 <isbdigit+0x18>
        return 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <isbdigit+0x1a>
    }
    return 0;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <isqdigit>:
/**
 * Is hexadecimal digit
 * @param c
 * @return 
 */
static int isqdigit(int c) {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    if ((c == '0') || (c == '1') || (c == '2') || (c == '3') || (c == '4') || (c == '5') || (c == '6') || (c == '7')) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b30      	cmp	r3, #48	; 0x30
 8000f70:	d014      	beq.n	8000f9c <isqdigit+0x38>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b31      	cmp	r3, #49	; 0x31
 8000f76:	d011      	beq.n	8000f9c <isqdigit+0x38>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b32      	cmp	r3, #50	; 0x32
 8000f7c:	d00e      	beq.n	8000f9c <isqdigit+0x38>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b33      	cmp	r3, #51	; 0x33
 8000f82:	d00b      	beq.n	8000f9c <isqdigit+0x38>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b34      	cmp	r3, #52	; 0x34
 8000f88:	d008      	beq.n	8000f9c <isqdigit+0x38>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b35      	cmp	r3, #53	; 0x35
 8000f8e:	d005      	beq.n	8000f9c <isqdigit+0x38>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b36      	cmp	r3, #54	; 0x36
 8000f94:	d002      	beq.n	8000f9c <isqdigit+0x38>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b37      	cmp	r3, #55	; 0x37
 8000f9a:	d101      	bne.n	8000fa0 <isqdigit+0x3c>
        return 1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <isqdigit+0x3e>
    }
    return 0;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <iseos>:
/**
 * Is end of string
 * @param state
 * @return 
 */
static int iseos(lex_state_t * state) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
    if ((state->buffer + state->len) <= (state->pos)) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	6892      	ldr	r2, [r2, #8]
 8000fc0:	441a      	add	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d801      	bhi.n	8000fce <iseos+0x1e>
        return 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <iseos+0x20>
    } else {
        return 0;
 8000fce:	2300      	movs	r3, #0
    }
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <scpiLex_IsEos>:
/**
 * Private export of iseos
 * @param state
 * @return 
 */
int scpiLex_IsEos(lex_state_t * state) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    return iseos(state);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ffe3 	bl	8000fb0 <iseos>
 8000fea:	4603      	mov	r3, r0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <ischr>:
 * Test current character
 * @param state
 * @param chr
 * @return 
 */
static int ischr(lex_state_t * state, char chr) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]
    return (state->pos[0] == chr);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	78fa      	ldrb	r2, [r7, #3]
 8001008:	429a      	cmp	r2, r3
 800100a:	bf0c      	ite	eq
 800100c:	2301      	moveq	r3, #1
 800100e:	2300      	movne	r3, #0
 8001010:	b2db      	uxtb	r3, r3
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <isplusmn>:
/**
 * Is plus or minus
 * @param c
 * @return 
 */
static int isplusmn(int c) {
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    return c == '+' || c == '-';
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b2b      	cmp	r3, #43	; 0x2b
 800102c:	d002      	beq.n	8001034 <isplusmn+0x14>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b2d      	cmp	r3, #45	; 0x2d
 8001032:	d101      	bne.n	8001038 <isplusmn+0x18>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <isplusmn+0x1a>
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <isH>:
/**
 * Is letter H
 * @param c
 * @return 
 */
static int isH(int c) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    return c == 'h' || c == 'H';
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b68      	cmp	r3, #104	; 0x68
 8001054:	d002      	beq.n	800105c <isH+0x14>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b48      	cmp	r3, #72	; 0x48
 800105a:	d101      	bne.n	8001060 <isH+0x18>
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <isH+0x1a>
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <isB>:
/**
 * Is letter B
 * @param c
 * @return 
 */
static int isB(int c) {
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    return c == 'b' || c == 'B';
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b62      	cmp	r3, #98	; 0x62
 800107c:	d002      	beq.n	8001084 <isB+0x14>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b42      	cmp	r3, #66	; 0x42
 8001082:	d101      	bne.n	8001088 <isB+0x18>
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <isB+0x1a>
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <isQ>:
/**
 * Is letter Q
 * @param c
 * @return 
 */
static int isQ(int c) {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    return c == 'q' || c == 'Q';
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b71      	cmp	r3, #113	; 0x71
 80010a4:	d002      	beq.n	80010ac <isQ+0x14>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b51      	cmp	r3, #81	; 0x51
 80010aa:	d101      	bne.n	80010b0 <isQ+0x18>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <isQ+0x1a>
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <isE>:
/**
 * Is letter E
 * @param c
 * @return 
 */
static int isE(int c) {
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
    return c == 'e' || c == 'E';
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b65      	cmp	r3, #101	; 0x65
 80010cc:	d002      	beq.n	80010d4 <isE+0x14>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b45      	cmp	r3, #69	; 0x45
 80010d2:	d101      	bne.n	80010d8 <isE+0x18>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <isE+0x1a>
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <skipWs>:
/**
 * Skip all whitespaces
 * @param state
 * @return 
 */
static int skipWs(lex_state_t * state) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    int someSpace = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isws(state->pos[0])) {
 80010f4:	e007      	b.n	8001106 <skipWs+0x1e>
        state->pos++;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	605a      	str	r2, [r3, #4]
        someSpace++;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	3301      	adds	r3, #1
 8001104:	60fb      	str	r3, [r7, #12]
 * @param state
 * @return 
 */
static int skipWs(lex_state_t * state) {
    int someSpace = 0;
    while (!iseos(state) && isws(state->pos[0])) {
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff52 	bl	8000fb0 <iseos>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d108      	bne.n	8001124 <skipWs+0x3c>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fefb 	bl	8000f14 <isws>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e8      	bne.n	80010f6 <skipWs+0xe>
        state->pos++;
        someSpace++;
    }

    return someSpace;
 8001124:	68fb      	ldr	r3, [r7, #12]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop

08001130 <skipDigit>:
/**
 * Skip decimal digit
 * @param state
 * @return 
 */
static int skipDigit(lex_state_t * state) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff39 	bl	8000fb0 <iseos>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d112      	bne.n	800116a <skipDigit+0x3a>
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <skipDigit+0x44>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	d006      	beq.n	800116a <skipDigit+0x3a>
        state->pos++;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <skipDigit+0x3c>
    } else {
        return SKIP_NONE;
 800116a:	2300      	movs	r3, #0
    }
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	1ffe8880 	.word	0x1ffe8880

08001178 <skipNumbers>:
/**
 * Skip multiple decimal digits
 * @param state
 * @return 
 */
static int skipNumbers(lex_state_t * state) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8001184:	e007      	b.n	8001196 <skipNumbers+0x1e>
        state->pos++;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	605a      	str	r2, [r3, #4]
        someNumbers++;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 * @param state
 * @return 
 */
static int skipNumbers(lex_state_t * state) {
    int someNumbers = 0;
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff0a 	bl	8000fb0 <iseos>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10b      	bne.n	80011ba <skipNumbers+0x42>
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <skipNumbers+0x4c>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1e5      	bne.n	8001186 <skipNumbers+0xe>
        state->pos++;
        someNumbers++;
    }
    return someNumbers;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	1ffe8880 	.word	0x1ffe8880

080011c8 <skipPlusmn>:
/**
 * Skip plus or minus
 * @param state
 * @return 
 */
static int skipPlusmn(lex_state_t * state) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && isplusmn(state->pos[0])) {
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff feed 	bl	8000fb0 <iseos>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10f      	bne.n	80011fc <skipPlusmn+0x34>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff1c 	bl	8001020 <isplusmn>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d006      	beq.n	80011fc <skipPlusmn+0x34>
        state->pos++;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <skipPlusmn+0x36>
    } else {
        return SKIP_NONE;
 80011fc:	2300      	movs	r3, #0
    }
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop

08001208 <skipAlpha>:
/**
 * Skip any character from 'a'-'Z'
 * @param state
 * @return 
 */
static int skipAlpha(lex_state_t * state) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    int someLetters = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8001214:	e007      	b.n	8001226 <skipAlpha+0x1e>
        state->pos++;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	605a      	str	r2, [r3, #4]
        someLetters++;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3301      	adds	r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
 * @param state
 * @return 
 */
static int skipAlpha(lex_state_t * state) {
    int someLetters = 0;
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fec2 	bl	8000fb0 <iseos>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10b      	bne.n	800124a <skipAlpha+0x42>
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <skipAlpha+0x4c>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1e5      	bne.n	8001216 <skipAlpha+0xe>
        state->pos++;
        someLetters++;
    }
    return someLetters;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	1ffe8880 	.word	0x1ffe8880

08001258 <skipChr>:
 * Skip exact character chr or nothing
 * @param state
 * @param chr
 * @return 
 */
static int skipChr(lex_state_t * state, char chr) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	70fb      	strb	r3, [r7, #3]
    if (!iseos(state) && ischr(state, chr)) {
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff fea3 	bl	8000fb0 <iseos>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10e      	bne.n	800128e <skipChr+0x36>
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff febd 	bl	8000ff4 <ischr>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d006      	beq.n	800128e <skipChr+0x36>
        state->pos++;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <skipChr+0x38>
    } else {
        return SKIP_NONE;
 800128e:	2300      	movs	r3, #0
    }
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <skipSlashDot>:
/**
 * Skip slash or dot
 * @param state
 * @return 
 */
static int skipSlashDot(lex_state_t * state) {
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && (ischr(state, '/') | ischr(state, '.'))) {
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff fe85 	bl	8000fb0 <iseos>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d113      	bne.n	80012d4 <skipSlashDot+0x3c>
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	212f      	movs	r1, #47	; 0x2f
 80012b0:	f7ff fea0 	bl	8000ff4 <ischr>
 80012b4:	4604      	mov	r4, r0
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	212e      	movs	r1, #46	; 0x2e
 80012ba:	f7ff fe9b 	bl	8000ff4 <ischr>
 80012be:	4603      	mov	r3, r0
 80012c0:	4323      	orrs	r3, r4
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <skipSlashDot+0x3c>
        state->pos++;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <skipSlashDot+0x3e>
    } else {
        return SKIP_NONE;
 80012d4:	2300      	movs	r3, #0
    }
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}
 80012de:	bf00      	nop

080012e0 <skipStar>:
/**
 * Skip star
 * @param state
 * @return 
 */
static int skipStar(lex_state_t * state) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && ischr(state, '*')) {
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff fe61 	bl	8000fb0 <iseos>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10d      	bne.n	8001310 <skipStar+0x30>
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	212a      	movs	r1, #42	; 0x2a
 80012f8:	f7ff fe7c 	bl	8000ff4 <ischr>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <skipStar+0x30>
        state->pos++;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <skipStar+0x32>
    } else {
        return SKIP_NONE;
 8001310:	2300      	movs	r3, #0
    }
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop

0800131c <skipColon>:
/**
 * Skip colon
 * @param state
 * @return 
 */
static int skipColon(lex_state_t * state) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && ischr(state, ':')) {
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff fe43 	bl	8000fb0 <iseos>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10d      	bne.n	800134c <skipColon+0x30>
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	213a      	movs	r1, #58	; 0x3a
 8001334:	f7ff fe5e 	bl	8000ff4 <ischr>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <skipColon+0x30>
        state->pos++;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <skipColon+0x32>
    } else {
        return SKIP_NONE;
 800134c:	2300      	movs	r3, #0
    }
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop

08001358 <skipProgramMnemonic>:
/**
 * Skip program mnemonic [a-z][a-z0-9_]*
 * @param state
 * @return 
 */
static int skipProgramMnemonic(lex_state_t * state) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    const char * startPos = state->pos;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	60fb      	str	r3, [r7, #12]
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fe22 	bl	8000fb0 <iseos>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d12f      	bne.n	80013d2 <skipProgramMnemonic+0x7a>
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <skipProgramMnemonic+0xa4>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d023      	beq.n	80013d2 <skipProgramMnemonic+0x7a>
        state->pos++;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 8001394:	e004      	b.n	80013a0 <skipProgramMnemonic+0x48>
            state->pos++;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	605a      	str	r2, [r3, #4]
 */
static int skipProgramMnemonic(lex_state_t * state) {
    const char * startPos = state->pos;
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
        state->pos++;
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff fe05 	bl	8000fb0 <iseos>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d112      	bne.n	80013d2 <skipProgramMnemonic+0x7a>
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <skipProgramMnemonic+0xa4>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1e8      	bne.n	8001396 <skipProgramMnemonic+0x3e>
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	215f      	movs	r1, #95	; 0x5f
 80013c8:	f7ff fe14 	bl	8000ff4 <ischr>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1e1      	bne.n	8001396 <skipProgramMnemonic+0x3e>
            state->pos++;
        }
    }

    if (iseos(state)) {
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fdec 	bl	8000fb0 <iseos>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d004      	beq.n	80013e8 <skipProgramMnemonic+0x90>
        return (state->pos - startPos) * SKIP_INCOMPLETE;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6852      	ldr	r2, [r2, #4]
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	e004      	b.n	80013f2 <skipProgramMnemonic+0x9a>
    } else {
        return (state->pos - startPos) * SKIP_OK;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	461a      	mov	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	1ad3      	subs	r3, r2, r3
    }
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	1ffe8880 	.word	0x1ffe8880

08001400 <scpiLex_WhiteSpace>:
 * Detect token white space
 * @param state
 * @param token
 * @return 
 */
int scpiLex_WhiteSpace(lex_state_t * state, scpi_token_t * token) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	605a      	str	r2, [r3, #4]

    skipWs(state);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff fe68 	bl	80010e8 <skipWs>

    token->len = state->pos - token->ptr;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	461a      	mov	r2, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	1ad2      	subs	r2, r2, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	609a      	str	r2, [r3, #8]

    if (token->len > 0) {
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	dd03      	ble.n	8001438 <scpiLex_WhiteSpace+0x38>
        token->type = SCPI_TOKEN_WS;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2217      	movs	r2, #23
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	e002      	b.n	800143e <scpiLex_WhiteSpace+0x3e>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	221a      	movs	r2, #26
 800143c:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop

0800144c <skipCommonProgramHeader>:
/**
 * Skip command program header \*<PROGRAM MNEMONIC>
 * @param state
 * @return 
 */
static int skipCommonProgramHeader(lex_state_t * state) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    int res;
    if (skipStar(state)) {
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff43 	bl	80012e0 <skipStar>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d01c      	beq.n	800149a <skipCommonProgramHeader+0x4e>
        res = skipProgramMnemonic(state);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff79 	bl	8001358 <skipProgramMnemonic>
 8001466:	60f8      	str	r0, [r7, #12]
        if (res == SKIP_NONE && iseos(state)) {
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d108      	bne.n	8001480 <skipCommonProgramHeader+0x34>
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fd9e 	bl	8000fb0 <iseos>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d002      	beq.n	8001480 <skipCommonProgramHeader+0x34>
            return SKIP_INCOMPLETE;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e00d      	b.n	800149c <skipCommonProgramHeader+0x50>
        } else if (res <= SKIP_INCOMPLETE) {
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	da01      	bge.n	800148a <skipCommonProgramHeader+0x3e>
            return SKIP_OK;
 8001486:	2301      	movs	r3, #1
 8001488:	e008      	b.n	800149c <skipCommonProgramHeader+0x50>
        } else if (res >= SKIP_OK) {
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	dd01      	ble.n	8001494 <skipCommonProgramHeader+0x48>
            return SKIP_OK;
 8001490:	2301      	movs	r3, #1
 8001492:	e003      	b.n	800149c <skipCommonProgramHeader+0x50>
        } else {
            return SKIP_INCOMPLETE;
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	e000      	b.n	800149c <skipCommonProgramHeader+0x50>
        }
    }
    return SKIP_NONE;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <skipCompoundProgramHeader>:
/**
 * Skip compound program header :<PROGRAM MNEMONIC>:<PROGRAM MNEMONIC>...
 * @param state
 * @return 
 */
static int skipCompoundProgramHeader(lex_state_t * state) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
    int res;
    int firstColon = skipColon(state);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff35 	bl	800131c <skipColon>
 80014b2:	60f8      	str	r0, [r7, #12]

    res = skipProgramMnemonic(state);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff4f 	bl	8001358 <skipProgramMnemonic>
 80014ba:	60b8      	str	r0, [r7, #8]
    if (res >= SKIP_OK) {
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	dd17      	ble.n	80014f2 <skipCompoundProgramHeader+0x4e>
        while (skipColon(state)) {
 80014c2:	e00e      	b.n	80014e2 <skipCompoundProgramHeader+0x3e>
            res = skipProgramMnemonic(state);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff47 	bl	8001358 <skipProgramMnemonic>
 80014ca:	60b8      	str	r0, [r7, #8]
            if (res <= SKIP_INCOMPLETE) {
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	da01      	bge.n	80014d6 <skipCompoundProgramHeader+0x32>
                return SKIP_OK;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e019      	b.n	800150a <skipCompoundProgramHeader+0x66>
            } else if (res == SKIP_NONE) {
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <skipCompoundProgramHeader+0x3e>
                return SKIP_INCOMPLETE;
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	e013      	b.n	800150a <skipCompoundProgramHeader+0x66>
    int res;
    int firstColon = skipColon(state);

    res = skipProgramMnemonic(state);
    if (res >= SKIP_OK) {
        while (skipColon(state)) {
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ff1a 	bl	800131c <skipColon>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1ea      	bne.n	80014c4 <skipCompoundProgramHeader+0x20>
                return SKIP_OK;
            } else if (res == SKIP_NONE) {
                return SKIP_INCOMPLETE;
            }
        }
        return SKIP_OK;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00b      	b.n	800150a <skipCompoundProgramHeader+0x66>
    } else if (res <= SKIP_INCOMPLETE) {
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	da01      	bge.n	80014fc <skipCompoundProgramHeader+0x58>
        return SKIP_OK;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e006      	b.n	800150a <skipCompoundProgramHeader+0x66>
    } else if (firstColon) {
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d002      	beq.n	8001508 <skipCompoundProgramHeader+0x64>
        return SKIP_INCOMPLETE;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	e000      	b.n	800150a <skipCompoundProgramHeader+0x66>
    } else {
        return SKIP_NONE;
 8001508:	2300      	movs	r3, #0
    }
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop

08001514 <scpiLex_ProgramHeader>:
 * Detect token command or compound program header
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramHeader(lex_state_t * state, scpi_token_t * token) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
    int res;
    token->ptr = state->pos;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	605a      	str	r2, [r3, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	221a      	movs	r2, #26
 800152a:	701a      	strb	r2, [r3, #0]

    res = skipCommonProgramHeader(state);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff8d 	bl	800144c <skipCommonProgramHeader>
 8001532:	60f8      	str	r0, [r7, #12]
    if (res >= SKIP_OK) {
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	dd0e      	ble.n	8001558 <scpiLex_ProgramHeader+0x44>
        if (skipChr(state, '?') >= SKIP_OK) {
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	213f      	movs	r1, #63	; 0x3f
 800153e:	f7ff fe8b 	bl	8001258 <skipChr>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	dd03      	ble.n	8001550 <scpiLex_ProgramHeader+0x3c>
            token->type = SCPI_TOKEN_COMMON_QUERY_PROGRAM_HEADER;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2216      	movs	r2, #22
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e029      	b.n	80015a4 <scpiLex_ProgramHeader+0x90>
        } else {
            token->type = SCPI_TOKEN_COMMON_PROGRAM_HEADER;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	2213      	movs	r2, #19
 8001554:	701a      	strb	r2, [r3, #0]
 8001556:	e025      	b.n	80015a4 <scpiLex_ProgramHeader+0x90>
        }
    } else if (res <= SKIP_INCOMPLETE) {
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	da03      	bge.n	8001566 <scpiLex_ProgramHeader+0x52>
        token->type = SCPI_TOKEN_INCOMPLETE_COMMON_PROGRAM_HEADER;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	2214      	movs	r2, #20
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	e01e      	b.n	80015a4 <scpiLex_ProgramHeader+0x90>
    } else if (res == SKIP_NONE) {
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d11b      	bne.n	80015a4 <scpiLex_ProgramHeader+0x90>
        res = skipCompoundProgramHeader(state);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff99 	bl	80014a4 <skipCompoundProgramHeader>
 8001572:	60f8      	str	r0, [r7, #12]

        if (res >= SKIP_OK) {
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	dd0e      	ble.n	8001598 <scpiLex_ProgramHeader+0x84>
            if (skipChr(state, '?') >= SKIP_OK) {
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	213f      	movs	r1, #63	; 0x3f
 800157e:	f7ff fe6b 	bl	8001258 <skipChr>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	dd03      	ble.n	8001590 <scpiLex_ProgramHeader+0x7c>
                token->type = SCPI_TOKEN_COMPOUND_QUERY_PROGRAM_HEADER;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2215      	movs	r2, #21
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	e009      	b.n	80015a4 <scpiLex_ProgramHeader+0x90>
            } else {
                token->type = SCPI_TOKEN_COMPOUND_PROGRAM_HEADER;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2211      	movs	r2, #17
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	e005      	b.n	80015a4 <scpiLex_ProgramHeader+0x90>
            }
        } else if (res <= SKIP_INCOMPLETE) {
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	da02      	bge.n	80015a4 <scpiLex_ProgramHeader+0x90>
            token->type = SCPI_TOKEN_INCOMPLETE_COMPOUND_PROGRAM_HEADER;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2212      	movs	r2, #18
 80015a2:	701a      	strb	r2, [r3, #0]
        }
    }

    if (token->type != SCPI_TOKEN_UNKNOWN) {
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b1a      	cmp	r3, #26
 80015aa:	d008      	beq.n	80015be <scpiLex_ProgramHeader+0xaa>
        token->len = state->pos - token->ptr;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	461a      	mov	r2, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	1ad2      	subs	r2, r2, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	e006      	b.n	80015cc <scpiLex_ProgramHeader+0xb8>
    } else {
        token->len = 0;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
        state->pos = token->ptr;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	605a      	str	r2, [r3, #4]
    }

    return token->len;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <scpiLex_CharacterProgramData>:
 * Detect token "Character program data"
 * @param state
 * @param token
 * @return 
 */
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	605a      	str	r2, [r3, #4]

    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fce0 	bl	8000fb0 <iseos>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d12f      	bne.n	8001656 <scpiLex_CharacterProgramData+0x7e>
 80015f6:	4b24      	ldr	r3, [pc, #144]	; (8001688 <scpiLex_CharacterProgramData+0xb0>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	3301      	adds	r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d023      	beq.n	8001656 <scpiLex_CharacterProgramData+0x7e>
        state->pos++;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 8001618:	e004      	b.n	8001624 <scpiLex_CharacterProgramData+0x4c>
            state->pos++;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	605a      	str	r2, [r3, #4]
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
    token->ptr = state->pos;

    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
        state->pos++;
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fcc3 	bl	8000fb0 <iseos>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d112      	bne.n	8001656 <scpiLex_CharacterProgramData+0x7e>
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <scpiLex_CharacterProgramData+0xb0>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1e8      	bne.n	800161a <scpiLex_CharacterProgramData+0x42>
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	215f      	movs	r1, #95	; 0x5f
 800164c:	f7ff fcd2 	bl	8000ff4 <ischr>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1e1      	bne.n	800161a <scpiLex_CharacterProgramData+0x42>
            state->pos++;
        }
    }

    token->len = state->pos - token->ptr;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	461a      	mov	r2, r3
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	1ad2      	subs	r2, r2, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	609a      	str	r2, [r3, #8]
    if (token->len > 0) {
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	dd03      	ble.n	8001676 <scpiLex_CharacterProgramData+0x9e>
        token->type = SCPI_TOKEN_PROGRAM_MNEMONIC;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2209      	movs	r2, #9
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	e002      	b.n	800167c <scpiLex_CharacterProgramData+0xa4>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	221a      	movs	r2, #26
 800167a:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	1ffe8880 	.word	0x1ffe8880

0800168c <skipMantisa>:

/* 7.7.2 <DECIMAL NUMERIC PROGRAM DATA> */
static int skipMantisa(lex_state_t * state) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]

    skipPlusmn(state);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fd95 	bl	80011c8 <skipPlusmn>

    someNumbers += skipNumbers(state);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fd6a 	bl	8001178 <skipNumbers>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4413      	add	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]

    if (skipChr(state, '.')) {
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	212e      	movs	r1, #46	; 0x2e
 80016b0:	f7ff fdd2 	bl	8001258 <skipChr>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d006      	beq.n	80016c8 <skipMantisa+0x3c>
        someNumbers += skipNumbers(state);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fd5c 	bl	8001178 <skipNumbers>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4413      	add	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
    }

    return someNumbers;
 80016c8:	68fb      	ldr	r3, [r7, #12]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop

080016d4 <skipExponent>:

static int skipExponent(lex_state_t * state) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]

    if (!iseos(state) && isE(state->pos[0])) {
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff fc65 	bl	8000fb0 <iseos>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d117      	bne.n	800171c <skipExponent+0x48>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fce4 	bl	80010c0 <isE>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00e      	beq.n	800171c <skipExponent+0x48>
        state->pos++;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	605a      	str	r2, [r3, #4]

        skipWs(state);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fced 	bl	80010e8 <skipWs>

        skipPlusmn(state);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fd5a 	bl	80011c8 <skipPlusmn>

        someNumbers = skipNumbers(state);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fd2f 	bl	8001178 <skipNumbers>
 800171a:	60f8      	str	r0, [r7, #12]
    }

    return someNumbers;
 800171c:	68fb      	ldr	r3, [r7, #12]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop

08001728 <scpiLex_DecimalNumericProgramData>:
 * Detect token Decimal number
 * @param state
 * @param token
 * @return 
 */
int scpiLex_DecimalNumericProgramData(lex_state_t * state, scpi_token_t * token) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
    char * rollback;
    token->ptr = state->pos;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	605a      	str	r2, [r3, #4]

    if (skipMantisa(state)) {
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ffa6 	bl	800168c <skipMantisa>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00f      	beq.n	8001766 <scpiLex_DecimalNumericProgramData+0x3e>
        rollback = state->pos;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	60fb      	str	r3, [r7, #12]
        skipWs(state);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff fccb 	bl	80010e8 <skipWs>
        if (!skipExponent(state)) {
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ffbe 	bl	80016d4 <skipExponent>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d107      	bne.n	800176e <scpiLex_DecimalNumericProgramData+0x46>
            state->pos = rollback;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	e003      	b.n	800176e <scpiLex_DecimalNumericProgramData+0x46>
        }
    } else {
        state->pos = token->ptr;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	605a      	str	r2, [r3, #4]
    }

    token->len = state->pos - token->ptr;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	461a      	mov	r2, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	1ad2      	subs	r2, r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	609a      	str	r2, [r3, #8]
    if (token->len > 0) {
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	dd03      	ble.n	800178e <scpiLex_DecimalNumericProgramData+0x66>
        token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	220a      	movs	r2, #10
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	e002      	b.n	8001794 <scpiLex_DecimalNumericProgramData+0x6c>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	221a      	movs	r2, #26
 8001792:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <scpiLex_SuffixProgramData>:

/* 7.7.3 <SUFFIX PROGRAM DATA> */
int scpiLex_SuffixProgramData(lex_state_t * state, scpi_token_t * token) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	605a      	str	r2, [r3, #4]

    skipChr(state, '/');
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	212f      	movs	r1, #47	; 0x2f
 80017b6:	f7ff fd4f 	bl	8001258 <skipChr>

    /* TODO: strict parsing  : SLASH? (ALPHA+ (MINUS? DIGIT)?) ((SLASH | DOT) (ALPHA+ (MINUS? DIGIT)?))* */
    if (skipAlpha(state)) {
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff fd24 	bl	8001208 <skipAlpha>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d017      	beq.n	80017f6 <scpiLex_SuffixProgramData+0x56>
        skipChr(state, '-');
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	212d      	movs	r1, #45	; 0x2d
 80017ca:	f7ff fd45 	bl	8001258 <skipChr>
        skipDigit(state);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fcae 	bl	8001130 <skipDigit>

        while (skipSlashDot(state)) {
 80017d4:	e009      	b.n	80017ea <scpiLex_SuffixProgramData+0x4a>
            skipAlpha(state);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fd16 	bl	8001208 <skipAlpha>
            skipChr(state, '-');
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	212d      	movs	r1, #45	; 0x2d
 80017e0:	f7ff fd3a 	bl	8001258 <skipChr>
            skipDigit(state);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fca3 	bl	8001130 <skipDigit>
    /* TODO: strict parsing  : SLASH? (ALPHA+ (MINUS? DIGIT)?) ((SLASH | DOT) (ALPHA+ (MINUS? DIGIT)?))* */
    if (skipAlpha(state)) {
        skipChr(state, '-');
        skipDigit(state);

        while (skipSlashDot(state)) {
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fd54 	bl	8001298 <skipSlashDot>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ef      	bne.n	80017d6 <scpiLex_SuffixProgramData+0x36>
            skipChr(state, '-');
            skipDigit(state);
        }
    }

    token->len = state->pos - token->ptr;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	461a      	mov	r2, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	1ad2      	subs	r2, r2, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	609a      	str	r2, [r3, #8]
    if ((token->len > 0)) {
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	dd03      	ble.n	8001816 <scpiLex_SuffixProgramData+0x76>
        token->type = SCPI_TOKEN_SUFFIX_PROGRAM_DATA;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	220c      	movs	r2, #12
 8001812:	701a      	strb	r2, [r3, #0]
 8001814:	e009      	b.n	800182a <scpiLex_SuffixProgramData+0x8a>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	221a      	movs	r2, #26
 800181a:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop

08001838 <skipHexNum>:

/* 7.7.4 <NONDECIMAL NUMERIC PROGRAM DATA> */
static int skipHexNum(lex_state_t * state) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 8001844:	e007      	b.n	8001856 <skipHexNum+0x1e>
        state->pos++;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	605a      	str	r2, [r3, #4]
        someNumbers++;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3301      	adds	r3, #1
 8001854:	60fb      	str	r3, [r7, #12]
}

/* 7.7.4 <NONDECIMAL NUMERIC PROGRAM DATA> */
static int skipHexNum(lex_state_t * state) {
    int someNumbers = 0;
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff fbaa 	bl	8000fb0 <iseos>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10b      	bne.n	800187a <skipHexNum+0x42>
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <skipHexNum+0x4c>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1e5      	bne.n	8001846 <skipHexNum+0xe>
        state->pos++;
        someNumbers++;
    }
    return someNumbers;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	1ffe8880 	.word	0x1ffe8880

08001888 <skipOctNum>:

static int skipOctNum(lex_state_t * state) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 8001894:	e007      	b.n	80018a6 <skipOctNum+0x1e>
        state->pos++;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	605a      	str	r2, [r3, #4]
        someNumbers++;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3301      	adds	r3, #1
 80018a4:	60fb      	str	r3, [r7, #12]
    return someNumbers;
}

static int skipOctNum(lex_state_t * state) {
    int someNumbers = 0;
    while (!iseos(state) && isqdigit(state->pos[0])) {
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff fb82 	bl	8000fb0 <iseos>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d108      	bne.n	80018c4 <skipOctNum+0x3c>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fb53 	bl	8000f64 <isqdigit>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1e8      	bne.n	8001896 <skipOctNum+0xe>
        state->pos++;
        someNumbers++;
    }
    return someNumbers;
 80018c4:	68fb      	ldr	r3, [r7, #12]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop

080018d0 <skipBinNum>:

static int skipBinNum(lex_state_t * state) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 80018dc:	e007      	b.n	80018ee <skipBinNum+0x1e>
        state->pos++;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	605a      	str	r2, [r3, #4]
        someNumbers++;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	3301      	adds	r3, #1
 80018ec:	60fb      	str	r3, [r7, #12]
    return someNumbers;
}

static int skipBinNum(lex_state_t * state) {
    int someNumbers = 0;
    while (!iseos(state) && isbdigit(state->pos[0])) {
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff fb5e 	bl	8000fb0 <iseos>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d108      	bne.n	800190c <skipBinNum+0x3c>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fb1b 	bl	8000f3c <isbdigit>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1e8      	bne.n	80018de <skipBinNum+0xe>
        state->pos++;
        someNumbers++;
    }
    return someNumbers;
 800190c:	68fb      	ldr	r3, [r7, #12]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop

08001918 <scpiLex_NondecimalNumericData>:
 * Detect token nondecimal number
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NondecimalNumericData(lex_state_t * state, scpi_token_t * token) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
    int someNumbers = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
    token->ptr = state->pos;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	605a      	str	r2, [r3, #4]
    if (skipChr(state, '#')) {
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	2123      	movs	r1, #35	; 0x23
 8001932:	f7ff fc91 	bl	8001258 <skipChr>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d046      	beq.n	80019ca <scpiLex_NondecimalNumericData+0xb2>
        if (!iseos(state)) {
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff fb37 	bl	8000fb0 <iseos>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d140      	bne.n	80019ca <scpiLex_NondecimalNumericData+0xb2>
            if (isH(state->pos[0])) {
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fb7a 	bl	8001048 <isH>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00c      	beq.n	8001974 <scpiLex_NondecimalNumericData+0x5c>
                state->pos++;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	605a      	str	r2, [r3, #4]
                someNumbers = skipHexNum(state);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff67 	bl	8001838 <skipHexNum>
 800196a:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_HEXNUM;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2206      	movs	r2, #6
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	e02a      	b.n	80019ca <scpiLex_NondecimalNumericData+0xb2>
            } else if (isQ(state->pos[0])) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fb8c 	bl	8001098 <isQ>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00c      	beq.n	80019a0 <scpiLex_NondecimalNumericData+0x88>
                state->pos++;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	605a      	str	r2, [r3, #4]
                someNumbers = skipOctNum(state);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff79 	bl	8001888 <skipOctNum>
 8001996:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_OCTNUM;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2207      	movs	r2, #7
 800199c:	701a      	strb	r2, [r3, #0]
 800199e:	e014      	b.n	80019ca <scpiLex_NondecimalNumericData+0xb2>
            } else if (isB(state->pos[0])) {
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fb62 	bl	8001070 <isB>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <scpiLex_NondecimalNumericData+0xb2>
                state->pos++;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	605a      	str	r2, [r3, #4]
                someNumbers = skipBinNum(state);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff87 	bl	80018d0 <skipBinNum>
 80019c2:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_BINNUM;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2208      	movs	r2, #8
 80019c8:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (someNumbers) {
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00d      	beq.n	80019ec <scpiLex_NondecimalNumericData+0xd4>
        token->ptr += 2; /* ignore number prefix */
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	1c9a      	adds	r2, r3, #2
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	605a      	str	r2, [r3, #4]
        token->len = state->pos - token->ptr;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	1ad2      	subs	r2, r2, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	e009      	b.n	8001a00 <scpiLex_NondecimalNumericData+0xe8>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	221a      	movs	r2, #26
 80019f0:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	605a      	str	r2, [r3, #4]
        token->len = 0;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
    }
    return token->len > 0 ? token->len + 2 : 0;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	dd03      	ble.n	8001a10 <scpiLex_NondecimalNumericData+0xf8>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	e000      	b.n	8001a12 <scpiLex_NondecimalNumericData+0xfa>
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop

08001a1c <isascii7bit>:

/* 7.7.5 <STRING PROGRAM DATA> */
static int isascii7bit(int c) {
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    return (c >= 0) && (c <= 0x7f);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	db04      	blt.n	8001a34 <isascii7bit+0x18>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8001a2e:	dc01      	bgt.n	8001a34 <isascii7bit+0x18>
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <isascii7bit+0x1a>
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop

08001a44 <skipQuoteProgramData>:

static void skipQuoteProgramData(lex_state_t * state, char quote) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	70fb      	strb	r3, [r7, #3]
    while (!iseos(state)) {
 8001a50:	e03e      	b.n	8001ad0 <skipQuoteProgramData+0x8c>
        if (isascii7bit(state->pos[0]) && !ischr(state, quote)) {
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ffdf 	bl	8001a1c <isascii7bit>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00d      	beq.n	8001a80 <skipQuoteProgramData+0x3c>
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f7ff fac3 	bl	8000ff4 <ischr>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <skipQuoteProgramData+0x3c>
            state->pos++;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	e027      	b.n	8001ad0 <skipQuoteProgramData+0x8c>
        } else if (ischr(state, quote)) {
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7ff fab5 	bl	8000ff4 <ischr>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01e      	beq.n	8001ace <skipQuoteProgramData+0x8a>
            state->pos++;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	605a      	str	r2, [r3, #4]
            if (!iseos(state) && ischr(state, quote)) {
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fa88 	bl	8000fb0 <iseos>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10d      	bne.n	8001ac2 <skipQuoteProgramData+0x7e>
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff faa2 	bl	8000ff4 <ischr>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <skipQuoteProgramData+0x7e>
                state->pos++;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	e006      	b.n	8001ad0 <skipQuoteProgramData+0x8c>
            } else {
                state->pos--;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	1e5a      	subs	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	605a      	str	r2, [r3, #4]
                break;
 8001acc:	e006      	b.n	8001adc <skipQuoteProgramData+0x98>
            }
        } else {
            break;
 8001ace:	e005      	b.n	8001adc <skipQuoteProgramData+0x98>
static int isascii7bit(int c) {
    return (c >= 0) && (c <= 0x7f);
}

static void skipQuoteProgramData(lex_state_t * state, char quote) {
    while (!iseos(state)) {
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fa6d 	bl	8000fb0 <iseos>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0ba      	beq.n	8001a52 <skipQuoteProgramData+0xe>
            }
        } else {
            break;
        }
    }
}
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop

08001ae4 <skipDoubleQuoteProgramData>:

static void skipDoubleQuoteProgramData(lex_state_t * state) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
    skipQuoteProgramData(state, '"');
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	2122      	movs	r1, #34	; 0x22
 8001af0:	f7ff ffa8 	bl	8001a44 <skipQuoteProgramData>
}
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop

08001afc <skipSingleQuoteProgramData>:

static void skipSingleQuoteProgramData(lex_state_t * state) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
    skipQuoteProgramData(state, '\'');
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	2127      	movs	r1, #39	; 0x27
 8001b08:	f7ff ff9c 	bl	8001a44 <skipQuoteProgramData>
}
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop

08001b14 <scpiLex_StringProgramData>:
 * Detect token String data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	605a      	str	r2, [r3, #4]

    if (!iseos(state)) {
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff fa42 	bl	8000fb0 <iseos>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d162      	bne.n	8001bf8 <scpiLex_StringProgramData+0xe4>
        if (ischr(state, '"')) {
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	2122      	movs	r1, #34	; 0x22
 8001b36:	f7ff fa5d 	bl	8000ff4 <ischr>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d02a      	beq.n	8001b96 <scpiLex_StringProgramData+0x82>
            state->pos++;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	605a      	str	r2, [r3, #4]
            token->type = SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	701a      	strb	r2, [r3, #0]
            skipDoubleQuoteProgramData(state);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ffc7 	bl	8001ae4 <skipDoubleQuoteProgramData>
            if (!iseos(state) && ischr(state, '"')) {
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fa2a 	bl	8000fb0 <iseos>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d114      	bne.n	8001b8c <scpiLex_StringProgramData+0x78>
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	2122      	movs	r1, #34	; 0x22
 8001b66:	f7ff fa45 	bl	8000ff4 <ischr>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00d      	beq.n	8001b8c <scpiLex_StringProgramData+0x78>
                state->pos++;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	605a      	str	r2, [r3, #4]
                token->len = state->pos - token->ptr;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	1ad2      	subs	r2, r2, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	e035      	b.n	8001bf8 <scpiLex_StringProgramData+0xe4>
            } else {
                state->pos = token->ptr;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	e030      	b.n	8001bf8 <scpiLex_StringProgramData+0xe4>
            }
        } else if (ischr(state, '\'')) {
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	2127      	movs	r1, #39	; 0x27
 8001b9a:	f7ff fa2b 	bl	8000ff4 <ischr>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d029      	beq.n	8001bf8 <scpiLex_StringProgramData+0xe4>
            state->pos++;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	605a      	str	r2, [r3, #4]
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	220e      	movs	r2, #14
 8001bb2:	701a      	strb	r2, [r3, #0]
            skipSingleQuoteProgramData(state);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ffa1 	bl	8001afc <skipSingleQuoteProgramData>
            if (!iseos(state) && ischr(state, '\'')) {
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff f9f8 	bl	8000fb0 <iseos>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d114      	bne.n	8001bf0 <scpiLex_StringProgramData+0xdc>
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	2127      	movs	r1, #39	; 0x27
 8001bca:	f7ff fa13 	bl	8000ff4 <ischr>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00d      	beq.n	8001bf0 <scpiLex_StringProgramData+0xdc>
                state->pos++;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	605a      	str	r2, [r3, #4]
                token->len = state->pos - token->ptr;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	461a      	mov	r2, r3
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	1ad2      	subs	r2, r2, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	e003      	b.n	8001bf8 <scpiLex_StringProgramData+0xe4>
            } else {
                state->pos = token->ptr;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	605a      	str	r2, [r3, #4]
            }
        }
    }

    token->len = state->pos - token->ptr;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	1ad2      	subs	r2, r2, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	609a      	str	r2, [r3, #8]

    if ((token->len > 0)) {
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	dc09      	bgt.n	8001c24 <scpiLex_StringProgramData+0x110>
        /* token->ptr++;
         * token->len -= 2; */
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	221a      	movs	r2, #26
 8001c14:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
    }

    return token->len > 0 ? token->len : 0;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <isNonzeroDigit>:

/* 7.7.6 <ARBITRARY BLOCK PROGRAM DATA> */
static int isNonzeroDigit(int c) {
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
    return isdigit(c) && (c != '0');
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <isNonzeroDigit+0x34>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3301      	adds	r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d004      	beq.n	8001c5a <isNonzeroDigit+0x26>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b30      	cmp	r3, #48	; 0x30
 8001c54:	d001      	beq.n	8001c5a <isNonzeroDigit+0x26>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <isNonzeroDigit+0x28>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	1ffe8880 	.word	0x1ffe8880

08001c6c <scpiLex_ArbitraryBlockProgramData>:
 * Detect token Block Data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
    int i;
    int arbitraryBlockLength = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
    const char * ptr = state->pos;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	60bb      	str	r3, [r7, #8]
    int validData = -1;
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295
 8001c84:	60fb      	str	r3, [r7, #12]
    token->ptr = state->pos;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	605a      	str	r2, [r3, #4]

    if (skipChr(state, '#')) {
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	2123      	movs	r1, #35	; 0x23
 8001c92:	f7ff fae1 	bl	8001258 <skipChr>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d077      	beq.n	8001d8c <scpiLex_ArbitraryBlockProgramData+0x120>
        if (!iseos(state) && isNonzeroDigit(state->pos[0])) {
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff f987 	bl	8000fb0 <iseos>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d169      	bne.n	8001d7c <scpiLex_ArbitraryBlockProgramData+0x110>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ffc0 	bl	8001c34 <isNonzeroDigit>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d060      	beq.n	8001d7c <scpiLex_ArbitraryBlockProgramData+0x110>
            /* Get number of digits */
            i = state->pos[0] - '0';
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	3b30      	subs	r3, #48	; 0x30
 8001cc2:	617b      	str	r3, [r7, #20]
            state->pos++;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	605a      	str	r2, [r3, #4]

            for (; i > 0; i--) {
 8001cce:	e026      	b.n	8001d1e <scpiLex_ArbitraryBlockProgramData+0xb2>
                if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff f96d 	bl	8000fb0 <iseos>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d123      	bne.n	8001d24 <scpiLex_ArbitraryBlockProgramData+0xb8>
 8001cdc:	4b42      	ldr	r3, [pc, #264]	; (8001de8 <scpiLex_ArbitraryBlockProgramData+0x17c>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d017      	beq.n	8001d24 <scpiLex_ArbitraryBlockProgramData+0xb8>
                    arbitraryBlockLength *= 10;
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	613b      	str	r3, [r7, #16]
                    arbitraryBlockLength += (state->pos[0] - '0');
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	3b30      	subs	r3, #48	; 0x30
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
                    state->pos++;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	605a      	str	r2, [r3, #4]
        if (!iseos(state) && isNonzeroDigit(state->pos[0])) {
            /* Get number of digits */
            i = state->pos[0] - '0';
            state->pos++;

            for (; i > 0; i--) {
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	dcd5      	bgt.n	8001cd0 <scpiLex_ArbitraryBlockProgramData+0x64>
                } else {
                    break;
                }
            }

            if (i == 0) {
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d11e      	bne.n	8001d68 <scpiLex_ArbitraryBlockProgramData+0xfc>
                state->pos += arbitraryBlockLength;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	441a      	add	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	605a      	str	r2, [r3, #4]
                if ((state->buffer + state->len) >= (state->pos)) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6892      	ldr	r2, [r2, #8]
 8001d3e:	441a      	add	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d30c      	bcc.n	8001d62 <scpiLex_ArbitraryBlockProgramData+0xf6>
                    token->ptr = state->pos - arbitraryBlockLength;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	425b      	negs	r3, r3
 8001d50:	441a      	add	r2, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	605a      	str	r2, [r3, #4]
                    token->len = arbitraryBlockLength;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	609a      	str	r2, [r3, #8]
                    validData = 1;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	e00b      	b.n	8001d7a <scpiLex_ArbitraryBlockProgramData+0x10e>
                } else {
                    validData = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
                } else {
                    break;
                }
            }

            if (i == 0) {
 8001d66:	e011      	b.n	8001d8c <scpiLex_ArbitraryBlockProgramData+0x120>
                    token->len = arbitraryBlockLength;
                    validData = 1;
                } else {
                    validData = 0;
                }
            } else if (iseos(state)) {
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff f921 	bl	8000fb0 <iseos>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <scpiLex_ArbitraryBlockProgramData+0x10e>
                validData = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
                } else {
                    break;
                }
            }

            if (i == 0) {
 8001d78:	e008      	b.n	8001d8c <scpiLex_ArbitraryBlockProgramData+0x120>
 8001d7a:	e007      	b.n	8001d8c <scpiLex_ArbitraryBlockProgramData+0x120>
                    validData = 0;
                }
            } else if (iseos(state)) {
                validData = 0;
            }
        } else if (iseos(state)) {
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff f917 	bl	8000fb0 <iseos>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <scpiLex_ArbitraryBlockProgramData+0x120>
            validData = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (validData == 1) {
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d103      	bne.n	8001d9a <scpiLex_ArbitraryBlockProgramData+0x12e>
        /* valid */
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	220d      	movs	r2, #13
 8001d96:	701a      	strb	r2, [r3, #0]
 8001d98:	e01a      	b.n	8001dd0 <scpiLex_ArbitraryBlockProgramData+0x164>
    } else if (validData == 0) {
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10d      	bne.n	8001dbc <scpiLex_ArbitraryBlockProgramData+0x150>
        /* incomplete */
        token->type = SCPI_TOKEN_UNKNOWN;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	221a      	movs	r2, #26
 8001da4:	701a      	strb	r2, [r3, #0]
        token->len = 0;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
        state->pos = state->buffer + state->len;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6892      	ldr	r2, [r2, #8]
 8001db4:	441a      	add	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	e009      	b.n	8001dd0 <scpiLex_ArbitraryBlockProgramData+0x164>
    } else {
        /* invalid */
        token->type = SCPI_TOKEN_UNKNOWN;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	221a      	movs	r2, #26
 8001dc0:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
    }

    return token->len + (token->ptr - ptr);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	1acb      	subs	r3, r1, r3
 8001dde:	4413      	add	r3, r2
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	1ffe8880 	.word	0x1ffe8880

08001dec <isProgramExpression>:

/* 7.7.7 <EXPRESSION PROGRAM DATA> */
static int isProgramExpression(int c) {
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
    if ((c >= 0x20) && (c <= 0x7e)) {
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b1f      	cmp	r3, #31
 8001df8:	dd16      	ble.n	8001e28 <isProgramExpression+0x3c>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b7e      	cmp	r3, #126	; 0x7e
 8001dfe:	dc13      	bgt.n	8001e28 <isProgramExpression+0x3c>
        if ((c != '"')
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b22      	cmp	r3, #34	; 0x22
 8001e04:	d010      	beq.n	8001e28 <isProgramExpression+0x3c>
                && (c != '#')
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b23      	cmp	r3, #35	; 0x23
 8001e0a:	d00d      	beq.n	8001e28 <isProgramExpression+0x3c>
                && (c != '\'')
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b27      	cmp	r3, #39	; 0x27
 8001e10:	d00a      	beq.n	8001e28 <isProgramExpression+0x3c>
                && (c != '(')
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b28      	cmp	r3, #40	; 0x28
 8001e16:	d007      	beq.n	8001e28 <isProgramExpression+0x3c>
                && (c != ')')
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b29      	cmp	r3, #41	; 0x29
 8001e1c:	d004      	beq.n	8001e28 <isProgramExpression+0x3c>
                && (c != ';')) {
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b3b      	cmp	r3, #59	; 0x3b
 8001e22:	d001      	beq.n	8001e28 <isProgramExpression+0x3c>
            return 1;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <isProgramExpression+0x3e>
        }
    }

    return 0;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop

08001e38 <skipProgramExpression>:

static void skipProgramExpression(lex_state_t * state) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 8001e40:	e004      	b.n	8001e4c <skipProgramExpression+0x14>
        state->pos++;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	605a      	str	r2, [r3, #4]

    return 0;
}

static void skipProgramExpression(lex_state_t * state) {
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff f8af 	bl	8000fb0 <iseos>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d108      	bne.n	8001e6a <skipProgramExpression+0x32>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ffc4 	bl	8001dec <isProgramExpression>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1eb      	bne.n	8001e42 <skipProgramExpression+0xa>
        state->pos++;
    }
}
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <scpiLex_ProgramExpression>:
 * Detect token Expression
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramExpression(lex_state_t * state, scpi_token_t * token) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	605a      	str	r2, [r3, #4]

    if (!iseos(state) && ischr(state, '(')) {
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff f894 	bl	8000fb0 <iseos>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d12c      	bne.n	8001ee8 <scpiLex_ProgramExpression+0x78>
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	2128      	movs	r1, #40	; 0x28
 8001e92:	f7ff f8af 	bl	8000ff4 <ischr>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d025      	beq.n	8001ee8 <scpiLex_ProgramExpression+0x78>
        state->pos++;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	605a      	str	r2, [r3, #4]
        skipProgramExpression(state);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffc6 	bl	8001e38 <skipProgramExpression>

        if (!iseos(state) && ischr(state, ')')) {
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff f87f 	bl	8000fb0 <iseos>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d114      	bne.n	8001ee2 <scpiLex_ProgramExpression+0x72>
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	2129      	movs	r1, #41	; 0x29
 8001ebc:	f7ff f89a 	bl	8000ff4 <ischr>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00d      	beq.n	8001ee2 <scpiLex_ProgramExpression+0x72>
            state->pos++;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	605a      	str	r2, [r3, #4]
            token->len = state->pos - token->ptr;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	1ad2      	subs	r2, r2, r3
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	e002      	b.n	8001ee8 <scpiLex_ProgramExpression+0x78>
        } else {
            token->len = 0;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
        }
    }

    if ((token->len > 0)) {
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	dd03      	ble.n	8001ef8 <scpiLex_ProgramExpression+0x88>
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2210      	movs	r2, #16
 8001ef4:	701a      	strb	r2, [r3, #0]
 8001ef6:	e009      	b.n	8001f0c <scpiLex_ProgramExpression+0x9c>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	221a      	movs	r2, #26
 8001efc:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <scpiLex_Comma>:
 * Detect token comma
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Comma(lex_state_t * state, scpi_token_t * token) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ',')) {
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	212c      	movs	r1, #44	; 0x2c
 8001f2e:	f7ff f993 	bl	8001258 <skipChr>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d006      	beq.n	8001f46 <scpiLex_Comma+0x2e>
        token->len = 1;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_COMMA;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
 8001f44:	e005      	b.n	8001f52 <scpiLex_Comma+0x3a>
    } else {
        token->len = 0;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	221a      	movs	r2, #26
 8001f50:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop

08001f60 <scpiLex_Semicolon>:
 * Detect token semicolon
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Semicolon(lex_state_t * state, scpi_token_t * token) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ';')) {
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	213b      	movs	r1, #59	; 0x3b
 8001f76:	f7ff f96f 	bl	8001258 <skipChr>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <scpiLex_Semicolon+0x2e>
        token->len = 1;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	2201      	movs	r2, #1
 8001f84:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_SEMICOLON;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
 8001f8c:	e005      	b.n	8001f9a <scpiLex_Semicolon+0x3a>
    } else {
        token->len = 0;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	221a      	movs	r2, #26
 8001f98:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop

08001fa8 <scpiLex_NewLine>:
 * Detect token New line
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NewLine(lex_state_t * state, scpi_token_t * token) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	605a      	str	r2, [r3, #4]

    skipChr(state, '\r');
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	210d      	movs	r1, #13
 8001fbe:	f7ff f94b 	bl	8001258 <skipChr>
    skipChr(state, '\n');
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	210a      	movs	r1, #10
 8001fc6:	f7ff f947 	bl	8001258 <skipChr>

    token->len = state->pos - token->ptr;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	1ad2      	subs	r2, r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	609a      	str	r2, [r3, #8]

    if ((token->len > 0)) {
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	dd03      	ble.n	8001fea <scpiLex_NewLine+0x42>
        token->type = SCPI_TOKEN_NL;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2205      	movs	r2, #5
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	e009      	b.n	8001ffe <scpiLex_NewLine+0x56>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	221a      	movs	r2, #26
 8001fee:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop

0800200c <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
    SCPI_ResultMnemonic(context, SCPI_STD_VERSION_REVISION);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4905      	ldr	r1, [pc, #20]	; (800202c <SCPI_SystemVersionQ+0x20>)
 8002018:	2206      	movs	r2, #6
 800201a:	f000 fb57 	bl	80026cc <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 800201e:	2301      	movs	r3, #1
 8002020:	b25b      	sxtb	r3, r3
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	08013fbc 	.word	0x08013fbc

08002030 <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
    scpi_error_t error;
    SCPI_ErrorPop(context, &error);
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	4619      	mov	r1, r3
 8002040:	f7fe fa14 	bl	800046c <SCPI_ErrorPop>
    SCPI_ResultError(context, &error);
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	4619      	mov	r1, r3
 800204c:	f000 fbda 	bl	8002804 <SCPI_ResultError>
#if USE_DEVICE_DEPENDENT_ERROR_INFORMATION
    SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
#endif
    return SCPI_RES_OK;
 8002050:	2301      	movs	r3, #1
 8002052:	b25b      	sxtb	r3, r3
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_ErrorCount(context));
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7fe fa1f 	bl	80004a8 <SCPI_ErrorCount>
 800206a:	4603      	mov	r3, r0
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4619      	mov	r1, r3
 8002070:	f000 fbb6 	bl	80027e0 <SCPI_ResultInt32>

    return SCPI_RES_OK;
 8002074:	2301      	movs	r3, #1
 8002076:	b25b      	sxtb	r3, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <SCPI_StatusQuestionableEventQ>:
/**
 * STATus:QUEStionable[:EVENt]?
 * @param context
 * @return
 */
scpi_result_t SCPI_StatusQuestionableEventQ(scpi_t * context) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
    /* return value */
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_QUES));
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	2107      	movs	r1, #7
 800208c:	f7fe fc82 	bl	8000994 <SCPI_RegGet>
 8002090:	4603      	mov	r3, r0
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	4619      	mov	r1, r3
 8002096:	f000 fba3 	bl	80027e0 <SCPI_ResultInt32>

    /* clear register */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	2107      	movs	r1, #7
 800209e:	2200      	movs	r2, #0
 80020a0:	f7fe fcb4 	bl	8000a0c <SCPI_RegSet>

    return SCPI_RES_OK;
 80020a4:	2301      	movs	r3, #1
 80020a6:	b25b      	sxtb	r3, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <SCPI_StatusQuestionableEnableQ>:
/**
 * STATus:QUEStionable:ENABle?
 * @param context
 * @return
 */
scpi_result_t SCPI_StatusQuestionableEnableQ(scpi_t * context) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
    /* return value */
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_QUESE));
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	2108      	movs	r1, #8
 80020bc:	f7fe fc6a 	bl	8000994 <SCPI_RegGet>
 80020c0:	4603      	mov	r3, r0
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4619      	mov	r1, r3
 80020c6:	f000 fb8b 	bl	80027e0 <SCPI_ResultInt32>

    return SCPI_RES_OK;
 80020ca:	2301      	movs	r3, #1
 80020cc:	b25b      	sxtb	r3, r3
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop

080020d8 <SCPI_StatusQuestionableEnable>:
/**
 * STATus:QUEStionable:ENABle
 * @param context
 * @return
 */
scpi_result_t SCPI_StatusQuestionableEnable(scpi_t * context) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
    int32_t new_QUESE;
    if (SCPI_ParamInt32(context, &new_QUESE, TRUE)) {
 80020e0:	f107 030c 	add.w	r3, r7, #12
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	4619      	mov	r1, r3
 80020e8:	2201      	movs	r2, #1
 80020ea:	f000 fe4f 	bl	8002d8c <SCPI_ParamInt32>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <SCPI_StatusQuestionableEnable+0x2a>
        SCPI_RegSet(context, SCPI_REG_QUESE, (scpi_reg_val_t) new_QUESE);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	2108      	movs	r1, #8
 80020fc:	461a      	mov	r2, r3
 80020fe:	f7fe fc85 	bl	8000a0c <SCPI_RegSet>
    }
    return SCPI_RES_OK;
 8002102:	2301      	movs	r3, #1
 8002104:	b25b      	sxtb	r3, r3
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop

08002110 <SCPI_StatusPreset>:
/**
 * STATus:PRESet
 * @param context
 * @return
 */
scpi_result_t SCPI_StatusPreset(scpi_t * context) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    /* clear STATUS:... */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	2107      	movs	r1, #7
 800211c:	2200      	movs	r2, #0
 800211e:	f7fe fc75 	bl	8000a0c <SCPI_RegSet>
    return SCPI_RES_OK;
 8002122:	2301      	movs	r3, #1
 8002124:	b25b      	sxtb	r3, r3
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop

08002130 <writeData>:
 * @param context
 * @param data
 * @param len - length of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
    if ((len > 0) && (data != NULL)) {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <writeData+0x2a>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <writeData+0x2a>
        return context->interface->write(context, data, len);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	4798      	blx	r3
 8002156:	4603      	mov	r3, r0
 8002158:	e000      	b.n	800215c <writeData+0x2c>
    } else {
        return 0;
 800215a:	2300      	movs	r3, #0
    }
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <flushData>:
/**
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    if (context && context->interface && context->interface->flush) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00f      	beq.n	8002192 <flushData+0x2e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00b      	beq.n	8002192 <flushData+0x2e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <flushData+0x2e>
        return context->interface->flush(context);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	4798      	blx	r3
 800218e:	4603      	mov	r3, r0
 8002190:	e000      	b.n	8002194 <flushData+0x30>
    } else {
        return SCPI_RES_OK;
 8002192:	2301      	movs	r3, #1
    }
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <writeDelimiter>:
/**
 * Write result delimiter to output
 * @param context
 * @return number of bytes written
 */
static size_t writeDelimiter(scpi_t * context) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	dd06      	ble.n	80021ba <writeDelimiter+0x1e>
        return writeData(context, ",", 1);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4905      	ldr	r1, [pc, #20]	; (80021c4 <writeDelimiter+0x28>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	f7ff ffbd 	bl	8002130 <writeData>
 80021b6:	4603      	mov	r3, r0
 80021b8:	e000      	b.n	80021bc <writeDelimiter+0x20>
    } else {
        return 0;
 80021ba:	2300      	movs	r3, #0
    }
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	08013fc4 	.word	0x08013fc4

080021c8 <writeNewLine>:
/**
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    if (!context->first_output) {
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021d6:	f083 0301 	eor.w	r3, r3, #1
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <writeNewLine+0x2e>
        size_t len;
#ifndef SCPI_LINE_ENDING
#error no termination character defined
#endif
        len = writeData(context, SCPI_LINE_ENDING, strlen(SCPI_LINE_ENDING));
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	4907      	ldr	r1, [pc, #28]	; (8002200 <writeNewLine+0x38>)
 80021e4:	2202      	movs	r2, #2
 80021e6:	f7ff ffa3 	bl	8002130 <writeData>
 80021ea:	60f8      	str	r0, [r7, #12]
        flushData(context);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ffb9 	bl	8002164 <flushData>
        return len;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	e000      	b.n	80021f8 <writeNewLine+0x30>
    } else {
        return 0;
 80021f6:	2300      	movs	r3, #0
    }
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	08013fc8 	.word	0x08013fc8

08002204 <writeSemicolon>:
/**
 * Conditionaly write ";"
 * @param context
 * @return number of characters written
 */
static size_t writeSemicolon(scpi_t * context) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	2b00      	cmp	r3, #0
 8002212:	dd06      	ble.n	8002222 <writeSemicolon+0x1e>
        return writeData(context, ";", 1);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	4905      	ldr	r1, [pc, #20]	; (800222c <writeSemicolon+0x28>)
 8002218:	2201      	movs	r2, #1
 800221a:	f7ff ff89 	bl	8002130 <writeData>
 800221e:	4603      	mov	r3, r0
 8002220:	e000      	b.n	8002224 <writeSemicolon+0x20>
    } else {
        return 0;
 8002222:	2300      	movs	r3, #0
    }
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	08013fcc 	.word	0x08013fcc

08002230 <processCommand>:

/**
 * Process command
 * @param context
 */
static scpi_bool_t processCommand(scpi_t * context) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
    const scpi_command_t * cmd = context->param_list.cmd;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	613b      	str	r3, [r7, #16]
    lex_state_t * state = &context->param_list.lex_state;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3314      	adds	r3, #20
 8002242:	60fb      	str	r3, [r7, #12]
    scpi_bool_t result = TRUE;
 8002244:	2301      	movs	r3, #1
 8002246:	75fb      	strb	r3, [r7, #23]
    scpi_bool_t is_query = context->param_list.cmd_raw.data[context->param_list.cmd_raw.length - 1] == '?';
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	3b01      	subs	r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b3f      	cmp	r3, #63	; 0x3f
 8002258:	bf0c      	ite	eq
 800225a:	2301      	moveq	r3, #1
 800225c:	2300      	movne	r3, #0
 800225e:	72fb      	strb	r3, [r7, #11]

    /* conditionally write ; */
    if(!context->first_output && is_query) {
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002266:	f083 0301 	eor.w	r3, r3, #1
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <processCommand+0x50>
 8002270:	7afb      	ldrb	r3, [r7, #11]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <processCommand+0x50>
        writeData(context, ";", 1);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	492e      	ldr	r1, [pc, #184]	; (8002334 <processCommand+0x104>)
 800227a:	2201      	movs	r2, #1
 800227c:	f7ff ff58 	bl	8002130 <writeData>
    }

    context->cmd_error = FALSE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    context->output_count = 0;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
    context->input_count = 0;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	635a      	str	r2, [r3, #52]	; 0x34
    context->arbitrary_remaining = 0;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d02a      	beq.n	80022fa <processCommand+0xca>
        if ((cmd->callback(context) != SCPI_RES_OK)) {
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d00f      	beq.n	80022d2 <processCommand+0xa2>
            if (!context->cmd_error) {
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022b8:	f083 0301 	eor.w	r3, r3, #1
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <processCommand+0x9c>
                SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 80022c8:	f7fe f9b4 	bl	8000634 <SCPI_ErrorPush>
            }
            result = FALSE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	75fb      	strb	r3, [r7, #23]
 80022d0:	e013      	b.n	80022fa <processCommand+0xca>
        } else {
            if (context->cmd_error) {
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <processCommand+0xb2>
                result = FALSE;
 80022dc:	2300      	movs	r3, #0
 80022de:	75fb      	strb	r3, [r7, #23]
 80022e0:	e00b      	b.n	80022fa <processCommand+0xca>
            } else {
                if(context->first_output && is_query) {
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <processCommand+0xca>
 80022ec:	7afb      	ldrb	r3, [r7, #11]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <processCommand+0xca>
                    context->first_output = FALSE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
        }
    }

    /* set error if command callback did not read all parameters */
    if (state->pos < (state->buffer + state->len) && !context->cmd_error) {
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68f9      	ldr	r1, [r7, #12]
 8002304:	6889      	ldr	r1, [r1, #8]
 8002306:	440b      	add	r3, r1
 8002308:	429a      	cmp	r2, r3
 800230a:	d20e      	bcs.n	800232a <processCommand+0xfa>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002312:	f083 0301 	eor.w	r3, r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d006      	beq.n	800232a <processCommand+0xfa>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f06f 016b 	mvn.w	r1, #107	; 0x6b
 8002322:	f7fe f987 	bl	8000634 <SCPI_ErrorPush>
        result = FALSE;
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]
    }

    return result;
 800232a:	7dfb      	ldrb	r3, [r7, #23]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	08013fcc 	.word	0x08013fcc

08002338 <findCommandHeader>:
/**
 * Cycle all patterns and search matching pattern. Execute command callback.
 * @param context
 * @result TRUE if context->paramlist is filled with correct values
 */
static scpi_bool_t findCommandHeader(scpi_t * context, const char * header, int len) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af02      	add	r7, sp, #8
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	e01f      	b.n	800238a <findCommandHeader+0x52>
        cmd = &context->cmdlist[i];
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6819      	ldr	r1, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	613b      	str	r3, [r7, #16]
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	6819      	ldr	r1, [r3, #0]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	2300      	movs	r3, #0
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2300      	movs	r3, #0
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	4608      	mov	r0, r1
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	2300      	movs	r3, #0
 8002370:	f001 f97e 	bl	8003670 <matchCommand>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <findCommandHeader+0x4c>
            context->param_list.cmd = cmd;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	611a      	str	r2, [r3, #16]
            return TRUE;
 8002380:	2301      	movs	r3, #1
 8002382:	e00e      	b.n	80023a2 <findCommandHeader+0x6a>
 */
static scpi_bool_t findCommandHeader(scpi_t * context, const char * header, int len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	3301      	adds	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6819      	ldr	r1, [r3, #0]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1d4      	bne.n	800234a <findCommandHeader+0x12>
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
            context->param_list.cmd = cmd;
            return TRUE;
        }
    }
    return FALSE;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop

080023ac <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return FALSE if there was some error during evaluation of commands
 */
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08c      	sub	sp, #48	; 0x30
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = TRUE;
 80023b8:	2301      	movs	r3, #1
 80023ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    scpi_parser_state_t * state;
    int r;
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
 80023be:	231a      	movs	r3, #26
 80023c0:	753b      	strb	r3, [r7, #20]
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]

    if (context == NULL) {
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <SCPI_Parse+0x28>
        return FALSE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	e096      	b.n	8002502 <SCPI_Parse+0x156>
    }

    state = &context->parser_state;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	3364      	adds	r3, #100	; 0x64
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    context->output_count = 0;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
    context->first_output = TRUE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (1) {
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 80023e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	f000 fe61 	bl	80030b4 <scpiParser_detectProgramMessageUnit>
 80023f2:	6238      	str	r0, [r7, #32]

        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b19      	cmp	r3, #25
 80023fa:	d108      	bne.n	800240e <SCPI_Parse+0x62>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_CHARACTER);
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f06f 0164 	mvn.w	r1, #100	; 0x64
 8002402:	f7fe f917 	bl	8000634 <SCPI_ErrorPush>
            result = FALSE;
 8002406:	2300      	movs	r3, #0
 8002408:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800240c:	e064      	b.n	80024d8 <SCPI_Parse+0x12c>
        } else if (state->programHeader.len > 0) {
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	dd60      	ble.n	80024d8 <SCPI_Parse+0x12c>

            composeCompoundCommand(&cmd_prev, &state->programHeader);
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	f107 0214 	add.w	r2, r7, #20
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	f001 faee 	bl	8003a00 <composeCompoundCommand>

            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	4611      	mov	r1, r2
 8002430:	461a      	mov	r2, r3
 8002432:	f7ff ff81 	bl	8002338 <findCommandHeader>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d02c      	beq.n	8002496 <SCPI_Parse+0xea>

                context->param_list.lex_state.buffer = state->programData.ptr;
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	615a      	str	r2, [r3, #20]
                context->param_list.lex_state.pos = context->param_list.lex_state.buffer;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	619a      	str	r2, [r3, #24]
                context->param_list.lex_state.len = state->programData.len;
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	61da      	str	r2, [r3, #28]
                context->param_list.cmd_raw.data = state->programHeader.ptr;
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	629a      	str	r2, [r3, #40]	; 0x28
                context->param_list.cmd_raw.position = 0;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	625a      	str	r2, [r3, #36]	; 0x24
                context->param_list.cmd_raw.length = state->programHeader.len;
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	461a      	mov	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	621a      	str	r2, [r3, #32]

                result &= processCommand(context);
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f7ff fedf 	bl	8002230 <processCommand>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf14      	ite	ne
 8002480:	2301      	movne	r3, #1
 8002482:	2300      	moveq	r3, #0
 8002484:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                cmd_prev = state->programHeader;
 8002488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002490:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002494:	e020      	b.n	80024d8 <SCPI_Parse+0x12c>
            } else {
                /* place undefined header with error */
                /* calculate length of errorenous header and trim \r\n */
                size_t r2 = r;
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	62bb      	str	r3, [r7, #40]	; 0x28
                while (r2 > 0 && (data[r2 - 1] == '\r' || data[r2 - 1] == '\n')) r2--;
 800249a:	e002      	b.n	80024a2 <SCPI_Parse+0xf6>
 800249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249e:	3b01      	subs	r3, #1
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00d      	beq.n	80024c4 <SCPI_Parse+0x118>
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	3b01      	subs	r3, #1
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	4413      	add	r3, r2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b0d      	cmp	r3, #13
 80024b4:	d0f2      	beq.n	800249c <SCPI_Parse+0xf0>
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	3b01      	subs	r3, #1
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	4413      	add	r3, r2
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b0a      	cmp	r3, #10
 80024c2:	d0eb      	beq.n	800249c <SCPI_Parse+0xf0>
                SCPI_ErrorPushEx(context, SCPI_ERROR_UNDEFINED_HEADER, data, r2);
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f06f 0170 	mvn.w	r1, #112	; 0x70
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ce:	f7fe f83d 	bl	800054c <SCPI_ErrorPushEx>
                result = FALSE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
        }

        if (r < len) {
 80024d8:	6a3a      	ldr	r2, [r7, #32]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	da08      	bge.n	80024f2 <SCPI_Parse+0x146>
            data += r;
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	4413      	add	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
            len -= r;
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	e006      	b.n	8002500 <SCPI_Parse+0x154>
        } else {
            break;
 80024f2:	bf00      	nop
        }

    }

    /* conditionally write new line */
    writeNewLine(context);
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f7ff fe67 	bl	80021c8 <writeNewLine>

    return result;
 80024fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024fe:	e000      	b.n	8002502 <SCPI_Parse+0x156>
            len -= r;
        } else {
            break;
        }

    }
 8002500:	e772      	b.n	80023e8 <SCPI_Parse+0x3c>

    /* conditionally write new line */
    writeNewLine(context);

    return result;
}
 8002502:	4618      	mov	r0, r3
 8002504:	3730      	adds	r7, #48	; 0x30
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop

0800250c <SCPI_Init>:
        const scpi_command_t * commands,
        scpi_interface_t * interface,
        const scpi_unit_def_t * units,
        const char * idn1, const char * idn2, const char * idn3, const char * idn4,
        char * input_buffer, size_t input_buffer_length,
        scpi_error_t * error_queue_data, int16_t error_queue_size) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
    memset(context, 0, sizeof (*context));
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	2100      	movs	r1, #0
 800251e:	2298      	movs	r2, #152	; 0x98
 8002520:	f00c ff32 	bl	800f388 <memset>
    context->cmdlist = commands;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	601a      	str	r2, [r3, #0]
    context->interface = interface;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	62da      	str	r2, [r3, #44]	; 0x2c
    context->units = units;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	65da      	str	r2, [r3, #92]	; 0x5c
    context->idn[0] = idn1;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    context->idn[1] = idn2;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    context->idn[2] = idn3;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a3a      	ldr	r2, [r7, #32]
 800254a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    context->idn[3] = idn4;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002552:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    context->buffer.data = input_buffer;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800255a:	60da      	str	r2, [r3, #12]
    context->buffer.length = input_buffer_length;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002560:	605a      	str	r2, [r3, #4]
    context->buffer.position = 0;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 8002568:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002570:	461a      	mov	r2, r3
 8002572:	f7fd ff0d 	bl	8000390 <SCPI_ErrorInit>
}
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return
 */
scpi_bool_t SCPI_Input(scpi_t * context, const char * data, int len) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = TRUE;
 8002588:	2301      	movs	r3, #1
 800258a:	77fb      	strb	r3, [r7, #31]
    size_t totcmdlen = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	61bb      	str	r3, [r7, #24]
    int cmdlen = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

    if (len == 0) {
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d115      	bne.n	80025c6 <SCPI_Input+0x4a>
        context->buffer.data[context->buffer.position] = 0;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4413      	add	r3, r2
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	f7ff fef9 	bl	80023ac <SCPI_Parse>
 80025ba:	4603      	mov	r3, r0
 80025bc:	77fb      	strb	r3, [r7, #31]
        context->buffer.position = 0;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	e07c      	b.n	80026c0 <SCPI_Input+0x144>
    } else {
        int buffer_free;

        buffer_free = context->buffer.length - context->buffer.position;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	613b      	str	r3, [r7, #16]
        if (len > (buffer_free - 1)) {
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1e5a      	subs	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	429a      	cmp	r2, r3
 80025da:	da10      	bge.n	80025fe <SCPI_Input+0x82>
            /* Input buffer overrun - invalidate buffer */
            context->buffer.position = 0;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
            context->buffer.data[context->buffer.position] = 0;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	4413      	add	r3, r2
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f46f 71b5 	mvn.w	r1, #362	; 0x16a
 80025f6:	f7fe f81d 	bl	8000634 <SCPI_ErrorPush>
            return FALSE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e061      	b.n	80026c2 <SCPI_Input+0x146>
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	441a      	add	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4610      	mov	r0, r2
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	461a      	mov	r2, r3
 8002610:	f003 fb4c 	bl	8005cac <memcpy>
        context->buffer.position += len;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	441a      	add	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	609a      	str	r2, [r3, #8]
        context->buffer.data[context->buffer.position] = 0;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4413      	add	r3, r2
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]


        while (1) {
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	18d1      	adds	r1, r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	461a      	mov	r2, r3
 8002646:	f000 fd35 	bl	80030b4 <scpiParser_detectProgramMessageUnit>
 800264a:	6178      	str	r0, [r7, #20]
            totcmdlen += cmdlen;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4413      	add	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]

            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800265a:	2b01      	cmp	r3, #1
 800265c:	d11f      	bne.n	800269e <SCPI_Input+0x122>
                result = SCPI_Parse(context, context->buffer.data, totcmdlen);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	4611      	mov	r1, r2
 8002668:	461a      	mov	r2, r3
 800266a:	f7ff fe9f 	bl	80023ac <SCPI_Parse>
 800266e:	4603      	mov	r3, r0
 8002670:	77fb      	strb	r3, [r7, #31]
                memmove(context->buffer.data, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	68d8      	ldr	r0, [r3, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	18d1      	adds	r1, r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	461a      	mov	r2, r3
 8002688:	f00c fe1a 	bl	800f2c0 <memmove>
                context->buffer.position -= totcmdlen;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	1ad2      	subs	r2, r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	609a      	str	r2, [r3, #8]
                totcmdlen = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	e00f      	b.n	80026be <SCPI_Input+0x142>
            } else {
                if (context->parser_state.programHeader.type == SCPI_TOKEN_UNKNOWN
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80026a4:	2b1a      	cmp	r3, #26
 80026a6:	d104      	bne.n	80026b2 <SCPI_Input+0x136>
                        && context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NONE) break;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d006      	beq.n	80026c0 <SCPI_Input+0x144>
                if (totcmdlen >= context->buffer.position) break;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d800      	bhi.n	80026be <SCPI_Input+0x142>
 80026bc:	e000      	b.n	80026c0 <SCPI_Input+0x144>
            }
        }
 80026be:	e7b6      	b.n	800262e <SCPI_Input+0xb2>
    }

    return result;
 80026c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop

080026cc <SCPI_ResultCharacters>:
 * Write raw string result to the output
 * @param context
 * @param data
 * @return
 */
size_t SCPI_ResultCharacters(scpi_t * context, const char * data, size_t len) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
    size_t result = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
    result += writeDelimiter(context);
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f7ff fd5d 	bl	800219c <writeDelimiter>
 80026e2:	4602      	mov	r2, r0
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	4413      	add	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]
    result += writeData(context, data, len);
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	f7ff fd1e 	bl	8002130 <writeData>
 80026f4:	4602      	mov	r2, r0
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	4413      	add	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
    context->output_count++;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 8002706:	697b      	ldr	r3, [r7, #20]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <getBasePrefix>:
/**
 * Return prefix of nondecimal base
 * @param base
 * @return
 */
static const char * getBasePrefix(int8_t base) {
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
    switch (base) {
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	2b08      	cmp	r3, #8
 8002720:	d005      	beq.n	800272e <getBasePrefix+0x1e>
 8002722:	2b10      	cmp	r3, #16
 8002724:	d005      	beq.n	8002732 <getBasePrefix+0x22>
 8002726:	2b02      	cmp	r3, #2
 8002728:	d105      	bne.n	8002736 <getBasePrefix+0x26>
        case 2: return "#B";
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <getBasePrefix+0x34>)
 800272c:	e004      	b.n	8002738 <getBasePrefix+0x28>
        case 8: return "#Q";
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <getBasePrefix+0x38>)
 8002730:	e002      	b.n	8002738 <getBasePrefix+0x28>
        case 16: return "#H";
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <getBasePrefix+0x3c>)
 8002734:	e000      	b.n	8002738 <getBasePrefix+0x28>
        default: return NULL;
 8002736:	2300      	movs	r3, #0
    }
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	08013fd0 	.word	0x08013fd0
 8002748:	08013fd4 	.word	0x08013fd4
 800274c:	08013fd8 	.word	0x08013fd8

08002750 <resultUInt32BaseSign>:
 * @param val
 * @param base
 * @param sign
 * @return
 */
static size_t resultUInt32BaseSign(scpi_t * context, uint32_t val, int8_t base, scpi_bool_t sign) {
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b093      	sub	sp, #76	; 0x4c
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	4611      	mov	r1, r2
 800275c:	461a      	mov	r2, r3
 800275e:	460b      	mov	r3, r1
 8002760:	71fb      	strb	r3, [r7, #7]
 8002762:	4613      	mov	r3, r2
 8002764:	71bb      	strb	r3, [r7, #6]
    char buffer[32 + 1];
    const char * basePrefix;
    size_t result = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t len;

    len = UInt32ToStrBaseSign(val, buffer, sizeof (buffer), base, sign);
 800276a:	f107 0210 	add.w	r2, r7, #16
 800276e:	f997 4007 	ldrsb.w	r4, [r7, #7]
 8002772:	79bb      	ldrb	r3, [r7, #6]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	68b8      	ldr	r0, [r7, #8]
 8002778:	4611      	mov	r1, r2
 800277a:	2221      	movs	r2, #33	; 0x21
 800277c:	4623      	mov	r3, r4
 800277e:	f000 fd69 	bl	8003254 <UInt32ToStrBaseSign>
 8002782:	63b8      	str	r0, [r7, #56]	; 0x38
    basePrefix = getBasePrefix(base);
 8002784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ffc1 	bl	8002710 <getBasePrefix>
 800278e:	6378      	str	r0, [r7, #52]	; 0x34

    result += writeDelimiter(context);
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f7ff fd03 	bl	800219c <writeDelimiter>
 8002796:	4602      	mov	r2, r0
 8002798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279a:	4413      	add	r3, r2
 800279c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (basePrefix != NULL) {
 800279e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <resultUInt32BaseSign+0x66>
        result += writeData(context, basePrefix, 2);
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027a8:	2202      	movs	r2, #2
 80027aa:	f7ff fcc1 	bl	8002130 <writeData>
 80027ae:	4602      	mov	r2, r0
 80027b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b2:	4413      	add	r3, r2
 80027b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    result += writeData(context, buffer, len);
 80027b6:	f107 0310 	add.w	r3, r7, #16
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	4619      	mov	r1, r3
 80027be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027c0:	f7ff fcb6 	bl	8002130 <writeData>
 80027c4:	4602      	mov	r2, r0
 80027c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c8:	4413      	add	r3, r2
 80027ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    context->output_count++;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 80027d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3744      	adds	r7, #68	; 0x44
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd90      	pop	{r4, r7, pc}

080027e0 <SCPI_ResultInt32>:
 * Write signed 32 bit integer value to the result
 * @param context
 * @param val
 * @return
 */
size_t SCPI_ResultInt32(scpi_t * context, int32_t val) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
    return resultUInt32BaseSign(context, val, 10, TRUE);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4619      	mov	r1, r3
 80027f0:	220a      	movs	r2, #10
 80027f2:	2301      	movs	r3, #1
 80027f4:	f7ff ffac 	bl	8002750 <resultUInt32BaseSign>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop

08002804 <SCPI_ResultError>:
 *
 * @param context
 * @param error
 * @return
 */
size_t SCPI_ResultError(scpi_t * context, scpi_error_t * error) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
    size_t result = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
    size_t outputlimit = SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH;
 8002812:	23ff      	movs	r3, #255	; 0xff
 8002814:	623b      	str	r3, [r7, #32]
    size_t step = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]

    const char * data[SCPIDEFINE_DESCRIPTION_MAX_PARTS];
    size_t len[SCPIDEFINE_DESCRIPTION_MAX_PARTS];
    size_t i;

    data[0] = SCPI_ErrorTranslate(error->error_code);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	b21b      	sxth	r3, r3
 8002820:	4618      	mov	r0, r3
 8002822:	f7fd ff19 	bl	8000658 <SCPI_ErrorTranslate>
 8002826:	4603      	mov	r3, r0
 8002828:	613b      	str	r3, [r7, #16]
    len[0] = strlen(data[0]);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4618      	mov	r0, r3
 800282e:	f00c fe63 	bl	800f4f8 <strlen>
 8002832:	4603      	mov	r3, r0
 8002834:	60fb      	str	r3, [r7, #12]
#else
    SCPIDEFINE_get_parts(&context->error_info_heap, data[1], &len[1], &data[2], &len[2]);
#endif
#endif

    result += SCPI_ResultInt32(context, error->error_code);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	b21b      	sxth	r3, r3
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	4619      	mov	r1, r3
 8002840:	f7ff ffce 	bl	80027e0 <SCPI_ResultInt32>
 8002844:	4602      	mov	r2, r0
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	4413      	add	r3, r2
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
    result += writeDelimiter(context);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff fca5 	bl	800219c <writeDelimiter>
 8002852:	4602      	mov	r2, r0
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	4413      	add	r3, r2
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
    result += writeData(context, "\"", 1);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	4977      	ldr	r1, [pc, #476]	; (8002a3c <SCPI_ResultError+0x238>)
 800285e:	2201      	movs	r2, #1
 8002860:	f7ff fc66 	bl	8002130 <writeData>
 8002864:	4602      	mov	r2, r0
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	4413      	add	r3, r2
 800286a:	627b      	str	r3, [r7, #36]	; 0x24

    for (i = 0; (i < SCPIDEFINE_DESCRIPTION_MAX_PARTS) && data[i] && outputlimit; i++) {
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
 8002870:	e0c6      	b.n	8002a00 <SCPI_ResultError+0x1fc>
        if (i == 1) {
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d109      	bne.n	800288c <SCPI_ResultError+0x88>
            result += writeSemicolon(context);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fcc3 	bl	8002204 <writeSemicolon>
 800287e:	4602      	mov	r2, r0
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	4413      	add	r3, r2
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
            outputlimit -= 1;
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	3b01      	subs	r3, #1
 800288a:	623b      	str	r3, [r7, #32]
        }
        if (len[i] > outputlimit) {
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002894:	4413      	add	r3, r2
 8002896:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	429a      	cmp	r2, r3
 800289e:	d907      	bls.n	80028b0 <SCPI_ResultError+0xac>
            len[i] = outputlimit;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028a8:	4413      	add	r3, r2
 80028aa:	6a3a      	ldr	r2, [r7, #32]
 80028ac:	f843 2c1c 	str.w	r2, [r3, #-28]
        }

        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 80028b0:	e06a      	b.n	8002988 <SCPI_ResultError+0x184>
            if ((step = quote - data[i] + 1) >= outputlimit) {
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80028bc:	440b      	add	r3, r1
 80028be:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	3301      	adds	r3, #1
 80028c6:	61bb      	str	r3, [r7, #24]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d312      	bcc.n	80028f6 <SCPI_ResultError+0xf2>
                len[i] -= 1;
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028d8:	4413      	add	r3, r2
 80028da:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80028de:	1e5a      	subs	r2, r3, #1
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80028e8:	440b      	add	r3, r1
 80028ea:	f843 2c1c 	str.w	r2, [r3, #-28]
                outputlimit -= 1;
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	623b      	str	r3, [r7, #32]
                break;
 80028f4:	e060      	b.n	80029b8 <SCPI_ResultError+0x1b4>
            }
            result += writeData(context, data[i], step);
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028fe:	4413      	add	r3, r2
 8002900:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	4619      	mov	r1, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	f7ff fc11 	bl	8002130 <writeData>
 800290e:	4602      	mov	r2, r0
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	4413      	add	r3, r2
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
            result += writeData(context, "\"", 1);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	4948      	ldr	r1, [pc, #288]	; (8002a3c <SCPI_ResultError+0x238>)
 800291a:	2201      	movs	r2, #1
 800291c:	f7ff fc08 	bl	8002130 <writeData>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	4413      	add	r3, r2
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
            len[i] -= step;
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002930:	4413      	add	r3, r2
 8002932:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	1ad2      	subs	r2, r2, r3
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002942:	440b      	add	r3, r1
 8002944:	f843 2c1c 	str.w	r2, [r3, #-28]
            outputlimit -= step + 1;
 8002948:	6a3a      	ldr	r2, [r7, #32]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	623b      	str	r3, [r7, #32]
            data[i] = quote + 1;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800295e:	440b      	add	r3, r1
 8002960:	f843 2c18 	str.w	r2, [r3, #-24]
            if (len[i] > outputlimit) {
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800296c:	4413      	add	r3, r2
 800296e:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	429a      	cmp	r2, r3
 8002976:	d907      	bls.n	8002988 <SCPI_ResultError+0x184>
                len[i] = outputlimit;
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002980:	4413      	add	r3, r2
 8002982:	6a3a      	ldr	r2, [r7, #32]
 8002984:	f843 2c1c 	str.w	r2, [r3, #-28]
        }
        if (len[i] > outputlimit) {
            len[i] = outputlimit;
        }

        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002990:	4413      	add	r3, r2
 8002992:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800299e:	440b      	add	r3, r1
 80029a0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	4a24      	ldr	r2, [pc, #144]	; (8002a3c <SCPI_ResultError+0x238>)
 80029aa:	f000 fc23 	bl	80031f4 <strnpbrk>
 80029ae:	6178      	str	r0, [r7, #20]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f47f af7d 	bne.w	80028b2 <SCPI_ResultError+0xae>
            if (len[i] > outputlimit) {
                len[i] = outputlimit;
            }
        }

        result += writeData(context, data[i], len[i]);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029c0:	4413      	add	r3, r2
 80029c2:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80029ce:	440b      	add	r3, r1
 80029d0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4611      	mov	r1, r2
 80029d8:	461a      	mov	r2, r3
 80029da:	f7ff fba9 	bl	8002130 <writeData>
 80029de:	4602      	mov	r2, r0
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	4413      	add	r3, r2
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
        outputlimit -= len[i];
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029ee:	4413      	add	r3, r2
 80029f0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80029f4:	6a3a      	ldr	r2, [r7, #32]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	623b      	str	r3, [r7, #32]

    result += SCPI_ResultInt32(context, error->error_code);
    result += writeDelimiter(context);
    result += writeData(context, "\"", 1);

    for (i = 0; (i < SCPIDEFINE_DESCRIPTION_MAX_PARTS) && data[i] && outputlimit; i++) {
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3301      	adds	r3, #1
 80029fe:	61fb      	str	r3, [r7, #28]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10c      	bne.n	8002a20 <SCPI_ResultError+0x21c>
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a0e:	4413      	add	r3, r2
 8002a10:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <SCPI_ResultError+0x21c>
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f47f af29 	bne.w	8002872 <SCPI_ResultError+0x6e>
        }

        result += writeData(context, data[i], len[i]);
        outputlimit -= len[i];
    }
    result += writeData(context, "\"", 1);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4906      	ldr	r1, [pc, #24]	; (8002a3c <SCPI_ResultError+0x238>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	f7ff fb83 	bl	8002130 <writeData>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	4413      	add	r3, r2
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24

    return result;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3728      	adds	r7, #40	; 0x28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	08013fdc 	.word	0x08013fdc

08002a40 <SCPI_ResultBool>:
 * Write boolean value to the result
 * @param context
 * @param val
 * @return
 */
size_t SCPI_ResultBool(scpi_t * context, scpi_bool_t val) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	70fb      	strb	r3, [r7, #3]
    return resultUInt32BaseSign(context, val ? 1 : 0, 10, FALSE);
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4619      	mov	r1, r3
 8002a52:	220a      	movs	r2, #10
 8002a54:	2300      	movs	r3, #0
 8002a56:	f7ff fe7b 	bl	8002750 <resultUInt32BaseSign>
 8002a5a:	4603      	mov	r3, r0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <invalidateToken>:
/**
 * Invalidate token
 * @param token
 * @param ptr
 */
static void invalidateToken(scpi_token_t * token, char * ptr) {
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
    token->len = 0;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
    token->ptr = ptr;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	605a      	str	r2, [r3, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	221a      	movs	r2, #26
 8002a7e:	701a      	strb	r2, [r3, #0]
}
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop

08002a8c <SCPI_Parameter>:
 * @param context
 * @param parameter
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_Parameter(scpi_t * context, scpi_parameter_t * parameter, scpi_bool_t mandatory) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	71fb      	strb	r3, [r7, #7]
    lex_state_t * state;

    if (!parameter) {
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <SCPI_Parameter+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	4939      	ldr	r1, [pc, #228]	; (8002b88 <SCPI_Parameter+0xfc>)
 8002aa4:	f7fd fdc6 	bl	8000634 <SCPI_ErrorPush>
        return FALSE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e069      	b.n	8002b80 <SCPI_Parameter+0xf4>
    }

    invalidateToken(parameter, NULL);
 8002aac:	68b8      	ldr	r0, [r7, #8]
 8002aae:	2100      	movs	r1, #0
 8002ab0:	f7ff ffd8 	bl	8002a64 <invalidateToken>

    state = &context->param_list.lex_state;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3314      	adds	r3, #20
 8002ab8:	617b      	str	r3, [r7, #20]

    if (state->pos >= (state->buffer + state->len)) {
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6979      	ldr	r1, [r7, #20]
 8002ac4:	6889      	ldr	r1, [r1, #8]
 8002ac6:	440b      	add	r3, r1
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d30d      	bcc.n	8002ae8 <SCPI_Parameter+0x5c>
        if (mandatory) {
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <SCPI_Parameter+0x52>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f06f 016c 	mvn.w	r1, #108	; 0x6c
 8002ad8:	f7fd fdac 	bl	8000634 <SCPI_ErrorPush>
 8002adc:	e002      	b.n	8002ae4 <SCPI_Parameter+0x58>
        } else {
            parameter->type = SCPI_TOKEN_PROGRAM_MNEMONIC; /* TODO: select something different */
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2209      	movs	r2, #9
 8002ae2:	701a      	strb	r2, [r3, #0]
        }
        return FALSE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e04b      	b.n	8002b80 <SCPI_Parameter+0xf4>
    }
    if (context->input_count != 0) {
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d012      	beq.n	8002b16 <SCPI_Parameter+0x8a>
        scpiLex_Comma(state, parameter);
 8002af0:	6978      	ldr	r0, [r7, #20]
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	f7ff fa10 	bl	8001f18 <scpiLex_Comma>
        if (parameter->type != SCPI_TOKEN_COMMA) {
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <SCPI_Parameter+0x8a>
            invalidateToken(parameter, NULL);
 8002b00:	68b8      	ldr	r0, [r7, #8]
 8002b02:	2100      	movs	r1, #0
 8002b04:	f7ff ffae 	bl	8002a64 <invalidateToken>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f06f 0166 	mvn.w	r1, #102	; 0x66
 8002b0e:	f7fd fd91 	bl	8000634 <SCPI_ErrorPush>
            return FALSE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e034      	b.n	8002b80 <SCPI_Parameter+0xf4>
        }
    }

    context->input_count++;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	635a      	str	r2, [r3, #52]	; 0x34

    scpiParser_parseProgramData(&context->param_list.lex_state, parameter);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	3314      	adds	r3, #20
 8002b24:	4618      	mov	r0, r3
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	f000 f9fe 	bl	8002f28 <scpiParser_parseProgramData>

    switch (parameter->type) {
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	3b06      	subs	r3, #6
 8002b32:	2b0a      	cmp	r3, #10
 8002b34:	d81a      	bhi.n	8002b6c <SCPI_Parameter+0xe0>
 8002b36:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <SCPI_Parameter+0xb0>)
 8002b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3c:	08002b69 	.word	0x08002b69
 8002b40:	08002b69 	.word	0x08002b69
 8002b44:	08002b69 	.word	0x08002b69
 8002b48:	08002b69 	.word	0x08002b69
 8002b4c:	08002b69 	.word	0x08002b69
 8002b50:	08002b69 	.word	0x08002b69
 8002b54:	08002b6d 	.word	0x08002b6d
 8002b58:	08002b69 	.word	0x08002b69
 8002b5c:	08002b69 	.word	0x08002b69
 8002b60:	08002b69 	.word	0x08002b69
 8002b64:	08002b69 	.word	0x08002b69
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
        case SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA:
        case SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA:
        case SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA:
        case SCPI_TOKEN_PROGRAM_EXPRESSION:
            return TRUE;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e009      	b.n	8002b80 <SCPI_Parameter+0xf4>
        default:
            invalidateToken(parameter, NULL);
 8002b6c:	68b8      	ldr	r0, [r7, #8]
 8002b6e:	2100      	movs	r1, #0
 8002b70:	f7ff ff78 	bl	8002a64 <invalidateToken>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f06f 0196 	mvn.w	r1, #150	; 0x96
 8002b7a:	f7fd fd5b 	bl	8000634 <SCPI_ErrorPush>
            return FALSE;
 8002b7e:	2300      	movs	r3, #0
    }
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	fffffeca 	.word	0xfffffeca

08002b8c <SCPI_ParamIsNumber>:
 * Detect if parameter is number
 * @param parameter
 * @param suffixAllowed
 * @return
 */
scpi_bool_t SCPI_ParamIsNumber(scpi_parameter_t * parameter, scpi_bool_t suffixAllowed) {
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	70fb      	strb	r3, [r7, #3]
    switch (parameter->type) {
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	3b06      	subs	r3, #6
 8002b9e:	2b05      	cmp	r3, #5
 8002ba0:	d812      	bhi.n	8002bc8 <SCPI_ParamIsNumber+0x3c>
 8002ba2:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <SCPI_ParamIsNumber+0x1c>)
 8002ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba8:	08002bc1 	.word	0x08002bc1
 8002bac:	08002bc1 	.word	0x08002bc1
 8002bb0:	08002bc1 	.word	0x08002bc1
 8002bb4:	08002bc9 	.word	0x08002bc9
 8002bb8:	08002bc1 	.word	0x08002bc1
 8002bbc:	08002bc5 	.word	0x08002bc5
        case SCPI_TOKEN_HEXNUM:
        case SCPI_TOKEN_OCTNUM:
        case SCPI_TOKEN_BINNUM:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
            return TRUE;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e002      	b.n	8002bca <SCPI_ParamIsNumber+0x3e>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            return suffixAllowed;
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	e000      	b.n	8002bca <SCPI_ParamIsNumber+0x3e>
        default:
            return FALSE;
 8002bc8:	2300      	movs	r3, #0
    }
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop

08002bd8 <ParamSignToUInt32>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt32(scpi_t * context, scpi_parameter_t * parameter, uint32_t * value, scpi_bool_t sign) {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	70fb      	strb	r3, [r7, #3]

    if (!value) {
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d105      	bne.n	8002bf8 <ParamSignToUInt32+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	4933      	ldr	r1, [pc, #204]	; (8002cbc <ParamSignToUInt32+0xe4>)
 8002bf0:	f7fd fd20 	bl	8000634 <SCPI_ErrorPush>
        return FALSE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e05d      	b.n	8002cb4 <ParamSignToUInt32+0xdc>
    }

    switch (parameter->type) {
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	3b06      	subs	r3, #6
 8002bfe:	2b05      	cmp	r3, #5
 8002c00:	d857      	bhi.n	8002cb2 <ParamSignToUInt32+0xda>
 8002c02:	a201      	add	r2, pc, #4	; (adr r2, 8002c08 <ParamSignToUInt32+0x30>)
 8002c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c08:	08002c21 	.word	0x08002c21
 8002c0c:	08002c3d 	.word	0x08002c3d
 8002c10:	08002c59 	.word	0x08002c59
 8002c14:	08002cb3 	.word	0x08002cb3
 8002c18:	08002c75 	.word	0x08002c75
 8002c1c:	08002c75 	.word	0x08002c75
        case SCPI_TOKEN_HEXNUM:
            return strBaseToUInt32(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4618      	mov	r0, r3
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	2210      	movs	r2, #16
 8002c2a:	f000 fbcf 	bl	80033cc <strBaseToUInt32>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf14      	ite	ne
 8002c34:	2301      	movne	r3, #1
 8002c36:	2300      	moveq	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	e03b      	b.n	8002cb4 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_OCTNUM:
            return strBaseToUInt32(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4618      	mov	r0, r3
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	2208      	movs	r2, #8
 8002c46:	f000 fbc1 	bl	80033cc <strBaseToUInt32>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	e02d      	b.n	8002cb4 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_BINNUM:
            return strBaseToUInt32(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	2202      	movs	r2, #2
 8002c62:	f000 fbb3 	bl	80033cc <strBaseToUInt32>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf14      	ite	ne
 8002c6c:	2301      	movne	r3, #1
 8002c6e:	2300      	moveq	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	e01f      	b.n	8002cb4 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            if (sign) {
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00d      	beq.n	8002c96 <ParamSignToUInt32+0xbe>
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	220a      	movs	r2, #10
 8002c84:	f000 fb86 	bl	8003394 <strBaseToInt32>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bf14      	ite	ne
 8002c8e:	2301      	movne	r3, #1
 8002c90:	2300      	moveq	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	e00e      	b.n	8002cb4 <ParamSignToUInt32+0xdc>
            } else {
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	220a      	movs	r2, #10
 8002ca0:	f000 fb94 	bl	80033cc <strBaseToUInt32>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	bf14      	ite	ne
 8002caa:	2301      	movne	r3, #1
 8002cac:	2300      	moveq	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	e000      	b.n	8002cb4 <ParamSignToUInt32+0xdc>
            }
        default:
            return FALSE;
 8002cb2:	2300      	movs	r3, #0
    }
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	fffffeca 	.word	0xfffffeca

08002cc0 <SCPI_ParamToInt32>:
 * @param context
 * @param parameter
 * @param value result
 * @return TRUE if succesful
 */
scpi_bool_t SCPI_ParamToInt32(scpi_t * context, scpi_parameter_t * parameter, int32_t * value) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
    return ParamSignToUInt32(context, parameter, (uint32_t *) value, TRUE);
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	f7ff ff80 	bl	8002bd8 <ParamSignToUInt32>
 8002cd8:	4603      	mov	r3, r0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop

08002ce4 <ParamSignUInt32>:
 * @param value
 * @param mandatory
 * @param sign
 * @return
 */
static scpi_bool_t ParamSignUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory, scpi_bool_t sign) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	71fb      	strb	r3, [r7, #7]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	71bb      	strb	r3, [r7, #6]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!value) {
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d105      	bne.n	8002d0c <ParamSignUInt32+0x28>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	4921      	ldr	r1, [pc, #132]	; (8002d88 <ParamSignUInt32+0xa4>)
 8002d04:	f7fd fc96 	bl	8000634 <SCPI_ErrorPush>
        return FALSE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e039      	b.n	8002d80 <ParamSignUInt32+0x9c>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 8002d0c:	f107 0210 	add.w	r2, r7, #16
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	4611      	mov	r1, r2
 8002d16:	461a      	mov	r2, r3
 8002d18:	f7ff feb8 	bl	8002a8c <SCPI_Parameter>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	77fb      	strb	r3, [r7, #31]
    if (result) {
 8002d20:	7ffb      	ldrb	r3, [r7, #31]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d02b      	beq.n	8002d7e <ParamSignUInt32+0x9a>
        if (SCPI_ParamIsNumber(&param, FALSE)) {
 8002d26:	f107 0310 	add.w	r3, r7, #16
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	f7ff ff2d 	bl	8002b8c <SCPI_ParamIsNumber>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <ParamSignUInt32+0x6a>
            result = ParamSignToUInt32(context, &param, value, sign);
 8002d38:	f107 0210 	add.w	r2, r7, #16
 8002d3c:	79bb      	ldrb	r3, [r7, #6]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	4611      	mov	r1, r2
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	f7ff ff48 	bl	8002bd8 <ParamSignToUInt32>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	77fb      	strb	r3, [r7, #31]
 8002d4c:	e017      	b.n	8002d7e <ParamSignUInt32+0x9a>
        } else if (SCPI_ParamIsNumber(&param, TRUE)) {
 8002d4e:	f107 0310 	add.w	r3, r7, #16
 8002d52:	4618      	mov	r0, r3
 8002d54:	2101      	movs	r1, #1
 8002d56:	f7ff ff19 	bl	8002b8c <SCPI_ParamIsNumber>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <ParamSignUInt32+0x8c>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f06f 0189 	mvn.w	r1, #137	; 0x89
 8002d66:	f7fd fc65 	bl	8000634 <SCPI_ErrorPush>
            result = FALSE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	77fb      	strb	r3, [r7, #31]
 8002d6e:	e006      	b.n	8002d7e <ParamSignUInt32+0x9a>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f06f 0167 	mvn.w	r1, #103	; 0x67
 8002d76:	f7fd fc5d 	bl	8000634 <SCPI_ErrorPush>
            result = FALSE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	77fb      	strb	r3, [r7, #31]
        }
    }
    return result;
 8002d7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	fffffeca 	.word	0xfffffeca

08002d8c <SCPI_ParamInt32>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamInt32(scpi_t * context, int32_t * value, scpi_bool_t mandatory) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	4613      	mov	r3, r2
 8002d98:	71fb      	strb	r3, [r7, #7]
    return ParamSignUInt32(context, (uint32_t *) value, mandatory, TRUE);
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	461a      	mov	r2, r3
 8002da2:	2301      	movs	r3, #1
 8002da4:	f7ff ff9e 	bl	8002ce4 <ParamSignUInt32>
 8002da8:	4603      	mov	r3, r0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop

08002db4 <SCPI_ParamToChoice>:
 * @param parameter - should be PROGRAM_MNEMONIC
 * @param options - NULL terminated list of choices
 * @param value - index to options
 * @return
 */
scpi_bool_t SCPI_ParamToChoice(scpi_t * context, scpi_parameter_t * parameter, const scpi_choice_def_t * options, int32_t * value) {
 8002db4:	b5b0      	push	{r4, r5, r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
    size_t res;
    scpi_bool_t result = FALSE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	74fb      	strb	r3, [r7, #19]

    if (!options || !value) {
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <SCPI_ParamToChoice+0x1e>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <SCPI_ParamToChoice+0x2a>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	4928      	ldr	r1, [pc, #160]	; (8002e78 <SCPI_ParamToChoice+0xc4>)
 8002dd6:	f7fd fc2d 	bl	8000634 <SCPI_ErrorPush>
        return FALSE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e048      	b.n	8002e70 <SCPI_ParamToChoice+0xbc>
    }

    if (parameter->type == SCPI_TOKEN_PROGRAM_MNEMONIC) {
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b09      	cmp	r3, #9
 8002de4:	d13e      	bne.n	8002e64 <SCPI_ParamToChoice+0xb0>
        for (res = 0; options[res].name; ++res) {
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e028      	b.n	8002e3e <SCPI_ParamToChoice+0x8a>
            if (matchPattern(options[res].name, strlen(options[res].name), parameter->ptr, parameter->len, NULL)) {
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	681c      	ldr	r4, [r3, #0]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f00c fb79 	bl	800f4f8 <strlen>
 8002e06:	4601      	mov	r1, r0
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	461d      	mov	r5, r3
 8002e12:	2300      	movs	r3, #0
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	4620      	mov	r0, r4
 8002e18:	462b      	mov	r3, r5
 8002e1a:	f000 fbcd 	bl	80035b8 <matchPattern>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d009      	beq.n	8002e38 <SCPI_ParamToChoice+0x84>
                *value = options[res].tag;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	601a      	str	r2, [r3, #0]
                result = TRUE;
 8002e32:	2301      	movs	r3, #1
 8002e34:	74fb      	strb	r3, [r7, #19]
                break;
 8002e36:	e009      	b.n	8002e4c <SCPI_ParamToChoice+0x98>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
        return FALSE;
    }

    if (parameter->type == SCPI_TOKEN_PROGRAM_MNEMONIC) {
        for (res = 0; options[res].name; ++res) {
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1cf      	bne.n	8002dec <SCPI_ParamToChoice+0x38>
                result = TRUE;
                break;
            }
        }

        if (!result) {
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	f083 0301 	eor.w	r3, r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <SCPI_ParamToChoice+0xba>
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8002e5e:	f7fd fbe9 	bl	8000634 <SCPI_ErrorPush>
 8002e62:	e004      	b.n	8002e6e <SCPI_ParamToChoice+0xba>
        }
    } else {
        SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f06f 0167 	mvn.w	r1, #103	; 0x67
 8002e6a:	f7fd fbe3 	bl	8000634 <SCPI_ErrorPush>
    }

    return result;
 8002e6e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bdb0      	pop	{r4, r5, r7, pc}
 8002e78:	fffffeca 	.word	0xfffffeca

08002e7c <SCPI_ParamBool>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamBool(scpi_t * context, scpi_bool_t * value, scpi_bool_t mandatory) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	4613      	mov	r3, r2
 8002e88:	71fb      	strb	r3, [r7, #7]
    scpi_bool_t result;
    scpi_parameter_t param;
    int32_t intval;

    if (!value) {
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d105      	bne.n	8002e9c <SCPI_ParamBool+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	4923      	ldr	r1, [pc, #140]	; (8002f20 <SCPI_ParamBool+0xa4>)
 8002e94:	f7fd fbce 	bl	8000634 <SCPI_ErrorPush>
        return FALSE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e03d      	b.n	8002f18 <SCPI_ParamBool+0x9c>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 8002e9c:	f107 0218 	add.w	r2, r7, #24
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f7ff fdf0 	bl	8002a8c <SCPI_Parameter>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (result) {
 8002eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d02c      	beq.n	8002f14 <SCPI_ParamBool+0x98>
        if (param.type == SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA) {
 8002eba:	7e3b      	ldrb	r3, [r7, #24]
 8002ebc:	2b0a      	cmp	r3, #10
 8002ebe:	d111      	bne.n	8002ee4 <SCPI_ParamBool+0x68>
            SCPI_ParamToInt32(context, &param, &intval);
 8002ec0:	f107 0218 	add.w	r2, r7, #24
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f7ff fef7 	bl	8002cc0 <SCPI_ParamToInt32>
            *value = intval ? TRUE : FALSE;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	2301      	movne	r3, #1
 8002eda:	2300      	moveq	r3, #0
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e017      	b.n	8002f14 <SCPI_ParamBool+0x98>
        } else {
            result = SCPI_ParamToChoice(context, &param, scpi_bool_def, &intval);
 8002ee4:	f107 0218 	add.w	r2, r7, #24
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <SCPI_ParamBool+0xa8>)
 8002ef2:	f7ff ff5f 	bl	8002db4 <SCPI_ParamToChoice>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if (result) {
 8002efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <SCPI_ParamBool+0x98>
                *value = intval ? TRUE : FALSE;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	bf14      	ite	ne
 8002f0a:	2301      	movne	r3, #1
 8002f0c:	2300      	moveq	r3, #0
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    return result;
 8002f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3728      	adds	r7, #40	; 0x28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	fffffeca 	.word	0xfffffeca
 8002f24:	08013fe8 	.word	0x08013fe8

08002f28 <scpiParser_parseProgramData>:
 * Parse one parameter and detect type
 * @param state
 * @param token
 * @return
 */
int scpiParser_parseProgramData(lex_state_t * state, scpi_token_t * token) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
    scpi_token_t tmp;
    int result = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
    int wsLen;
    int suffixLen;
    int realLen = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	623b      	str	r3, [r7, #32]
    realLen += scpiLex_WhiteSpace(state, &tmp);
 8002f3a:	f107 030c 	add.w	r3, r7, #12
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4619      	mov	r1, r3
 8002f42:	f7fe fa5d 	bl	8001400 <scpiLex_WhiteSpace>
 8002f46:	4602      	mov	r2, r0
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	623b      	str	r3, [r7, #32]

    if (result == 0) result = scpiLex_NondecimalNumericData(state, token);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d104      	bne.n	8002f5e <scpiParser_parseProgramData+0x36>
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	6839      	ldr	r1, [r7, #0]
 8002f58:	f7fe fcde 	bl	8001918 <scpiLex_NondecimalNumericData>
 8002f5c:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_CharacterProgramData(state, token);
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d104      	bne.n	8002f6e <scpiParser_parseProgramData+0x46>
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	6839      	ldr	r1, [r7, #0]
 8002f68:	f7fe fb36 	bl	80015d8 <scpiLex_CharacterProgramData>
 8002f6c:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) {
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d126      	bne.n	8002fc2 <scpiParser_parseProgramData+0x9a>
        result = scpiLex_DecimalNumericProgramData(state, token);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	6839      	ldr	r1, [r7, #0]
 8002f78:	f7fe fbd6 	bl	8001728 <scpiLex_DecimalNumericProgramData>
 8002f7c:	6278      	str	r0, [r7, #36]	; 0x24
        if (result != 0) {
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01e      	beq.n	8002fc2 <scpiParser_parseProgramData+0x9a>
            wsLen = scpiLex_WhiteSpace(state, &tmp);
 8002f84:	f107 030c 	add.w	r3, r7, #12
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f7fe fa38 	bl	8001400 <scpiLex_WhiteSpace>
 8002f90:	61f8      	str	r0, [r7, #28]
            suffixLen = scpiLex_SuffixProgramData(state, &tmp);
 8002f92:	f107 030c 	add.w	r3, r7, #12
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f7fe fc01 	bl	80017a0 <scpiLex_SuffixProgramData>
 8002f9e:	61b8      	str	r0, [r7, #24]
            if (suffixLen > 0) {
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	dd0d      	ble.n	8002fc2 <scpiParser_parseProgramData+0x9a>
                token->len += wsLen + suffixLen;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	69f9      	ldr	r1, [r7, #28]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	440b      	add	r3, r1
 8002fb0:	441a      	add	r2, r3
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	609a      	str	r2, [r3, #8]
                token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	220b      	movs	r2, #11
 8002fba:	701a      	strb	r2, [r3, #0]
                result = token->len;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    if (result == 0) result = scpiLex_StringProgramData(state, token);
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d104      	bne.n	8002fd2 <scpiParser_parseProgramData+0xaa>
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	6839      	ldr	r1, [r7, #0]
 8002fcc:	f7fe fda2 	bl	8001b14 <scpiLex_StringProgramData>
 8002fd0:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_ArbitraryBlockProgramData(state, token);
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d104      	bne.n	8002fe2 <scpiParser_parseProgramData+0xba>
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	6839      	ldr	r1, [r7, #0]
 8002fdc:	f7fe fe46 	bl	8001c6c <scpiLex_ArbitraryBlockProgramData>
 8002fe0:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_ProgramExpression(state, token);
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d104      	bne.n	8002ff2 <scpiParser_parseProgramData+0xca>
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	6839      	ldr	r1, [r7, #0]
 8002fec:	f7fe ff40 	bl	8001e70 <scpiLex_ProgramExpression>
 8002ff0:	6278      	str	r0, [r7, #36]	; 0x24

    realLen += scpiLex_WhiteSpace(state, &tmp);
 8002ff2:	f107 030c 	add.w	r3, r7, #12
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f7fe fa01 	bl	8001400 <scpiLex_WhiteSpace>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	4413      	add	r3, r2
 8003004:	623b      	str	r3, [r7, #32]

    return result + realLen;
 8003006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	4413      	add	r3, r2
}
 800300c:	4618      	mov	r0, r3
 800300e:	3728      	adds	r7, #40	; 0x28
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <scpiParser_parseAllProgramData>:
 * @param state
 * @param token
 * @param numberOfParameters
 * @return
 */
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]

    int result;
    scpi_token_t tmp;
    int paramCount = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	623b      	str	r3, [r7, #32]

    token->len = -1;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f04f 32ff 	mov.w	r2, #4294967295
 800302a:	609a      	str	r2, [r3, #8]
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2218      	movs	r2, #24
 8003030:	701a      	strb	r2, [r3, #0]
    token->ptr = state->pos;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	605a      	str	r2, [r3, #4]


    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 800303a:	2301      	movs	r3, #1
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
 800303e:	e02a      	b.n	8003096 <scpiParser_parseAllProgramData+0x82>
        token->len += result;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	441a      	add	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	609a      	str	r2, [r3, #8]

        result = scpiParser_parseProgramData(state, &tmp);
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	4619      	mov	r1, r3
 8003054:	f7ff ff68 	bl	8002f28 <scpiParser_parseProgramData>
 8003058:	6278      	str	r0, [r7, #36]	; 0x24
        if (tmp.type != SCPI_TOKEN_UNKNOWN) {
 800305a:	7d3b      	ldrb	r3, [r7, #20]
 800305c:	2b1a      	cmp	r3, #26
 800305e:	d006      	beq.n	800306e <scpiParser_parseAllProgramData+0x5a>
            token->len += result;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	441a      	add	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	e009      	b.n	8003082 <scpiParser_parseAllProgramData+0x6e>
        } else {
            token->type = SCPI_TOKEN_UNKNOWN;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	221a      	movs	r2, #26
 8003072:	701a      	strb	r2, [r3, #0]
            token->len = 0;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
            paramCount = -1;
 800307a:	f04f 33ff 	mov.w	r3, #4294967295
 800307e:	623b      	str	r3, [r7, #32]
            break;
 8003080:	e00c      	b.n	800309c <scpiParser_parseAllProgramData+0x88>
        }
        paramCount++;
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	3301      	adds	r3, #1
 8003086:	623b      	str	r3, [r7, #32]
    token->len = -1;
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
    token->ptr = state->pos;


    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	4619      	mov	r1, r3
 8003090:	f7fe ff42 	bl	8001f18 <scpiLex_Comma>
 8003094:	6278      	str	r0, [r7, #36]	; 0x24
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1d1      	bne.n	8003040 <scpiParser_parseAllProgramData+0x2c>
            break;
        }
        paramCount++;
    }

    if (numberOfParameters != NULL) {
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <scpiParser_parseAllProgramData+0x94>
        *numberOfParameters = paramCount;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a3a      	ldr	r2, [r7, #32]
 80030a6:	601a      	str	r2, [r3, #0]
    }
    return token->len;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	689b      	ldr	r3, [r3, #8]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3728      	adds	r7, #40	; 0x28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <scpiParser_detectProgramMessageUnit>:
 * @param state
 * @param buffer
 * @param len
 * @return
 */
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08c      	sub	sp, #48	; 0x30
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
    lex_state_t lex_state;
    scpi_token_t tmp;
    int result = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c

    lex_state.buffer = lex_state.pos = buffer;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	623b      	str	r3, [r7, #32]
    lex_state.len = len;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	62bb      	str	r3, [r7, #40]	; 0x28
    state->numberOfParameters = 0;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	619a      	str	r2, [r3, #24]

    /* ignore whitespace at the begginig */
    scpiLex_WhiteSpace(&lex_state, &tmp);
 80030d6:	f107 0220 	add.w	r2, r7, #32
 80030da:	f107 0314 	add.w	r3, r7, #20
 80030de:	4610      	mov	r0, r2
 80030e0:	4619      	mov	r1, r3
 80030e2:	f7fe f98d 	bl	8001400 <scpiLex_WhiteSpace>

    if (scpiLex_ProgramHeader(&lex_state, &state->programHeader) >= 0) {
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f107 0220 	add.w	r2, r7, #32
 80030ec:	4610      	mov	r0, r2
 80030ee:	4619      	mov	r1, r3
 80030f0:	f7fe fa10 	bl	8001514 <scpiLex_ProgramHeader>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	db20      	blt.n	800313c <scpiParser_detectProgramMessageUnit+0x88>
        if (scpiLex_WhiteSpace(&lex_state, &tmp) > 0) {
 80030fa:	f107 0220 	add.w	r2, r7, #32
 80030fe:	f107 0314 	add.w	r3, r7, #20
 8003102:	4610      	mov	r0, r2
 8003104:	4619      	mov	r1, r3
 8003106:	f7fe f97b 	bl	8001400 <scpiLex_WhiteSpace>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	dd0c      	ble.n	800312a <scpiParser_detectProgramMessageUnit+0x76>
            scpiParser_parseAllProgramData(&lex_state, &state->programData, &state->numberOfParameters);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f103 020c 	add.w	r2, r3, #12
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3318      	adds	r3, #24
 800311a:	f107 0120 	add.w	r1, r7, #32
 800311e:	4608      	mov	r0, r1
 8003120:	4611      	mov	r1, r2
 8003122:	461a      	mov	r2, r3
 8003124:	f7ff ff76 	bl	8003014 <scpiParser_parseAllProgramData>
 8003128:	e016      	b.n	8003158 <scpiParser_detectProgramMessageUnit+0xa4>
        } else {
            invalidateToken(&state->programData, lex_state.pos);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f103 020c 	add.w	r2, r3, #12
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	f7ff fc95 	bl	8002a64 <invalidateToken>
 800313a:	e00d      	b.n	8003158 <scpiParser_detectProgramMessageUnit+0xa4>
        }
    } else {
        invalidateToken(&state->programHeader, lex_state.buffer);
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	f7ff fc8e 	bl	8002a64 <invalidateToken>
        invalidateToken(&state->programData, lex_state.buffer);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f103 020c 	add.w	r2, r3, #12
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	f7ff fc86 	bl	8002a64 <invalidateToken>
    }

    if (result == 0) result = scpiLex_NewLine(&lex_state, &tmp);
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	2b00      	cmp	r3, #0
 800315c:	d108      	bne.n	8003170 <scpiParser_detectProgramMessageUnit+0xbc>
 800315e:	f107 0220 	add.w	r2, r7, #32
 8003162:	f107 0314 	add.w	r3, r7, #20
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	f7fe ff1d 	bl	8001fa8 <scpiLex_NewLine>
 800316e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (result == 0) result = scpiLex_Semicolon(&lex_state, &tmp);
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d108      	bne.n	8003188 <scpiParser_detectProgramMessageUnit+0xd4>
 8003176:	f107 0220 	add.w	r2, r7, #32
 800317a:	f107 0314 	add.w	r3, r7, #20
 800317e:	4610      	mov	r0, r2
 8003180:	4619      	mov	r1, r3
 8003182:	f7fe feed 	bl	8001f60 <scpiLex_Semicolon>
 8003186:	62f8      	str	r0, [r7, #44]	; 0x2c

    if (!scpiLex_IsEos(&lex_state) && (result == 0)) {
 8003188:	f107 0320 	add.w	r3, r7, #32
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd ff25 	bl	8000fdc <scpiLex_IsEos>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d113      	bne.n	80031c0 <scpiParser_detectProgramMessageUnit+0x10c>
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d110      	bne.n	80031c0 <scpiParser_detectProgramMessageUnit+0x10c>
        lex_state.pos++;
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	3301      	adds	r3, #1
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24

        state->programHeader.len = 1;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	609a      	str	r2, [r3, #8]
        state->programHeader.type = SCPI_TOKEN_INVALID;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2219      	movs	r2, #25
 80031ae:	701a      	strb	r2, [r3, #0]

        invalidateToken(&state->programData, lex_state.buffer);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f103 020c 	add.w	r2, r3, #12
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	f7ff fc52 	bl	8002a64 <invalidateToken>
    }

    if (SCPI_TOKEN_SEMICOLON == tmp.type) {
 80031c0:	7d3b      	ldrb	r3, [r7, #20]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d103      	bne.n	80031ce <scpiParser_detectProgramMessageUnit+0x11a>
        state->termination = SCPI_MESSAGE_TERMINATION_SEMICOLON;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2202      	movs	r2, #2
 80031ca:	771a      	strb	r2, [r3, #28]
 80031cc:	e009      	b.n	80031e2 <scpiParser_detectProgramMessageUnit+0x12e>
    } else if (SCPI_TOKEN_NL == tmp.type) {
 80031ce:	7d3b      	ldrb	r3, [r7, #20]
 80031d0:	2b05      	cmp	r3, #5
 80031d2:	d103      	bne.n	80031dc <scpiParser_detectProgramMessageUnit+0x128>
        state->termination = SCPI_MESSAGE_TERMINATION_NL;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	771a      	strb	r2, [r3, #28]
 80031da:	e002      	b.n	80031e2 <scpiParser_detectProgramMessageUnit+0x12e>
    } else {
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	771a      	strb	r2, [r3, #28]
    }

    return lex_state.pos - lex_state.buffer;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	461a      	mov	r2, r3
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	1ad3      	subs	r3, r2, r3
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3730      	adds	r7, #48	; 0x30
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop

080031f4 <strnpbrk>:
 * @param str
 * @param size
 * @param set
 * @return
 */
char * strnpbrk(const char *str, size_t size, const char *set) {
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	; 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
    const char *scanp;
    long c, sc;
    const char * strend = str + size;
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4413      	add	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]

    while ((strend != str) && ((c = *str++) != 0)) {
 8003208:	e011      	b.n	800322e <strnpbrk+0x3a>
        for (scanp = set; (sc = *scanp++) != '\0';)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	e006      	b.n	800321e <strnpbrk+0x2a>
            if (sc == c)
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	429a      	cmp	r2, r3
 8003216:	d102      	bne.n	800321e <strnpbrk+0x2a>
                return ((char *) (str - 1));
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3b01      	subs	r3, #1
 800321c:	e014      	b.n	8003248 <strnpbrk+0x54>
    const char *scanp;
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
        for (scanp = set; (sc = *scanp++) != '\0';)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	61fa      	str	r2, [r7, #28]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <strnpbrk+0x1c>
char * strnpbrk(const char *str, size_t size, const char *set) {
    const char *scanp;
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	429a      	cmp	r2, r3
 8003234:	d007      	beq.n	8003246 <strnpbrk+0x52>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	60fa      	str	r2, [r7, #12]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e1      	bne.n	800320a <strnpbrk+0x16>
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
                return ((char *) (str - 1));
    }
    return (NULL);
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3724      	adds	r7, #36	; 0x24
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <UInt32ToStrBaseSign>:
 * @param len   string buffer length
 * @param base  output base
 * @param sign
 * @return number of bytes written to str (without '\0')
 */
size_t UInt32ToStrBaseSign(uint32_t val, char * str, size_t len, int8_t base, scpi_bool_t sign) {
 8003254:	b4b0      	push	{r4, r5, r7}
 8003256:	b08f      	sub	sp, #60	; 0x3c
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	70fb      	strb	r3, [r7, #3]
    const char digits[] = "0123456789ABCDEF";
 8003262:	4b4a      	ldr	r3, [pc, #296]	; (800338c <UInt32ToStrBaseSign+0x138>)
 8003264:	f107 0414 	add.w	r4, r7, #20
 8003268:	461d      	mov	r5, r3
 800326a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800326c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800326e:	682b      	ldr	r3, [r5, #0]
 8003270:	7023      	strb	r3, [r4, #0]

#define ADD_CHAR(c) if (pos < len) str[pos++] = (c)
    uint32_t x = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	637b      	str	r3, [r7, #52]	; 0x34
    int_fast8_t digit;
    size_t pos = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t uval = val;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (uval == 0) {
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10b      	bne.n	800329c <UInt32ToStrBaseSign+0x48>
        ADD_CHAR('0');
 8003284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	429a      	cmp	r2, r3
 800328a:	d26f      	bcs.n	800336c <UInt32ToStrBaseSign+0x118>
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	633a      	str	r2, [r7, #48]	; 0x30
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	4413      	add	r3, r2
 8003296:	2230      	movs	r2, #48	; 0x30
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	e067      	b.n	800336c <UInt32ToStrBaseSign+0x118>
    } else {

        switch (base) {
 800329c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d007      	beq.n	80032b4 <UInt32ToStrBaseSign+0x60>
 80032a4:	2b10      	cmp	r3, #16
 80032a6:	d00e      	beq.n	80032c6 <UInt32ToStrBaseSign+0x72>
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d107      	bne.n	80032bc <UInt32ToStrBaseSign+0x68>
            case 2:
                x = 0x80000000L;
 80032ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80032b0:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 80032b2:	e00c      	b.n	80032ce <UInt32ToStrBaseSign+0x7a>
            case 8:
                x = 0x40000000L;
 80032b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032b8:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 80032ba:	e008      	b.n	80032ce <UInt32ToStrBaseSign+0x7a>
            default:
            case 10:
                base = 10;
 80032bc:	230a      	movs	r3, #10
 80032be:	70fb      	strb	r3, [r7, #3]
                x = 1000000000L;
 80032c0:	4b33      	ldr	r3, [pc, #204]	; (8003390 <UInt32ToStrBaseSign+0x13c>)
 80032c2:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 80032c4:	e003      	b.n	80032ce <UInt32ToStrBaseSign+0x7a>
            case 16:
                x = 0x10000000L;
 80032c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80032ca:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 80032cc:	bf00      	nop
        }

        /* add sign for numbers in base 10 */
        if (sign && ((int32_t) val < 0) && (base == 10)) {
 80032ce:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d014      	beq.n	8003300 <UInt32ToStrBaseSign+0xac>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	da11      	bge.n	8003300 <UInt32ToStrBaseSign+0xac>
 80032dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032e0:	2b0a      	cmp	r3, #10
 80032e2:	d10d      	bne.n	8003300 <UInt32ToStrBaseSign+0xac>
            uval = -val;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	425b      	negs	r3, r3
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
            ADD_CHAR('-');
 80032ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d206      	bcs.n	8003300 <UInt32ToStrBaseSign+0xac>
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	633a      	str	r2, [r7, #48]	; 0x30
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	4413      	add	r3, r2
 80032fc:	222d      	movs	r2, #45	; 0x2d
 80032fe:	701a      	strb	r2, [r3, #0]
        }

        /* remove leading zeros */
        while ((uval / x) == 0) {
 8003300:	e005      	b.n	800330e <UInt32ToStrBaseSign+0xba>
            x /= base;
 8003302:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003308:	fbb2 f3f3 	udiv	r3, r2, r3
 800330c:	637b      	str	r3, [r7, #52]	; 0x34
            uval = -val;
            ADD_CHAR('-');
        }

        /* remove leading zeros */
        while ((uval / x) == 0) {
 800330e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003312:	fbb2 f3f3 	udiv	r3, r2, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f3      	beq.n	8003302 <UInt32ToStrBaseSign+0xae>
            x /= base;
        }

        do {
            digit = (uint8_t) (uval / x);
 800331a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800331c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003322:	b2db      	uxtb	r3, r3
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
            ADD_CHAR(digits[digit]);
 8003326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	d20a      	bcs.n	8003344 <UInt32ToStrBaseSign+0xf0>
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	633a      	str	r2, [r7, #48]	; 0x30
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	4413      	add	r3, r2
 8003338:	f107 0114 	add.w	r1, r7, #20
 800333c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800333e:	440a      	add	r2, r1
 8003340:	7812      	ldrb	r2, [r2, #0]
 8003342:	701a      	strb	r2, [r3, #0]
            uval -= digit * x;
 8003344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003348:	fb02 f303 	mul.w	r3, r2, r3
 800334c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
            x /= base;
 8003352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003358:	fbb2 f3f3 	udiv	r3, r2, r3
 800335c:	637b      	str	r3, [r7, #52]	; 0x34
        } while (x && (pos < len));
 800335e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <UInt32ToStrBaseSign+0x118>
 8003364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	429a      	cmp	r2, r3
 800336a:	d3d6      	bcc.n	800331a <UInt32ToStrBaseSign+0xc6>
    }

    if (pos < len) str[pos] = 0;
 800336c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	429a      	cmp	r2, r3
 8003372:	d204      	bcs.n	800337e <UInt32ToStrBaseSign+0x12a>
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003378:	4413      	add	r3, r2
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
    return pos;
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
#undef ADD_CHAR
}
 8003380:	4618      	mov	r0, r3
 8003382:	373c      	adds	r7, #60	; 0x3c
 8003384:	46bd      	mov	sp, r7
 8003386:	bcb0      	pop	{r4, r5, r7}
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	08014270 	.word	0x08014270
 8003390:	3b9aca00 	.word	0x3b9aca00

08003394 <strBaseToInt32>:
 * Converts string to signed 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToInt32(const char * str, int32_t * val, int8_t base) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = strtol(str, &endptr, base);
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	f107 0214 	add.w	r2, r7, #20
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	4611      	mov	r1, r2
 80033ae:	461a      	mov	r2, r3
 80033b0:	f00c f95e 	bl	800f670 <strtol>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	601a      	str	r2, [r3, #0]
    return endptr - str;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	461a      	mov	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1ad3      	subs	r3, r2, r3
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop

080033cc <strBaseToUInt32>:
 * Converts string to unsigned 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToUInt32(const char * str, uint32_t * val, int8_t base) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	4613      	mov	r3, r2
 80033d8:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = strtoul(str, &endptr, base);
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	f107 0214 	add.w	r2, r7, #20
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	4611      	mov	r1, r2
 80033e6:	461a      	mov	r2, r3
 80033e8:	f00c f9e2 	bl	800f7b0 <strtoul>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	601a      	str	r2, [r3, #0]
    return endptr - str;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	461a      	mov	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1ad3      	subs	r3, r2, r3
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop

08003404 <compareStr>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
scpi_bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
    if (len1 != len2) {
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d001      	beq.n	800341e <compareStr+0x1a>
        return FALSE;
 800341a:	2300      	movs	r3, #0
 800341c:	e00a      	b.n	8003434 <compareStr+0x30>
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len2) == 0) {
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	f000 fb6e 	bl	8003b04 <OUR_strncasecmp>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <compareStr+0x2e>
        return TRUE;
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <compareStr+0x30>
    }

    return FALSE;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <compareStrAndNum>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if strings match
 */
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
    scpi_bool_t result = FALSE;
 800344a:	2300      	movs	r3, #0
 800344c:	77fb      	strb	r3, [r7, #31]
    size_t i;

    if (len2 < len1) {
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	429a      	cmp	r2, r3
 8003454:	d201      	bcs.n	800345a <compareStrAndNum+0x1e>
        return FALSE;
 8003456:	2300      	movs	r3, #0
 8003458:	e044      	b.n	80034e4 <compareStrAndNum+0xa8>
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	f000 fb50 	bl	8003b04 <OUR_strncasecmp>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d13b      	bne.n	80034e2 <compareStrAndNum+0xa6>
        result = TRUE;
 800346a:	2301      	movs	r3, #1
 800346c:	77fb      	strb	r3, [r7, #31]

        if (num) {
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01c      	beq.n	80034ae <compareStrAndNum+0x72>
            if (len1 == len2) {
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d032      	beq.n	80034e2 <compareStrAndNum+0xa6>
                /* *num = 1; */
            } else {
                int32_t tmpNum;
                i = len1 + strBaseToInt32(str2 + len1, &tmpNum, 10);
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	441a      	add	r2, r3
 8003482:	f107 0314 	add.w	r3, r7, #20
 8003486:	4610      	mov	r0, r2
 8003488:	4619      	mov	r1, r3
 800348a:	220a      	movs	r2, #10
 800348c:	f7ff ff82 	bl	8003394 <strBaseToInt32>
 8003490:	4602      	mov	r2, r0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4413      	add	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
                if (i != len2) {
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d002      	beq.n	80034a6 <compareStrAndNum+0x6a>
                    result = FALSE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	77fb      	strb	r3, [r7, #31]
 80034a4:	e01d      	b.n	80034e2 <compareStrAndNum+0xa6>
                } else {
                    *num = tmpNum;
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e019      	b.n	80034e2 <compareStrAndNum+0xa6>
                }
            }
        } else {
            for (i = len1; i < len2; i++) {
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	e012      	b.n	80034da <compareStrAndNum+0x9e>
                if (!isdigit((int) str2[i])) {
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <compareStrAndNum+0xb0>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	440b      	add	r3, r1
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	4413      	add	r3, r2
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d102      	bne.n	80034d4 <compareStrAndNum+0x98>
                    result = FALSE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	77fb      	strb	r3, [r7, #31]
                    break;
 80034d2:	e006      	b.n	80034e2 <compareStrAndNum+0xa6>
                } else {
                    *num = tmpNum;
                }
            }
        } else {
            for (i = len1; i < len2; i++) {
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	3301      	adds	r3, #1
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d3e8      	bcc.n	80034b4 <compareStrAndNum+0x78>
                }
            }
        }
    }

    return result;
 80034e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	1ffe8880 	.word	0x1ffe8880

080034f0 <patternSeparatorShortPos>:
 * search the first lowercase letter
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorShortPos(const char * pattern, size_t len) {
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	e011      	b.n	8003524 <patternSeparatorShortPos+0x34>
        if (islower((unsigned char) pattern[i])) {
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <patternSeparatorShortPos+0x58>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	440b      	add	r3, r1
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	3301      	adds	r3, #1
 800350e:	4413      	add	r3, r2
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d101      	bne.n	800351e <patternSeparatorShortPos+0x2e>
            return i;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	e00d      	b.n	800353a <patternSeparatorShortPos+0x4a>
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3301      	adds	r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d205      	bcs.n	8003538 <patternSeparatorShortPos+0x48>
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4413      	add	r3, r2
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1e3      	bne.n	8003500 <patternSeparatorShortPos+0x10>
        if (islower((unsigned char) pattern[i])) {
            return i;
        }
    }
    return i;
 8003538:	68fb      	ldr	r3, [r7, #12]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	1ffe8880 	.word	0x1ffe8880

0800354c <patternSeparatorPos>:
 * Find pattern separator position
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorPos(const char * pattern, size_t len) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]

    char * separator = strnpbrk(pattern, len, "?:[]");
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	6839      	ldr	r1, [r7, #0]
 800355a:	4a08      	ldr	r2, [pc, #32]	; (800357c <patternSeparatorPos+0x30>)
 800355c:	f7ff fe4a 	bl	80031f4 <strnpbrk>
 8003560:	60f8      	str	r0, [r7, #12]
    if (separator == NULL) {
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <patternSeparatorPos+0x20>
        return len;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	e002      	b.n	8003572 <patternSeparatorPos+0x26>
    } else {
        return separator - pattern;
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	1ad3      	subs	r3, r2, r3
    }
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	08014290 	.word	0x08014290

08003580 <cmdSeparatorPos>:
 * Find command separator position
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
static size_t cmdSeparatorPos(const char * cmd, size_t len) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
    char * separator = strnpbrk(cmd, len, ":?");
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	6839      	ldr	r1, [r7, #0]
 800358e:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <cmdSeparatorPos+0x34>)
 8003590:	f7ff fe30 	bl	80031f4 <strnpbrk>
 8003594:	60b8      	str	r0, [r7, #8]
    size_t result;
    if (separator == NULL) {
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <cmdSeparatorPos+0x22>
        result = len;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e003      	b.n	80035aa <cmdSeparatorPos+0x2a>
    } else {
        result = separator - cmd;
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	60fb      	str	r3, [r7, #12]
    }

    return result;
 80035aa:	68fb      	ldr	r3, [r7, #12]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	08014298 	.word	0x08014298

080035b8 <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return
 */
scpi_bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len, int32_t * num) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
    int pattern_sep_pos_short;

    if ((pattern_len > 0) && pattern[pattern_len - 1] == '#') {
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d02d      	beq.n	8003628 <matchPattern+0x70>
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b23      	cmp	r3, #35	; 0x23
 80035d8:	d126      	bne.n	8003628 <matchPattern+0x70>
        size_t new_pattern_len = pattern_len - 1;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	3b01      	subs	r3, #1
 80035de:	617b      	str	r3, [r7, #20]

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	6979      	ldr	r1, [r7, #20]
 80035e4:	f7ff ff84 	bl	80034f0 <patternSeparatorShortPos>
 80035e8:	4603      	mov	r3, r0
 80035ea:	613b      	str	r3, [r7, #16]

        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	6979      	ldr	r1, [r7, #20]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	f7ff ff20 	bl	800343c <compareStrAndNum>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10b      	bne.n	800361a <matchPattern+0x62>
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	4611      	mov	r1, r2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	f7ff ff14 	bl	800343c <compareStrAndNum>
 8003614:	4603      	mov	r3, r0
    if ((pattern_len > 0) && pattern[pattern_len - 1] == '#') {
        size_t new_pattern_len = pattern_len - 1;

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);

        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <matchPattern+0x66>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <matchPattern+0x68>
 800361e:	2300      	movs	r3, #0
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	b2db      	uxtb	r3, r3
 8003626:	e01e      	b.n	8003666 <matchPattern+0xae>
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
    } else {

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	f7ff ff60 	bl	80034f0 <patternSeparatorShortPos>
 8003630:	4603      	mov	r3, r0
 8003632:	613b      	str	r3, [r7, #16]

        return compareStr(pattern, pattern_len, str, str_len) ||
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	f7ff fee2 	bl	8003404 <compareStr>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <matchPattern+0xa2>
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	4619      	mov	r1, r3
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f7ff fed8 	bl	8003404 <compareStr>
 8003654:	4603      	mov	r3, r0
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
    } else {

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);

        return compareStr(pattern, pattern_len, str, str_len) ||
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <matchPattern+0xa6>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <matchPattern+0xa8>
 800365e:	2300      	movs	r3, #0
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	b2db      	uxtb	r3, r3
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
    }
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop

08003670 <matchCommand>:
 * @param pattern eg. [:MEASure]:VOLTage:DC?
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
scpi_bool_t matchCommand(const char * pattern, const char * cmd, size_t len, int32_t *numbers, size_t numbers_len, int32_t default_value) {
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b091      	sub	sp, #68	; 0x44
 8003674:	af02      	add	r7, sp, #8
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
#define SKIP_PATTERN(n) do {pattern_ptr += (n);  pattern_len -= (n);} while(0)
#define SKIP_CMD(n) do {cmd_ptr += (n);  cmd_len -= (n);} while(0)

    scpi_bool_t result = FALSE;
 800367e:	2300      	movs	r3, #0
 8003680:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int brackets = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
    int cmd_sep_pos = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]

    size_t numbers_idx = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t *number_ptr = NULL;
 8003690:	2300      	movs	r3, #0
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28

    const char * pattern_ptr = pattern;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
    int pattern_len = strlen(pattern);
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f00b ff2d 	bl	800f4f8 <strlen>
 800369e:	4603      	mov	r3, r0
 80036a0:	623b      	str	r3, [r7, #32]

    const char * cmd_ptr = cmd;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	61fb      	str	r3, [r7, #28]
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
 80036a6:	68b8      	ldr	r0, [r7, #8]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	f000 fa0d 	bl	8003ac8 <BSD_strnlen>
 80036ae:	61b8      	str	r0, [r7, #24]

    /* both commands are query commands? */
    if (pattern_ptr[pattern_len - 1] == '?') {
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b6:	4413      	add	r3, r2
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b3f      	cmp	r3, #63	; 0x3f
 80036bc:	d10f      	bne.n	80036de <matchCommand+0x6e>
        if (cmd_ptr[cmd_len - 1] == '?') {
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	4413      	add	r3, r2
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b3f      	cmp	r3, #63	; 0x3f
 80036ca:	d106      	bne.n	80036da <matchCommand+0x6a>
            cmd_len -= 1;
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	61bb      	str	r3, [r7, #24]
            pattern_len -= 1;
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	623b      	str	r3, [r7, #32]
 80036d8:	e001      	b.n	80036de <matchCommand+0x6e>
        } else {
            return FALSE;
 80036da:	2300      	movs	r3, #0
 80036dc:	e18c      	b.n	80039f8 <matchCommand+0x388>
        }
    }

    /* now support optional keywords in pattern style, e.g. [:MEASure]:VOLTage:DC? */
    if (pattern_ptr[0] == '[') { /* skip first '[' */
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b5b      	cmp	r3, #91	; 0x5b
 80036e4:	d108      	bne.n	80036f8 <matchCommand+0x88>
        SKIP_PATTERN(1);
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	3301      	adds	r3, #1
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	623b      	str	r3, [r7, #32]
        brackets++;
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	3301      	adds	r3, #1
 80036f6:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (pattern_ptr[0] == ':') { /* skip first ':' */
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b3a      	cmp	r3, #58	; 0x3a
 80036fe:	d105      	bne.n	800370c <matchCommand+0x9c>
        SKIP_PATTERN(1);
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	3301      	adds	r3, #1
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	3b01      	subs	r3, #1
 800370a:	623b      	str	r3, [r7, #32]
    }

    if (cmd_ptr[0] == ':') {
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b3a      	cmp	r3, #58	; 0x3a
 8003712:	d110      	bne.n	8003736 <matchCommand+0xc6>
        /* handle errornouse ":*IDN?" */
        if (cmd_len >= 2) {
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d90d      	bls.n	8003736 <matchCommand+0xc6>
            if (cmd_ptr[1] != '*') {
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3301      	adds	r3, #1
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b2a      	cmp	r3, #42	; 0x2a
 8003722:	d006      	beq.n	8003732 <matchCommand+0xc2>
                SKIP_CMD(1);
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	3301      	adds	r3, #1
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	3b01      	subs	r3, #1
 800372e:	61bb      	str	r3, [r7, #24]
 8003730:	e001      	b.n	8003736 <matchCommand+0xc6>
            } else {
                return FALSE;
 8003732:	2300      	movs	r3, #0
 8003734:	e160      	b.n	80039f8 <matchCommand+0x388>
            }
        }
    }

    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800373a:	4619      	mov	r1, r3
 800373c:	f7ff ff06 	bl	800354c <patternSeparatorPos>
 8003740:	4603      	mov	r3, r0
 8003742:	613b      	str	r3, [r7, #16]

        cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_len);
 8003744:	69f8      	ldr	r0, [r7, #28]
 8003746:	69b9      	ldr	r1, [r7, #24]
 8003748:	f7ff ff1a 	bl	8003580 <cmdSeparatorPos>
 800374c:	4603      	mov	r3, r0
 800374e:	617b      	str	r3, [r7, #20]

        if ((pattern_sep_pos > 0) && pattern_ptr[pattern_sep_pos - 1] == '#') {
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	dd1c      	ble.n	8003790 <matchCommand+0x120>
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	3b01      	subs	r3, #1
 800375a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375c:	4413      	add	r3, r2
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b23      	cmp	r3, #35	; 0x23
 8003762:	d115      	bne.n	8003790 <matchCommand+0x120>
            if (numbers && (numbers_idx < numbers_len)) {
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00c      	beq.n	8003784 <matchCommand+0x114>
 800376a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800376c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800376e:	429a      	cmp	r2, r3
 8003770:	d208      	bcs.n	8003784 <matchCommand+0x114>
                number_ptr = numbers + numbers_idx;
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	4413      	add	r3, r2
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
                *number_ptr = default_value; /* default value */
 800377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e001      	b.n	8003788 <matchCommand+0x118>
            } else {
                number_ptr = NULL;
 8003784:	2300      	movs	r3, #0
 8003786:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            numbers_idx++;
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	3301      	adds	r3, #1
 800378c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800378e:	e001      	b.n	8003794 <matchCommand+0x124>
        } else {
            number_ptr = NULL;
 8003790:	2300      	movs	r3, #0
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos, number_ptr)) {
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	697c      	ldr	r4, [r7, #20]
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800379e:	4611      	mov	r1, r2
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	4623      	mov	r3, r4
 80037a4:	f7ff ff08 	bl	80035b8 <matchPattern>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80ea 	beq.w	8003984 <matchCommand+0x314>
            SKIP_PATTERN(pattern_sep_pos);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b4:	4413      	add	r3, r2
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
 80037b8:	6a3a      	ldr	r2, [r7, #32]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	623b      	str	r3, [r7, #32]
            SKIP_CMD(cmd_sep_pos);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	4413      	add	r3, r2
 80037c6:	61fb      	str	r3, [r7, #28]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	61bb      	str	r3, [r7, #24]
            result = TRUE;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

            /* command is complete */
            if ((pattern_len == 0) && (cmd_len == 0)) {
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d103      	bne.n	80037e4 <matchCommand+0x174>
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d100      	bne.n	80037e4 <matchCommand+0x174>
                break;
 80037e2:	e107      	b.n	80039f4 <matchCommand+0x384>
            }

            /* pattern complete, but command not */
            if ((pattern_len == 0) && (cmd_len > 0)) {
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <matchCommand+0x188>
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <matchCommand+0x188>
                result = FALSE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 80037f6:	e0fd      	b.n	80039f4 <matchCommand+0x384>
            }

            /* command complete, but pattern not */
            if (cmd_len == 0) {
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d138      	bne.n	8003870 <matchCommand+0x200>
                /* verify all subsequent pattern parts are also optional */
                while (pattern_len) {
 80037fe:	e02c      	b.n	800385a <matchCommand+0x1ea>
                    pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003804:	4619      	mov	r1, r3
 8003806:	f7ff fea1 	bl	800354c <patternSeparatorPos>
 800380a:	4603      	mov	r3, r0
 800380c:	613b      	str	r3, [r7, #16]
                    switch (pattern_ptr[pattern_sep_pos]) {
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003812:	4413      	add	r3, r2
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b5b      	cmp	r3, #91	; 0x5b
 8003818:	d002      	beq.n	8003820 <matchCommand+0x1b0>
 800381a:	2b5d      	cmp	r3, #93	; 0x5d
 800381c:	d004      	beq.n	8003828 <matchCommand+0x1b8>
                            break;
                        case ']':
                            brackets--;
                            break;
                        default:
                            break;
 800381e:	e007      	b.n	8003830 <matchCommand+0x1c0>
                /* verify all subsequent pattern parts are also optional */
                while (pattern_len) {
                    pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
                    switch (pattern_ptr[pattern_sep_pos]) {
                        case '[':
                            brackets++;
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	3301      	adds	r3, #1
 8003824:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 8003826:	e003      	b.n	8003830 <matchCommand+0x1c0>
                        case ']':
                            brackets--;
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	3b01      	subs	r3, #1
 800382c:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 800382e:	bf00      	nop
                        default:
                            break;
                    }
                    SKIP_PATTERN(pattern_sep_pos + 1);
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	3301      	adds	r3, #1
 8003834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003836:	4413      	add	r3, r2
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	43db      	mvns	r3, r3
 800383e:	6a3a      	ldr	r2, [r7, #32]
 8003840:	4413      	add	r3, r2
 8003842:	623b      	str	r3, [r7, #32]
                    if (brackets == 0) {
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	2b00      	cmp	r3, #0
 8003848:	d107      	bne.n	800385a <matchCommand+0x1ea>
                        if ((pattern_len > 0) && (pattern_ptr[0] == '[')) {
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	2b00      	cmp	r3, #0
 800384e:	dd07      	ble.n	8003860 <matchCommand+0x1f0>
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b5b      	cmp	r3, #91	; 0x5b
 8003856:	d103      	bne.n	8003860 <matchCommand+0x1f0>
                            continue;
 8003858:	bf00      	nop
            }

            /* command complete, but pattern not */
            if (cmd_len == 0) {
                /* verify all subsequent pattern parts are also optional */
                while (pattern_len) {
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1cf      	bne.n	8003800 <matchCommand+0x190>
                        } else {
                            break;
                        }
                    }
                }
                if (pattern_len != 0) {
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <matchCommand+0x1fe>
                    result = FALSE;
 8003866:	2300      	movs	r3, #0
 8003868:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                }
                break; /* exist optional keyword, command is complete */
 800386c:	e0c2      	b.n	80039f4 <matchCommand+0x384>
 800386e:	e0c1      	b.n	80039f4 <matchCommand+0x384>
            }

            /* both command and patter contains command separator at this position */
            if ((pattern_len > 0)
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	2b00      	cmp	r3, #0
 8003874:	dd16      	ble.n	80038a4 <matchCommand+0x234>
                    && ((pattern_ptr[0] == cmd_ptr[0])
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	781a      	ldrb	r2, [r3, #0]
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d110      	bne.n	80038a4 <matchCommand+0x234>
                    && (pattern_ptr[0] == ':'))) {
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b3a      	cmp	r3, #58	; 0x3a
 8003888:	d10c      	bne.n	80038a4 <matchCommand+0x234>
                SKIP_PATTERN(1);
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	3301      	adds	r3, #1
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	3b01      	subs	r3, #1
 8003894:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3301      	adds	r3, #1
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	3b01      	subs	r3, #1
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	e06e      	b.n	8003982 <matchCommand+0x312>
            } else if ((pattern_len > 1)
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	dd1f      	ble.n	80038ea <matchCommand+0x27a>
                    && (pattern_ptr[1] == cmd_ptr[0])
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	3301      	adds	r3, #1
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d118      	bne.n	80038ea <matchCommand+0x27a>
                    && (pattern_ptr[0] == '[')
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b5b      	cmp	r3, #91	; 0x5b
 80038be:	d114      	bne.n	80038ea <matchCommand+0x27a>
                    && (pattern_ptr[1] == ':')) {
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	3301      	adds	r3, #1
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b3a      	cmp	r3, #58	; 0x3a
 80038c8:	d10f      	bne.n	80038ea <matchCommand+0x27a>
                SKIP_PATTERN(2); /* for skip '[' in "[:" */
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	3302      	adds	r3, #2
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	3b02      	subs	r3, #2
 80038d4:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3301      	adds	r3, #1
 80038da:	61fb      	str	r3, [r7, #28]
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	3b01      	subs	r3, #1
 80038e0:	61bb      	str	r3, [r7, #24]
                brackets++;
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	3301      	adds	r3, #1
 80038e6:	633b      	str	r3, [r7, #48]	; 0x30
 80038e8:	e04b      	b.n	8003982 <matchCommand+0x312>
            } else if ((pattern_len > 1)
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	dd1f      	ble.n	8003930 <matchCommand+0x2c0>
                    && (pattern_ptr[1] == cmd_ptr[0])
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	3301      	adds	r3, #1
 80038f4:	781a      	ldrb	r2, [r3, #0]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d118      	bne.n	8003930 <matchCommand+0x2c0>
                    && (pattern_ptr[0] == ']')
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b5d      	cmp	r3, #93	; 0x5d
 8003904:	d114      	bne.n	8003930 <matchCommand+0x2c0>
                    && (pattern_ptr[1] == ':')) {
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	3301      	adds	r3, #1
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b3a      	cmp	r3, #58	; 0x3a
 800390e:	d10f      	bne.n	8003930 <matchCommand+0x2c0>
                SKIP_PATTERN(2); /* for skip ']' in "]:" */
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	3302      	adds	r3, #2
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	3b02      	subs	r3, #2
 800391a:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	3301      	adds	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	3b01      	subs	r3, #1
 8003926:	61bb      	str	r3, [r7, #24]
                brackets--;
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	3b01      	subs	r3, #1
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
 800392e:	e028      	b.n	8003982 <matchCommand+0x312>
            } else if ((pattern_len > 2)
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	2b02      	cmp	r3, #2
 8003934:	dd21      	ble.n	800397a <matchCommand+0x30a>
                    && (pattern_ptr[2] == cmd_ptr[0])
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	3302      	adds	r3, #2
 800393a:	781a      	ldrb	r2, [r3, #0]
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d11a      	bne.n	800397a <matchCommand+0x30a>
                    && (pattern_ptr[0] == ']')
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b5d      	cmp	r3, #93	; 0x5d
 800394a:	d116      	bne.n	800397a <matchCommand+0x30a>
                    && (pattern_ptr[1] == '[')
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	3301      	adds	r3, #1
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b5b      	cmp	r3, #91	; 0x5b
 8003954:	d111      	bne.n	800397a <matchCommand+0x30a>
                    && (pattern_ptr[2] == ':')) {
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	3302      	adds	r3, #2
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b3a      	cmp	r3, #58	; 0x3a
 800395e:	d10c      	bne.n	800397a <matchCommand+0x30a>
                SKIP_PATTERN(3); /* for skip '][' in "][:" */
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	3303      	adds	r3, #3
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	3b03      	subs	r3, #3
 800396a:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	3301      	adds	r3, #1
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	3b01      	subs	r3, #1
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	e003      	b.n	8003982 <matchCommand+0x312>
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
 800397a:	2300      	movs	r3, #0
 800397c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8003980:	e038      	b.n	80039f4 <matchCommand+0x384>
 8003982:	e036      	b.n	80039f2 <matchCommand+0x382>
            }
        } else {
            SKIP_PATTERN(pattern_sep_pos);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003988:	4413      	add	r3, r2
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
 800398c:	6a3a      	ldr	r2, [r7, #32]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	623b      	str	r3, [r7, #32]
            if ((pattern_ptr[0] == ']') && (pattern_ptr[1] == ':')) {
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b5d      	cmp	r3, #93	; 0x5d
 800399a:	d10e      	bne.n	80039ba <matchCommand+0x34a>
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	3301      	adds	r3, #1
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b3a      	cmp	r3, #58	; 0x3a
 80039a4:	d109      	bne.n	80039ba <matchCommand+0x34a>
                SKIP_PATTERN(2); /* for skip ']' in "]:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	3302      	adds	r3, #2
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	3b02      	subs	r3, #2
 80039b0:	623b      	str	r3, [r7, #32]
                brackets--;
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	3b01      	subs	r3, #1
 80039b6:	633b      	str	r3, [r7, #48]	; 0x30
 80039b8:	e01b      	b.n	80039f2 <matchCommand+0x382>
            } else if ((pattern_len > 2) && (pattern_ptr[0] == ']')
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	dd14      	ble.n	80039ea <matchCommand+0x37a>
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b5d      	cmp	r3, #93	; 0x5d
 80039c6:	d110      	bne.n	80039ea <matchCommand+0x37a>
                    && (pattern_ptr[1] == '[')
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	3301      	adds	r3, #1
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b5b      	cmp	r3, #91	; 0x5b
 80039d0:	d10b      	bne.n	80039ea <matchCommand+0x37a>
                    && (pattern_ptr[2] == ':')) {
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	3302      	adds	r3, #2
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b3a      	cmp	r3, #58	; 0x3a
 80039da:	d106      	bne.n	80039ea <matchCommand+0x37a>
                SKIP_PATTERN(3); /* for skip ']' in "][:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	3303      	adds	r3, #3
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	3b03      	subs	r3, #3
 80039e6:	623b      	str	r3, [r7, #32]
 80039e8:	e003      	b.n	80039f2 <matchCommand+0x382>
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 80039f0:	e000      	b.n	80039f4 <matchCommand+0x384>
            }
        }
    }
 80039f2:	e6a0      	b.n	8003736 <matchCommand+0xc6>

    return result;
 80039f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
#undef SKIP_PATTERN
#undef SKIP_CMD
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	373c      	adds	r7, #60	; 0x3c
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd90      	pop	{r4, r7, pc}

08003a00 <composeCompoundCommand>:
 * @param prev pointer to previous command
 * @param current pointer of current command
 *
 * prev and current should be in the same memory buffer
 */
scpi_bool_t composeCompoundCommand(const scpi_token_t * prev, scpi_token_t * current) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
    size_t i;

    /* Invalid input */
    if (current == NULL || current->ptr == NULL || current->len == 0)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <composeCompoundCommand+0x20>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <composeCompoundCommand+0x20>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <composeCompoundCommand+0x24>
        return FALSE;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e04d      	b.n	8003ac0 <composeCompoundCommand+0xc0>

    /* no previous command - nothing to do*/
    if (prev->ptr == NULL || prev->len == 0)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <composeCompoundCommand+0x34>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <composeCompoundCommand+0x38>
        return TRUE;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e043      	b.n	8003ac0 <composeCompoundCommand+0xc0>

    /* Common command or command root - nothing to do */
    if (current->ptr[0] == '*' || current->ptr[0] == ':')
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a40:	d004      	beq.n	8003a4c <composeCompoundCommand+0x4c>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b3a      	cmp	r3, #58	; 0x3a
 8003a4a:	d101      	bne.n	8003a50 <composeCompoundCommand+0x50>
        return TRUE;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e037      	b.n	8003ac0 <composeCompoundCommand+0xc0>

    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b2a      	cmp	r3, #42	; 0x2a
 8003a58:	d101      	bne.n	8003a5e <composeCompoundCommand+0x5e>
        return TRUE;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e030      	b.n	8003ac0 <composeCompoundCommand+0xc0>

    /* Find last occurence of ':' */
    for (i = prev->len; i > 0; i--) {
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	e00b      	b.n	8003a7e <composeCompoundCommand+0x7e>
        if (prev->ptr[i - 1] == ':') {
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	4413      	add	r3, r2
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b3a      	cmp	r3, #58	; 0x3a
 8003a74:	d100      	bne.n	8003a78 <composeCompoundCommand+0x78>
            break;
 8003a76:	e005      	b.n	8003a84 <composeCompoundCommand+0x84>
    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
        return TRUE;

    /* Find last occurence of ':' */
    for (i = prev->len; i > 0; i--) {
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f0      	bne.n	8003a66 <composeCompoundCommand+0x66>
            break;
        }
    }

    /* Previous command was simple command - nothing to do*/
    if (i == 0)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <composeCompoundCommand+0x8e>
        return TRUE;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e018      	b.n	8003ac0 <composeCompoundCommand+0xc0>

    current->ptr -= i;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	425b      	negs	r3, r3
 8003a96:	441a      	add	r2, r3
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	605a      	str	r2, [r3, #4]
    current->len += i;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	609a      	str	r2, [r3, #8]
    memmove(current->ptr, prev->ptr, i);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	f00b fc01 	bl	800f2c0 <memmove>
    return TRUE;
 8003abe:	2301      	movs	r3, #1
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <BSD_strnlen>:
/*-
 * Copyright (c) 2009 David Schultz <das@FreeBSD.org>
 * All rights reserved.
 */
size_t
BSD_strnlen(const char *s, size_t maxlen) {
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
    size_t len;

    for (len = 0; len < maxlen; len++, s++) {
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	e00a      	b.n	8003aee <BSD_strnlen+0x26>
        if (!*s)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d100      	bne.n	8003ae2 <BSD_strnlen+0x1a>
            break;
 8003ae0:	e009      	b.n	8003af6 <BSD_strnlen+0x2e>
 */
size_t
BSD_strnlen(const char *s, size_t maxlen) {
    size_t len;

    for (len = 0; len < maxlen; len++, s++) {
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3301      	adds	r3, #1
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d3f0      	bcc.n	8003ad8 <BSD_strnlen+0x10>
        if (!*s)
            break;
    }
    return (len);
 8003af6:	68fb      	ldr	r3, [r7, #12]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <OUR_strncasecmp>:
#endif

#if !HAVE_STRNCASECMP && !HAVE_STRNICMP

int OUR_strncasecmp(const char *s1, const char *s2, size_t n) {
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
    unsigned char c1, c2;

    for (; n != 0; n--) {
 8003b10:	e037      	b.n	8003b82 <OUR_strncasecmp+0x7e>
        c1 = tolower((unsigned char) *s1++);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	60fa      	str	r2, [r7, #12]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	75fb      	strb	r3, [r7, #23]
 8003b1c:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <OUR_strncasecmp+0x94>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	3301      	adds	r3, #1
 8003b24:	4413      	add	r3, r2
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d102      	bne.n	8003b36 <OUR_strncasecmp+0x32>
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	3320      	adds	r3, #32
 8003b34:	e000      	b.n	8003b38 <OUR_strncasecmp+0x34>
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
 8003b38:	75bb      	strb	r3, [r7, #22]
        c2 = tolower((unsigned char) *s2++);
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	60ba      	str	r2, [r7, #8]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	757b      	strb	r3, [r7, #21]
 8003b44:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <OUR_strncasecmp+0x94>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	7d7b      	ldrb	r3, [r7, #21]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	4413      	add	r3, r2
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d102      	bne.n	8003b5e <OUR_strncasecmp+0x5a>
 8003b58:	7d7b      	ldrb	r3, [r7, #21]
 8003b5a:	3320      	adds	r3, #32
 8003b5c:	e000      	b.n	8003b60 <OUR_strncasecmp+0x5c>
 8003b5e:	7d7b      	ldrb	r3, [r7, #21]
 8003b60:	753b      	strb	r3, [r7, #20]
        if (c1 != c2) {
 8003b62:	7dba      	ldrb	r2, [r7, #22]
 8003b64:	7d3b      	ldrb	r3, [r7, #20]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d003      	beq.n	8003b72 <OUR_strncasecmp+0x6e>
            return c1 - c2;
 8003b6a:	7dba      	ldrb	r2, [r7, #22]
 8003b6c:	7d3b      	ldrb	r3, [r7, #20]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	e00b      	b.n	8003b8a <OUR_strncasecmp+0x86>
        }
        if (c1 == '\0') {
 8003b72:	7dbb      	ldrb	r3, [r7, #22]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <OUR_strncasecmp+0x78>
            return 0;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e006      	b.n	8003b8a <OUR_strncasecmp+0x86>
#if !HAVE_STRNCASECMP && !HAVE_STRNICMP

int OUR_strncasecmp(const char *s1, const char *s2, size_t n) {
    unsigned char c1, c2;

    for (; n != 0; n--) {
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1c4      	bne.n	8003b12 <OUR_strncasecmp+0xe>
        }
        if (c1 == '\0') {
            return 0;
        }
    }
    return 0;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	1ffe8880 	.word	0x1ffe8880

08003b9c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8003baa:	7afb      	ldrb	r3, [r7, #11]
 8003bac:	089b      	lsrs	r3, r3, #2
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	7afb      	ldrb	r3, [r7, #11]
 8003bb4:	089b      	lsrs	r3, r3, #2
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3204      	adds	r2, #4
 8003bbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003bc2:	7afb      	ldrb	r3, [r7, #11]
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4619      	mov	r1, r3
 8003bcc:	23f8      	movs	r3, #248	; 0xf8
 8003bce:	408b      	lsls	r3, r1
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	ea02 0103 	and.w	r1, r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1d02      	adds	r2, r0, #4
 8003bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003be2:	7afb      	ldrb	r3, [r7, #11]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	4619      	mov	r1, r3
 8003be8:	2303      	movs	r3, #3
 8003bea:	408b      	lsls	r3, r1
 8003bec:	43db      	mvns	r3, r3
 8003bee:	401a      	ands	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4a3a      	ldr	r2, [pc, #232]	; (8003ce0 <XMC_GPIO_Init+0x144>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d003      	beq.n	8003c04 <XMC_GPIO_Init+0x68>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a39      	ldr	r2, [pc, #228]	; (8003ce4 <XMC_GPIO_Init+0x148>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10a      	bne.n	8003c1a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c08:	7afb      	ldrb	r3, [r7, #11]
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	401a      	ands	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	661a      	str	r2, [r3, #96]	; 0x60
 8003c18:	e042      	b.n	8003ca0 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	b25b      	sxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	da3c      	bge.n	8003ca0 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	7afb      	ldrb	r3, [r7, #11]
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8003c32:	7afb      	ldrb	r3, [r7, #11]
 8003c34:	08db      	lsrs	r3, r3, #3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	4618      	mov	r0, r3
 8003c3a:	7afb      	ldrb	r3, [r7, #11]
 8003c3c:	08db      	lsrs	r3, r3, #3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3210      	adds	r2, #16
 8003c46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c4a:	7afb      	ldrb	r3, [r7, #11]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4619      	mov	r1, r3
 8003c54:	2307      	movs	r3, #7
 8003c56:	408b      	lsls	r3, r1
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	ea02 0103 	and.w	r1, r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f100 0210 	add.w	r2, r0, #16
 8003c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8003c68:	7afb      	ldrb	r3, [r7, #11]
 8003c6a:	08db      	lsrs	r3, r3, #3
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	4618      	mov	r0, r3
 8003c70:	7afb      	ldrb	r3, [r7, #11]
 8003c72:	08db      	lsrs	r3, r3, #3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3210      	adds	r2, #16
 8003c7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	7a1b      	ldrb	r3, [r3, #8]
 8003c84:	4619      	mov	r1, r3
 8003c86:	7afb      	ldrb	r3, [r7, #11]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	ea42 0103 	orr.w	r1, r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f100 0210 	add.w	r2, r0, #16
 8003c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8003ca0:	7afb      	ldrb	r3, [r7, #11]
 8003ca2:	089b      	lsrs	r3, r3, #2
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	7afb      	ldrb	r3, [r7, #11]
 8003caa:	089b      	lsrs	r3, r3, #2
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3204      	adds	r2, #4
 8003cb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	7afb      	ldrb	r3, [r7, #11]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	ea42 0103 	orr.w	r1, r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1d02      	adds	r2, r0, #4
 8003cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	48028e00 	.word	0x48028e00
 8003ce4:	48028f00 	.word	0x48028f00

08003ce8 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8003cec:	4b03      	ldr	r3, [pc, #12]	; (8003cfc <XMC_SCU_GetMirrorStatus+0x14>)
 8003cee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	50004000 	.word	0x50004000

08003d00 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8003d08:	f7fc fad8 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <XMC_SCU_lDelay+0x3c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <XMC_SCU_lDelay+0x40>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	0c9a      	lsrs	r2, r3, #18
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	fb02 f303 	mul.w	r3, r2, r3
 8003d1e:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	e003      	b.n	8003d2e <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8003d26:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d3f7      	bcc.n	8003d26 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	2003ffc0 	.word	0x2003ffc0
 8003d40:	431bde83 	.word	0x431bde83

08003d44 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	50004074 	.word	0x50004074

08003d5c <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8003d64:	4a03      	ldr	r2, [pc, #12]	; (8003d74 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	60d3      	str	r3, [r2, #12]
}
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	50004074 	.word	0x50004074

08003d78 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8003d78:	b5b0      	push	{r4, r5, r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8003d80:	2000      	movs	r0, #0
 8003d82:	f000 f891 	bl	8003ea8 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8003d86:	f000 fa6f 	bl	8004268 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	79db      	ldrb	r3, [r3, #7]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8003d92:	f000 faa7 	bl	80042e4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8003d96:	bf00      	nop
 8003d98:	f000 fa92 	bl	80042c0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f083 0301 	eor.w	r3, r3, #1
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f7      	bne.n	8003d98 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	7a5b      	ldrb	r3, [r3, #9]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 f8f5 	bl	8003f9c <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8003db2:	bf00      	nop
 8003db4:	f7ff ff98 	bl	8003ce8 <XMC_SCU_GetMirrorStatus>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1fa      	bne.n	8003db4 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	7a1b      	ldrb	r3, [r3, #8]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fa2a 	bl	800421c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	7c1b      	ldrb	r3, [r3, #16]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f903 	bl	8003fd8 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	7c5b      	ldrb	r3, [r3, #17]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 f926 	bl	8004028 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	7c9b      	ldrb	r3, [r3, #18]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 f90d 	bl	8004000 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	7cdb      	ldrb	r3, [r3, #19]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 f930 	bl	8004050 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	799b      	ldrb	r3, [r3, #6]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8003df8:	f000 faac 	bl	8004354 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8003dfc:	bf00      	nop
 8003dfe:	f000 fad1 	bl	80043a4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f083 0301 	eor.w	r3, r3, #1
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f7      	bne.n	8003dfe <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	78db      	ldrb	r3, [r3, #3]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	799b      	ldrb	r3, [r3, #6]
 8003e1a:	f083 0301 	eor.w	r3, r3, #1
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d017      	beq.n	8003e54 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8003e24:	f000 fae2 	bl	80043ec <XMC_SCU_CLOCK_DisableSystemPll>
 8003e28:	e014      	b.n	8003e54 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8003e2a:	f000 facf 	bl	80043cc <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8899      	ldrh	r1, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8003e3a:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8003e40:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	4608      	mov	r0, r1
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	462a      	mov	r2, r5
 8003e4e:	4623      	mov	r3, r4
 8003e50:	f000 fadc 	bl	800440c <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e5c:	d103      	bne.n	8003e66 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 8003e5e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003e62:	f000 f821 	bl	8003ea8 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8003e66:	f7fc fa29 	bl	80002bc <SystemCoreClockUpdate>
}
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bdb0      	pop	{r4, r5, r7, pc}

08003e70 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	0f1b      	lsrs	r3, r3, #28
 8003e7c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e84:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	461a      	mov	r2, r3
 8003e92:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8003e94:	4413      	add	r3, r2
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	601a      	str	r2, [r3, #0]
}
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	50004414 	.word	0x50004414

08003ea8 <XMC_SCU_CLOCK_SetSystemClockSource>:
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8003eb0:	4906      	ldr	r1, [pc, #24]	; (8003ecc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8003eb2:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	50004600 	.word	0x50004600

08003ed0 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8003ed8:	4906      	ldr	r1, [pc, #24]	; (8003ef4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	50004600 	.word	0x50004600

08003ef8 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8003f00:	4906      	ldr	r1, [pc, #24]	; (8003f1c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8003f02:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	50004600 	.word	0x50004600

08003f20 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d108      	bne.n	8003f42 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8003f30:	4a0a      	ldr	r2, [pc, #40]	; (8003f5c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f3a:	f023 0301 	bic.w	r3, r3, #1
 8003f3e:	60d3      	str	r3, [r2, #12]
 8003f40:	e007      	b.n	8003f52 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8003f42:	4a06      	ldr	r2, [pc, #24]	; (8003f5c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	60d3      	str	r3, [r2, #12]
  }
}
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	50004710 	.word	0x50004710

08003f60 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003f6a:	bf00      	nop
 8003f6c:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8003f6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f8      	bne.n	8003f6c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8003f7a:	4907      	ldr	r1, [pc, #28]	; (8003f98 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8003f84:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	50004000 	.word	0x50004000
 8003f98:	50004300 	.word	0x50004300

08003f9c <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003fa6:	bf00      	nop
 8003fa8:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8003faa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f8      	bne.n	8003fa8 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8003fb6:	4907      	ldr	r1, [pc, #28]	; (8003fd4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8003fb8:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	50004000 	.word	0x50004000
 8003fd4:	50004300 	.word	0x50004300

08003fd8 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8003fe0:	4906      	ldr	r1, [pc, #24]	; (8003ffc <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8003fe2:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	50004600 	.word	0x50004600

08004000 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8004008:	4906      	ldr	r1, [pc, #24]	; (8004024 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8004016:	4313      	orrs	r3, r2
 8004018:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	50004600 	.word	0x50004600

08004028 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8004030:	4906      	ldr	r1, [pc, #24]	; (800404c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800403e:	4313      	orrs	r3, r2
 8004040:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	50004600 	.word	0x50004600

08004050 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8004058:	4906      	ldr	r1, [pc, #24]	; (8004074 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800405a:	4b06      	ldr	r3, [pc, #24]	; (8004074 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8004066:	4313      	orrs	r3, r2
 8004068:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	50004600 	.word	0x50004600

08004078 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8004080:	4906      	ldr	r1, [pc, #24]	; (800409c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800408e:	4313      	orrs	r3, r2
 8004090:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	50004600 	.word	0x50004600

080040a0 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80040a8:	4906      	ldr	r1, [pc, #24]	; (80040c4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	50004600 	.word	0x50004600

080040c8 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80040d0:	4906      	ldr	r1, [pc, #24]	; (80040ec <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80040de:	4313      	orrs	r3, r2
 80040e0:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	50004600 	.word	0x50004600

080040f0 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80040fa:	4a04      	ldr	r2, [pc, #16]	; (800410c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	6053      	str	r3, [r2, #4]
}
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	50004600 	.word	0x50004600

08004110 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	0f1b      	lsrs	r3, r3, #28
 800411c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004124:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4613      	mov	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	461a      	mov	r2, r3
 8004132:	4b04      	ldr	r3, [pc, #16]	; (8004144 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8004134:	4413      	add	r3, r2
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	601a      	str	r2, [r3, #0]
}
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	50004648 	.word	0x50004648

08004148 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 800414c:	4a05      	ldr	r2, [pc, #20]	; (8004164 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 800414e:	4b05      	ldr	r3, [pc, #20]	; (8004164 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004156:	f023 0302 	bic.w	r3, r3, #2
 800415a:	6153      	str	r3, [r2, #20]
}
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	50004710 	.word	0x50004710

08004168 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8004172:	4a28      	ldr	r2, [pc, #160]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8004174:	4b27      	ldr	r3, [pc, #156]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 800417e:	bf00      	nop
 8004180:	4b24      	ldr	r3, [pc, #144]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f9      	beq.n	8004180 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 800418c:	4a21      	ldr	r2, [pc, #132]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800418e:	4b21      	ldr	r3, [pc, #132]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f043 0310 	orr.w	r3, r3, #16
 8004196:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8004198:	491e      	ldr	r1, [pc, #120]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	3b01      	subs	r3, #1
 800419e:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80041a6:	4313      	orrs	r3, r2
 80041a8:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80041aa:	4a1a      	ldr	r2, [pc, #104]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80041ac:	4b19      	ldr	r3, [pc, #100]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041b4:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80041b6:	4a17      	ldr	r2, [pc, #92]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80041b8:	4b16      	ldr	r3, [pc, #88]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f023 0310 	bic.w	r3, r3, #16
 80041c0:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80041c2:	4a14      	ldr	r2, [pc, #80]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80041c4:	4b13      	ldr	r3, [pc, #76]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041cc:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80041ce:	bf00      	nop
 80041d0:	4b10      	ldr	r3, [pc, #64]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f9      	beq.n	80041d0 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80041dc:	4a0d      	ldr	r2, [pc, #52]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80041de:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 80041e8:	bf00      	nop
 80041ea:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f9      	bne.n	80041ea <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80041f6:	4a07      	ldr	r2, [pc, #28]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004200:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8004202:	4b05      	ldr	r3, [pc, #20]	; (8004218 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8004204:	2208      	movs	r2, #8
 8004206:	60da      	str	r2, [r3, #12]
}
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	50004710 	.word	0x50004710
 8004218:	50004160 	.word	0x50004160

0800421c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8004226:	4a0f      	ldr	r2, [pc, #60]	; (8004264 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8004228:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004230:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d10e      	bne.n	8004256 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8004238:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004242:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8004244:	2064      	movs	r0, #100	; 0x64
 8004246:	f7ff fd5b 	bl	8003d00 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 800424a:	4a06      	ldr	r2, [pc, #24]	; (8004264 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004254:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8004256:	2064      	movs	r0, #100	; 0x64
 8004258:	f7ff fd52 	bl	8003d00 <XMC_SCU_lDelay>
}
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	50004710 	.word	0x50004710

08004268 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d109      	bne.n	800428c <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8004278:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800427a:	2201      	movs	r2, #1
 800427c:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800427e:	bf00      	nop
 8004280:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f9      	beq.n	8004280 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8004298:	4b08      	ldr	r3, [pc, #32]	; (80042bc <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 800429a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800429e:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 80042a0:	bf00      	nop
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f9      	bne.n	80042a2 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	50004200 	.word	0x50004200
 80042bc:	50004400 	.word	0x50004400

080042c0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	50004300 	.word	0x50004300

080042e4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 80042e8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80042ec:	f7ff fd36 	bl	8003d5c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80042f0:	4a17      	ldr	r2, [pc, #92]	; (8004350 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80042f2:	4b17      	ldr	r3, [pc, #92]	; (8004350 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80042fa:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 80042fc:	bf00      	nop
 80042fe:	f7ff fd21 	bl	8003d44 <XMC_SCU_INTERUPT_GetEventStatus>
 8004302:	4603      	mov	r3, r0
 8004304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f8      	beq.n	80042fe <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 800430c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004310:	f7ff fd24 	bl	8003d5c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8004314:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8004316:	2208      	movs	r2, #8
 8004318:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 800431a:	bf00      	nop
 800431c:	f7ff fd12 	bl	8003d44 <XMC_SCU_INTERUPT_GetEventStatus>
 8004320:	4603      	mov	r3, r0
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f8      	beq.n	800431c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 800432a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800432e:	f7ff fd15 	bl	8003d5c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8004332:	4a07      	ldr	r2, [pc, #28]	; (8004350 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8004334:	4b06      	ldr	r3, [pc, #24]	; (8004350 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f043 0308 	orr.w	r3, r3, #8
 800433c:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 800433e:	bf00      	nop
 8004340:	f7ff fd00 	bl	8003d44 <XMC_SCU_INTERUPT_GetEventStatus>
 8004344:	4603      	mov	r3, r0
 8004346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f8      	beq.n	8004340 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 800434e:	bd80      	pop	{r7, pc}
 8004350:	50004300 	.word	0x50004300

08004354 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8004354:	b5b0      	push	{r4, r5, r7, lr}
 8004356:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8004358:	4a0f      	ldr	r2, [pc, #60]	; (8004398 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800435a:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004362:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8004364:	4d0d      	ldr	r5, [pc, #52]	; (800439c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 800436e:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8004372:	f009 fd6b 	bl	800de4c <OSCHP_GetFrequency>
 8004376:	4602      	mov	r2, r0
 8004378:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 800437a:	fba3 2302 	umull	r2, r3, r3, r2
 800437e:	0d1b      	lsrs	r3, r3, #20
 8004380:	3b01      	subs	r3, #1
 8004382:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8004384:	4323      	orrs	r3, r4
 8004386:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8004388:	4a03      	ldr	r2, [pc, #12]	; (8004398 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800438a:	4b03      	ldr	r3, [pc, #12]	; (8004398 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004392:	6053      	str	r3, [r2, #4]
}
 8004394:	bdb0      	pop	{r4, r5, r7, pc}
 8004396:	bf00      	nop
 8004398:	50004710 	.word	0x50004710
 800439c:	50004700 	.word	0x50004700
 80043a0:	6b5fca6b 	.word	0x6b5fca6b

080043a4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 80043a8:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80043b0:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80043b4:	bf0c      	ite	eq
 80043b6:	2301      	moveq	r3, #1
 80043b8:	2300      	movne	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	50004710 	.word	0x50004710

080043cc <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80043d0:	4a05      	ldr	r2, [pc, #20]	; (80043e8 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043da:	f023 0302 	bic.w	r3, r3, #2
 80043de:	6053      	str	r3, [r2, #4]
}
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	50004710 	.word	0x50004710

080043ec <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80043f0:	4a05      	ldr	r2, [pc, #20]	; (8004408 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80043f2:	4b05      	ldr	r3, [pc, #20]	; (8004408 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043fa:	f043 0302 	orr.w	r3, r3, #2
 80043fe:	6053      	str	r3, [r2, #4]
}
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	50004710 	.word	0x50004710

0800440c <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60ba      	str	r2, [r7, #8]
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	4603      	mov	r3, r0
 8004418:	81fb      	strh	r3, [r7, #14]
 800441a:	460b      	mov	r3, r1
 800441c:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 800441e:	89fb      	ldrh	r3, [r7, #14]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fd7d 	bl	8003f20 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8004426:	7b7b      	ldrb	r3, [r7, #13]
 8004428:	2b01      	cmp	r3, #1
 800442a:	f040 808b 	bne.w	8004544 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 800442e:	89fb      	ldrh	r3, [r7, #14]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d109      	bne.n	8004448 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8004434:	f009 fd0a 	bl	800de4c <OSCHP_GetFrequency>
 8004438:	4602      	mov	r2, r0
 800443a:	4b54      	ldr	r3, [pc, #336]	; (800458c <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 800443c:	fba3 2302 	umull	r2, r3, r3, r2
 8004440:	0c9b      	lsrs	r3, r3, #18
 8004442:	059b      	lsls	r3, r3, #22
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e002      	b.n	800444e <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8004448:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800444c:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	fb02 f203 	mul.w	r2, r2, r3
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	4a4b      	ldr	r2, [pc, #300]	; (8004590 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	091b      	lsrs	r3, r3, #4
 8004468:	0d9b      	lsrs	r3, r3, #22
 800446a:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 800446c:	4a49      	ldr	r2, [pc, #292]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800446e:	4b49      	ldr	r3, [pc, #292]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8004478:	bf00      	nop
 800447a:	4b46      	ldr	r3, [pc, #280]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f9      	beq.n	800447a <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8004486:	4a43      	ldr	r2, [pc, #268]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8004488:	4b42      	ldr	r3, [pc, #264]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f043 0310 	orr.w	r3, r3, #16
 8004490:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8004492:	4940      	ldr	r1, [pc, #256]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8004494:	4b3f      	ldr	r3, [pc, #252]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	4b3f      	ldr	r3, [pc, #252]	; (8004598 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 800449a:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	3a01      	subs	r2, #1
 80044a0:	0212      	lsls	r2, r2, #8
 80044a2:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 80044aa:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80044b6:	4a37      	ldr	r2, [pc, #220]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80044b8:	4b36      	ldr	r3, [pc, #216]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c0:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 80044c2:	4a34      	ldr	r2, [pc, #208]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80044c4:	4b33      	ldr	r3, [pc, #204]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f023 0310 	bic.w	r3, r3, #16
 80044cc:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 80044ce:	4a31      	ldr	r2, [pc, #196]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80044d0:	4b30      	ldr	r3, [pc, #192]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d8:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80044da:	bf00      	nop
 80044dc:	4b2d      	ldr	r3, [pc, #180]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f9      	beq.n	80044dc <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80044e8:	4a2a      	ldr	r2, [pc, #168]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80044ea:	4b2a      	ldr	r3, [pc, #168]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f023 0301 	bic.w	r3, r3, #1
 80044f2:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80044f4:	bf00      	nop
 80044f6:	4b27      	ldr	r3, [pc, #156]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f9      	bne.n	80044f6 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	4a25      	ldr	r2, [pc, #148]	; (800459c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	0d9b      	lsrs	r3, r3, #22
 800450e:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8004510:	6a3a      	ldr	r2, [r7, #32]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	429a      	cmp	r2, r3
 8004516:	d202      	bcs.n	800451e <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8004518:	6938      	ldr	r0, [r7, #16]
 800451a:	f000 f845 	bl	80045a8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	4a1f      	ldr	r2, [pc, #124]	; (80045a0 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	0d9b      	lsrs	r3, r3, #22
 800452c:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 800452e:	6a3a      	ldr	r2, [r7, #32]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	429a      	cmp	r2, r3
 8004534:	d202      	bcs.n	800453c <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8004536:	6938      	ldr	r0, [r7, #16]
 8004538:	f000 f836 	bl	80045a8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 800453c:	6a38      	ldr	r0, [r7, #32]
 800453e:	f000 f833 	bl	80045a8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8004542:	e01c      	b.n	800457e <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8004544:	4913      	ldr	r1, [pc, #76]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8004546:	4b13      	ldr	r3, [pc, #76]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8004556:	bf00      	nop
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f9      	beq.n	8004558 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8004564:	4a0b      	ldr	r2, [pc, #44]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8004566:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8004570:	bf00      	nop
 8004572:	4b08      	ldr	r3, [pc, #32]	; (8004594 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f9      	beq.n	8004572 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 800457e:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8004580:	2205      	movs	r2, #5
 8004582:	60da      	str	r2, [r3, #12]
}
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	431bde83 	.word	0x431bde83
 8004590:	aaaaaaab 	.word	0xaaaaaaab
 8004594:	50004710 	.word	0x50004710
 8004598:	f08080ff 	.word	0xf08080ff
 800459c:	88888889 	.word	0x88888889
 80045a0:	b60b60b7 	.word	0xb60b60b7
 80045a4:	50004160 	.word	0x50004160

080045a8 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80045b0:	490b      	ldr	r1, [pc, #44]	; (80045e0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 80045b2:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3b01      	subs	r3, #1
 80045be:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80045c0:	4313      	orrs	r3, r2
 80045c2:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 80045c4:	bf00      	nop
 80045c6:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f9      	beq.n	80045c6 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 80045d2:	2032      	movs	r0, #50	; 0x32
 80045d4:	f7ff fb94 	bl	8003d00 <XMC_SCU_lDelay>
}
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	50004710 	.word	0x50004710

080045e4 <XMC_ETH_MAC_Reset>:
 *
 * \par
 * The function resets the ETH MAC peripheral. It blocks until reset.
 */
__STATIC_INLINE void XMC_ETH_MAC_Reset(XMC_ETH_MAC_t *const eth_mac)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  eth_mac->regs->BUS_MODE |= (uint32_t)ETH_BUS_MODE_SWR_Msk;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045f8:	6812      	ldr	r2, [r2, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004602:	601a      	str	r2, [r3, #0]
  while ((eth_mac->regs->BUS_MODE & (uint32_t)ETH_BUS_MODE_SWR_Msk) != 0U)
 8004604:	bf00      	nop
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f6      	bne.n	8004606 <XMC_ETH_MAC_Reset+0x22>
  {
  }
}
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop

08004624 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
}
 8004638:	4618      	mov	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	2003ffc0 	.word	0x2003ffc0
 8004648:	50004600 	.word	0x50004600

0800464c <XMC_SCU_CLOCK_GetEthernetClockFrequency>:
 * fETH = fSYS >> 1;
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetSystemClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEthernetClockFrequency(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  return XMC_SCU_CLOCK_GetSystemClockFrequency() >> 1U;
 8004650:	f7ff ffe8 	bl	8004624 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8004654:	4603      	mov	r3, r0
 8004656:	085b      	lsrs	r3, r3, #1
}
 8004658:	4618      	mov	r0, r3
 800465a:	bd80      	pop	{r7, pc}

0800465c <XCM_ETH_MAC_IsNormalEvent>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* Check if the event passed is a normal event */
__STATIC_INLINE bool XCM_ETH_MAC_IsNormalEvent(uint32_t event)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT |
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	f244 0345 	movw	r3, #16453	; 0x4045
 800466a:	4013      	ands	r3, r2
 800466c:	2b00      	cmp	r3, #0
 800466e:	bf14      	ite	ne
 8004670:	2301      	movne	r3, #1
 8004672:	2300      	moveq	r3, #0
 8004674:	b2db      	uxtb	r3, r3
                          (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE |
                          (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE |
                          (uint32_t)XMC_ETH_MAC_EVENT_EARLY_RECEIVE)) != (uint32_t)0);
}
 8004676:	4618      	mov	r0, r3
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop

08004684 <XCM_ETH_MAC_IsAbnormalEvent>:

/* Check if the event passed is an abnormal event */
__STATIC_INLINE bool XCM_ETH_MAC_IsAbnormalEvent(uint32_t event)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED |
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	f242 73ba 	movw	r3, #10170	; 0x27ba
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	bf14      	ite	ne
 8004698:	2301      	movne	r3, #1
 800469a:	2300      	moveq	r3, #0
 800469c:	b2db      	uxtb	r3, r3
                          (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE |
                          (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED |
                          (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT |
                          (uint32_t)XMC_ETH_MAC_EVENT_EARLY_TRANSMIT |
                          (uint32_t)XMC_ETH_MAC_EVENT_BUS_ERROR)) != (uint32_t)0);
}
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop

080046ac <XMC_ETH_MAC_InitEx>:
}

#endif

void XMC_ETH_MAC_InitEx(XMC_ETH_MAC_t *const eth_mac)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_ETH_MAC_InitEx: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  XMC_ETH_MAC_Reset(eth_mac);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff ff95 	bl	80045e4 <XMC_ETH_MAC_Reset>

  /* Initialize MAC configuration */
  eth_mac->regs->MAC_CONFIGURATION = (uint32_t)ETH_MAC_CONFIGURATION_IPC_Msk;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046c2:	601a      	str	r2, [r3, #0]

  /* Initialize Filter registers */
  eth_mac->regs->FLOW_CONTROL = ETH_FLOW_CONTROL_DZPQ_Msk; /* Disable Zero Quanta Pause */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2280      	movs	r2, #128	; 0x80
 80046ca:	619a      	str	r2, [r3, #24]

  eth_mac->regs->OPERATION_MODE = (uint32_t)ETH_OPERATION_MODE_RSF_Msk |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d4:	3318      	adds	r3, #24
 80046d6:	4a19      	ldr	r2, [pc, #100]	; (800473c <XMC_ETH_MAC_InitEx+0x90>)
 80046d8:	601a      	str	r2, [r3, #0]
                                  (uint32_t)ETH_OPERATION_MODE_TSF_Msk |
                                  (uint32_t)ETH_OPERATION_MODE_OSF_Msk;

  /* Increase enhanced descriptor to 8 WORDS, required when the Advanced Time-Stamp feature or Full IPC Offload Engine is enabled */
  eth_mac->regs->BUS_MODE = (uint32_t)ETH_BUS_MODE_ATDS_Msk |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e2:	4a17      	ldr	r2, [pc, #92]	; (8004740 <XMC_ETH_MAC_InitEx+0x94>)
 80046e4:	601a      	str	r2, [r3, #0]
                            (uint32_t)ETH_BUS_MODE_AAL_Msk | /* the AHB interface generates all bursts aligned to the start address LS bits */
                            (uint32_t)ETH_BUS_MODE_FB_Msk | /* DMA attempts to execute fixed-length Burst transfers on the AHB Master interface */
                            (uint32_t)(0x20 << ETH_BUS_MODE_PBL_Pos); /* maximum Burst length */

  /* Initialize DMA Descriptors */
  XMC_ETH_MAC_InitRxDescriptors(eth_mac);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f82c 	bl	8004744 <XMC_ETH_MAC_InitRxDescriptors>
  XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f88d 	bl	800480c <XMC_ETH_MAC_InitTxDescriptors>

  /* Clear interrupts */
  eth_mac->regs->STATUS = 0xFFFFFFFFUL;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fa:	3314      	adds	r3, #20
 80046fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004700:	601a      	str	r2, [r3, #0]

  /* Disable MMC interrupt events */
  eth_mac->regs->MMC_TRANSMIT_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_INTERRUPT_MSK;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 800470a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  eth_mac->regs->MMC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_INTERRUPT_MSK;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8004716:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  eth_mac->regs->MMC_IPC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_IPC_RECEIVE_INTERRUPT_MSK;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8004722:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Disable PMT and timestamp interrupt events */
  eth_mac->regs->INTERRUPT_MASK = ETH_INTERRUPT_MASK_PMTIM_Msk | ETH_INTERRUPT_MASK_TSIM_Msk;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f44f 7202 	mov.w	r2, #520	; 0x208
 800472e:	63da      	str	r2, [r3, #60]	; 0x3c

  eth_mac->frame_end = NULL;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	02200004 	.word	0x02200004
 8004740:	02012080 	.word	0x02012080

08004744 <XMC_ETH_MAC_InitRxDescriptors>:
  return status;
}

/* Initialize RX descriptors */
void XMC_ETH_MAC_InitRxDescriptors(XMC_ETH_MAC_t *const eth_mac)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]

  /*
   * Chained structure (ETH_MAC_DMA_RDES1_RCH), second address in the descriptor
   * (buffer2) is the next descriptor address
   */
  for (i = 0U; i < eth_mac->num_rx_buf; ++i)
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e043      	b.n	80047da <XMC_ETH_MAC_InitRxDescriptors+0x96>
  {
    eth_mac->rx_desc[i].status = (uint32_t)ETH_MAC_DMA_RDES0_OWN;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	015b      	lsls	r3, r3, #5
 800475a:	4413      	add	r3, r2
 800475c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004760:	601a      	str	r2, [r3, #0]
    eth_mac->rx_desc[i].length = (uint32_t)ETH_MAC_DMA_RDES1_RCH | (uint32_t)XMC_ETH_MAC_BUF_SIZE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	015b      	lsls	r3, r3, #5
 800476a:	4413      	add	r3, r2
 800476c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004770:	605a      	str	r2, [r3, #4]

    if (eth_mac->rx_buf != NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00e      	beq.n	8004798 <XMC_ETH_MAC_InitRxDescriptors+0x54>
    {
      eth_mac->rx_desc[i].buffer1 = (uint32_t) & (eth_mac->rx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	015b      	lsls	r3, r3, #5
 8004782:	4413      	add	r3, r2
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6991      	ldr	r1, [r2, #24]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	f240 50f4 	movw	r0, #1524	; 0x5f4
 800478e:	fb00 f202 	mul.w	r2, r0, r2
 8004792:	440a      	add	r2, r1
 8004794:	609a      	str	r2, [r3, #8]
 8004796:	e006      	b.n	80047a6 <XMC_ETH_MAC_InitRxDescriptors+0x62>
    }
    else
    {
      eth_mac->rx_desc[i].buffer1 = 0;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	015b      	lsls	r3, r3, #5
 80047a0:	4413      	add	r3, r2
 80047a2:	2200      	movs	r2, #0
 80047a4:	609a      	str	r2, [r3, #8]
    }

    next = i + 1U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3301      	adds	r3, #1
 80047aa:	60bb      	str	r3, [r7, #8]
    if (next == eth_mac->num_rx_buf)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047b2:	461a      	mov	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d101      	bne.n	80047be <XMC_ETH_MAC_InitRxDescriptors+0x7a>
    {
      next = 0U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60bb      	str	r3, [r7, #8]
    }
    eth_mac->rx_desc[i].buffer2 = (uint32_t) & (eth_mac->rx_desc[next]);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	015b      	lsls	r3, r3, #5
 80047c6:	4413      	add	r3, r2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6911      	ldr	r1, [r2, #16]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	0152      	lsls	r2, r2, #5
 80047d0:	440a      	add	r2, r1
 80047d2:	60da      	str	r2, [r3, #12]

  /*
   * Chained structure (ETH_MAC_DMA_RDES1_RCH), second address in the descriptor
   * (buffer2) is the next descriptor address
   */
  for (i = 0U; i < eth_mac->num_rx_buf; ++i)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3301      	adds	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047e0:	461a      	mov	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d8b4      	bhi.n	8004752 <XMC_ETH_MAC_InitRxDescriptors+0xe>
    {
      next = 0U;
    }
    eth_mac->rx_desc[i].buffer2 = (uint32_t) & (eth_mac->rx_desc[next]);
  }
  eth_mac->regs->RECEIVE_DESCRIPTOR_LIST_ADDRESS = (uint32_t) & (eth_mac->rx_desc[0]);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6912      	ldr	r2, [r2, #16]
 80047f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f4:	330c      	adds	r3, #12
 80047f6:	601a      	str	r2, [r3, #0]
  eth_mac->rx_index = 0U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop

0800480c <XMC_ETH_MAC_InitTxDescriptors>:

/* Initialize TX descriptors */
void XMC_ETH_MAC_InitTxDescriptors(XMC_ETH_MAC_t *const eth_mac)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t next;

  XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the next descriptor address */
  for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	e03a      	b.n	8004890 <XMC_ETH_MAC_InitTxDescriptors+0x84>
  {
    eth_mac->tx_desc[i].status = ETH_MAC_DMA_TDES0_TCH | ETH_MAC_DMA_TDES0_LS | ETH_MAC_DMA_TDES0_FS | ETH_MAC_DMA_TDES0_IC;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	015b      	lsls	r3, r3, #5
 8004822:	4413      	add	r3, r2
 8004824:	4a26      	ldr	r2, [pc, #152]	; (80048c0 <XMC_ETH_MAC_InitTxDescriptors+0xb4>)
 8004826:	601a      	str	r2, [r3, #0]

    if (eth_mac->tx_buf != NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00e      	beq.n	800484e <XMC_ETH_MAC_InitTxDescriptors+0x42>
    {
      eth_mac->tx_desc[i].buffer1 = (uint32_t) & (eth_mac->tx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695a      	ldr	r2, [r3, #20]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	015b      	lsls	r3, r3, #5
 8004838:	4413      	add	r3, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	69d1      	ldr	r1, [r2, #28]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8004844:	fb00 f202 	mul.w	r2, r0, r2
 8004848:	440a      	add	r2, r1
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	e006      	b.n	800485c <XMC_ETH_MAC_InitTxDescriptors+0x50>
    }
    else
    {
      eth_mac->tx_desc[i].buffer1 = 0;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	015b      	lsls	r3, r3, #5
 8004856:	4413      	add	r3, r2
 8004858:	2200      	movs	r2, #0
 800485a:	609a      	str	r2, [r3, #8]
    }

    next = i + 1U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3301      	adds	r3, #1
 8004860:	60bb      	str	r3, [r7, #8]
    if (next == eth_mac->num_tx_buf)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004868:	461a      	mov	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	429a      	cmp	r2, r3
 800486e:	d101      	bne.n	8004874 <XMC_ETH_MAC_InitTxDescriptors+0x68>
    {
      next = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	60bb      	str	r3, [r7, #8]
    }
    eth_mac->tx_desc[i].buffer2 = (uint32_t) & (eth_mac->tx_desc[next]);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	695a      	ldr	r2, [r3, #20]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	015b      	lsls	r3, r3, #5
 800487c:	4413      	add	r3, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6951      	ldr	r1, [r2, #20]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	0152      	lsls	r2, r2, #5
 8004886:	440a      	add	r2, r1
 8004888:	60da      	str	r2, [r3, #12]
  uint32_t next;

  XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the next descriptor address */
  for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3301      	adds	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004896:	461a      	mov	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	429a      	cmp	r2, r3
 800489c:	d8bd      	bhi.n	800481a <XMC_ETH_MAC_InitTxDescriptors+0xe>
    {
      next = 0U;
    }
    eth_mac->tx_desc[i].buffer2 = (uint32_t) & (eth_mac->tx_desc[next]);
  }
  eth_mac->regs->TRANSMIT_DESCRIPTOR_LIST_ADDRESS = (uint32_t) & (eth_mac->tx_desc[0]);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6952      	ldr	r2, [r2, #20]
 80048a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048aa:	3310      	adds	r3, #16
 80048ac:	601a      	str	r2, [r3, #0]
  eth_mac->tx_index = 0U;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	70100000 	.word	0x70100000

080048c4 <XMC_ETH_MAC_GetRxFrameSize>:
  return (len);
}

/* Get RX frame size */
uint32_t XMC_ETH_MAC_GetRxFrameSize(XMC_ETH_MAC_t *const eth_mac)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint32_t len = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]

  status = eth_mac->rx_desc[eth_mac->rx_index].status;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80048da:	015b      	lsls	r3, r3, #5
 80048dc:	4413      	add	r3, r2
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	60bb      	str	r3, [r7, #8]

  if (status & ETH_MAC_DMA_RDES0_OWN)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	da02      	bge.n	80048ee <XMC_ETH_MAC_GetRxFrameSize+0x2a>
  {
    /* Owned by DMA */
    len = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	e018      	b.n	8004920 <XMC_ETH_MAC_GetRxFrameSize+0x5c>
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d109      	bne.n	800490c <XMC_ETH_MAC_GetRxFrameSize+0x48>
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if (status & ETH_MAC_DMA_RDES0_OWN)
  {
    /* Owned by DMA */
    len = 0U;
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d004      	beq.n	800490c <XMC_ETH_MAC_GetRxFrameSize+0x48>
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
           ((status & ETH_MAC_DMA_RDES0_LS) == 0U))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f403 7380 	and.w	r3, r3, #256	; 0x100
  {
    /* Owned by DMA */
    len = 0U;
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 8004908:	2b00      	cmp	r3, #0
 800490a:	d103      	bne.n	8004914 <XMC_ETH_MAC_GetRxFrameSize+0x50>
           ((status & ETH_MAC_DMA_RDES0_LS) == 0U))
  {
    /* Error, this block is invalid */
    len = 0xFFFFFFFFU;
 800490c:	f04f 33ff 	mov.w	r3, #4294967295
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	e005      	b.n	8004920 <XMC_ETH_MAC_GetRxFrameSize+0x5c>
  }
  else
  {
    /* Subtract CRC */
    len = ((status & ETH_MAC_DMA_RDES0_FL) >> 16U) - 4U;
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	4b06      	ldr	r3, [pc, #24]	; (8004930 <XMC_ETH_MAC_GetRxFrameSize+0x6c>)
 8004918:	4013      	ands	r3, r2
 800491a:	0c1b      	lsrs	r3, r3, #16
 800491c:	3b04      	subs	r3, #4
 800491e:	60fb      	str	r3, [r7, #12]
  }

  return len;
 8004920:	68fb      	ldr	r3, [r7, #12]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	3fff0000 	.word	0x3fff0000

08004934 <XMC_ETH_MAC_SetManagmentClockDivider>:

/* Set management clock divider */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SetManagmentClockDivider(XMC_ETH_MAC_t *const eth_mac)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t eth_mac_clk;
  XMC_ETH_MAC_STATUS_t status;
  __IO uint32_t *reg;

  eth_mac_clk = XMC_SCU_CLOCK_GetEthernetClockFrequency();
 800493c:	f7ff fe86 	bl	800464c <XMC_SCU_CLOCK_GetEthernetClockFrequency>
 8004940:	6138      	str	r0, [r7, #16]
  status = XMC_ETH_MAC_STATUS_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	75fb      	strb	r3, [r7, #23]

  reg = &(eth_mac->regs->GMII_ADDRESS);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3310      	adds	r3, #16
 800494c:	60fb      	str	r3, [r7, #12]
  if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_35MHZ)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <XMC_ETH_MAC_SetManagmentClockDivider+0x88>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d803      	bhi.n	800495e <XMC_ETH_MAC_SetManagmentClockDivider+0x2a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_16;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2208      	movs	r2, #8
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	e029      	b.n	80049b2 <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_60MHZ)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4a17      	ldr	r2, [pc, #92]	; (80049c0 <XMC_ETH_MAC_SetManagmentClockDivider+0x8c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d803      	bhi.n	800496e <XMC_ETH_MAC_SetManagmentClockDivider+0x3a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_26;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	220c      	movs	r2, #12
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e021      	b.n	80049b2 <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_100MHZ)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4a14      	ldr	r2, [pc, #80]	; (80049c4 <XMC_ETH_MAC_SetManagmentClockDivider+0x90>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d803      	bhi.n	800497e <XMC_ETH_MAC_SetManagmentClockDivider+0x4a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_42;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	e019      	b.n	80049b2 <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_150MHZ)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4a11      	ldr	r2, [pc, #68]	; (80049c8 <XMC_ETH_MAC_SetManagmentClockDivider+0x94>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d803      	bhi.n	800498e <XMC_ETH_MAC_SetManagmentClockDivider+0x5a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_62;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2204      	movs	r2, #4
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e011      	b.n	80049b2 <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_200MHZ)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4a0e      	ldr	r2, [pc, #56]	; (80049cc <XMC_ETH_MAC_SetManagmentClockDivider+0x98>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d803      	bhi.n	800499e <XMC_ETH_MAC_SetManagmentClockDivider+0x6a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_102;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2210      	movs	r2, #16
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e009      	b.n	80049b2 <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_250MHZ)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4a0b      	ldr	r2, [pc, #44]	; (80049d0 <XMC_ETH_MAC_SetManagmentClockDivider+0x9c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d803      	bhi.n	80049ae <XMC_ETH_MAC_SetManagmentClockDivider+0x7a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_124;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2214      	movs	r2, #20
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	e001      	b.n	80049b2 <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else
  {
    status = XMC_ETH_MAC_STATUS_ERROR;
 80049ae:	2302      	movs	r3, #2
 80049b0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	02160ec0 	.word	0x02160ec0
 80049c0:	03938700 	.word	0x03938700
 80049c4:	05f5e100 	.word	0x05f5e100
 80049c8:	08f0d180 	.word	0x08f0d180
 80049cc:	0bebc200 	.word	0x0bebc200
 80049d0:	0ee6b280 	.word	0x0ee6b280

080049d4 <XMC_ETH_MAC_Enable>:

/* ETH MAC enable */
void XMC_ETH_MAC_Enable(XMC_ETH_MAC_t *const eth_mac)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(eth_mac);

  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_ETH);
 80049dc:	2004      	movs	r0, #4
 80049de:	f7ff fb87 	bl	80040f0 <XMC_SCU_CLOCK_EnableClock>
#if UC_DEVICE != XMC4500
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ETH0);
 80049e2:	4804      	ldr	r0, [pc, #16]	; (80049f4 <XMC_ETH_MAC_Enable+0x20>)
 80049e4:	f7ff fb94 	bl	8004110 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ETH0);
 80049e8:	4802      	ldr	r0, [pc, #8]	; (80049f4 <XMC_ETH_MAC_Enable+0x20>)
 80049ea:	f7ff fa41 	bl	8003e70 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20000004 	.word	0x20000004

080049f8 <XMC_ETH_MAC_ReadPhy>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_ETH);
}

/* Read physical layer and obtain status */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_ReadPhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t *data)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	607b      	str	r3, [r7, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	72fb      	strb	r3, [r7, #11]
 8004a06:	4613      	mov	r3, r2
 8004a08:	72bb      	strb	r3, [r7, #10]
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	6812      	ldr	r2, [r2, #0]
 8004a12:	6912      	ldr	r2, [r2, #16]
 8004a14:	f002 013c 	and.w	r1, r2, #60	; 0x3c
                                (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
 8004a18:	7afa      	ldrb	r2, [r7, #11]
 8004a1a:	02d2      	lsls	r2, r2, #11
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
                                (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 8004a1c:	4311      	orrs	r1, r2
                                (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));
 8004a1e:	7aba      	ldrb	r2, [r7, #10]
 8004a20:	0192      	lsls	r2, r2, #6
{
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8004a22:	430a      	orrs	r2, r1
 8004a24:	f042 0201 	orr.w	r2, r2, #1
 8004a28:	611a      	str	r2, [r3, #16]
                                (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));

  /* Poll busy bit during max PHY_TIMEOUT time */
  retries = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
  do
  {
    if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d107      	bne.n	8004a4c <XMC_ETH_MAC_ReadPhy+0x54>
    {
      *data = (uint16_t)(eth_mac->regs->GMII_DATA & ETH_GMII_DATA_MD_Msk);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	801a      	strh	r2, [r3, #0]
      return XMC_ETH_MAC_STATUS_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	e008      	b.n	8004a5e <XMC_ETH_MAC_ReadPhy+0x66>
    }
    ++retries;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	617b      	str	r3, [r7, #20]
  }
  while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d9e8      	bls.n	8004a2e <XMC_ETH_MAC_ReadPhy+0x36>

  return XMC_ETH_MAC_STATUS_ERROR;
 8004a5c:	2302      	movs	r3, #2
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop

08004a6c <XMC_ETH_MAC_WritePhy>:

/* Write physical layer and return status */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t data)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	4608      	mov	r0, r1
 8004a76:	4611      	mov	r1, r2
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	70fb      	strb	r3, [r7, #3]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	70bb      	strb	r3, [r7, #2]
 8004a82:	4613      	mov	r3, r2
 8004a84:	803b      	strh	r3, [r7, #0]
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	883a      	ldrh	r2, [r7, #0]
 8004a8c:	615a      	str	r2, [r3, #20]
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	6912      	ldr	r2, [r2, #16]
 8004a98:	f002 013c 	and.w	r1, r2, #60	; 0x3c
                                (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
                                (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
 8004a9c:	78fa      	ldrb	r2, [r7, #3]
 8004a9e:	02d2      	lsls	r2, r2, #11
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
                                (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
 8004aa0:	4311      	orrs	r1, r2
                                (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));
 8004aa2:	78ba      	ldrb	r2, [r7, #2]
 8004aa4:	0192      	lsls	r2, r2, #6
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t data)
{
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	f042 0203 	orr.w	r2, r2, #3
 8004aac:	611a      	str	r2, [r3, #16]
                                (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
                                (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));

  /* Poll busy bit during max PHY_TIMEOUT time */
  retries = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
  do
  {
    if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <XMC_ETH_MAC_WritePhy+0x58>
    {
      return XMC_ETH_MAC_STATUS_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e008      	b.n	8004ad6 <XMC_ETH_MAC_WritePhy+0x6a>
    }
    ++retries;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
  }
  while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d9ee      	bls.n	8004ab2 <XMC_ETH_MAC_WritePhy+0x46>

  return XMC_ETH_MAC_STATUS_ERROR;
 8004ad4:	2302      	movs	r3, #2
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop

08004ae4 <XMC_ETH_MAC_EnableEvent>:
  }
}

/* Enable event */
void XMC_ETH_MAC_EnableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_ETH_MAC_EnableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  eth_mac->regs->INTERRUPT_MASK &= ~(event >> 16U);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	0c12      	lsrs	r2, r2, #16
 8004afc:	43d2      	mvns	r2, r2
 8004afe:	400a      	ands	r2, r1
 8004b00:	63da      	str	r2, [r3, #60]	; 0x3c

  event &= (uint16_t)0x7fffU;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004b08:	603b      	str	r3, [r7, #0]
  if (XCM_ETH_MAC_IsNormalEvent(event))
 8004b0a:	6838      	ldr	r0, [r7, #0]
 8004b0c:	f7ff fda6 	bl	800465c <XCM_ETH_MAC_IsNormalEvent>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <XMC_ETH_MAC_EnableEvent+0x3a>
  {
    event |= (uint32_t)ETH_INTERRUPT_ENABLE_NIE_Msk;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1c:	603b      	str	r3, [r7, #0]
  }

  if (XCM_ETH_MAC_IsAbnormalEvent(event))
 8004b1e:	6838      	ldr	r0, [r7, #0]
 8004b20:	f7ff fdb0 	bl	8004684 <XCM_ETH_MAC_IsAbnormalEvent>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <XMC_ETH_MAC_EnableEvent+0x4e>
  {
    event |= (uint32_t)ETH_INTERRUPT_ENABLE_AIE_Msk;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b30:	603b      	str	r3, [r7, #0]
  }

  eth_mac->regs->INTERRUPT_ENABLE |= event;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6819      	ldr	r1, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3e:	331c      	adds	r3, #28
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	431a      	orrs	r2, r3
 8004b46:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004b4a:	331c      	adds	r3, #28
 8004b4c:	601a      	str	r2, [r3, #0]
}
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <XMC_ETH_MAC_DisableEvent>:

/* Disable event */
void XMC_ETH_MAC_DisableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_ETH_MAC_DisableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  eth_mac->regs->INTERRUPT_MASK |= event >> 16U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	0c12      	lsrs	r2, r2, #16
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	63da      	str	r2, [r3, #60]	; 0x3c

  event &= 0x7fffU;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004b76:	603b      	str	r3, [r7, #0]
  eth_mac->regs->INTERRUPT_ENABLE &= ~event;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6819      	ldr	r1, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b84:	331c      	adds	r3, #28
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	401a      	ands	r2, r3
 8004b8e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004b92:	331c      	adds	r3, #28
 8004b94:	601a      	str	r2, [r3, #0]
}
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <XMC_ETH_MAC_ClearEventStatus>:

/* Clear event status */
void XMC_ETH_MAC_ClearEventStatus(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_ETH_MAC_ClearEventStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  if ((eth_mac->regs->STATUS & ETH_STATUS_NIS_Msk) != 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb2:	3314      	adds	r3, #20
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <XMC_ETH_MAC_ClearEventStatus+0x26>
  {
    event |= (uint32_t)ETH_STATUS_NIS_Msk;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc4:	603b      	str	r3, [r7, #0]
  }

  if ((eth_mac->regs->STATUS & ETH_STATUS_AIS_Msk) != 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bce:	3314      	adds	r3, #20
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <XMC_ETH_MAC_ClearEventStatus+0x42>
  {
    event |= (uint32_t)ETH_STATUS_AIS_Msk;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be0:	603b      	str	r3, [r7, #0]
  }

  eth_mac->regs->STATUS = event & 0x0001FFFFU;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8004bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf0:	3314      	adds	r3, #20
 8004bf2:	601a      	str	r2, [r3, #0]
}
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop

08004c00 <XMC_ETH_MAC_ReturnRxDescriptor>:
          temp_status);
}

/* Return RX descriptor */
void XMC_ETH_MAC_ReturnRxDescriptor(XMC_ETH_MAC_t *const eth_mac)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  eth_mac->rx_desc[eth_mac->rx_index].status |= ETH_MAC_DMA_RDES0_OWN;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004c12:	015b      	lsls	r3, r3, #5
 8004c14:	4413      	add	r3, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6911      	ldr	r1, [r2, #16]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8004c20:	0152      	lsls	r2, r2, #5
 8004c22:	440a      	add	r2, r1
 8004c24:	6812      	ldr	r2, [r2, #0]
 8004c26:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004c2a:	601a      	str	r2, [r3, #0]
  eth_mac->rx_index++;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004c32:	3301      	adds	r3, #1
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  if (eth_mac->rx_index == eth_mac->num_rx_buf)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d103      	bne.n	8004c54 <XMC_ETH_MAC_ReturnRxDescriptor+0x54>
  {
    eth_mac->rx_index = 0U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  }
}
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop

08004c60 <XMC_ETH_MAC_ReturnTxDescriptor>:

/* Return TX descriptor */
void XMC_ETH_MAC_ReturnTxDescriptor(XMC_ETH_MAC_t *const eth_mac)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  eth_mac->tx_ts_index = eth_mac->tx_index;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  eth_mac->tx_desc[eth_mac->tx_index].status |= ETH_MAC_DMA_TDES0_CIC | ETH_MAC_DMA_TDES0_OWN;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	695a      	ldr	r2, [r3, #20]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004c7e:	015b      	lsls	r3, r3, #5
 8004c80:	441a      	add	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6959      	ldr	r1, [r3, #20]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004c8c:	015b      	lsls	r3, r3, #5
 8004c8e:	440b      	add	r3, r1
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c96:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8004c9a:	6013      	str	r3, [r2, #0]
  eth_mac->tx_index++;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  if (eth_mac->tx_index == eth_mac->num_tx_buf)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d103      	bne.n	8004cc4 <XMC_ETH_MAC_ReturnTxDescriptor+0x64>
  {
    eth_mac->tx_index = 0U;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  }

  eth_mac->frame_end = NULL;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	70fb      	strb	r3, [r7, #3]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	4619      	mov	r1, r3
 8004cee:	2303      	movs	r3, #3
 8004cf0:	408b      	lsls	r3, r1
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	401a      	ands	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004cfe:	78bb      	ldrb	r3, [r7, #2]
 8004d00:	78f9      	ldrb	r1, [r7, #3]
 8004d02:	0049      	lsls	r1, r1, #1
 8004d04:	408b      	lsls	r3, r1
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop

08004d18 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8004d20:	4b14      	ldr	r3, [pc, #80]	; (8004d74 <_sbrk+0x5c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8004d28:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <_sbrk+0x5c>)
 8004d2a:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <_sbrk+0x60>)
 8004d2c:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8004d2e:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <_sbrk+0x5c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3303      	adds	r3, #3
 8004d38:	f023 0303 	bic.w	r3, r3, #3
 8004d3c:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <_sbrk+0x5c>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4413      	add	r3, r2
 8004d46:	4a0d      	ldr	r2, [pc, #52]	; (8004d7c <_sbrk+0x64>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d207      	bcs.n	8004d5c <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8004d4c:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <_sbrk+0x5c>)
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4413      	add	r3, r2
 8004d54:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <_sbrk+0x5c>)
 8004d56:	6013      	str	r3, [r2, #0]
    return (base);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	e006      	b.n	8004d6a <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8004d5c:	f00a fa50 	bl	800f200 <__errno>
 8004d60:	4602      	mov	r2, r0
 8004d62:	230c      	movs	r3, #12
 8004d64:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8004d66:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	1ffe9124 	.word	0x1ffe9124
 8004d78:	200030a0 	.word	0x200030a0
 8004d7c:	2003ffc0 	.word	0x2003ffc0

08004d80 <_init>:

/* Init */
void _init(void)
{}
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d90:	4b04      	ldr	r3, [pc, #16]	; (8004da4 <__NVIC_GetPriorityGrouping+0x18>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d98:	0a1b      	lsrs	r3, r3, #8
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	e000ed00 	.word	0xe000ed00

08004da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	4603      	mov	r3, r0
 8004db0:	6039      	str	r1, [r7, #0]
 8004db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	db0a      	blt.n	8004dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dbc:	490d      	ldr	r1, [pc, #52]	; (8004df4 <__NVIC_SetPriority+0x4c>)
 8004dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	0092      	lsls	r2, r2, #2
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	440b      	add	r3, r1
 8004dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004dd0:	e00a      	b.n	8004de8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dd2:	4909      	ldr	r1, [pc, #36]	; (8004df8 <__NVIC_SetPriority+0x50>)
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	3b04      	subs	r3, #4
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	0092      	lsls	r2, r2, #2
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	440b      	add	r3, r1
 8004de6:	761a      	strb	r2, [r3, #24]
  }
}
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	e000e100 	.word	0xe000e100
 8004df8:	e000ed00 	.word	0xe000ed00

08004dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b089      	sub	sp, #36	; 0x24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f1c3 0307 	rsb	r3, r3, #7
 8004e16:	2b06      	cmp	r3, #6
 8004e18:	bf28      	it	cs
 8004e1a:	2306      	movcs	r3, #6
 8004e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	3306      	adds	r3, #6
 8004e22:	2b06      	cmp	r3, #6
 8004e24:	d902      	bls.n	8004e2c <NVIC_EncodePriority+0x30>
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <NVIC_EncodePriority+0x32>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	2201      	movs	r2, #1
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	1e5a      	subs	r2, r3, #1
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	401a      	ands	r2, r3
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2101      	movs	r1, #1
 8004e46:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4a:	1e59      	subs	r1, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8004e50:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3724      	adds	r7, #36	; 0x24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop

08004e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e70:	d301      	bcc.n	8004e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e72:	2301      	movs	r3, #1
 8004e74:	e00f      	b.n	8004e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e76:	4a0a      	ldr	r2, [pc, #40]	; (8004ea0 <SysTick_Config+0x40>)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e82:	213f      	movs	r1, #63	; 0x3f
 8004e84:	f7ff ff90 	bl	8004da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <SysTick_Config+0x40>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e8e:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <SysTick_Config+0x40>)
 8004e90:	2207      	movs	r2, #7
 8004e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	e000e010 	.word	0xe000e010

08004ea4 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8004ea4:	b490      	push	{r4, r7}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 8004eac:	2300      	movs	r3, #0
 8004eae:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8004eb0:	496b      	ldr	r1, [pc, #428]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	3318      	adds	r3, #24
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8004ec4:	4b67      	ldr	r3, [pc, #412]	; (8005064 <SYSTIMER_lInsertTimerList+0x1c0>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d109      	bne.n	8004ee0 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4a62      	ldr	r2, [pc, #392]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 8004ed8:	4413      	add	r3, r2
 8004eda:	4a62      	ldr	r2, [pc, #392]	; (8005064 <SYSTIMER_lInsertTimerList+0x1c0>)
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e0bb      	b.n	8005058 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8004ee0:	4b60      	ldr	r3, [pc, #384]	; (8005064 <SYSTIMER_lInsertTimerList+0x1c0>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8004eea:	e0ab      	b.n	8005044 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	dc7a      	bgt.n	8004ff4 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d026      	beq.n	8004f54 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	6859      	ldr	r1, [r3, #4]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4a52      	ldr	r2, [pc, #328]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 8004f16:	4413      	add	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	6859      	ldr	r1, [r3, #4]
 8004f1e:	4850      	ldr	r0, [pc, #320]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4403      	add	r3, r0
 8004f2c:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 8004f2e:	494c      	ldr	r1, [pc, #304]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	4613      	mov	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	440b      	add	r3, r1
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	4613      	mov	r3, r2
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	4413      	add	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4a45      	ldr	r2, [pc, #276]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 8004f4c:	441a      	add	r2, r3
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	605a      	str	r2, [r3, #4]
 8004f52:	e01c      	b.n	8004f8e <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 8004f54:	4b43      	ldr	r3, [pc, #268]	; (8005064 <SYSTIMER_lInsertTimerList+0x1c0>)
 8004f56:	6819      	ldr	r1, [r3, #0]
 8004f58:	4841      	ldr	r0, [pc, #260]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4403      	add	r3, r0
 8004f66:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8004f68:	4b3e      	ldr	r3, [pc, #248]	; (8005064 <SYSTIMER_lInsertTimerList+0x1c0>)
 8004f6a:	6819      	ldr	r1, [r3, #0]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4a3a      	ldr	r2, [pc, #232]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 8004f78:	4413      	add	r3, r2
 8004f7a:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4a36      	ldr	r2, [pc, #216]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 8004f88:	4413      	add	r3, r2
 8004f8a:	4a36      	ldr	r2, [pc, #216]	; (8005064 <SYSTIMER_lInsertTimerList+0x1c0>)
 8004f8c:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 8004f8e:	4934      	ldr	r1, [pc, #208]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699a      	ldr	r2, [r3, #24]
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	18d1      	adds	r1, r2, r3
 8004fa4:	482e      	ldr	r0, [pc, #184]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	4413      	add	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4403      	add	r3, r0
 8004fb2:	3318      	adds	r3, #24
 8004fb4:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8004fb6:	492a      	ldr	r1, [pc, #168]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	6819      	ldr	r1, [r3, #0]
 8004fc6:	4826      	ldr	r0, [pc, #152]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4403      	add	r3, r0
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6998      	ldr	r0, [r3, #24]
 8004fd8:	4c21      	ldr	r4, [pc, #132]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4423      	add	r3, r4
 8004fe6:	3318      	adds	r3, #24
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	1ac3      	subs	r3, r0, r3
 8004fec:	618b      	str	r3, [r1, #24]
        found_flag = true;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	73fb      	strb	r3, [r7, #15]
 8004ff2:	e024      	b.n	800503e <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	dd21      	ble.n	800503e <SYSTIMER_lInsertTimerList+0x19a>
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d11d      	bne.n	800503e <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8005002:	4917      	ldr	r1, [pc, #92]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	4613      	mov	r3, r2
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	4413      	add	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4a10      	ldr	r2, [pc, #64]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 8005020:	441a      	add	r2, r3
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 8005026:	6939      	ldr	r1, [r7, #16]
 8005028:	480d      	ldr	r0, [pc, #52]	; (8005060 <SYSTIMER_lInsertTimerList+0x1bc>)
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	4613      	mov	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4403      	add	r3, r0
 8005036:	3318      	adds	r3, #24
 8005038:	6019      	str	r1, [r3, #0]
          found_flag = true;
 800503a:	2301      	movs	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d006      	beq.n	8005058 <SYSTIMER_lInsertTimerList+0x1b4>
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	f083 0301 	eor.w	r3, r3, #1
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	f47f af4a 	bne.w	8004eec <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bc90      	pop	{r4, r7}
 800505e:	4770      	bx	lr
 8005060:	1ffe9390 	.word	0x1ffe9390
 8005064:	1ffe9128 	.word	0x1ffe9128

08005068 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4a29      	ldr	r2, [pc, #164]	; (8005120 <SYSTIMER_lRemoveTimerList+0xb8>)
 800507c:	4413      	add	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d107      	bne.n	8005098 <SYSTIMER_lRemoveTimerList+0x30>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d103      	bne.n	8005098 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 8005090:	4b24      	ldr	r3, [pc, #144]	; (8005124 <SYSTIMER_lRemoveTimerList+0xbc>)
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	e03d      	b.n	8005114 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d114      	bne.n	80050ca <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1f      	ldr	r2, [pc, #124]	; (8005124 <SYSTIMER_lRemoveTimerList+0xbc>)
 80050a6:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 80050a8:	4b1e      	ldr	r3, [pc, #120]	; (8005124 <SYSTIMER_lRemoveTimerList+0xbc>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2200      	movs	r2, #0
 80050ae:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 80050b0:	4b1c      	ldr	r3, [pc, #112]	; (8005124 <SYSTIMER_lRemoveTimerList+0xbc>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1b      	ldr	r2, [pc, #108]	; (8005124 <SYSTIMER_lRemoveTimerList+0xbc>)
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	6991      	ldr	r1, [r2, #24]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	6992      	ldr	r2, [r2, #24]
 80050be:	440a      	add	r2, r1
 80050c0:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	e024      	b.n	8005114 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d107      	bne.n	80050e2 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	605a      	str	r2, [r3, #4]
 80050e0:	e018      	b.n	8005114 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	6812      	ldr	r2, [r2, #0]
 80050ea:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	6852      	ldr	r2, [r2, #4]
 80050f4:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	6991      	ldr	r1, [r2, #24]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	6992      	ldr	r2, [r2, #24]
 8005104:	440a      	add	r2, r1
 8005106:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	605a      	str	r2, [r3, #4]
  }
}
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	1ffe9390 	.word	0x1ffe9390
 8005124:	1ffe9128 	.word	0x1ffe9128

08005128 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 800512e:	4b2f      	ldr	r3, [pc, #188]	; (80051ec <SYSTIMER_lTimerHandler+0xc4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8005134:	e050      	b.n	80051d8 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3020 	ldrb.w	r3, [r3, #32]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d013      	beq.n	8005168 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff ff8f 	bl	8005068 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	461a      	mov	r2, r3
 8005156:	2301      	movs	r3, #1
 8005158:	4093      	lsls	r3, r2
 800515a:	43da      	mvns	r2, r3
 800515c:	4b24      	ldr	r3, [pc, #144]	; (80051f0 <SYSTIMER_lTimerHandler+0xc8>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4013      	ands	r3, r2
 8005162:	4a23      	ldr	r2, [pc, #140]	; (80051f0 <SYSTIMER_lTimerHandler+0xc8>)
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	e034      	b.n	80051d2 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	7b1b      	ldrb	r3, [r3, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d112      	bne.n	8005196 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	7b5b      	ldrb	r3, [r3, #13]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d12c      	bne.n	80051d2 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff ff73 	bl	8005068 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2202      	movs	r2, #2
 8005186:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6912      	ldr	r2, [r2, #16]
 8005190:	4610      	mov	r0, r2
 8005192:	4798      	blx	r3
 8005194:	e01d      	b.n	80051d2 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	7b1b      	ldrb	r3, [r3, #12]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d118      	bne.n	80051d0 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	7b5b      	ldrb	r3, [r3, #13]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d115      	bne.n	80051d2 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff ff5c 	bl	8005068 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff fe71 	bl	8004ea4 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6912      	ldr	r2, [r2, #16]
 80051ca:	4610      	mov	r0, r2
 80051cc:	4798      	blx	r3
 80051ce:	e000      	b.n	80051d2 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 80051d0:	e009      	b.n	80051e6 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 80051d2:	4b06      	ldr	r3, [pc, #24]	; (80051ec <SYSTIMER_lTimerHandler+0xc4>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <SYSTIMER_lTimerHandler+0xbe>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0a7      	beq.n	8005136 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	1ffe9128 	.word	0x1ffe9128
 80051f0:	1ffe912c 	.word	0x1ffe912c

080051f4 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 80051fa:	4b0e      	ldr	r3, [pc, #56]	; (8005234 <SysTick_Handler+0x40>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8005200:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <SysTick_Handler+0x44>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3301      	adds	r3, #1
 8005206:	4a0c      	ldr	r2, [pc, #48]	; (8005238 <SysTick_Handler+0x44>)
 8005208:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00e      	beq.n	800522e <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d905      	bls.n	8005224 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	1e5a      	subs	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	619a      	str	r2, [r3, #24]
 8005222:	e004      	b.n	800522e <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 800522a:	f7ff ff7d 	bl	8005128 <SYSTIMER_lTimerHandler>
    }
  }
}
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	1ffe9128 	.word	0x1ffe9128
 8005238:	1ffe9130 	.word	0x1ffe9130

0800523c <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8005244:	2300      	movs	r3, #0
 8005246:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	f083 0301 	eor.w	r3, r3, #1
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d024      	beq.n	80052a0 <SYSTIMER_Init+0x64>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 8005256:	4b15      	ldr	r3, [pc, #84]	; (80052ac <SYSTIMER_Init+0x70>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 800525c:	4814      	ldr	r0, [pc, #80]	; (80052b0 <SYSTIMER_Init+0x74>)
 800525e:	f7ff fdff 	bl	8004e60 <SysTick_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d103      	bne.n	8005274 <SYSTIMER_Init+0x38>
    {
      XMC_DEBUG("SYSTIMER_Init: Timer reload value out of range");
 800526c:	4811      	ldr	r0, [pc, #68]	; (80052b4 <SYSTIMER_Init+0x78>)
 800526e:	f00a f8d9 	bl	800f424 <printf>
 8005272:	e015      	b.n	80052a0 <SYSTIMER_Init+0x64>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8005274:	f7ff fd8a 	bl	8004d8c <__NVIC_GetPriorityGrouping>
 8005278:	4603      	mov	r3, r0
 800527a:	4618      	mov	r0, r3
 800527c:	213f      	movs	r1, #63	; 0x3f
 800527e:	2200      	movs	r2, #0
 8005280:	f7ff fdbc 	bl	8004dfc <NVIC_EncodePriority>
 8005284:	4603      	mov	r3, r0
 8005286:	f04f 30ff 	mov.w	r0, #4294967295
 800528a:	4619      	mov	r1, r3
 800528c:	f7ff fd8c 	bl	8004da8 <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8005290:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <SYSTIMER_Init+0x7c>)
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 800529c:	2300      	movs	r3, #0
 800529e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	1ffe9128 	.word	0x1ffe9128
 80052b0:	00023280 	.word	0x00023280
 80052b4:	080142ac 	.word	0x080142ac
 80052b8:	1ffe912c 	.word	0x1ffe912c

080052bc <SYSTIMER_GetTickCount>:

/*
 *  API to get the SysTick count.
 */
uint32_t SYSTIMER_GetTickCount(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  return (g_systick_count);
 80052c0:	4b03      	ldr	r3, [pc, #12]	; (80052d0 <SYSTIMER_GetTickCount+0x14>)
 80052c2:	681b      	ldr	r3, [r3, #0]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	1ffe9130 	.word	0x1ffe9130

080052d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052d8:	4b04      	ldr	r3, [pc, #16]	; (80052ec <__NVIC_GetPriorityGrouping+0x18>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052e0:	0a1b      	lsrs	r3, r3, #8
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	e000ed00 	.word	0xe000ed00

080052f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	4603      	mov	r3, r0
 80052f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	db0b      	blt.n	800531a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005302:	4908      	ldr	r1, [pc, #32]	; (8005324 <__NVIC_EnableIRQ+0x34>)
 8005304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	79fa      	ldrb	r2, [r7, #7]
 800530c:	f002 021f 	and.w	r2, r2, #31
 8005310:	2001      	movs	r0, #1
 8005312:	fa00 f202 	lsl.w	r2, r0, r2
 8005316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	e000e100 	.word	0xe000e100

08005328 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005336:	2b00      	cmp	r3, #0
 8005338:	db10      	blt.n	800535c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800533a:	490b      	ldr	r1, [pc, #44]	; (8005368 <__NVIC_DisableIRQ+0x40>)
 800533c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	79fa      	ldrb	r2, [r7, #7]
 8005344:	f002 021f 	and.w	r2, r2, #31
 8005348:	2001      	movs	r0, #1
 800534a:	fa00 f202 	lsl.w	r2, r0, r2
 800534e:	3320      	adds	r3, #32
 8005350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005354:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005358:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	e000e100 	.word	0xe000e100

0800536c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537a:	2b00      	cmp	r3, #0
 800537c:	db0c      	blt.n	8005398 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800537e:	4909      	ldr	r1, [pc, #36]	; (80053a4 <__NVIC_ClearPendingIRQ+0x38>)
 8005380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	79fa      	ldrb	r2, [r7, #7]
 8005388:	f002 021f 	and.w	r2, r2, #31
 800538c:	2001      	movs	r0, #1
 800538e:	fa00 f202 	lsl.w	r2, r0, r2
 8005392:	3360      	adds	r3, #96	; 0x60
 8005394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	e000e100 	.word	0xe000e100

080053a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	6039      	str	r1, [r7, #0]
 80053b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	db0a      	blt.n	80053d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053bc:	490d      	ldr	r1, [pc, #52]	; (80053f4 <__NVIC_SetPriority+0x4c>)
 80053be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	0092      	lsls	r2, r2, #2
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	440b      	add	r3, r1
 80053cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80053d0:	e00a      	b.n	80053e8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d2:	4909      	ldr	r1, [pc, #36]	; (80053f8 <__NVIC_SetPriority+0x50>)
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	3b04      	subs	r3, #4
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	0092      	lsls	r2, r2, #2
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	440b      	add	r3, r1
 80053e6:	761a      	strb	r2, [r3, #24]
  }
}
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	e000e100 	.word	0xe000e100
 80053f8:	e000ed00 	.word	0xe000ed00

080053fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b089      	sub	sp, #36	; 0x24
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f1c3 0307 	rsb	r3, r3, #7
 8005416:	2b06      	cmp	r3, #6
 8005418:	bf28      	it	cs
 800541a:	2306      	movcs	r3, #6
 800541c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	3306      	adds	r3, #6
 8005422:	2b06      	cmp	r3, #6
 8005424:	d902      	bls.n	800542c <NVIC_EncodePriority+0x30>
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	3b01      	subs	r3, #1
 800542a:	e000      	b.n	800542e <NVIC_EncodePriority+0x32>
 800542c:	2300      	movs	r3, #0
 800542e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2201      	movs	r2, #1
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	1e5a      	subs	r2, r3, #1
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	401a      	ands	r2, r3
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2101      	movs	r1, #1
 8005446:	fa01 f303 	lsl.w	r3, r1, r3
 800544a:	1e59      	subs	r1, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8005450:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8005452:	4618      	mov	r0, r3
 8005454:	3724      	adds	r7, #36	; 0x24
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop

08005460 <XMC_ETH_MAC_SetPortControl>:
 * - XMC4700 LQFP144 and BGA196 packages
 * - XMC4800 LQFP144 and BGA196 packages
 *
 */
__STATIC_INLINE void XMC_ETH_MAC_SetPortControl(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_PORT_CTRL_t port_ctrl)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  XMC_UNUSED_ARG(eth_mac);
  ETH0_CON->CON = (uint32_t)port_ctrl.raw;
 800546a:	4a04      	ldr	r2, [pc, #16]	; (800547c <XMC_ETH_MAC_SetPortControl+0x1c>)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6013      	str	r3, [r2, #0]
}
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	50004040 	.word	0x50004040

08005480 <XMC_ETH_MAC_SetAddress>:
 * \par
 * The function sets the MAC address by writing to the MAC_ADDRESS0_HIGH and
 * MAC_ADDRESS0_LOW registers.
 */
__STATIC_INLINE void XMC_ETH_MAC_SetAddress(XMC_ETH_MAC_t *const eth_mac, uint64_t addr)
{
 8005480:	b4b0      	push	{r4, r5, r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	e9c7 2300 	strd	r2, r3, [r7]
  eth_mac->regs->MAC_ADDRESS0_HIGH = (uint32_t)(addr >> 32);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6819      	ldr	r1, [r3, #0]
 8005490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005494:	001c      	movs	r4, r3
 8005496:	2500      	movs	r5, #0
 8005498:	4623      	mov	r3, r4
 800549a:	640b      	str	r3, [r1, #64]	; 0x40
  eth_mac->regs->MAC_ADDRESS0_LOW = (uint32_t)addr;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	645a      	str	r2, [r3, #68]	; 0x44
}
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bcb0      	pop	{r4, r5, r7}
 80054aa:	4770      	bx	lr

080054ac <XMC_ETH_MAC_EnableReceptionBroadcastFrames>:
 *
 * \par
 * This function enables the AFM module to pass all received broadcast frames.
 */
__STATIC_INLINE void XMC_ETH_MAC_EnableReceptionBroadcastFrames(XMC_ETH_MAC_t *const eth_mac)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_FRAME_FILTER &= (uint32_t)~ETH_MAC_FRAME_FILTER_DBF_Msk;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6812      	ldr	r2, [r2, #0]
 80054bc:	6852      	ldr	r2, [r2, #4]
 80054be:	f022 0220 	bic.w	r2, r2, #32
 80054c2:	605a      	str	r2, [r3, #4]
}
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop

080054d0 <XMC_ETH_MAC_DisableJumboFrame>:
 *
 * \par
 * The function can be used to disable jumbo frames.
 */
__STATIC_INLINE void XMC_ETH_MAC_DisableJumboFrame(XMC_ETH_MAC_t *const eth_mac)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_JE_Msk;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6812      	ldr	r2, [r2, #0]
 80054e0:	6812      	ldr	r2, [r2, #0]
 80054e2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80054e6:	601a      	str	r2, [r3, #0]
}
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop

080054f4 <XMC_ETH_MAC_SetLink>:
 * The function sets the link speed and duplex settings.
 */
__STATIC_INLINE void XMC_ETH_MAC_SetLink(XMC_ETH_MAC_t *const eth_mac,
    XMC_ETH_LINK_SPEED_t speed,
    XMC_ETH_LINK_DUPLEX_t duplex)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	807b      	strh	r3, [r7, #2]
 8005500:	4613      	mov	r3, r2
 8005502:	803b      	strh	r3, [r7, #0]
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	f422 4190 	bic.w	r1, r2, #18432	; 0x4800
                                      (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURATION_FES_Msk)) |
                                     (uint32_t)speed | (uint32_t)duplex;
 8005512:	887a      	ldrh	r2, [r7, #2]
__STATIC_INLINE void XMC_ETH_MAC_SetLink(XMC_ETH_MAC_t *const eth_mac,
    XMC_ETH_LINK_SPEED_t speed,
    XMC_ETH_LINK_DUPLEX_t duplex)
{
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
                                      (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURATION_FES_Msk)) |
 8005514:	4311      	orrs	r1, r2
                                     (uint32_t)speed | (uint32_t)duplex;
 8005516:	883a      	ldrh	r2, [r7, #0]
 8005518:	430a      	orrs	r2, r1
 */
__STATIC_INLINE void XMC_ETH_MAC_SetLink(XMC_ETH_MAC_t *const eth_mac,
    XMC_ETH_LINK_SPEED_t speed,
    XMC_ETH_LINK_DUPLEX_t duplex)
{
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
 800551a:	601a      	str	r2, [r3, #0]
                                      (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURATION_FES_Msk)) |
                                     (uint32_t)speed | (uint32_t)duplex;
}
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop

08005528 <XMC_ETH_MAC_IsRxDescriptorOwnedByDma>:
 *
 * \par
 * The function checks if the RX descriptor is owned by the DMA.
 */
__STATIC_INLINE bool XMC_ETH_MAC_IsRxDescriptorOwnedByDma(XMC_ETH_MAC_t *const eth_mac)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  return ((eth_mac->rx_desc[eth_mac->rx_index].status & ETH_MAC_DMA_RDES0_OWN) != 0U);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800553a:	015b      	lsls	r3, r3, #5
 800553c:	4413      	add	r3, r2
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	0fdb      	lsrs	r3, r3, #31
 8005542:	b2db      	uxtb	r3, r3
}
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <XMC_ETH_MAC_IsTxDescriptorOwnedByDma>:
 *
 * \par
 * The function checks if the TX descriptor is owned by the DMA.
 */
__STATIC_INLINE bool XMC_ETH_MAC_IsTxDescriptorOwnedByDma(XMC_ETH_MAC_t *const eth_mac)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  return ((eth_mac->tx_desc[eth_mac->tx_index].status & ETH_MAC_DMA_TDES0_OWN) != 0U);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	695a      	ldr	r2, [r3, #20]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005562:	015b      	lsls	r3, r3, #5
 8005564:	4413      	add	r3, r2
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	0fdb      	lsrs	r3, r3, #31
 800556a:	b2db      	uxtb	r3, r3
}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <XMC_ETH_MAC_EnableRx>:
 * The function enables the receiver state machine of the MAC and puts the
 * receive process in running state. The DMA then acquires the descriptor
 * from the receive list and processes the received frames.
 */
__STATIC_INLINE void XMC_ETH_MAC_EnableRx(XMC_ETH_MAC_t *const eth_mac)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_SR_Msk;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6819      	ldr	r1, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800558c:	3318      	adds	r3, #24
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f043 0202 	orr.w	r2, r3, #2
 8005594:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005598:	3318      	adds	r3, #24
 800559a:	601a      	str	r2, [r3, #0]
  eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_RE_Msk;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6812      	ldr	r2, [r2, #0]
 80055a4:	6812      	ldr	r2, [r2, #0]
 80055a6:	f042 0204 	orr.w	r2, r2, #4
 80055aa:	601a      	str	r2, [r3, #0]
}
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop

080055b8 <XMC_ETH_MAC_DisableRx>:
 *
 * \par
 * The function disables the receive process.
 */
__STATIC_INLINE void XMC_ETH_MAC_DisableRx(XMC_ETH_MAC_t *const eth_mac)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_RE_Msk;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	f022 0204 	bic.w	r2, r2, #4
 80055ce:	601a      	str	r2, [r3, #0]
  eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_SR_Msk;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6819      	ldr	r1, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055dc:	3318      	adds	r3, #24
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f023 0202 	bic.w	r2, r3, #2
 80055e4:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80055e8:	3318      	adds	r3, #24
 80055ea:	601a      	str	r2, [r3, #0]
}
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop

080055f8 <XMC_ETH_MAC_EnableTx>:
 * The function enables the transmit state machine of the MAC and puts the
 * transmit process in running state. The DMA then checks the TX list at the
 * current position for transmitting a frame.
 */
__STATIC_INLINE void XMC_ETH_MAC_EnableTx(XMC_ETH_MAC_t *const eth_mac)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_ST_Msk;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6819      	ldr	r1, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560c:	3318      	adds	r3, #24
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005614:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005618:	3318      	adds	r3, #24
 800561a:	601a      	str	r2, [r3, #0]
  eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_TE_Msk;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	6812      	ldr	r2, [r2, #0]
 8005626:	f042 0208 	orr.w	r2, r2, #8
 800562a:	601a      	str	r2, [r3, #0]
}
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop

08005638 <XMC_ETH_MAC_DisableTx>:
 *
 * \par
 * The function disables the transmit process.
 */
__STATIC_INLINE void XMC_ETH_MAC_DisableTx(XMC_ETH_MAC_t *const eth_mac)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_TE_Msk;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	6812      	ldr	r2, [r2, #0]
 800564a:	f022 0208 	bic.w	r2, r2, #8
 800564e:	601a      	str	r2, [r3, #0]
  eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_ST_Msk;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6819      	ldr	r1, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800565c:	3318      	adds	r3, #24
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005664:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005668:	3318      	adds	r3, #24
 800566a:	601a      	str	r2, [r3, #0]
}
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop

08005678 <XMC_ETH_MAC_ResumeTx>:
 * current descriptor pointed to by the "current host transmit descriptor" reg.
 * If that descriptor is not available (owned by the CPU), the transmission
 * returns to the suspend state else the transmission resumes.
 */
__STATIC_INLINE void XMC_ETH_MAC_ResumeTx(XMC_ETH_MAC_t *const eth_mac)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TPS_Msk;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005688:	3314      	adds	r3, #20
 800568a:	2202      	movs	r2, #2
 800568c:	601a      	str	r2, [r3, #0]
  eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005696:	3304      	adds	r3, #4
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
}
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop

080056a8 <XMC_ETH_MAC_ResumeRx>:
 * current descriptor pointed to by the "current host transmit descriptor" reg.
 * If that descriptor is not available (owned by the CPU), the transmission
 * returns to the suspend state else the transmission resumes.
 */
__STATIC_INLINE void XMC_ETH_MAC_ResumeRx(XMC_ETH_MAC_t *const eth_mac)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_RU_Msk;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056b8:	3314      	adds	r3, #20
 80056ba:	2280      	movs	r2, #128	; 0x80
 80056bc:	601a      	str	r2, [r3, #0]
  eth_mac->regs->RECEIVE_POLL_DEMAND = 0U;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c6:	3308      	adds	r3, #8
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
}
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop

080056d8 <XMC_ETH_MAC_GetTxBuffer>:
 *
 * \par<b>Description: </b><br>
 * Returns the current TX buffer.
 */
__STATIC_INLINE uint8_t *XMC_ETH_MAC_GetTxBuffer(XMC_ETH_MAC_t *const eth_mac)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  return (uint8_t *)(eth_mac->tx_desc[eth_mac->tx_index].buffer1);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695a      	ldr	r2, [r3, #20]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80056ea:	015b      	lsls	r3, r3, #5
 80056ec:	4413      	add	r3, r2
 80056ee:	689b      	ldr	r3, [r3, #8]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <XMC_ETH_MAC_GetRxBuffer>:
 *
 * \par<b>Description: </b><br>
 * Returns the current RX buffer.
 */
__STATIC_INLINE uint8_t *XMC_ETH_MAC_GetRxBuffer(XMC_ETH_MAC_t *const eth_mac)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  return (uint8_t *)(eth_mac->rx_desc[eth_mac->rx_index].buffer1);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800570e:	015b      	lsls	r3, r3, #5
 8005710:	4413      	add	r3, r2
 8005712:	689b      	ldr	r3, [r3, #8]
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <XMC_ETH_MAC_SetTxBufferSize>:
 *
 * \par<b>Description: </b><br>
 * Sets the current TX buffer size.
 */
__STATIC_INLINE void XMC_ETH_MAC_SetTxBufferSize(XMC_ETH_MAC_t *const eth_mac, uint32_t size)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  eth_mac->tx_desc[eth_mac->tx_index].length = size;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695a      	ldr	r2, [r3, #20]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005734:	015b      	lsls	r3, r3, #5
 8005736:	4413      	add	r3, r2
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	605a      	str	r2, [r3, #4]
}
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop

08005748 <ethernetif_link_callback>:
err_t ethernetif_init(struct netif *netif);
static void ethernetif_link_callback(struct netif *netif);
static void ethernetif_link_status(void *args);

static void ethernetif_link_callback(struct netif *netif)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  XMC_ETH_LINK_SPEED_t speed;
  XMC_ETH_LINK_DUPLEX_t duplex;
  bool phy_autoneg_state;
  uint32_t retries = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	617b      	str	r3, [r7, #20]

  if (netif_is_link_up(netif))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	2b00      	cmp	r3, #0
 8005760:	d04f      	beq.n	8005802 <ethernetif_link_callback+0xba>
  {

    /* If autonegotiation is enabled */
    do {
      phy_autoneg_state = XMC_ETH_PHY_IsAutonegotiationCompleted(&eth_mac, ETH_LWIP_0_PHY_ADDR);
 8005762:	4831      	ldr	r0, [pc, #196]	; (8005828 <ethernetif_link_callback+0xe0>)
 8005764:	2100      	movs	r1, #0
 8005766:	f008 fab3 	bl	800dcd0 <XMC_ETH_PHY_IsAutonegotiationCompleted>
 800576a:	4603      	mov	r3, r0
 800576c:	74fb      	strb	r3, [r7, #19]
      retries++;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	3301      	adds	r3, #1
 8005772:	617b      	str	r3, [r7, #20]
    } while ((phy_autoneg_state == false) && (retries < ETH_LWIP_PHY_MAX_RETRIES));
 8005774:	7cfb      	ldrb	r3, [r7, #19]
 8005776:	f083 0301 	eor.w	r3, r3, #1
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <ethernetif_link_callback+0x40>
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	4a2a      	ldr	r2, [pc, #168]	; (800582c <ethernetif_link_callback+0xe4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d9ec      	bls.n	8005762 <ethernetif_link_callback+0x1a>
    
    if(phy_autoneg_state == false)
 8005788:	7cfb      	ldrb	r3, [r7, #19]
 800578a:	f083 0301 	eor.w	r3, r3, #1
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <ethernetif_link_callback+0x52>
    {
      ETH_LWIP_Error(ETH_LWIP_ERROR_PHY_TIMEOUT);
 8005794:	2004      	movs	r0, #4
 8005796:	f000 fa77 	bl	8005c88 <ETH_LWIP_Error>
    }
	
    speed = XMC_ETH_PHY_GetLinkSpeed(&eth_mac, ETH_LWIP_0_PHY_ADDR);
 800579a:	4823      	ldr	r0, [pc, #140]	; (8005828 <ethernetif_link_callback+0xe0>)
 800579c:	2100      	movs	r1, #0
 800579e:	f008 fa5f 	bl	800dc60 <XMC_ETH_PHY_GetLinkSpeed>
 80057a2:	4603      	mov	r3, r0
 80057a4:	823b      	strh	r3, [r7, #16]
    duplex = XMC_ETH_PHY_GetLinkDuplex(&eth_mac, ETH_LWIP_0_PHY_ADDR);
 80057a6:	4820      	ldr	r0, [pc, #128]	; (8005828 <ethernetif_link_callback+0xe0>)
 80057a8:	2100      	movs	r1, #0
 80057aa:	f008 fa75 	bl	800dc98 <XMC_ETH_PHY_GetLinkDuplex>
 80057ae:	4603      	mov	r3, r0
 80057b0:	81fb      	strh	r3, [r7, #14]
	
    XMC_ETH_MAC_SetLink(&eth_mac, speed, duplex);
 80057b2:	8a3a      	ldrh	r2, [r7, #16]
 80057b4:	89fb      	ldrh	r3, [r7, #14]
 80057b6:	481c      	ldr	r0, [pc, #112]	; (8005828 <ethernetif_link_callback+0xe0>)
 80057b8:	4611      	mov	r1, r2
 80057ba:	461a      	mov	r2, r3
 80057bc:	f7ff fe9a 	bl	80054f4 <XMC_ETH_MAC_SetLink>
    /* Enable ethernet interrupts */
    XMC_ETH_MAC_EnableEvent(&eth_mac, (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE);
 80057c0:	4819      	ldr	r0, [pc, #100]	; (8005828 <ethernetif_link_callback+0xe0>)
 80057c2:	2140      	movs	r1, #64	; 0x40
 80057c4:	f7ff f98e 	bl	8004ae4 <XMC_ETH_MAC_EnableEvent>

    NVIC_SetPriority((IRQn_Type)108, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 62U, 0U));
 80057c8:	f7ff fd84 	bl	80052d4 <__NVIC_GetPriorityGrouping>
 80057cc:	4603      	mov	r3, r0
 80057ce:	4618      	mov	r0, r3
 80057d0:	213e      	movs	r1, #62	; 0x3e
 80057d2:	2200      	movs	r2, #0
 80057d4:	f7ff fe12 	bl	80053fc <NVIC_EncodePriority>
 80057d8:	4603      	mov	r3, r0
 80057da:	206c      	movs	r0, #108	; 0x6c
 80057dc:	4619      	mov	r1, r3
 80057de:	f7ff fde3 	bl	80053a8 <__NVIC_SetPriority>
    NVIC_ClearPendingIRQ((IRQn_Type)108);
 80057e2:	206c      	movs	r0, #108	; 0x6c
 80057e4:	f7ff fdc2 	bl	800536c <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ((IRQn_Type)108);
 80057e8:	206c      	movs	r0, #108	; 0x6c
 80057ea:	f7ff fd81 	bl	80052f0 <__NVIC_EnableIRQ>
    XMC_ETH_MAC_EnableTx(&eth_mac);
 80057ee:	480e      	ldr	r0, [pc, #56]	; (8005828 <ethernetif_link_callback+0xe0>)
 80057f0:	f7ff ff02 	bl	80055f8 <XMC_ETH_MAC_EnableTx>
    XMC_ETH_MAC_EnableRx(&eth_mac);
 80057f4:	480c      	ldr	r0, [pc, #48]	; (8005828 <ethernetif_link_callback+0xe0>)
 80057f6:	f7ff febf 	bl	8005578 <XMC_ETH_MAC_EnableRx>

    netif_set_up(&xnetif);
 80057fa:	480d      	ldr	r0, [pc, #52]	; (8005830 <ethernetif_link_callback+0xe8>)
 80057fc:	f002 fa76 	bl	8007cec <netif_set_up>
 8005800:	e00f      	b.n	8005822 <ethernetif_link_callback+0xda>
#endif
  }
  else
  {
    /* Enable ethernet interrupts */
    XMC_ETH_MAC_DisableEvent(&eth_mac, (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE);
 8005802:	4809      	ldr	r0, [pc, #36]	; (8005828 <ethernetif_link_callback+0xe0>)
 8005804:	2140      	movs	r1, #64	; 0x40
 8005806:	f7ff f9a5 	bl	8004b54 <XMC_ETH_MAC_DisableEvent>
    NVIC_DisableIRQ((IRQn_Type)108);
 800580a:	206c      	movs	r0, #108	; 0x6c
 800580c:	f7ff fd8c 	bl	8005328 <__NVIC_DisableIRQ>

    XMC_ETH_MAC_DisableTx(&eth_mac);
 8005810:	4805      	ldr	r0, [pc, #20]	; (8005828 <ethernetif_link_callback+0xe0>)
 8005812:	f7ff ff11 	bl	8005638 <XMC_ETH_MAC_DisableTx>
    XMC_ETH_MAC_DisableRx(&eth_mac);
 8005816:	4804      	ldr	r0, [pc, #16]	; (8005828 <ethernetif_link_callback+0xe0>)
 8005818:	f7ff fece 	bl	80055b8 <XMC_ETH_MAC_DisableRx>
    netif_set_down(&xnetif);
 800581c:	4804      	ldr	r0, [pc, #16]	; (8005830 <ethernetif_link_callback+0xe8>)
 800581e:	f002 fab5 	bl	8007d8c <netif_set_down>
  }
}
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	1ffe8800 	.word	0x1ffe8800
 800582c:	000ffffe 	.word	0x000ffffe
 8005830:	1ffe8830 	.word	0x1ffe8830

08005834 <ethernetif_link_status>:

static void ethernetif_link_status(void *args)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(args);


  if (XMC_ETH_PHY_GetLinkStatus(&eth_mac, ETH_LWIP_0_PHY_ADDR) == XMC_ETH_LINK_STATUS_DOWN)
 800583c:	4812      	ldr	r0, [pc, #72]	; (8005888 <ethernetif_link_status+0x54>)
 800583e:	2100      	movs	r1, #0
 8005840:	f008 f9f4 	bl	800dc2c <XMC_ETH_PHY_GetLinkStatus>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <ethernetif_link_status+0x2c>
  {
    if (netif_is_link_up(&xnetif))
 800584a:	4b10      	ldr	r3, [pc, #64]	; (800588c <ethernetif_link_status+0x58>)
 800584c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00d      	beq.n	8005874 <ethernetif_link_status+0x40>
    {
      netif_set_link_down(&xnetif);
 8005858:	480c      	ldr	r0, [pc, #48]	; (800588c <ethernetif_link_status+0x58>)
 800585a:	f002 fae5 	bl	8007e28 <netif_set_link_down>
 800585e:	e009      	b.n	8005874 <ethernetif_link_status+0x40>
    }
  }
  else
  {
    if (!netif_is_link_up(&xnetif))
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <ethernetif_link_status+0x58>)
 8005862:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005866:	f003 0304 	and.w	r3, r3, #4
 800586a:	2b00      	cmp	r3, #0
 800586c:	d102      	bne.n	8005874 <ethernetif_link_status+0x40>
    {
      netif_set_link_up(&xnetif);
 800586e:	4807      	ldr	r0, [pc, #28]	; (800588c <ethernetif_link_status+0x58>)
 8005870:	f002 fab2 	bl	8007dd8 <netif_set_link_up>
    }
  }

  sys_timeout(1000U, ethernetif_link_status, NULL);
 8005874:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005878:	4905      	ldr	r1, [pc, #20]	; (8005890 <ethernetif_link_status+0x5c>)
 800587a:	2200      	movs	r2, #0
 800587c:	f008 f886 	bl	800d98c <sys_timeout>
}
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	1ffe8800 	.word	0x1ffe8800
 800588c:	1ffe8830 	.word	0x1ffe8830
 8005890:	08005835 	.word	0x08005835

08005894 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(netif);

  XMC_ETH_MAC_PORT_CTRL_t port_control;
  XMC_GPIO_CONFIG_t gpio_config;

  gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 800589c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058a0:	613b      	str	r3, [r7, #16]
  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 80058a2:	2300      	movs	r3, #0
 80058a4:	733b      	strb	r3, [r7, #12]
  XMC_GPIO_Init(ETH_LWIP_0_CRS_DV, &gpio_config);
 80058a6:	f107 030c 	add.w	r3, r7, #12
 80058aa:	484f      	ldr	r0, [pc, #316]	; (80059e8 <low_level_init+0x154>)
 80058ac:	2109      	movs	r1, #9
 80058ae:	461a      	mov	r2, r3
 80058b0:	f7fe f974 	bl	8003b9c <XMC_GPIO_Init>
  XMC_GPIO_Init(ETH_LWIP_0_RXER, &gpio_config);
 80058b4:	f107 030c 	add.w	r3, r7, #12
 80058b8:	484c      	ldr	r0, [pc, #304]	; (80059ec <low_level_init+0x158>)
 80058ba:	2104      	movs	r1, #4
 80058bc:	461a      	mov	r2, r3
 80058be:	f7fe f96d 	bl	8003b9c <XMC_GPIO_Init>
  XMC_GPIO_Init(ETH_LWIP_0_RXD0, &gpio_config);
 80058c2:	f107 030c 	add.w	r3, r7, #12
 80058c6:	4849      	ldr	r0, [pc, #292]	; (80059ec <low_level_init+0x158>)
 80058c8:	2102      	movs	r1, #2
 80058ca:	461a      	mov	r2, r3
 80058cc:	f7fe f966 	bl	8003b9c <XMC_GPIO_Init>
  XMC_GPIO_Init(ETH_LWIP_0_RXD1, &gpio_config);
 80058d0:	f107 030c 	add.w	r3, r7, #12
 80058d4:	4845      	ldr	r0, [pc, #276]	; (80059ec <low_level_init+0x158>)
 80058d6:	2103      	movs	r1, #3
 80058d8:	461a      	mov	r2, r3
 80058da:	f7fe f95f 	bl	8003b9c <XMC_GPIO_Init>
  XMC_GPIO_Init(ETH_LWIP_0_RMII_CLK, &gpio_config);
 80058de:	f107 030c 	add.w	r3, r7, #12
 80058e2:	4841      	ldr	r0, [pc, #260]	; (80059e8 <low_level_init+0x154>)
 80058e4:	2108      	movs	r1, #8
 80058e6:	461a      	mov	r2, r3
 80058e8:	f7fe f958 	bl	8003b9c <XMC_GPIO_Init>
  XMC_GPIO_Init(ETH_LWIP_0_MDIO, &gpio_config);
 80058ec:	f107 030c 	add.w	r3, r7, #12
 80058f0:	483e      	ldr	r0, [pc, #248]	; (80059ec <low_level_init+0x158>)
 80058f2:	2100      	movs	r1, #0
 80058f4:	461a      	mov	r2, r3
 80058f6:	f7fe f951 	bl	8003b9c <XMC_GPIO_Init>
  
  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_MEDIUM_EDGE;
 80058fa:	2301      	movs	r3, #1
 80058fc:	753b      	strb	r3, [r7, #20]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 80058fe:	2388      	movs	r3, #136	; 0x88
 8005900:	733b      	strb	r3, [r7, #12]
  XMC_GPIO_Init(ETH_LWIP_0_MDC, &gpio_config);
 8005902:	f107 030c 	add.w	r3, r7, #12
 8005906:	4839      	ldr	r0, [pc, #228]	; (80059ec <low_level_init+0x158>)
 8005908:	2107      	movs	r1, #7
 800590a:	461a      	mov	r2, r3
 800590c:	f7fe f946 	bl	8003b9c <XMC_GPIO_Init>
  XMC_GPIO_SetHardwareControl(ETH_LWIP_0_MDIO, XMC_GPIO_HWCTRL_PERIPHERAL1);
 8005910:	4836      	ldr	r0, [pc, #216]	; (80059ec <low_level_init+0x158>)
 8005912:	2100      	movs	r1, #0
 8005914:	2201      	movs	r2, #1
 8005916:	f7ff f9dd 	bl	8004cd4 <XMC_GPIO_SetHardwareControl>

  port_control.mode = XMC_ETH_MAC_PORT_CTRL_MODE_RMII;
 800591a:	7efb      	ldrb	r3, [r7, #27]
 800591c:	f043 0304 	orr.w	r3, r3, #4
 8005920:	76fb      	strb	r3, [r7, #27]
  port_control.rxd0 = (XMC_ETH_MAC_PORT_CTRL_RXD0_t)0U;
 8005922:	7e3b      	ldrb	r3, [r7, #24]
 8005924:	f36f 0301 	bfc	r3, #0, #2
 8005928:	763b      	strb	r3, [r7, #24]
  port_control.rxd1 = (XMC_ETH_MAC_PORT_CTRL_RXD1_t)0U;
 800592a:	7e3b      	ldrb	r3, [r7, #24]
 800592c:	f36f 0383 	bfc	r3, #2, #2
 8005930:	763b      	strb	r3, [r7, #24]
  port_control.clk_rmii = (XMC_ETH_MAC_PORT_CTRL_CLK_RMII_t)2U;
 8005932:	7e7b      	ldrb	r3, [r7, #25]
 8005934:	2202      	movs	r2, #2
 8005936:	f362 0301 	bfi	r3, r2, #0, #2
 800593a:	767b      	strb	r3, [r7, #25]
  port_control.crs_dv = (XMC_ETH_MAC_PORT_CTRL_CRS_DV_t)2U;
 800593c:	7e7b      	ldrb	r3, [r7, #25]
 800593e:	2202      	movs	r2, #2
 8005940:	f362 0383 	bfi	r3, r2, #2, #2
 8005944:	767b      	strb	r3, [r7, #25]
  port_control.rxer = (XMC_ETH_MAC_PORT_CTRL_RXER_t)0U;
 8005946:	7e7b      	ldrb	r3, [r7, #25]
 8005948:	f36f 1387 	bfc	r3, #6, #2
 800594c:	767b      	strb	r3, [r7, #25]
  port_control.mdio = (XMC_ETH_MAC_PORT_CTRL_MDIO_t)1U;
 800594e:	7ebb      	ldrb	r3, [r7, #26]
 8005950:	2201      	movs	r2, #1
 8005952:	f362 1387 	bfi	r3, r2, #6, #2
 8005956:	76bb      	strb	r3, [r7, #26]
  XMC_ETH_MAC_SetPortControl(&eth_mac, port_control);
 8005958:	4825      	ldr	r0, [pc, #148]	; (80059f0 <low_level_init+0x15c>)
 800595a:	69b9      	ldr	r1, [r7, #24]
 800595c:	f7ff fd80 	bl	8005460 <XMC_ETH_MAC_SetPortControl>

  XMC_ETH_MAC_Enable(&eth_mac);
 8005960:	4823      	ldr	r0, [pc, #140]	; (80059f0 <low_level_init+0x15c>)
 8005962:	f7ff f837 	bl	80049d4 <XMC_ETH_MAC_Enable>
  XMC_ETH_MAC_SetManagmentClockDivider(&eth_mac);
 8005966:	4822      	ldr	r0, [pc, #136]	; (80059f0 <low_level_init+0x15c>)
 8005968:	f7fe ffe4 	bl	8004934 <XMC_ETH_MAC_SetManagmentClockDivider>

  int32_t status;
  if((status = XMC_ETH_PHY_Init(&eth_mac, ETH_LWIP_0_PHY_ADDR, &eth_phy_config)) != XMC_ETH_PHY_STATUS_OK)
 800596c:	4820      	ldr	r0, [pc, #128]	; (80059f0 <low_level_init+0x15c>)
 800596e:	2100      	movs	r1, #0
 8005970:	4a20      	ldr	r2, [pc, #128]	; (80059f4 <low_level_init+0x160>)
 8005972:	f008 f8db 	bl	800db2c <XMC_ETH_PHY_Init>
 8005976:	61f8      	str	r0, [r7, #28]
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <low_level_init+0xf4>
  {
    ETH_LWIP_Error((ETH_LWIP_ERROR_t)status);
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	4618      	mov	r0, r3
 8005984:	f000 f980 	bl	8005c88 <ETH_LWIP_Error>
  }

  XMC_ETH_MAC_InitEx(&eth_mac);
 8005988:	4819      	ldr	r0, [pc, #100]	; (80059f0 <low_level_init+0x15c>)
 800598a:	f7fe fe8f 	bl	80046ac <XMC_ETH_MAC_InitEx>

  XMC_ETH_MAC_SetAddress(&eth_mac, eth_mac.address);
 800598e:	4b18      	ldr	r3, [pc, #96]	; (80059f0 <low_level_init+0x15c>)
 8005990:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005994:	4816      	ldr	r0, [pc, #88]	; (80059f0 <low_level_init+0x15c>)
 8005996:	f7ff fd73 	bl	8005480 <XMC_ETH_MAC_SetAddress>
  XMC_ETH_MAC_DisableJumboFrame(&eth_mac);
 800599a:	4815      	ldr	r0, [pc, #84]	; (80059f0 <low_level_init+0x15c>)
 800599c:	f7ff fd98 	bl	80054d0 <XMC_ETH_MAC_DisableJumboFrame>

  XMC_ETH_MAC_EnableReceptionBroadcastFrames(&eth_mac);
 80059a0:	4813      	ldr	r0, [pc, #76]	; (80059f0 <low_level_init+0x15c>)
 80059a2:	f7ff fd83 	bl	80054ac <XMC_ETH_MAC_EnableReceptionBroadcastFrames>
  
  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_MEDIUM_EDGE;
 80059a6:	2301      	movs	r3, #1
 80059a8:	753b      	strb	r3, [r7, #20]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 80059aa:	2388      	movs	r3, #136	; 0x88
 80059ac:	733b      	strb	r3, [r7, #12]
  XMC_GPIO_Init(ETH_LWIP_0_TXEN, &gpio_config);
 80059ae:	f107 030c 	add.w	r3, r7, #12
 80059b2:	480e      	ldr	r0, [pc, #56]	; (80059ec <low_level_init+0x158>)
 80059b4:	2105      	movs	r1, #5
 80059b6:	461a      	mov	r2, r3
 80059b8:	f7fe f8f0 	bl	8003b9c <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 80059bc:	2388      	movs	r3, #136	; 0x88
 80059be:	733b      	strb	r3, [r7, #12]
  XMC_GPIO_Init(ETH_LWIP_0_TXD0, &gpio_config);
 80059c0:	f107 030c 	add.w	r3, r7, #12
 80059c4:	4809      	ldr	r0, [pc, #36]	; (80059ec <low_level_init+0x158>)
 80059c6:	2108      	movs	r1, #8
 80059c8:	461a      	mov	r2, r3
 80059ca:	f7fe f8e7 	bl	8003b9c <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 80059ce:	2388      	movs	r3, #136	; 0x88
 80059d0:	733b      	strb	r3, [r7, #12]
  XMC_GPIO_Init(ETH_LWIP_0_TXD1, &gpio_config);
 80059d2:	f107 030c 	add.w	r3, r7, #12
 80059d6:	4805      	ldr	r0, [pc, #20]	; (80059ec <low_level_init+0x158>)
 80059d8:	2109      	movs	r1, #9
 80059da:	461a      	mov	r2, r3
 80059dc:	f7fe f8de 	bl	8003b9c <XMC_GPIO_Init>

}
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	48028f00 	.word	0x48028f00
 80059ec:	48028200 	.word	0x48028200
 80059f0:	1ffe8800 	.word	0x1ffe8800
 80059f4:	080142dc 	.word	0x080142dc

080059f8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  XMC_UNUSED_ARG(netif);

  struct pbuf *q;
  uint32_t framelen = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	613b      	str	r3, [r7, #16]
  uint8_t *buffer;
  
  if (p->tot_len > (u16_t)XMC_ETH_MAC_BUF_SIZE) {
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	891b      	ldrh	r3, [r3, #8]
 8005a0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d901      	bls.n	8005a16 <low_level_output+0x1e>
    return ERR_BUF;
 8005a12:	23fe      	movs	r3, #254	; 0xfe
 8005a14:	e03c      	b.n	8005a90 <low_level_output+0x98>
  }

  while (XMC_ETH_MAC_IsTxDescriptorOwnedByDma(&eth_mac));
 8005a16:	bf00      	nop
 8005a18:	4820      	ldr	r0, [pc, #128]	; (8005a9c <low_level_output+0xa4>)
 8005a1a:	f7ff fd99 	bl	8005550 <XMC_ETH_MAC_IsTxDescriptorOwnedByDma>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1f9      	bne.n	8005a18 <low_level_output+0x20>

  buffer = XMC_ETH_MAC_GetTxBuffer(&eth_mac);
 8005a24:	481d      	ldr	r0, [pc, #116]	; (8005a9c <low_level_output+0xa4>)
 8005a26:	f7ff fe57 	bl	80056d8 <XMC_ETH_MAC_GetTxBuffer>
 8005a2a:	60f8      	str	r0, [r7, #12]

#if ETH_PAD_SIZE
  pbuf_header(p, -ETH_PAD_SIZE);    /* Drop the padding word */
 8005a2c:	6838      	ldr	r0, [r7, #0]
 8005a2e:	f06f 0101 	mvn.w	r1, #1
 8005a32:	f002 fcaf 	bl	8008394 <pbuf_header>
#endif

  for(q = p; q != NULL; q = q->next)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	e017      	b.n	8005a6c <low_level_output+0x74>
  {
    /* Send the data from the pbuf to the interface, one pbuf at a
     time. The size of the data in each pbuf is kept in the ->len
     variable. */
    MEMCPY(buffer, q->payload, q->len);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	895b      	ldrh	r3, [r3, #10]
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	4611      	mov	r1, r2
 8005a48:	461a      	mov	r2, r3
 8005a4a:	f000 f92f 	bl	8005cac <memcpy>
    framelen += (uint32_t)q->len;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	895b      	ldrh	r3, [r3, #10]
 8005a52:	461a      	mov	r2, r3
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4413      	add	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
    buffer += q->len;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	895b      	ldrh	r3, [r3, #10]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

#if ETH_PAD_SIZE
  pbuf_header(p, -ETH_PAD_SIZE);    /* Drop the padding word */
#endif

  for(q = p; q != NULL; q = q->next)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e4      	bne.n	8005a3c <low_level_output+0x44>
    framelen += (uint32_t)q->len;
    buffer += q->len;
  }

#if ETH_PAD_SIZE
  pbuf_header(p, ETH_PAD_SIZE);    /* Reclaim the padding word */
 8005a72:	6838      	ldr	r0, [r7, #0]
 8005a74:	2102      	movs	r1, #2
 8005a76:	f002 fc8d 	bl	8008394 <pbuf_header>
#endif

  XMC_ETH_MAC_SetTxBufferSize(&eth_mac, framelen);
 8005a7a:	4808      	ldr	r0, [pc, #32]	; (8005a9c <low_level_output+0xa4>)
 8005a7c:	6939      	ldr	r1, [r7, #16]
 8005a7e:	f7ff fe4f 	bl	8005720 <XMC_ETH_MAC_SetTxBufferSize>

  XMC_ETH_MAC_ReturnTxDescriptor(&eth_mac);
 8005a82:	4806      	ldr	r0, [pc, #24]	; (8005a9c <low_level_output+0xa4>)
 8005a84:	f7ff f8ec 	bl	8004c60 <XMC_ETH_MAC_ReturnTxDescriptor>
  XMC_ETH_MAC_ResumeTx(&eth_mac);
 8005a88:	4804      	ldr	r0, [pc, #16]	; (8005a9c <low_level_output+0xa4>)
 8005a8a:	f7ff fdf5 	bl	8005678 <XMC_ETH_MAC_ResumeTx>

  LINK_STATS_INC(link.xmit);

  return ERR_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	b25b      	sxtb	r3, r3
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	1ffe8800 	.word	0x1ffe8800

08005aa0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf * low_level_input(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
  struct pbuf *p = NULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60fb      	str	r3, [r7, #12]
  struct pbuf *q;
  uint32_t len;
  uint8_t *buffer;

  if (XMC_ETH_MAC_IsRxDescriptorOwnedByDma(&eth_mac) == false)
 8005aaa:	482f      	ldr	r0, [pc, #188]	; (8005b68 <low_level_input+0xc8>)
 8005aac:	f7ff fd3c 	bl	8005528 <XMC_ETH_MAC_IsRxDescriptorOwnedByDma>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	f083 0301 	eor.w	r3, r3, #1
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d04c      	beq.n	8005b56 <low_level_input+0xb6>
  {
    len = XMC_ETH_MAC_GetRxFrameSize(&eth_mac);
 8005abc:	482a      	ldr	r0, [pc, #168]	; (8005b68 <low_level_input+0xc8>)
 8005abe:	f7fe ff01 	bl	80048c4 <XMC_ETH_MAC_GetRxFrameSize>
 8005ac2:	6078      	str	r0, [r7, #4]
  
    if ((len > 0U) && (len <= (uint32_t)XMC_ETH_MAC_BUF_SIZE))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d042      	beq.n	8005b50 <low_level_input+0xb0>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d83d      	bhi.n	8005b50 <low_level_input+0xb0>
    {
#if ETH_PAD_SIZE
    len += ETH_PAD_SIZE;    /* allow room for Ethernet padding */
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3302      	adds	r3, #2
 8005ad8:	607b      	str	r3, [r7, #4]
#endif
  
      /* We allocate a pbuf chain of pbufs from the pool. */
      p = pbuf_alloc(PBUF_RAW, (u16_t)len, PBUF_POOL);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2000      	movs	r0, #0
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005ae6:	f002 fa5d 	bl	8007fa4 <pbuf_alloc>
 8005aea:	60f8      	str	r0, [r7, #12]
    
      if (p != NULL)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d02d      	beq.n	8005b4e <low_level_input+0xae>
      {
#if ETH_PAD_SIZE
        pbuf_header(p, -ETH_PAD_SIZE);  /* drop the padding word */
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f06f 0101 	mvn.w	r1, #1
 8005af8:	f002 fc4c 	bl	8008394 <pbuf_header>
#endif
  
        buffer = XMC_ETH_MAC_GetRxBuffer(&eth_mac);
 8005afc:	481a      	ldr	r0, [pc, #104]	; (8005b68 <low_level_input+0xc8>)
 8005afe:	f7ff fdfd 	bl	80056fc <XMC_ETH_MAC_GetRxBuffer>
 8005b02:	6038      	str	r0, [r7, #0]
  
        len = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	607b      	str	r3, [r7, #4]
        /* We iterate over the pbuf chain until we have read the entire
         * packet into the pbuf. */
        for (q = p; q != NULL; q = q->next)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	60bb      	str	r3, [r7, #8]
 8005b0c:	e014      	b.n	8005b38 <low_level_input+0x98>
           * This does not necessarily have to be a memcpy, you can also preallocate
           * pbufs for a DMA-enabled MAC and after receiving truncate it to the
           * actually received size. In this case, ensure the tot_len member of the
           * pbuf is the sum of the chained pbuf len members.
           */
           MEMCPY(q->payload, &buffer[len], q->len);
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6859      	ldr	r1, [r3, #4]
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	441a      	add	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	895b      	ldrh	r3, [r3, #10]
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	4611      	mov	r1, r2
 8005b20:	461a      	mov	r2, r3
 8005b22:	f000 f8c3 	bl	8005cac <memcpy>
           len += q->len;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	895b      	ldrh	r3, [r3, #10]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4413      	add	r3, r2
 8005b30:	607b      	str	r3, [r7, #4]
        buffer = XMC_ETH_MAC_GetRxBuffer(&eth_mac);
  
        len = 0U;
        /* We iterate over the pbuf chain until we have read the entire
         * packet into the pbuf. */
        for (q = p; q != NULL; q = q->next)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60bb      	str	r3, [r7, #8]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e7      	bne.n	8005b0e <low_level_input+0x6e>
           */
           MEMCPY(q->payload, &buffer[len], q->len);
           len += q->len;
        }
#if ETH_PAD_SIZE
        pbuf_header(p, ETH_PAD_SIZE);    /* Reclaim the padding word */
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	2102      	movs	r1, #2
 8005b42:	f002 fc27 	bl	8008394 <pbuf_header>
#endif
        LINK_STATS_INC(link.recv);

        XMC_ETH_MAC_ReturnRxDescriptor(&eth_mac);  
 8005b46:	4808      	ldr	r0, [pc, #32]	; (8005b68 <low_level_input+0xc8>)
 8005b48:	f7ff f85a 	bl	8004c00 <XMC_ETH_MAC_ReturnRxDescriptor>
#endif
  
      /* We allocate a pbuf chain of pbufs from the pool. */
      p = pbuf_alloc(PBUF_RAW, (u16_t)len, PBUF_POOL);
    
      if (p != NULL)
 8005b4c:	e003      	b.n	8005b56 <low_level_input+0xb6>
 8005b4e:	e002      	b.n	8005b56 <low_level_input+0xb6>
      }
    }
    else
    {
      /* Discard frame */
      XMC_ETH_MAC_ReturnRxDescriptor(&eth_mac);
 8005b50:	4805      	ldr	r0, [pc, #20]	; (8005b68 <low_level_input+0xc8>)
 8005b52:	f7ff f855 	bl	8004c00 <XMC_ETH_MAC_ReturnRxDescriptor>
      LINK_STATS_INC(link.memerr);
      LINK_STATS_INC(link.drop);
    }
  }

  XMC_ETH_MAC_ResumeRx(&eth_mac);
 8005b56:	4804      	ldr	r0, [pc, #16]	; (8005b68 <low_level_input+0xc8>)
 8005b58:	f7ff fda6 	bl	80056a8 <XMC_ETH_MAC_ResumeRx>

  return p;  
 8005b5c:	68fb      	ldr	r3, [r7, #12]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	1ffe8800 	.word	0x1ffe8800

08005b6c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void *arg)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]
  struct eth_hdr *ethhdr;
  struct netif *netif = (struct netif *)arg;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	613b      	str	r3, [r7, #16]


    p = low_level_input();
 8005b7c:	f7ff ff90 	bl	8005aa0 <low_level_input>
 8005b80:	6178      	str	r0, [r7, #20]

    while (p != NULL)
 8005b82:	e024      	b.n	8005bce <ethernetif_input+0x62>
    {
   	  ethhdr = p->payload;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	60fb      	str	r3, [r7, #12]
   	  switch (htons(ethhdr->type))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	89db      	ldrh	r3, [r3, #14]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	4618      	mov	r0, r3
 8005b92:	f001 fb99 	bl	80072c8 <lwip_htons>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9c:	d003      	beq.n	8005ba6 <ethernetif_input+0x3a>
 8005b9e:	f640 0206 	movw	r2, #2054	; 0x806
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d10c      	bne.n	8005bc0 <ethernetif_input+0x54>
   	  {
   	    case ETHTYPE_IP:
   	    case ETHTYPE_ARP:
   	      /* full packet send to tcpip_thread to process */
          if (netif->input( p, netif) != ERR_OK)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	6978      	ldr	r0, [r7, #20]
 8005bac:	6939      	ldr	r1, [r7, #16]
 8005bae:	4798      	blx	r3
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <ethernetif_input+0x52>
          {
            pbuf_free(p);
 8005bb6:	6978      	ldr	r0, [r7, #20]
 8005bb8:	f002 fc10 	bl	80083dc <pbuf_free>
          }

          break;
 8005bbc:	e004      	b.n	8005bc8 <ethernetif_input+0x5c>
 8005bbe:	e003      	b.n	8005bc8 <ethernetif_input+0x5c>

   	    default:
   	      pbuf_free(p);
 8005bc0:	6978      	ldr	r0, [r7, #20]
 8005bc2:	f002 fc0b 	bl	80083dc <pbuf_free>
   	      break;
 8005bc6:	bf00      	nop
   	  }
      
      p = low_level_input();
 8005bc8:	f7ff ff6a 	bl	8005aa0 <low_level_input>
 8005bcc:	6178      	str	r0, [r7, #20]
  struct netif *netif = (struct netif *)arg;


    p = low_level_input();

    while (p != NULL)
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1d7      	bne.n	8005b84 <ethernetif_input+0x18>
      p = low_level_input();
    }



}
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop

08005bdc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif* netif)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));

  netif->name[0] = IFNAME0;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2265      	movs	r2, #101	; 0x65
 8005be8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	226e      	movs	r2, #110	; 0x6e
 8005bf0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  netif->output = etharp_output;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a14      	ldr	r2, [pc, #80]	; (8005c48 <ethernetif_init+0x6c>)
 8005bf8:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a13      	ldr	r2, [pc, #76]	; (8005c4c <ethernetif_init+0x70>)
 8005bfe:	619a      	str	r2, [r3, #24]

  /* maximum transfer unit */
  netif->mtu = 1500U,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005c06:	849a      	strh	r2, [r3, #36]	; 0x24

  /* initialize the hardware */
  low_level_init(netif);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7ff fe43 	bl	8005894 <low_level_init>

  /* device capabilities */
  xnetif.flags = NETIF_FLAG_ETHARP;
 8005c0e:	4b10      	ldr	r3, [pc, #64]	; (8005c50 <ethernetif_init+0x74>)
 8005c10:	2208      	movs	r2, #8
 8005c12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if ETH_BROADCAST_EN == 1
  xnetif.flags |= NETIF_FLAG_BROADCAST;
 8005c16:	4b0e      	ldr	r3, [pc, #56]	; (8005c50 <ethernetif_init+0x74>)
 8005c18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c1c:	f043 0302 	orr.w	r3, r3, #2
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <ethernetif_init+0x74>)
 8005c24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif


  sys_timeout(1000U, ethernetif_link_status, NULL);
 8005c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c2c:	4909      	ldr	r1, [pc, #36]	; (8005c54 <ethernetif_init+0x78>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f007 feac 	bl	800d98c <sys_timeout>

  netif_set_link_callback(netif, ethernetif_link_callback);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	4908      	ldr	r1, [pc, #32]	; (8005c58 <ethernetif_init+0x7c>)
 8005c38:	f002 f91a 	bl	8007e70 <netif_set_link_callback>


  return ERR_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	b25b      	sxtb	r3, r3
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	08006629 	.word	0x08006629
 8005c4c:	080059f9 	.word	0x080059f9
 8005c50:	1ffe8830 	.word	0x1ffe8830
 8005c54:	08005835 	.word	0x08005835
 8005c58:	08005749 	.word	0x08005749

08005c5c <ETH_LWIP_UserIRQ>:

__WEAK void ETH_LWIP_UserIRQ(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
}
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <ETH0_0_IRQHandler>:
   
void IRQ_Hdlr_108(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  XMC_ETH_MAC_ClearEventStatus(&eth_mac, XMC_ETH_MAC_EVENT_RECEIVE);
 8005c6c:	4804      	ldr	r0, [pc, #16]	; (8005c80 <ETH0_0_IRQHandler+0x18>)
 8005c6e:	2140      	movs	r1, #64	; 0x40
 8005c70:	f7fe ff96 	bl	8004ba0 <XMC_ETH_MAC_ClearEventStatus>
    ethernetif_input(&xnetif);
 8005c74:	4803      	ldr	r0, [pc, #12]	; (8005c84 <ETH0_0_IRQHandler+0x1c>)
 8005c76:	f7ff ff79 	bl	8005b6c <ethernetif_input>
  
  ETH_LWIP_UserIRQ(); 
 8005c7a:	f7ff ffef 	bl	8005c5c <ETH_LWIP_UserIRQ>
}
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	1ffe8800 	.word	0x1ffe8800
 8005c84:	1ffe8830 	.word	0x1ffe8830

08005c88 <ETH_LWIP_Error>:
    ethernetif_input(&xnetif);
}

/*Weak function to be called incase of error*/
__WEAK void ETH_LWIP_Error (ETH_LWIP_ERROR_t error_code)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	71fb      	strb	r3, [r7, #7]
  switch (error_code)
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d004      	beq.n	8005ca2 <ETH_LWIP_Error+0x1a>
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d003      	beq.n	8005ca4 <ETH_LWIP_Error+0x1c>
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d002      	beq.n	8005ca6 <ETH_LWIP_Error+0x1e>
 8005ca0:	e002      	b.n	8005ca8 <ETH_LWIP_Error+0x20>
  {
    case ETH_LWIP_ERROR_PHY_DEVICE_ID:
       /* Wrong PHY address configured in the ETH_LWIP APP Network Interface.
        * Because the connect PHY does not match the configuration or the PHYADR is wrong*/
       break;
 8005ca2:	e002      	b.n	8005caa <ETH_LWIP_Error+0x22>

   case ETH_LWIP_ERROR_PHY_TIMEOUT:
      /* PHY did not respond.*/
      break;
 8005ca4:	e001      	b.n	8005caa <ETH_LWIP_Error+0x22>

   case ETH_LWIP_ERROR_PHY_ERROR:
     /*PHY register update failed*/
     break;
 8005ca6:	e000      	b.n	8005caa <ETH_LWIP_Error+0x22>

   default:
     break;
 8005ca8:	bf00      	nop
  }

  for (;;);
 8005caa:	e7fe      	b.n	8005caa <ETH_LWIP_Error+0x22>

08005cac <memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void *memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 8005cac:	0913      	lsrs	r3, r2, #4
 8005cae:	d011      	beq.n	8005cd4 <memcpy+0x28>
 8005cb0:	f851 cb04 	ldr.w	ip, [r1], #4
 8005cb4:	f840 cb04 	str.w	ip, [r0], #4
 8005cb8:	f851 cb04 	ldr.w	ip, [r1], #4
 8005cbc:	f840 cb04 	str.w	ip, [r0], #4
 8005cc0:	f851 cb04 	ldr.w	ip, [r1], #4
 8005cc4:	f840 cb04 	str.w	ip, [r0], #4
 8005cc8:	f851 cb04 	ldr.w	ip, [r1], #4
 8005ccc:	f840 cb04 	str.w	ip, [r0], #4
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	d1ed      	bne.n	8005cb0 <memcpy+0x4>
 8005cd4:	f012 030f 	ands.w	r3, r2, #15
 8005cd8:	d005      	beq.n	8005ce6 <memcpy+0x3a>
 8005cda:	f811 cb01 	ldrb.w	ip, [r1], #1
 8005cde:	f800 cb01 	strb.w	ip, [r0], #1
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	d1f9      	bne.n	8005cda <memcpy+0x2e>
 8005ce6:	4770      	bx	lr
        "    bne     3$\n"

        // Return to caller.
        "4$: bx      lr\n"
    );
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	bf00      	nop

08005cec <sys_now>:
#include <SYSTIMER/systimer.h>
#include "include/arch/cc.h"
#include "../include/lwip/sys.h"

uint32_t sys_now(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  return (u32_t)(SYSTIMER_GetTickCount() * SYSTIMER_TICK_PERIOD * 1000);
 8005cf0:	f7ff fae4 	bl	80052bc <SYSTIMER_GetTickCount>
 8005cf4:	ee07 0a90 	vmov	s15, r0
 8005cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005d18 <sys_now+0x2c>
 8005d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d04:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005d1c <sys_now+0x30>
 8005d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d10:	ee17 3a90 	vmov	r3, s15
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	3a83126f 	.word	0x3a83126f
 8005d1c:	447a0000 	.word	0x447a0000

08005d20 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8005d2a:	2310      	movs	r3, #16
 8005d2c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	895b      	ldrh	r3, [r3, #10]
 8005d32:	2b10      	cmp	r3, #16
 8005d34:	d800      	bhi.n	8005d38 <ethernet_input+0x18>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 8005d36:	e073      	b.n	8005e20 <ethernet_input+0x100>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	7bdb      	ldrb	r3, [r3, #15]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d106      	bne.n	8005d4e <ethernet_input+0x2e>
    p->if_idx = netif_get_index(netif);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d46:	3301      	adds	r3, #1
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	7b9a      	ldrb	r2, [r3, #14]
 8005d58:	7bdb      	ldrb	r3, [r3, #15]
 8005d5a:	021b      	lsls	r3, r3, #8
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	789b      	ldrb	r3, [r3, #2]
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d024      	beq.n	8005db6 <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	789b      	ldrb	r3, [r3, #2]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d10f      	bne.n	8005d94 <ethernet_input+0x74>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	78db      	ldrb	r3, [r3, #3]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d11c      	bne.n	8005db6 <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	791b      	ldrb	r3, [r3, #4]

  if (ethhdr->dest.addr[0] & 1) {
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8005d80:	2b5e      	cmp	r3, #94	; 0x5e
 8005d82:	d118      	bne.n	8005db6 <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	7b5b      	ldrb	r3, [r3, #13]
 8005d88:	f043 0310 	orr.w	r3, r3, #16
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	735a      	strb	r2, [r3, #13]
 8005d92:	e010      	b.n	8005db6 <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	3302      	adds	r3, #2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	4926      	ldr	r1, [pc, #152]	; (8005e34 <ethernet_input+0x114>)
 8005d9c:	2206      	movs	r2, #6
 8005d9e:	f009 fa5d 	bl	800f25c <memcmp>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d106      	bne.n	8005db6 <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	7b5b      	ldrb	r3, [r3, #13]
 8005dac:	f043 0308 	orr.w	r3, r3, #8
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8005db6:	89fb      	ldrh	r3, [r7, #14]
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d003      	beq.n	8005dc4 <ethernet_input+0xa4>
 8005dbc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8005dc0:	d016      	beq.n	8005df0 <ethernet_input+0xd0>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8005dc2:	e02d      	b.n	8005e20 <ethernet_input+0x100>

  switch (type) {
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d100      	bne.n	8005dd4 <ethernet_input+0xb4>
        goto free_and_return;
 8005dd2:	e025      	b.n	8005e20 <ethernet_input+0x100>
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8005dd4:	8afb      	ldrh	r3, [r7, #22]
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	f002 fa7f 	bl	80082dc <pbuf_remove_header>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d000      	beq.n	8005de6 <ethernet_input+0xc6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: IPv4 packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
 8005de4:	e01c      	b.n	8005e20 <ethernet_input+0x100>
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	f001 f85f 	bl	8006eac <ip4_input>
      }
      break;
 8005dee:	e015      	b.n	8005e1c <ethernet_input+0xfc>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d100      	bne.n	8005e00 <ethernet_input+0xe0>
        goto free_and_return;
 8005dfe:	e00f      	b.n	8005e20 <ethernet_input+0x100>
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8005e00:	8afb      	ldrh	r3, [r7, #22]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	4619      	mov	r1, r3
 8005e06:	f002 fa69 	bl	80082dc <pbuf_remove_header>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d000      	beq.n	8005e12 <ethernet_input+0xf2>
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
        ETHARP_STATS_INC(etharp.drop);
        goto free_and_return;
 8005e10:	e006      	b.n	8005e20 <ethernet_input+0x100>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	f000 fb01 	bl	800641c <etharp_input>
      }
      break;
 8005e1a:	bf00      	nop
      goto free_and_return;
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	e003      	b.n	8005e28 <ethernet_input+0x108>

free_and_return:
  pbuf_free(p);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f002 fadb 	bl	80083dc <pbuf_free>
  return ERR_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	b25b      	sxtb	r3, r3
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	080142e4 	.word	0x080142e4

08005e38 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8005e46:	8c3b      	ldrh	r3, [r7, #32]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 fa3d 	bl	80072c8 <lwip_htons>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8005e52:	68b8      	ldr	r0, [r7, #8]
 8005e54:	2110      	movs	r1, #16
 8005e56:	f002 fa31 	bl	80082bc <pbuf_add_header>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <ethernet_output+0x2e>
      goto pbuf_header_failed;
 8005e60:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8005e62:	23fe      	movs	r3, #254	; 0xfe
 8005e64:	e019      	b.n	8005e9a <ethernet_output+0x62>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	8afa      	ldrh	r2, [r7, #22]
 8005e70:	81da      	strh	r2, [r3, #14]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	3302      	adds	r3, #2
 8005e76:	4618      	mov	r0, r3
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	2206      	movs	r2, #6
 8005e7c:	f7ff ff16 	bl	8005cac <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	3308      	adds	r3, #8
 8005e84:	4618      	mov	r0, r3
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	2206      	movs	r2, #6
 8005e8a:	f7ff ff0f 	bl	8005cac <memcpy>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	68b9      	ldr	r1, [r7, #8]
 8005e96:	4798      	blx	r3
 8005e98:	4603      	mov	r3, r0
 8005e9a:	b25b      	sxtb	r3, r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8005eac:	4915      	ldr	r1, [pc, #84]	; (8005f04 <etharp_free_entry+0x60>)
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	4413      	add	r3, r2
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	440b      	add	r3, r1
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d013      	beq.n	8005ee8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8005ec0:	4910      	ldr	r1, [pc, #64]	; (8005f04 <etharp_free_entry+0x60>)
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	4413      	add	r3, r2
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	440b      	add	r3, r1
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f002 fa83 	bl	80083dc <pbuf_free>
    arp_table[i].q = NULL;
 8005ed6:	490b      	ldr	r1, [pc, #44]	; (8005f04 <etharp_free_entry+0x60>)
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	4613      	mov	r3, r2
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	4413      	add	r3, r2
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	440b      	add	r3, r1
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8005ee8:	4906      	ldr	r1, [pc, #24]	; (8005f04 <etharp_free_entry+0x60>)
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	4613      	mov	r3, r2
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	4413      	add	r3, r2
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	440b      	add	r3, r1
 8005ef6:	3310      	adds	r3, #16
 8005ef8:	2200      	movs	r2, #0
 8005efa:	711a      	strb	r2, [r3, #4]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	1ffe9138 	.word	0x1ffe9138

08005f08 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005f0e:	2300      	movs	r3, #0
 8005f10:	607b      	str	r3, [r7, #4]
 8005f12:	e097      	b.n	8006044 <etharp_tmr+0x13c>
    u8_t state = arp_table[i].state;
 8005f14:	494f      	ldr	r1, [pc, #316]	; (8006054 <etharp_tmr+0x14c>)
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	4413      	add	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	440b      	add	r3, r1
 8005f22:	3310      	adds	r3, #16
 8005f24:	791b      	ldrb	r3, [r3, #4]
 8005f26:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8087 	beq.w	800603e <etharp_tmr+0x136>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8005f30:	4948      	ldr	r1, [pc, #288]	; (8006054 <etharp_tmr+0x14c>)
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	4613      	mov	r3, r2
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	4413      	add	r3, r2
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	440b      	add	r3, r1
 8005f3e:	3310      	adds	r3, #16
 8005f40:	885b      	ldrh	r3, [r3, #2]
 8005f42:	3301      	adds	r3, #1
 8005f44:	b298      	uxth	r0, r3
 8005f46:	4943      	ldr	r1, [pc, #268]	; (8006054 <etharp_tmr+0x14c>)
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	4413      	add	r3, r2
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	440b      	add	r3, r1
 8005f54:	3310      	adds	r3, #16
 8005f56:	4602      	mov	r2, r0
 8005f58:	805a      	strh	r2, [r3, #2]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005f5a:	493e      	ldr	r1, [pc, #248]	; (8006054 <etharp_tmr+0x14c>)
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	4413      	add	r3, r2
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	440b      	add	r3, r1
 8005f68:	3310      	adds	r3, #16
 8005f6a:	885b      	ldrh	r3, [r3, #2]
 8005f6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005f70:	d215      	bcs.n	8005f9e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005f72:	4938      	ldr	r1, [pc, #224]	; (8006054 <etharp_tmr+0x14c>)
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	4613      	mov	r3, r2
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	4413      	add	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	440b      	add	r3, r1
 8005f80:	3310      	adds	r3, #16
 8005f82:	791b      	ldrb	r3, [r3, #4]
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d10e      	bne.n	8005fa6 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8005f88:	4932      	ldr	r1, [pc, #200]	; (8006054 <etharp_tmr+0x14c>)
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	4413      	add	r3, r2
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	440b      	add	r3, r1
 8005f96:	3310      	adds	r3, #16
 8005f98:	885b      	ldrh	r3, [r3, #2]
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d903      	bls.n	8005fa6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff ff80 	bl	8005ea4 <etharp_free_entry>
 8005fa4:	e04b      	b.n	800603e <etharp_tmr+0x136>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8005fa6:	492b      	ldr	r1, [pc, #172]	; (8006054 <etharp_tmr+0x14c>)
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	4613      	mov	r3, r2
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	4413      	add	r3, r2
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	440b      	add	r3, r1
 8005fb4:	3310      	adds	r3, #16
 8005fb6:	791b      	ldrb	r3, [r3, #4]
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d10a      	bne.n	8005fd2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8005fbc:	4925      	ldr	r1, [pc, #148]	; (8006054 <etharp_tmr+0x14c>)
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	4413      	add	r3, r2
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	440b      	add	r3, r1
 8005fca:	3310      	adds	r3, #16
 8005fcc:	2204      	movs	r2, #4
 8005fce:	711a      	strb	r2, [r3, #4]
 8005fd0:	e035      	b.n	800603e <etharp_tmr+0x136>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8005fd2:	4920      	ldr	r1, [pc, #128]	; (8006054 <etharp_tmr+0x14c>)
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	4413      	add	r3, r2
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	440b      	add	r3, r1
 8005fe0:	3310      	adds	r3, #16
 8005fe2:	791b      	ldrb	r3, [r3, #4]
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	d10a      	bne.n	8005ffe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8005fe8:	491a      	ldr	r1, [pc, #104]	; (8006054 <etharp_tmr+0x14c>)
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	4613      	mov	r3, r2
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	4413      	add	r3, r2
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	440b      	add	r3, r1
 8005ff6:	3310      	adds	r3, #16
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	711a      	strb	r2, [r3, #4]
 8005ffc:	e01f      	b.n	800603e <etharp_tmr+0x136>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8005ffe:	4915      	ldr	r1, [pc, #84]	; (8006054 <etharp_tmr+0x14c>)
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	4413      	add	r3, r2
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	440b      	add	r3, r1
 800600c:	3310      	adds	r3, #16
 800600e:	791b      	ldrb	r3, [r3, #4]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d114      	bne.n	800603e <etharp_tmr+0x136>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8006014:	490f      	ldr	r1, [pc, #60]	; (8006054 <etharp_tmr+0x14c>)
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	4613      	mov	r3, r2
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	4413      	add	r3, r2
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	440b      	add	r3, r1
 8006022:	3308      	adds	r3, #8
 8006024:	6819      	ldr	r1, [r3, #0]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	4613      	mov	r3, r2
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	4413      	add	r3, r2
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	4a08      	ldr	r2, [pc, #32]	; (8006054 <etharp_tmr+0x14c>)
 8006032:	4413      	add	r3, r2
 8006034:	3304      	adds	r3, #4
 8006036:	4608      	mov	r0, r1
 8006038:	4619      	mov	r1, r3
 800603a:	f000 fd43 	bl	8006ac4 <etharp_request>
{
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3301      	adds	r3, #1
 8006042:	607b      	str	r3, [r7, #4]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b09      	cmp	r3, #9
 8006048:	f77f af64 	ble.w	8005f14 <etharp_tmr+0xc>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
      }
    }
  }
}
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	1ffe9138 	.word	0x1ffe9138

08006058 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08a      	sub	sp, #40	; 0x28
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	460b      	mov	r3, r1
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8006066:	230a      	movs	r3, #10
 8006068:	84fb      	strh	r3, [r7, #38]	; 0x26
 800606a:	230a      	movs	r3, #10
 800606c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800606e:	230a      	movs	r3, #10
 8006070:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8006076:	230a      	movs	r3, #10
 8006078:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	83bb      	strh	r3, [r7, #28]
 800607e:	2300      	movs	r3, #0
 8006080:	837b      	strh	r3, [r7, #26]
 8006082:	2300      	movs	r3, #0
 8006084:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006086:	2300      	movs	r3, #0
 8006088:	843b      	strh	r3, [r7, #32]
 800608a:	e09f      	b.n	80061cc <etharp_find_entry+0x174>
    u8_t state = arp_table[i].state;
 800608c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006090:	4980      	ldr	r1, [pc, #512]	; (8006294 <etharp_find_entry+0x23c>)
 8006092:	4613      	mov	r3, r2
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	4413      	add	r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	440b      	add	r3, r1
 800609c:	3310      	adds	r3, #16
 800609e:	791b      	ldrb	r3, [r3, #4]
 80060a0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80060a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80060a6:	2b0a      	cmp	r3, #10
 80060a8:	d105      	bne.n	80060b6 <etharp_find_entry+0x5e>
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80060b0:	8c3b      	ldrh	r3, [r7, #32]
 80060b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80060b4:	e086      	b.n	80061c4 <etharp_find_entry+0x16c>
    } else if (state != ETHARP_STATE_EMPTY) {
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8083 	beq.w	80061c4 <etharp_find_entry+0x16c>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01e      	beq.n	8006102 <etharp_find_entry+0xaa>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6819      	ldr	r1, [r3, #0]
 80060c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80060cc:	4871      	ldr	r0, [pc, #452]	; (8006294 <etharp_find_entry+0x23c>)
 80060ce:	4613      	mov	r3, r2
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	4413      	add	r3, r2
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	4403      	add	r3, r0
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	4299      	cmp	r1, r3
 80060dc:	d111      	bne.n	8006102 <etharp_find_entry+0xaa>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00c      	beq.n	80060fe <etharp_find_entry+0xa6>
 80060e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80060e8:	496a      	ldr	r1, [pc, #424]	; (8006294 <etharp_find_entry+0x23c>)
 80060ea:	4613      	mov	r3, r2
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	4413      	add	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	440b      	add	r3, r1
 80060f4:	3308      	adds	r3, #8
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d101      	bne.n	8006102 <etharp_find_entry+0xaa>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80060fe:	8c3b      	ldrh	r3, [r7, #32]
 8006100:	e0c3      	b.n	800628a <etharp_find_entry+0x232>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8006102:	7dfb      	ldrb	r3, [r7, #23]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d140      	bne.n	800618a <etharp_find_entry+0x132>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8006108:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800610c:	4961      	ldr	r1, [pc, #388]	; (8006294 <etharp_find_entry+0x23c>)
 800610e:	4613      	mov	r3, r2
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	4413      	add	r3, r2
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	440b      	add	r3, r1
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01a      	beq.n	8006154 <etharp_find_entry+0xfc>
          if (arp_table[i].ctime >= age_queue) {
 800611e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006122:	495c      	ldr	r1, [pc, #368]	; (8006294 <etharp_find_entry+0x23c>)
 8006124:	4613      	mov	r3, r2
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	4413      	add	r3, r2
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	440b      	add	r3, r1
 800612e:	3310      	adds	r3, #16
 8006130:	885b      	ldrh	r3, [r3, #2]
 8006132:	8bba      	ldrh	r2, [r7, #28]
 8006134:	429a      	cmp	r2, r3
 8006136:	d845      	bhi.n	80061c4 <etharp_find_entry+0x16c>
            old_queue = i;
 8006138:	8c3b      	ldrh	r3, [r7, #32]
 800613a:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800613c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006140:	4954      	ldr	r1, [pc, #336]	; (8006294 <etharp_find_entry+0x23c>)
 8006142:	4613      	mov	r3, r2
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	4413      	add	r3, r2
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	440b      	add	r3, r1
 800614c:	3310      	adds	r3, #16
 800614e:	885b      	ldrh	r3, [r3, #2]
 8006150:	83bb      	strh	r3, [r7, #28]
 8006152:	e037      	b.n	80061c4 <etharp_find_entry+0x16c>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8006154:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006158:	494e      	ldr	r1, [pc, #312]	; (8006294 <etharp_find_entry+0x23c>)
 800615a:	4613      	mov	r3, r2
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	4413      	add	r3, r2
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	440b      	add	r3, r1
 8006164:	3310      	adds	r3, #16
 8006166:	885b      	ldrh	r3, [r3, #2]
 8006168:	8b7a      	ldrh	r2, [r7, #26]
 800616a:	429a      	cmp	r2, r3
 800616c:	d82a      	bhi.n	80061c4 <etharp_find_entry+0x16c>
            old_pending = i;
 800616e:	8c3b      	ldrh	r3, [r7, #32]
 8006170:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8006172:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006176:	4947      	ldr	r1, [pc, #284]	; (8006294 <etharp_find_entry+0x23c>)
 8006178:	4613      	mov	r3, r2
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	4413      	add	r3, r2
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	440b      	add	r3, r1
 8006182:	3310      	adds	r3, #16
 8006184:	885b      	ldrh	r3, [r3, #2]
 8006186:	837b      	strh	r3, [r7, #26]
 8006188:	e01c      	b.n	80061c4 <etharp_find_entry+0x16c>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800618a:	7dfb      	ldrb	r3, [r7, #23]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d919      	bls.n	80061c4 <etharp_find_entry+0x16c>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8006190:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006194:	493f      	ldr	r1, [pc, #252]	; (8006294 <etharp_find_entry+0x23c>)
 8006196:	4613      	mov	r3, r2
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	4413      	add	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	440b      	add	r3, r1
 80061a0:	3310      	adds	r3, #16
 80061a2:	885b      	ldrh	r3, [r3, #2]
 80061a4:	8b3a      	ldrh	r2, [r7, #24]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d80c      	bhi.n	80061c4 <etharp_find_entry+0x16c>
            old_stable = i;
 80061aa:	8c3b      	ldrh	r3, [r7, #32]
 80061ac:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80061ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80061b2:	4938      	ldr	r1, [pc, #224]	; (8006294 <etharp_find_entry+0x23c>)
 80061b4:	4613      	mov	r3, r2
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	4413      	add	r3, r2
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	440b      	add	r3, r1
 80061be:	3310      	adds	r3, #16
 80061c0:	885b      	ldrh	r3, [r3, #2]
 80061c2:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80061c4:	8c3b      	ldrh	r3, [r7, #32]
 80061c6:	3301      	adds	r3, #1
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	843b      	strh	r3, [r7, #32]
 80061cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80061d0:	2b09      	cmp	r3, #9
 80061d2:	f77f af5b 	ble.w	800608c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80061d6:	7afb      	ldrb	r3, [r7, #11]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d108      	bne.n	80061f2 <etharp_find_entry+0x19a>
 80061e0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80061e4:	2b0a      	cmp	r3, #10
 80061e6:	d107      	bne.n	80061f8 <etharp_find_entry+0x1a0>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80061e8:	7afb      	ldrb	r3, [r7, #11]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d102      	bne.n	80061f8 <etharp_find_entry+0x1a0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80061f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061f6:	e048      	b.n	800628a <etharp_find_entry+0x232>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80061f8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80061fc:	2b09      	cmp	r3, #9
 80061fe:	dc02      	bgt.n	8006206 <etharp_find_entry+0x1ae>
    i = empty;
 8006200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006202:	843b      	strh	r3, [r7, #32]
 8006204:	e01c      	b.n	8006240 <etharp_find_entry+0x1e8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8006206:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800620a:	2b09      	cmp	r3, #9
 800620c:	dc02      	bgt.n	8006214 <etharp_find_entry+0x1bc>
      /* recycle oldest stable*/
      i = old_stable;
 800620e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006210:	843b      	strh	r3, [r7, #32]
 8006212:	e010      	b.n	8006236 <etharp_find_entry+0x1de>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8006214:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006218:	2b09      	cmp	r3, #9
 800621a:	dc02      	bgt.n	8006222 <etharp_find_entry+0x1ca>
      /* recycle oldest pending */
      i = old_pending;
 800621c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800621e:	843b      	strh	r3, [r7, #32]
 8006220:	e009      	b.n	8006236 <etharp_find_entry+0x1de>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8006222:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006226:	2b09      	cmp	r3, #9
 8006228:	dc02      	bgt.n	8006230 <etharp_find_entry+0x1d8>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800622a:	8bfb      	ldrh	r3, [r7, #30]
 800622c:	843b      	strh	r3, [r7, #32]
 800622e:	e002      	b.n	8006236 <etharp_find_entry+0x1de>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8006230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006234:	e029      	b.n	800628a <etharp_find_entry+0x232>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8006236:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff fe32 	bl	8005ea4 <etharp_free_entry>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <etharp_find_entry+0x204>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8006246:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6819      	ldr	r1, [r3, #0]
 800624e:	4811      	ldr	r0, [pc, #68]	; (8006294 <etharp_find_entry+0x23c>)
 8006250:	4613      	mov	r3, r2
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	4413      	add	r3, r2
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	4403      	add	r3, r0
 800625a:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800625c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006260:	490c      	ldr	r1, [pc, #48]	; (8006294 <etharp_find_entry+0x23c>)
 8006262:	4613      	mov	r3, r2
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	4413      	add	r3, r2
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	440b      	add	r3, r1
 800626c:	3310      	adds	r3, #16
 800626e:	2200      	movs	r2, #0
 8006270:	805a      	strh	r2, [r3, #2]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8006272:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006276:	4907      	ldr	r1, [pc, #28]	; (8006294 <etharp_find_entry+0x23c>)
 8006278:	4613      	mov	r3, r2
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	4413      	add	r3, r2
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	440b      	add	r3, r1
 8006282:	3308      	adds	r3, #8
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8006288:	8c3b      	ldrh	r3, [r7, #32]
 800628a:	b21b      	sxth	r3, r3
}
 800628c:	4618      	mov	r0, r3
 800628e:	3728      	adds	r7, #40	; 0x28
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	1ffe9138 	.word	0x1ffe9138

08006298 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af02      	add	r7, sp, #8
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	70fb      	strb	r3, [r7, #3]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d012      	beq.n	80062d2 <etharp_update_arp_entry+0x3a>
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00e      	beq.n	80062d2 <etharp_update_arp_entry+0x3a>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4618      	mov	r0, r3
 80062ba:	68f9      	ldr	r1, [r7, #12]
 80062bc:	f000 ffc2 	bl	8007244 <ip4_addr_isbroadcast_u32>
 80062c0:	4603      	mov	r3, r0
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d105      	bne.n	80062d2 <etharp_update_arp_entry+0x3a>
      ip4_addr_isbroadcast(ipaddr, netif) ||
      ip4_addr_ismulticast(ipaddr)) {
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80062ce:	2be0      	cmp	r3, #224	; 0xe0
 80062d0:	d101      	bne.n	80062d6 <etharp_update_arp_entry+0x3e>
      ip4_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80062d2:	23f0      	movs	r3, #240	; 0xf0
 80062d4:	e06c      	b.n	80063b0 <etharp_update_arp_entry+0x118>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	68b8      	ldr	r0, [r7, #8]
 80062da:	4619      	mov	r1, r3
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	f7ff febb 	bl	8006058 <etharp_find_entry>
 80062e2:	4603      	mov	r3, r0
 80062e4:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80062e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	da02      	bge.n	80062f4 <etharp_update_arp_entry+0x5c>
    return (err_t)i;
 80062ee:	8afb      	ldrh	r3, [r7, #22]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	e05d      	b.n	80063b0 <etharp_update_arp_entry+0x118>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80062f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80062f8:	4930      	ldr	r1, [pc, #192]	; (80063bc <etharp_update_arp_entry+0x124>)
 80062fa:	4613      	mov	r3, r2
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	4413      	add	r3, r2
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	440b      	add	r3, r1
 8006304:	3310      	adds	r3, #16
 8006306:	2202      	movs	r2, #2
 8006308:	711a      	strb	r2, [r3, #4]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800630a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800630e:	492b      	ldr	r1, [pc, #172]	; (80063bc <etharp_update_arp_entry+0x124>)
 8006310:	4613      	mov	r3, r2
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	4413      	add	r3, r2
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	440b      	add	r3, r1
 800631a:	3308      	adds	r3, #8
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8006320:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006324:	4613      	mov	r3, r2
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	4413      	add	r3, r2
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	3308      	adds	r3, #8
 800632e:	4a23      	ldr	r2, [pc, #140]	; (80063bc <etharp_update_arp_entry+0x124>)
 8006330:	4413      	add	r3, r2
 8006332:	3304      	adds	r3, #4
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6811      	ldr	r1, [r2, #0]
 8006338:	6019      	str	r1, [r3, #0]
 800633a:	8892      	ldrh	r2, [r2, #4]
 800633c:	809a      	strh	r2, [r3, #4]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800633e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006342:	491e      	ldr	r1, [pc, #120]	; (80063bc <etharp_update_arp_entry+0x124>)
 8006344:	4613      	mov	r3, r2
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	4413      	add	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	440b      	add	r3, r1
 800634e:	3310      	adds	r3, #16
 8006350:	2200      	movs	r2, #0
 8006352:	805a      	strh	r2, [r3, #2]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8006354:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006358:	4918      	ldr	r1, [pc, #96]	; (80063bc <etharp_update_arp_entry+0x124>)
 800635a:	4613      	mov	r3, r2
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	4413      	add	r3, r2
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	440b      	add	r3, r1
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d021      	beq.n	80063ae <etharp_update_arp_entry+0x116>
    struct pbuf *p = arp_table[i].q;
 800636a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800636e:	4913      	ldr	r1, [pc, #76]	; (80063bc <etharp_update_arp_entry+0x124>)
 8006370:	4613      	mov	r3, r2
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	4413      	add	r3, r2
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	440b      	add	r3, r1
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800637e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006382:	490e      	ldr	r1, [pc, #56]	; (80063bc <etharp_update_arp_entry+0x124>)
 8006384:	4613      	mov	r3, r2
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	4413      	add	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	440b      	add	r3, r1
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8006398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	6939      	ldr	r1, [r7, #16]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f7ff fd48 	bl	8005e38 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80063a8:	6938      	ldr	r0, [r7, #16]
 80063aa:	f002 f817 	bl	80083dc <pbuf_free>
  }
  return ERR_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	b25b      	sxtb	r3, r3
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	1ffe9138 	.word	0x1ffe9138

080063c0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	e01e      	b.n	800640c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80063ce:	4912      	ldr	r1, [pc, #72]	; (8006418 <etharp_cleanup_netif+0x58>)
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4613      	mov	r3, r2
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	4413      	add	r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	440b      	add	r3, r1
 80063dc:	3310      	adds	r3, #16
 80063de:	791b      	ldrb	r3, [r3, #4]
 80063e0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80063e2:	7afb      	ldrb	r3, [r7, #11]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00e      	beq.n	8006406 <etharp_cleanup_netif+0x46>
 80063e8:	490b      	ldr	r1, [pc, #44]	; (8006418 <etharp_cleanup_netif+0x58>)
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	4613      	mov	r3, r2
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	4413      	add	r3, r2
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	440b      	add	r3, r1
 80063f6:	3308      	adds	r3, #8
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d102      	bne.n	8006406 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f7ff fd4f 	bl	8005ea4 <etharp_free_entry>
void
etharp_cleanup_netif(struct netif *netif)
{
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3301      	adds	r3, #1
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b09      	cmp	r3, #9
 8006410:	dddd      	ble.n	80063ce <etharp_cleanup_netif+0xe>
    u8_t state = arp_table[i].state;
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
      etharp_free_entry(i);
    }
  }
}
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	1ffe9138 	.word	0x1ffe9138

0800641c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800641c:	b5b0      	push	{r4, r5, r7, lr}
 800641e:	b08a      	sub	sp, #40	; 0x28
 8006420:	af04      	add	r7, sp, #16
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d100      	bne.n	800642e <etharp_input+0x12>
 800642c:	e076      	b.n	800651c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800643e:	d10c      	bne.n	800645a <etharp_input+0x3e>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	791b      	ldrb	r3, [r3, #4]
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);

  hdr = (struct etharp_hdr *)p->payload;

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8006444:	2b06      	cmp	r3, #6
 8006446:	d108      	bne.n	800645a <etharp_input+0x3e>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	795b      	ldrb	r3, [r3, #5]

  hdr = (struct etharp_hdr *)p->payload;

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800644c:	2b04      	cmp	r3, #4
 800644e:	d104      	bne.n	800645a <etharp_input+0x3e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	885b      	ldrh	r3, [r3, #2]
 8006454:	b29b      	uxth	r3, r3
  hdr = (struct etharp_hdr *)p->payload;

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETH_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8006456:	2b08      	cmp	r3, #8
 8006458:	d003      	beq.n	8006462 <etharp_input+0x46>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 ffbe 	bl	80083dc <pbuf_free>
    return;
 8006460:	e05c      	b.n	800651c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	330e      	adds	r3, #14
 8006466:	f107 020c 	add.w	r2, r7, #12
 800646a:	4610      	mov	r0, r2
 800646c:	4619      	mov	r1, r3
 800646e:	2204      	movs	r2, #4
 8006470:	f7ff fc1c 	bl	8005cac <memcpy>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	3318      	adds	r3, #24
 8006478:	f107 0208 	add.w	r2, r7, #8
 800647c:	4610      	mov	r0, r2
 800647e:	4619      	mov	r1, r3
 8006480:	2204      	movs	r2, #4
 8006482:	f7ff fc13 	bl	8005cac <memcpy>

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	3304      	adds	r3, #4
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d102      	bne.n	8006496 <etharp_input+0x7a>
    for_us = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	75fb      	strb	r3, [r7, #23]
 8006494:	e009      	b.n	80064aa <etharp_input+0x8e>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	3304      	adds	r3, #4
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	bf0c      	ite	eq
 80064a2:	2301      	moveq	r3, #1
 80064a4:	2300      	movne	r3, #0
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f103 0208 	add.w	r2, r3, #8
 80064b0:	7dfb      	ldrb	r3, [r7, #23]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <etharp_input+0x9e>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <etharp_input+0xa0>
 80064ba:	2302      	movs	r3, #2
 80064bc:	f107 010c 	add.w	r1, r7, #12
 80064c0:	6838      	ldr	r0, [r7, #0]
 80064c2:	f7ff fee9 	bl	8006298 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	88db      	ldrh	r3, [r3, #6]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d0:	d003      	beq.n	80064da <etharp_input+0xbe>
 80064d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d6:	d01d      	beq.n	8006514 <etharp_input+0xf8>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80064d8:	e01d      	b.n	8006516 <etharp_input+0xfa>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d018      	beq.n	8006512 <etharp_input+0xf6>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f103 0508 	add.w	r5, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	f103 0426 	add.w	r4, r3, #38	; 0x26
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	1d1a      	adds	r2, r3, #4
                   &hdr->shwaddr, &sipaddr,
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	3308      	adds	r3, #8

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
        /* send ARP response */
        etharp_raw(netif,
 80064fa:	9200      	str	r2, [sp, #0]
 80064fc:	9301      	str	r3, [sp, #4]
 80064fe:	f107 030c 	add.w	r3, r7, #12
 8006502:	9302      	str	r3, [sp, #8]
 8006504:	2302      	movs	r3, #2
 8006506:	9303      	str	r3, [sp, #12]
 8006508:	6838      	ldr	r0, [r7, #0]
 800650a:	462a      	mov	r2, r5
 800650c:	4623      	mov	r3, r4
 800650e:	f000 fa53 	bl	80069b8 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 8006512:	e000      	b.n	8006516 <etharp_input+0xfa>
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 8006514:	bf00      	nop
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
  }
  /* free ARP packet */
  pbuf_free(p);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f001 ff60 	bl	80083dc <pbuf_free>
}
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bdb0      	pop	{r4, r5, r7, pc}
 8006522:	bf00      	nop

08006524 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8006524:	b5b0      	push	{r4, r5, r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af02      	add	r7, sp, #8
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	4613      	mov	r3, r2
 8006530:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8006532:	79fa      	ldrb	r2, [r7, #7]
 8006534:	493b      	ldr	r1, [pc, #236]	; (8006624 <etharp_output_to_arp_index+0x100>)
 8006536:	4613      	mov	r3, r2
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	4413      	add	r3, r2
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	440b      	add	r3, r1
 8006540:	3310      	adds	r3, #16
 8006542:	791b      	ldrb	r3, [r3, #4]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d153      	bne.n	80065f0 <etharp_output_to_arp_index+0xcc>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8006548:	79fa      	ldrb	r2, [r7, #7]
 800654a:	4936      	ldr	r1, [pc, #216]	; (8006624 <etharp_output_to_arp_index+0x100>)
 800654c:	4613      	mov	r3, r2
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	4413      	add	r3, r2
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	440b      	add	r3, r1
 8006556:	3310      	adds	r3, #16
 8006558:	885b      	ldrh	r3, [r3, #2]
 800655a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800655e:	d919      	bls.n	8006594 <etharp_output_to_arp_index+0x70>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8006560:	79fa      	ldrb	r2, [r7, #7]
 8006562:	4613      	mov	r3, r2
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	4413      	add	r3, r2
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	4a2e      	ldr	r2, [pc, #184]	; (8006624 <etharp_output_to_arp_index+0x100>)
 800656c:	4413      	add	r3, r2
 800656e:	3304      	adds	r3, #4
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	4619      	mov	r1, r3
 8006574:	f000 faa6 	bl	8006ac4 <etharp_request>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d138      	bne.n	80065f0 <etharp_output_to_arp_index+0xcc>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800657e:	79fa      	ldrb	r2, [r7, #7]
 8006580:	4928      	ldr	r1, [pc, #160]	; (8006624 <etharp_output_to_arp_index+0x100>)
 8006582:	4613      	mov	r3, r2
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	4413      	add	r3, r2
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	440b      	add	r3, r1
 800658c:	3310      	adds	r3, #16
 800658e:	2203      	movs	r2, #3
 8006590:	711a      	strb	r2, [r3, #4]
 8006592:	e02d      	b.n	80065f0 <etharp_output_to_arp_index+0xcc>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8006594:	79fa      	ldrb	r2, [r7, #7]
 8006596:	4923      	ldr	r1, [pc, #140]	; (8006624 <etharp_output_to_arp_index+0x100>)
 8006598:	4613      	mov	r3, r2
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	4413      	add	r3, r2
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	440b      	add	r3, r1
 80065a2:	3310      	adds	r3, #16
 80065a4:	885b      	ldrh	r3, [r3, #2]
 80065a6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80065aa:	d321      	bcc.n	80065f0 <etharp_output_to_arp_index+0xcc>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80065ac:	79fa      	ldrb	r2, [r7, #7]
 80065ae:	4613      	mov	r3, r2
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	4413      	add	r3, r2
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	4a1b      	ldr	r2, [pc, #108]	; (8006624 <etharp_output_to_arp_index+0x100>)
 80065b8:	4413      	add	r3, r2
 80065ba:	1d19      	adds	r1, r3, #4
 80065bc:	79fa      	ldrb	r2, [r7, #7]
 80065be:	4613      	mov	r3, r2
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	4413      	add	r3, r2
 80065c4:	00db      	lsls	r3, r3, #3
 80065c6:	3308      	adds	r3, #8
 80065c8:	4a16      	ldr	r2, [pc, #88]	; (8006624 <etharp_output_to_arp_index+0x100>)
 80065ca:	4413      	add	r3, r2
 80065cc:	3304      	adds	r3, #4
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	461a      	mov	r2, r3
 80065d2:	f000 fa55 	bl	8006a80 <etharp_request_dst>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d109      	bne.n	80065f0 <etharp_output_to_arp_index+0xcc>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80065dc:	79fa      	ldrb	r2, [r7, #7]
 80065de:	4911      	ldr	r1, [pc, #68]	; (8006624 <etharp_output_to_arp_index+0x100>)
 80065e0:	4613      	mov	r3, r2
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	4413      	add	r3, r2
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	440b      	add	r3, r1
 80065ea:	3310      	adds	r3, #16
 80065ec:	2203      	movs	r2, #3
 80065ee:	711a      	strb	r2, [r3, #4]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80065f6:	79fa      	ldrb	r2, [r7, #7]
 80065f8:	4613      	mov	r3, r2
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	4413      	add	r3, r2
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	3308      	adds	r3, #8
 8006602:	4a08      	ldr	r2, [pc, #32]	; (8006624 <etharp_output_to_arp_index+0x100>)
 8006604:	4413      	add	r3, r2
 8006606:	1d1c      	adds	r4, r3, #4
 8006608:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	462a      	mov	r2, r5
 8006614:	4623      	mov	r3, r4
 8006616:	f7ff fc0f 	bl	8005e38 <ethernet_output>
 800661a:	4603      	mov	r3, r0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bdb0      	pop	{r4, r5, r7, pc}
 8006624:	1ffe9138 	.word	0x1ffe9138

08006628 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08a      	sub	sp, #40	; 0x28
 800662c:	af02      	add	r7, sp, #8
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	61bb      	str	r3, [r7, #24]

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4618      	mov	r0, r3
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	f000 fe00 	bl	8007244 <ip4_addr_isbroadcast_u32>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <etharp_output+0x28>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800664a:	4b60      	ldr	r3, [pc, #384]	; (80067cc <etharp_output+0x1a4>)
 800664c:	61fb      	str	r3, [r7, #28]
 800664e:	e0ac      	b.n	80067aa <etharp_output+0x182>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006658:	2be0      	cmp	r3, #224	; 0xe0
 800665a:	d118      	bne.n	800668e <etharp_output+0x66>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800665c:	2301      	movs	r3, #1
 800665e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8006660:	2300      	movs	r3, #0
 8006662:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8006664:	235e      	movs	r3, #94	; 0x5e
 8006666:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3301      	adds	r3, #1
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006672:	b2db      	uxtb	r3, r3
 8006674:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3302      	adds	r3, #2
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3303      	adds	r3, #3
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8006686:	f107 0310 	add.w	r3, r7, #16
 800668a:	61fb      	str	r3, [r7, #28]
 800668c:	e08d      	b.n	80067aa <etharp_output+0x182>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3304      	adds	r3, #4
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	405a      	eors	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3308      	adds	r3, #8
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4013      	ands	r3, r2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d011      	beq.n	80066ca <etharp_output+0xa2>
        !ip4_addr_islinklocal(ipaddr)) {
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	b29b      	uxth	r3, r3
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80066ac:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d00a      	beq.n	80066ca <etharp_output+0xa2>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	330c      	adds	r3, #12
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <etharp_output+0x9e>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	330c      	adds	r3, #12
 80066c2:	61bb      	str	r3, [r7, #24]
 80066c4:	e001      	b.n	80066ca <etharp_output+0xa2>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80066c6:	23fc      	movs	r3, #252	; 0xfc
 80066c8:	e07b      	b.n	80067c2 <etharp_output+0x19a>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80066ca:	4b41      	ldr	r3, [pc, #260]	; (80067d0 <etharp_output+0x1a8>)
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	4619      	mov	r1, r3
 80066d0:	4a40      	ldr	r2, [pc, #256]	; (80067d4 <etharp_output+0x1ac>)
 80066d2:	460b      	mov	r3, r1
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	440b      	add	r3, r1
 80066d8:	00db      	lsls	r3, r3, #3
 80066da:	4413      	add	r3, r2
 80066dc:	3310      	adds	r3, #16
 80066de:	791b      	ldrb	r3, [r3, #4]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d924      	bls.n	800672e <etharp_output+0x106>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80066e4:	4b3a      	ldr	r3, [pc, #232]	; (80067d0 <etharp_output+0x1a8>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	4619      	mov	r1, r3
 80066ea:	4a3a      	ldr	r2, [pc, #232]	; (80067d4 <etharp_output+0x1ac>)
 80066ec:	460b      	mov	r3, r1
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	440b      	add	r3, r1
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	4413      	add	r3, r2
 80066f6:	3308      	adds	r3, #8
 80066f8:	681a      	ldr	r2, [r3, #0]
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d116      	bne.n	800672e <etharp_output+0x106>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	4b32      	ldr	r3, [pc, #200]	; (80067d0 <etharp_output+0x1a8>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	4932      	ldr	r1, [pc, #200]	; (80067d4 <etharp_output+0x1ac>)
 800670c:	4603      	mov	r3, r0
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	4403      	add	r3, r0
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	440b      	add	r3, r1
 8006716:	685b      	ldr	r3, [r3, #4]
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8006718:	429a      	cmp	r2, r3
 800671a:	d108      	bne.n	800672e <etharp_output+0x106>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800671c:	4b2c      	ldr	r3, [pc, #176]	; (80067d0 <etharp_output+0x1a8>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	461a      	mov	r2, r3
 8006726:	f7ff fefd 	bl	8006524 <etharp_output_to_arp_index>
 800672a:	4603      	mov	r3, r0
 800672c:	e049      	b.n	80067c2 <etharp_output+0x19a>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800672e:	2300      	movs	r3, #0
 8006730:	75fb      	strb	r3, [r7, #23]
 8006732:	e030      	b.n	8006796 <etharp_output+0x16e>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8006734:	7dfa      	ldrb	r2, [r7, #23]
 8006736:	4927      	ldr	r1, [pc, #156]	; (80067d4 <etharp_output+0x1ac>)
 8006738:	4613      	mov	r3, r2
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	4413      	add	r3, r2
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	440b      	add	r3, r1
 8006742:	3310      	adds	r3, #16
 8006744:	791b      	ldrb	r3, [r3, #4]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d922      	bls.n	8006790 <etharp_output+0x168>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800674a:	7dfa      	ldrb	r2, [r7, #23]
 800674c:	4921      	ldr	r1, [pc, #132]	; (80067d4 <etharp_output+0x1ac>)
 800674e:	4613      	mov	r3, r2
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	4413      	add	r3, r2
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	440b      	add	r3, r1
 8006758:	3308      	adds	r3, #8
 800675a:	681a      	ldr	r2, [r3, #0]
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	429a      	cmp	r2, r3
 8006760:	d116      	bne.n	8006790 <etharp_output+0x168>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	6819      	ldr	r1, [r3, #0]
 8006766:	7dfa      	ldrb	r2, [r7, #23]
 8006768:	481a      	ldr	r0, [pc, #104]	; (80067d4 <etharp_output+0x1ac>)
 800676a:	4613      	mov	r3, r2
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	4413      	add	r3, r2
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	4403      	add	r3, r0
 8006774:	685b      	ldr	r3, [r3, #4]
    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8006776:	4299      	cmp	r1, r3
 8006778:	d10a      	bne.n	8006790 <etharp_output+0x168>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800677a:	4a15      	ldr	r2, [pc, #84]	; (80067d0 <etharp_output+0x1a8>)
 800677c:	7dfb      	ldrb	r3, [r7, #23]
 800677e:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8006780:	7dfb      	ldrb	r3, [r7, #23]
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	461a      	mov	r2, r3
 8006788:	f7ff fecc 	bl	8006524 <etharp_output_to_arp_index>
 800678c:	4603      	mov	r3, r0
 800678e:	e018      	b.n	80067c2 <etharp_output+0x19a>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8006790:	7dfb      	ldrb	r3, [r7, #23]
 8006792:	3301      	adds	r3, #1
 8006794:	75fb      	strb	r3, [r7, #23]
 8006796:	7dfb      	ldrb	r3, [r7, #23]
 8006798:	2b09      	cmp	r3, #9
 800679a:	d9cb      	bls.n	8006734 <etharp_output+0x10c>
        return etharp_output_to_arp_index(netif, q, i);
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	69b9      	ldr	r1, [r7, #24]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	f000 f819 	bl	80067d8 <etharp_query>
 80067a6:	4603      	mov	r3, r0
 80067a8:	e00b      	b.n	80067c2 <etharp_output+0x19a>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80067b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	f7ff fb3c 	bl	8005e38 <ethernet_output>
 80067c0:	4603      	mov	r3, r0
 80067c2:	b25b      	sxtb	r3, r3
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3720      	adds	r7, #32
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	080142e4 	.word	0x080142e4
 80067d0:	1ffe9228 	.word	0x1ffe9228
 80067d4:	1ffe9138 	.word	0x1ffe9138

080067d8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80067d8:	b590      	push	{r4, r7, lr}
 80067da:	b08d      	sub	sp, #52	; 0x34
 80067dc:	af02      	add	r7, sp, #8
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3326      	adds	r3, #38	; 0x26
 80067e8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80067ea:	23ff      	movs	r3, #255	; 0xff
 80067ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80067f0:	2300      	movs	r3, #0
 80067f2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4618      	mov	r0, r3
 80067fa:	68f9      	ldr	r1, [r7, #12]
 80067fc:	f000 fd22 	bl	8007244 <ip4_addr_isbroadcast_u32>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10c      	bne.n	8006820 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  int is_new_entry = 0;
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800680e:	2be0      	cmp	r3, #224	; 0xe0
 8006810:	d006      	beq.n	8006820 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <etharp_query+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8006820:	23f0      	movs	r3, #240	; 0xf0
 8006822:	e0c0      	b.n	80069a6 <etharp_query+0x1ce>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8006824:	68b8      	ldr	r0, [r7, #8]
 8006826:	2101      	movs	r1, #1
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	f7ff fc15 	bl	8006058 <etharp_find_entry>
 800682e:	4603      	mov	r3, r0
 8006830:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8006832:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006836:	2b00      	cmp	r3, #0
 8006838:	da02      	bge.n	8006840 <etharp_query+0x68>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800683a:	8a7b      	ldrh	r3, [r7, #18]
 800683c:	b2db      	uxtb	r3, r3
 800683e:	e0b2      	b.n	80069a6 <etharp_query+0x1ce>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
  i = (netif_addr_idx_t)i_err;
 8006840:	8a7b      	ldrh	r3, [r7, #18]
 8006842:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8006844:	7c7a      	ldrb	r2, [r7, #17]
 8006846:	495a      	ldr	r1, [pc, #360]	; (80069b0 <etharp_query+0x1d8>)
 8006848:	4613      	mov	r3, r2
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	4413      	add	r3, r2
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	440b      	add	r3, r1
 8006852:	3310      	adds	r3, #16
 8006854:	791b      	ldrb	r3, [r3, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d115      	bne.n	8006886 <etharp_query+0xae>
    is_new_entry = 1;
 800685a:	2301      	movs	r3, #1
 800685c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800685e:	7c7a      	ldrb	r2, [r7, #17]
 8006860:	4953      	ldr	r1, [pc, #332]	; (80069b0 <etharp_query+0x1d8>)
 8006862:	4613      	mov	r3, r2
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	4413      	add	r3, r2
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	440b      	add	r3, r1
 800686c:	3310      	adds	r3, #16
 800686e:	2201      	movs	r2, #1
 8006870:	711a      	strb	r2, [r3, #4]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8006872:	7c7a      	ldrb	r2, [r7, #17]
 8006874:	494e      	ldr	r1, [pc, #312]	; (80069b0 <etharp_query+0x1d8>)
 8006876:	4613      	mov	r3, r2
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	4413      	add	r3, r2
 800687c:	00db      	lsls	r3, r3, #3
 800687e:	440b      	add	r3, r1
 8006880:	3308      	adds	r3, #8
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d102      	bne.n	8006892 <etharp_query+0xba>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10c      	bne.n	80068ac <etharp_query+0xd4>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	f000 f915 	bl	8006ac4 <etharp_request>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d102      	bne.n	80068ac <etharp_query+0xd4>
      return result;
 80068a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068aa:	e07c      	b.n	80069a6 <etharp_query+0x1ce>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80068ac:	7c7a      	ldrb	r2, [r7, #17]
 80068ae:	4940      	ldr	r1, [pc, #256]	; (80069b0 <etharp_query+0x1d8>)
 80068b0:	4613      	mov	r3, r2
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	4413      	add	r3, r2
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	440b      	add	r3, r1
 80068ba:	3310      	adds	r3, #16
 80068bc:	791b      	ldrb	r3, [r3, #4]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d918      	bls.n	80068f4 <etharp_query+0x11c>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80068c2:	4a3c      	ldr	r2, [pc, #240]	; (80069b4 <etharp_query+0x1dc>)
 80068c4:	7c7b      	ldrb	r3, [r7, #17]
 80068c6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80068c8:	7c7a      	ldrb	r2, [r7, #17]
 80068ca:	4613      	mov	r3, r2
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	4413      	add	r3, r2
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	3308      	adds	r3, #8
 80068d4:	4a36      	ldr	r2, [pc, #216]	; (80069b0 <etharp_query+0x1d8>)
 80068d6:	4413      	add	r3, r2
 80068d8:	1d1c      	adds	r4, r3, #4
 80068da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	4623      	mov	r3, r4
 80068e8:	f7ff faa6 	bl	8005e38 <ethernet_output>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068f2:	e056      	b.n	80069a2 <etharp_query+0x1ca>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80068f4:	7c7a      	ldrb	r2, [r7, #17]
 80068f6:	492e      	ldr	r1, [pc, #184]	; (80069b0 <etharp_query+0x1d8>)
 80068f8:	4613      	mov	r3, r2
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	4413      	add	r3, r2
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	440b      	add	r3, r1
 8006902:	3310      	adds	r3, #16
 8006904:	791b      	ldrb	r3, [r3, #4]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d14b      	bne.n	80069a2 <etharp_query+0x1ca>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	61fb      	str	r3, [r7, #28]
    while (p) {
 8006912:	e00b      	b.n	800692c <etharp_query+0x154>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if (PBUF_NEEDS_COPY(p)) {
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	7b1b      	ldrb	r3, [r3, #12]
 8006918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <etharp_query+0x14e>
        copy_needed = 1;
 8006920:	2301      	movs	r3, #1
 8006922:	61bb      	str	r3, [r7, #24]
        break;
 8006924:	e005      	b.n	8006932 <etharp_query+0x15a>
      }
      p = p->next;
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	61fb      	str	r3, [r7, #28]
    struct pbuf *p;
    int copy_needed = 0;
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
    while (p) {
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1f0      	bne.n	8006914 <etharp_query+0x13c>
        copy_needed = 1;
        break;
      }
      p = p->next;
    }
    if (copy_needed) {
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d007      	beq.n	8006948 <etharp_query+0x170>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8006938:	2010      	movs	r0, #16
 800693a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	f001 fed2 	bl	80086e8 <pbuf_clone>
 8006944:	61f8      	str	r0, [r7, #28]
 8006946:	e004      	b.n	8006952 <etharp_query+0x17a>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800694c:	69f8      	ldr	r0, [r7, #28]
 800694e:	f001 fda3 	bl	8008498 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d021      	beq.n	800699c <etharp_query+0x1c4>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8006958:	7c7a      	ldrb	r2, [r7, #17]
 800695a:	4915      	ldr	r1, [pc, #84]	; (80069b0 <etharp_query+0x1d8>)
 800695c:	4613      	mov	r3, r2
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	4413      	add	r3, r2
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	440b      	add	r3, r1
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <etharp_query+0x1aa>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800696c:	7c7a      	ldrb	r2, [r7, #17]
 800696e:	4910      	ldr	r1, [pc, #64]	; (80069b0 <etharp_query+0x1d8>)
 8006970:	4613      	mov	r3, r2
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	4413      	add	r3, r2
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	440b      	add	r3, r1
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4618      	mov	r0, r3
 800697e:	f001 fd2d 	bl	80083dc <pbuf_free>
      }
      arp_table[i].q = p;
 8006982:	7c7a      	ldrb	r2, [r7, #17]
 8006984:	490a      	ldr	r1, [pc, #40]	; (80069b0 <etharp_query+0x1d8>)
 8006986:	4613      	mov	r3, r2
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	4413      	add	r3, r2
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	440b      	add	r3, r1
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800699a:	e002      	b.n	80069a2 <etharp_query+0x1ca>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800699c:	23ff      	movs	r3, #255	; 0xff
 800699e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80069a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069a6:	b25b      	sxtb	r3, r3
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	372c      	adds	r7, #44	; 0x2c
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd90      	pop	{r4, r7, pc}
 80069b0:	1ffe9138 	.word	0x1ffe9138
 80069b4:	1ffe9228 	.word	0x1ffe9228

080069b8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08a      	sub	sp, #40	; 0x28
 80069bc:	af02      	add	r7, sp, #8
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80069ca:	2010      	movs	r0, #16
 80069cc:	211c      	movs	r1, #28
 80069ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80069d2:	f001 fae7 	bl	8007fa4 <pbuf_alloc>
 80069d6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <etharp_raw+0x2a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80069de:	23ff      	movs	r3, #255	; 0xff
 80069e0:	e049      	b.n	8006a76 <etharp_raw+0xbe>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80069e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fc6c 	bl	80072c8 <lwip_htons>
 80069f0:	4603      	mov	r3, r0
 80069f2:	461a      	mov	r2, r3
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	3308      	adds	r3, #8
 80069fc:	4618      	mov	r0, r3
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	2206      	movs	r2, #6
 8006a02:	f7ff f953 	bl	8005cac <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	3312      	adds	r3, #18
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a0e:	2206      	movs	r2, #6
 8006a10:	f7ff f94c 	bl	8005cac <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	330e      	adds	r3, #14
 8006a18:	4618      	mov	r0, r3
 8006a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a1c:	2204      	movs	r2, #4
 8006a1e:	f7ff f945 	bl	8005cac <memcpy>
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	3318      	adds	r3, #24
 8006a26:	4618      	mov	r0, r3
 8006a28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a2a:	2204      	movs	r2, #4
 8006a2c:	f7ff f93e 	bl	8005cac <memcpy>

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2200      	movs	r2, #0
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f042 0201 	orr.w	r2, r2, #1
 8006a3c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f042 0208 	orr.w	r2, r2, #8
 8006a46:	709a      	strb	r2, [r3, #2]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2206      	movs	r2, #6
 8006a50:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2204      	movs	r2, #4
 8006a56:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006a58:	f640 0306 	movw	r3, #2054	; 0x806
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	69b9      	ldr	r1, [r7, #24]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f7ff f9e7 	bl	8005e38 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8006a6a:	69b8      	ldr	r0, [r7, #24]
 8006a6c:	f001 fcb6 	bl	80083dc <pbuf_free>
  p = NULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8006a74:	7ffb      	ldrb	r3, [r7, #31]
 8006a76:	b25b      	sxtb	r3, r3
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3720      	adds	r7, #32
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8006a80:	b590      	push	{r4, r7, lr}
 8006a82:	b089      	sub	sp, #36	; 0x24
 8006a84:	af04      	add	r7, sp, #16
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f103 0226 	add.w	r2, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f103 0426 	add.w	r4, r3, #38	; 0x26
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3304      	adds	r3, #4
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <etharp_request_dst+0x40>)
 8006aa0:	9301      	str	r3, [sp, #4]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	9302      	str	r3, [sp, #8]
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	9303      	str	r3, [sp, #12]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	4611      	mov	r1, r2
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	4623      	mov	r3, r4
 8006ab2:	f7ff ff81 	bl	80069b8 <etharp_raw>
 8006ab6:	4603      	mov	r3, r0
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
                    ipaddr, ARP_REQUEST);
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd90      	pop	{r4, r7, pc}
 8006ac0:	080142ec 	.word	0x080142ec

08006ac4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	4a04      	ldr	r2, [pc, #16]	; (8006ae4 <etharp_request+0x20>)
 8006ad4:	f7ff ffd4 	bl	8006a80 <etharp_request_dst>
 8006ad8:	4603      	mov	r3, r0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	080142e4 	.word	0x080142e4

08006ae8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08e      	sub	sp, #56	; 0x38
 8006aec:	af04      	add	r7, sp, #16
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8006af2:	4b6d      	ldr	r3, [pc, #436]	; (8006ca8 <icmp_input+0x1c0>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	f003 030f 	and.w	r3, r3, #15
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8006b08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b0a:	2b13      	cmp	r3, #19
 8006b0c:	d800      	bhi.n	8006b10 <icmp_input+0x28>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
 8006b0e:	e0bf      	b.n	8006c90 <icmp_input+0x1a8>
  }
  if (p->len < sizeof(u16_t) * 2) {
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	895b      	ldrh	r3, [r3, #10]
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d800      	bhi.n	8006b1a <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
 8006b18:	e0ba      	b.n	8006c90 <icmp_input+0x1a8>
  }

  type = *((u8_t *)p->payload);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8006b24:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 80ac 	beq.w	8006c86 <icmp_input+0x19e>
 8006b2e:	2b08      	cmp	r3, #8
 8006b30:	d000      	beq.n	8006b34 <icmp_input+0x4c>
 8006b32:	e0a9      	b.n	8006c88 <icmp_input+0x1a0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8006b34:	4b5d      	ldr	r3, [pc, #372]	; (8006cac <icmp_input+0x1c4>)
 8006b36:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006b38:	4b5b      	ldr	r3, [pc, #364]	; (8006ca8 <icmp_input+0x1c0>)
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b40:	2be0      	cmp	r3, #224	; 0xe0
 8006b42:	d100      	bne.n	8006b46 <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
 8006b44:	e0a8      	b.n	8006c98 <icmp_input+0x1b0>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8006b46:	4b58      	ldr	r3, [pc, #352]	; (8006ca8 <icmp_input+0x1c0>)
 8006b48:	695a      	ldr	r2, [r3, #20]
 8006b4a:	4b57      	ldr	r3, [pc, #348]	; (8006ca8 <icmp_input+0x1c0>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4610      	mov	r0, r2
 8006b50:	4619      	mov	r1, r3
 8006b52:	f000 fb77 	bl	8007244 <ip4_addr_isbroadcast_u32>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d000      	beq.n	8006b5e <icmp_input+0x76>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
 8006b5c:	e09c      	b.n	8006c98 <icmp_input+0x1b0>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	891b      	ldrh	r3, [r3, #8]
 8006b62:	2b07      	cmp	r3, #7
 8006b64:	d800      	bhi.n	8006b68 <icmp_input+0x80>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
 8006b66:	e093      	b.n	8006c90 <icmp_input+0x1a8>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8006b68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b6a:	3310      	adds	r3, #16
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	4619      	mov	r1, r3
 8006b70:	f001 fba4 	bl	80082bc <pbuf_add_header>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d046      	beq.n	8006c08 <icmp_input+0x120>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	891a      	ldrh	r2, [r3, #8]
 8006b7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b80:	4413      	add	r3, r2
 8006b82:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	891b      	ldrh	r3, [r3, #8]
 8006b88:	8b7a      	ldrh	r2, [r7, #26]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d200      	bcs.n	8006b90 <icmp_input+0xa8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
 8006b8e:	e083      	b.n	8006c98 <icmp_input+0x1b0>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8006b90:	8b7b      	ldrh	r3, [r7, #26]
 8006b92:	2010      	movs	r0, #16
 8006b94:	4619      	mov	r1, r3
 8006b96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006b9a:	f001 fa03 	bl	8007fa4 <pbuf_alloc>
 8006b9e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d100      	bne.n	8006ba8 <icmp_input+0xc0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
 8006ba6:	e077      	b.n	8006c98 <icmp_input+0x1b0>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	895b      	ldrh	r3, [r3, #10]
 8006bac:	461a      	mov	r2, r3
 8006bae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d203      	bcs.n	8006bbe <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8006bb6:	6978      	ldr	r0, [r7, #20]
 8006bb8:	f001 fc10 	bl	80083dc <pbuf_free>
          goto icmperr;
 8006bbc:	e06c      	b.n	8006c98 <icmp_input+0x1b0>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bc8:	461a      	mov	r2, r3
 8006bca:	f7ff f86f 	bl	8005cac <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8006bce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bd0:	6978      	ldr	r0, [r7, #20]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	f001 fb82 	bl	80082dc <pbuf_remove_header>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <icmp_input+0xfe>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
          pbuf_free(r);
 8006bde:	6978      	ldr	r0, [r7, #20]
 8006be0:	f001 fbfc 	bl	80083dc <pbuf_free>
          goto icmperr;
 8006be4:	e058      	b.n	8006c98 <icmp_input+0x1b0>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8006be6:	6978      	ldr	r0, [r7, #20]
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	f001 fc95 	bl	8008518 <pbuf_copy>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d003      	beq.n	8006bfc <icmp_input+0x114>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8006bf4:	6978      	ldr	r0, [r7, #20]
 8006bf6:	f001 fbf1 	bl	80083dc <pbuf_free>
          goto icmperr;
 8006bfa:	e04d      	b.n	8006c98 <icmp_input+0x1b0>
        }
        /* free the original p */
        pbuf_free(p);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 fbed 	bl	80083dc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	607b      	str	r3, [r7, #4]
 8006c06:	e009      	b.n	8006c1c <icmp_input+0x134>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8006c08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c0a:	3310      	adds	r3, #16
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	f001 fb64 	bl	80082dc <pbuf_remove_header>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d000      	beq.n	8006c1c <icmp_input+0x134>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
          goto icmperr;
 8006c1a:	e03d      	b.n	8006c98 <icmp_input+0x1b0>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8006c22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	4619      	mov	r1, r3
 8006c28:	f001 fb48 	bl	80082bc <pbuf_add_header>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d128      	bne.n	8006c84 <icmp_input+0x19c>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8006c40:	4b19      	ldr	r3, [pc, #100]	; (8006ca8 <icmp_input+0x1c0>)
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2200      	movs	r2, #0
 8006c52:	709a      	strb	r2, [r3, #2]
 8006c54:	2200      	movs	r2, #0
 8006c56:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	22ff      	movs	r2, #255	; 0xff
 8006c5c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	729a      	strb	r2, [r3, #10]
 8006c64:	2200      	movs	r2, #0
 8006c66:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8006c68:	2300      	movs	r3, #0
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	9302      	str	r3, [sp, #8]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	69f9      	ldr	r1, [r7, #28]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	23ff      	movs	r3, #255	; 0xff
 8006c7c:	f000 fa3a 	bl	80070f4 <ip4_output_if>
 8006c80:	4603      	mov	r3, r0
 8006c82:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8006c84:	e000      	b.n	8006c88 <icmp_input+0x1a0>
  switch (type) {
    case ICMP_ER:
      /* This is OK, echo reply might have been parsed by a raw PCB
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
 8006c86:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f001 fba7 	bl	80083dc <pbuf_free>
  return;
 8006c8e:	e007      	b.n	8006ca0 <icmp_input+0x1b8>
lenerr:
  pbuf_free(p);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 fba3 	bl	80083dc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8006c96:	e003      	b.n	8006ca0 <icmp_input+0x1b8>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 fb9f 	bl	80083dc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8006c9e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8006ca0:	3728      	adds	r7, #40	; 0x28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	1ffe94b0 	.word	0x1ffe94b0
 8006cac:	1ffe94c4 	.word	0x1ffe94c4

08006cb0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	2103      	movs	r1, #3
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f000 f804 	bl	8006cd0 <icmp_send_response>
}
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop

08006cd0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08c      	sub	sp, #48	; 0x30
 8006cd4:	af04      	add	r7, sp, #16
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70fb      	strb	r3, [r7, #3]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8006ce0:	2024      	movs	r0, #36	; 0x24
 8006ce2:	2124      	movs	r1, #36	; 0x24
 8006ce4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006ce8:	f001 f95c 	bl	8007fa4 <pbuf_alloc>
 8006cec:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d041      	beq.n	8006d78 <icmp_send_response+0xa8>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	78fa      	ldrb	r2, [r7, #3]
 8006d04:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	78ba      	ldrb	r2, [r7, #2]
 8006d0a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	711a      	strb	r2, [r3, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	719a      	strb	r2, [r3, #6]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f103 0208 	add.w	r2, r3, #8
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	4619      	mov	r1, r3
 8006d30:	221c      	movs	r2, #28
 8006d32:	f7fe ffbb 	bl	8005cac <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8006d3c:	f107 030c 	add.w	r3, r7, #12
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 f81d 	bl	8006d80 <ip4_route>
 8006d46:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d011      	beq.n	8006d72 <icmp_send_response+0xa2>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2200      	movs	r2, #0
 8006d52:	709a      	strb	r2, [r3, #2]
 8006d54:	2200      	movs	r2, #0
 8006d56:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006d58:	f107 020c 	add.w	r2, r7, #12
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	2301      	movs	r3, #1
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	9302      	str	r3, [sp, #8]
 8006d68:	69f8      	ldr	r0, [r7, #28]
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	23ff      	movs	r3, #255	; 0xff
 8006d6e:	f000 f9c1 	bl	80070f4 <ip4_output_if>
  }
  pbuf_free(q);
 8006d72:	69f8      	ldr	r0, [r7, #28]
 8006d74:	f001 fb32 	bl	80083dc <pbuf_free>
}
 8006d78:	3720      	adds	r7, #32
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop

08006d80 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8006d88:	4b31      	ldr	r3, [pc, #196]	; (8006e50 <ip4_route+0xd0>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	e033      	b.n	8006df8 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d029      	beq.n	8006df2 <ip4_route+0x72>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d022      	beq.n	8006df2 <ip4_route+0x72>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3304      	adds	r3, #4
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d01d      	beq.n	8006df2 <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	405a      	eors	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	e038      	b.n	8006e44 <ip4_route+0xc4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d108      	bne.n	8006df2 <ip4_route+0x72>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	330c      	adds	r3, #12
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d101      	bne.n	8006df2 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	e028      	b.n	8006e44 <ip4_route+0xc4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1c8      	bne.n	8006d90 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006dfe:	4b15      	ldr	r3, [pc, #84]	; (8006e54 <ip4_route+0xd4>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d01a      	beq.n	8006e3c <ip4_route+0xbc>
 8006e06:	4b13      	ldr	r3, [pc, #76]	; (8006e54 <ip4_route+0xd4>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d012      	beq.n	8006e3c <ip4_route+0xbc>
 8006e16:	4b0f      	ldr	r3, [pc, #60]	; (8006e54 <ip4_route+0xd4>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006e1e:	f003 0304 	and.w	r3, r3, #4
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8006e26:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <ip4_route+0xd4>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	681b      	ldr	r3, [r3, #0]
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d004      	beq.n	8006e3c <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b7f      	cmp	r3, #127	; 0x7f
 8006e3a:	d101      	bne.n	8006e40 <ip4_route+0xc0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	e001      	b.n	8006e44 <ip4_route+0xc4>
  }

  return netif_default;
 8006e40:	4b04      	ldr	r3, [pc, #16]	; (8006e54 <ip4_route+0xd4>)
 8006e42:	681b      	ldr	r3, [r3, #0]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	1fff0274 	.word	0x1fff0274
 8006e54:	1fff0278 	.word	0x1fff0278

08006e58 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d016      	beq.n	8006e9c <ip4_input_accept+0x44>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3304      	adds	r3, #4
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d011      	beq.n	8006e9c <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006e78:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <ip4_input_accept+0x50>)
 8006e7a:	695a      	ldr	r2, [r3, #20]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d008      	beq.n	8006e98 <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8006e86:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <ip4_input_accept+0x50>)
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	6879      	ldr	r1, [r7, #4]
 8006e8e:	f000 f9d9 	bl	8007244 <ip4_addr_isbroadcast_u32>
 8006e92:	4603      	mov	r3, r0
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e000      	b.n	8006e9e <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	1ffe94b0 	.word	0x1ffe94b0

08006eac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	091b      	lsrs	r3, r3, #4
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d004      	beq.n	8006ed2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 fa87 	bl	80083dc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	e107      	b.n	80070e2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	885b      	ldrh	r3, [r3, #2]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 f9ed 	bl	80072c8 <lwip_htons>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	891b      	ldrh	r3, [r3, #8]
 8006ef6:	89ba      	ldrh	r2, [r7, #12]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d204      	bcs.n	8006f06 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8006efc:	89bb      	ldrh	r3, [r7, #12]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	4619      	mov	r1, r3
 8006f02:	f001 f925 	bl	8008150 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	895b      	ldrh	r3, [r3, #10]
 8006f0a:	89fa      	ldrh	r2, [r7, #14]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d807      	bhi.n	8006f20 <ip4_input+0x74>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	891b      	ldrh	r3, [r3, #8]
 8006f14:	89ba      	ldrh	r2, [r7, #12]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d802      	bhi.n	8006f20 <ip4_input+0x74>
 8006f1a:	89fb      	ldrh	r3, [r7, #14]
 8006f1c:	2b13      	cmp	r3, #19
 8006f1e:	d804      	bhi.n	8006f2a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 fa5b 	bl	80083dc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	e0db      	b.n	80070e2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	4a6f      	ldr	r2, [pc, #444]	; (80070ec <ip4_input+0x240>)
 8006f30:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	4a6d      	ldr	r2, [pc, #436]	; (80070ec <ip4_input+0x240>)
 8006f38:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006f3a:	4b6c      	ldr	r3, [pc, #432]	; (80070ec <ip4_input+0x240>)
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f42:	2be0      	cmp	r3, #224	; 0xe0
 8006f44:	d111      	bne.n	8006f6a <ip4_input+0xbe>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <ip4_input+0xb8>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	3304      	adds	r3, #4
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <ip4_input+0xb8>
      netif = inp;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	617b      	str	r3, [r7, #20]
 8006f62:	e028      	b.n	8006fb6 <ip4_input+0x10a>
    } else {
      netif = NULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	e025      	b.n	8006fb6 <ip4_input+0x10a>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8006f6a:	6838      	ldr	r0, [r7, #0]
 8006f6c:	f7ff ff74 	bl	8006e58 <ip4_input_accept>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <ip4_input+0xd0>
      netif = inp;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	617b      	str	r3, [r7, #20]
 8006f7a:	e01c      	b.n	8006fb6 <ip4_input+0x10a>
    } else {
      netif = NULL;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8006f80:	4b5a      	ldr	r3, [pc, #360]	; (80070ec <ip4_input+0x240>)
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b7f      	cmp	r3, #127	; 0x7f
 8006f88:	d015      	beq.n	8006fb6 <ip4_input+0x10a>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8006f8a:	4b59      	ldr	r3, [pc, #356]	; (80070f0 <ip4_input+0x244>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	e00e      	b.n	8006fb0 <ip4_input+0x104>
          if (netif == inp) {
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d100      	bne.n	8006f9c <ip4_input+0xf0>
            /* we checked that before already */
            continue;
 8006f9a:	e006      	b.n	8006faa <ip4_input+0xfe>
          }
          if (ip4_input_accept(netif)) {
 8006f9c:	6978      	ldr	r0, [r7, #20]
 8006f9e:	f7ff ff5b 	bl	8006e58 <ip4_input_accept>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d000      	beq.n	8006faa <ip4_input+0xfe>
            break;
 8006fa8:	e005      	b.n	8006fb6 <ip4_input+0x10a>
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1ed      	bne.n	8006f92 <ip4_input+0xe6>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8006fb6:	4b4d      	ldr	r3, [pc, #308]	; (80070ec <ip4_input+0x240>)
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	f000 f941 	bl	8007244 <ip4_addr_isbroadcast_u32>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d105      	bne.n	8006fd4 <ip4_input+0x128>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8006fc8:	4b48      	ldr	r3, [pc, #288]	; (80070ec <ip4_input+0x240>)
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8006fd0:	2be0      	cmp	r3, #224	; 0xe0
 8006fd2:	d104      	bne.n	8006fde <ip4_input+0x132>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 fa01 	bl	80083dc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e081      	b.n	80070e2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d104      	bne.n	8006fee <ip4_input+0x142>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 f9f9 	bl	80083dc <pbuf_free>
    return ERR_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	e079      	b.n	80070e2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	88db      	ldrh	r3, [r3, #6]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d004      	beq.n	800700a <ip4_input+0x15e>
    if (p == NULL) {
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
#else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
    pbuf_free(p);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 f9eb 	bl	80083dc <pbuf_free>
                lwip_ntohs(IPH_OFFSET(iphdr))));
    IP_STATS_INC(ip.opterr);
    IP_STATS_INC(ip.drop);
    /* unsupported protocol feature */
    MIB2_STATS_INC(mib2.ipinunknownprotos);
    return ERR_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	e06b      	b.n	80070e2 <ip4_input+0x236>

#if LWIP_IGMP
  /* there is an extra "router alert" option in IGMP messages which we allow for but do not police */
  if ((iphdr_hlen > IP_HLEN) &&  (IPH_PROTO(iphdr) != IP_PROTO_IGMP)) {
#else
  if (iphdr_hlen > IP_HLEN) {
 800700a:	89fb      	ldrh	r3, [r7, #14]
 800700c:	2b14      	cmp	r3, #20
 800700e:	d904      	bls.n	800701a <ip4_input+0x16e>
#endif /* LWIP_IGMP */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since there were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));
    pbuf_free(p);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f001 f9e3 	bl	80083dc <pbuf_free>
    IP_STATS_INC(ip.opterr);
    IP_STATS_INC(ip.drop);
    /* unsupported protocol feature */
    MIB2_STATS_INC(mib2.ipinunknownprotos);
    return ERR_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	e063      	b.n	80070e2 <ip4_input+0x236>
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800701a:	4a34      	ldr	r2, [pc, #208]	; (80070ec <ip4_input+0x240>)
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8007020:	4a32      	ldr	r2, [pc, #200]	; (80070ec <ip4_input+0x240>)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8007026:	4a31      	ldr	r2, [pc, #196]	; (80070ec <ip4_input+0x240>)
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	f003 030f 	and.w	r3, r3, #15
 8007034:	b2db      	uxtb	r3, r3
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	b2db      	uxtb	r3, r3
 800703a:	b29a      	uxth	r2, r3
 800703c:	4b2b      	ldr	r3, [pc, #172]	; (80070ec <ip4_input+0x240>)
 800703e:	819a      	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	f001 fbac 	bl	80087a0 <raw_input>
 8007048:	4603      	mov	r3, r0
 800704a:	72fb      	strb	r3, [r7, #11]
  if (raw_status != RAW_INPUT_EATEN)
 800704c:	7afb      	ldrb	r3, [r7, #11]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d034      	beq.n	80070bc <ip4_input+0x210>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8007052:	89fb      	ldrh	r3, [r7, #14]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4619      	mov	r1, r3
 8007058:	f001 f940 	bl	80082dc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	7a5b      	ldrb	r3, [r3, #9]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d006      	beq.n	8007072 <ip4_input+0x1c6>
 8007064:	2b06      	cmp	r3, #6
 8007066:	d109      	bne.n	800707c <ip4_input+0x1d0>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	f002 ff8c 	bl	8009f88 <tcp_input>
        break;
 8007070:	e024      	b.n	80070bc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	f7ff fd37 	bl	8006ae8 <icmp_input>
        break;
 800707a:	e01f      	b.n	80070bc <ip4_input+0x210>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 800707c:	7afb      	ldrb	r3, [r7, #11]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d018      	beq.n	80070b4 <ip4_input+0x208>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8007082:	4b1a      	ldr	r3, [pc, #104]	; (80070ec <ip4_input+0x240>)
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	4618      	mov	r0, r3
 8007088:	6979      	ldr	r1, [r7, #20]
 800708a:	f000 f8db 	bl	8007244 <ip4_addr_isbroadcast_u32>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10f      	bne.n	80070b4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007094:	4b15      	ldr	r3, [pc, #84]	; (80070ec <ip4_input+0x240>)
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800709c:	2be0      	cmp	r3, #224	; 0xe0
 800709e:	d009      	beq.n	80070b4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80070a0:	89fb      	ldrh	r3, [r7, #14]
 80070a2:	b21b      	sxth	r3, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	4619      	mov	r1, r3
 80070a8:	f001 f986 	bl	80083b8 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	2102      	movs	r1, #2
 80070b0:	f7ff fdfe 	bl	8006cb0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 f991 	bl	80083dc <pbuf_free>
        break;
 80070ba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80070bc:	4b0b      	ldr	r3, [pc, #44]	; (80070ec <ip4_input+0x240>)
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80070c2:	4b0a      	ldr	r3, [pc, #40]	; (80070ec <ip4_input+0x240>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80070c8:	4b08      	ldr	r3, [pc, #32]	; (80070ec <ip4_input+0x240>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80070ce:	4b07      	ldr	r3, [pc, #28]	; (80070ec <ip4_input+0x240>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80070d4:	4b05      	ldr	r3, [pc, #20]	; (80070ec <ip4_input+0x240>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80070da:	4b04      	ldr	r3, [pc, #16]	; (80070ec <ip4_input+0x240>)
 80070dc:	2200      	movs	r2, #0
 80070de:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	b25b      	sxtb	r3, r3
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3718      	adds	r7, #24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	1ffe94b0 	.word	0x1ffe94b0
 80070f0:	1fff0274 	.word	0x1fff0274

080070f4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80070f4:	b590      	push	{r4, r7, lr}
 80070f6:	b08b      	sub	sp, #44	; 0x2c
 80070f8:	af04      	add	r7, sp, #16
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d009      	beq.n	8007120 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <ip4_output_if+0x26>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d102      	bne.n	8007120 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711c:	3304      	adds	r3, #4
 800711e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8007120:	78fc      	ldrb	r4, [r7, #3]
 8007122:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800712c:	9301      	str	r3, [sp, #4]
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	9302      	str	r3, [sp, #8]
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	6979      	ldr	r1, [r7, #20]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	4623      	mov	r3, r4
 800713a:	f000 f805 	bl	8007148 <ip4_output_if_src>
 800713e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8007140:	4618      	mov	r0, r3
 8007142:	371c      	adds	r7, #28
 8007144:	46bd      	mov	sp, r7
 8007146:	bd90      	pop	{r4, r7, pc}

08007148 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
 8007154:	70fb      	strb	r3, [r7, #3]
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d054      	beq.n	8007206 <ip4_output_if_src+0xbe>
    u16_t ip_hlen = IP_HLEN;
 800715c:	2314      	movs	r3, #20
 800715e:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	2114      	movs	r1, #20
 8007164:	f001 f8aa 	bl	80082bc <pbuf_add_header>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <ip4_output_if_src+0x2a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800716e:	23fe      	movs	r3, #254	; 0xfe
 8007170:	e05f      	b.n	8007232 <ip4_output_if_src+0xea>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	78fa      	ldrb	r2, [r7, #3]
 800717c:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007184:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800718e:	8bfb      	ldrh	r3, [r7, #30]
 8007190:	089b      	lsrs	r3, r3, #2
 8007192:	b29b      	uxth	r3, r3
 8007194:	b2db      	uxtb	r3, r3
 8007196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800719a:	b2da      	uxtb	r2, r3
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80071a6:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	891b      	ldrh	r3, [r3, #8]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 f88b 	bl	80072c8 <lwip_htons>
 80071b2:	4603      	mov	r3, r0
 80071b4:	461a      	mov	r2, r3
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2200      	movs	r2, #0
 80071be:	719a      	strb	r2, [r3, #6]
 80071c0:	2200      	movs	r2, #0
 80071c2:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80071c4:	4b1d      	ldr	r3, [pc, #116]	; (800723c <ip4_output_if_src+0xf4>)
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 f87d 	bl	80072c8 <lwip_htons>
 80071ce:	4603      	mov	r3, r0
 80071d0:	461a      	mov	r2, r3
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80071d6:	4b19      	ldr	r3, [pc, #100]	; (800723c <ip4_output_if_src+0xf4>)
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	3301      	adds	r3, #1
 80071dc:	b29a      	uxth	r2, r3
 80071de:	4b17      	ldr	r3, [pc, #92]	; (800723c <ip4_output_if_src+0xf4>)
 80071e0:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d104      	bne.n	80071f2 <ip4_output_if_src+0xaa>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80071e8:	4b15      	ldr	r3, [pc, #84]	; (8007240 <ip4_output_if_src+0xf8>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	60da      	str	r2, [r3, #12]
 80071f0:	e003      	b.n	80071fa <ip4_output_if_src+0xb2>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2200      	movs	r2, #0
 80071fe:	729a      	strb	r2, [r3, #10]
 8007200:	2200      	movs	r2, #0
 8007202:	72da      	strb	r2, [r3, #11]
 8007204:	e00e      	b.n	8007224 <ip4_output_if_src+0xdc>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	895b      	ldrh	r3, [r3, #10]
 800720a:	2b13      	cmp	r3, #19
 800720c:	d801      	bhi.n	8007212 <ip4_output_if_src+0xca>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800720e:	23fe      	movs	r3, #254	; 0xfe
 8007210:	e00f      	b.n	8007232 <ip4_output_if_src+0xea>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800721e:	f107 0314 	add.w	r3, r7, #20
 8007222:	607b      	str	r3, [r7, #4]
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800722a:	68f9      	ldr	r1, [r7, #12]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	4798      	blx	r3
 8007230:	4603      	mov	r3, r0
 8007232:	b25b      	sxtb	r3, r3
}
 8007234:	4618      	mov	r0, r3
 8007236:	3720      	adds	r7, #32
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	1ffe922a 	.word	0x1ffe922a
 8007240:	080142f4 	.word	0x080142f4

08007244 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007258:	d002      	beq.n	8007260 <ip4_addr_isbroadcast_u32+0x1c>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8007260:	2301      	movs	r3, #1
 8007262:	e02a      	b.n	80072ba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8007272:	2300      	movs	r3, #0
 8007274:	e021      	b.n	80072ba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	3304      	adds	r3, #4
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	429a      	cmp	r2, r3
 8007280:	d101      	bne.n	8007286 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8007282:	2300      	movs	r3, #0
 8007284:	e019      	b.n	80072ba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	3304      	adds	r3, #4
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	405a      	eors	r2, r3
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4013      	ands	r3, r2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10d      	bne.n	80072b8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	3308      	adds	r3, #8
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	43da      	mvns	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	3308      	adds	r3, #8
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	43db      	mvns	r3, r3
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d101      	bne.n	80072b8 <ip4_addr_isbroadcast_u32+0x74>
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80072b8:	2300      	movs	r3, #0
  }
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop

080072c8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	4603      	mov	r3, r0
 80072d0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80072d2:	88fb      	ldrh	r3, [r7, #6]
 80072d4:	021b      	lsls	r3, r3, #8
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	88fb      	ldrh	r3, [r7, #6]
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	b29b      	uxth	r3, r3
 80072de:	b29b      	uxth	r3, r3
 80072e0:	4313      	orrs	r3, r2
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	b29b      	uxth	r3, r3
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop

080072f4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	061a      	lsls	r2, r3, #24
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007306:	021b      	lsls	r3, r3, #8
 8007308:	431a      	orrs	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007310:	0a1b      	lsrs	r3, r3, #8
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	0e1b      	lsrs	r3, r3, #24
 8007318:	4313      	orrs	r3, r2
}
 800731a:	4618      	mov	r0, r3
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop

08007328 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007332:	f000 f893 	bl	800745c <mem_init>
  memp_init();
 8007336:	f000 fadf 	bl	80078f8 <memp_init>
  pbuf_init();
  netif_init();
 800733a:	f000 fb5b 	bl	80079f4 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800733e:	f001 facd 	bl	80088dc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007342:	f006 fb03 	bl	800d94c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	4603      	mov	r3, r0
 8007354:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007356:	4b05      	ldr	r3, [pc, #20]	; (800736c <ptr_to_mem+0x20>)
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	88fb      	ldrh	r3, [r7, #6]
 800735c:	4413      	add	r3, r2
}
 800735e:	4618      	mov	r0, r3
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	1ffe922c 	.word	0x1ffe922c

08007370 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a05      	ldr	r2, [pc, #20]	; (8007390 <mem_to_ptr+0x20>)
 800737c:	6812      	ldr	r2, [r2, #0]
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	b29b      	uxth	r3, r3
}
 8007382:	4618      	mov	r0, r3
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	1ffe922c 	.word	0x1ffe922c

08007394 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007394:	b590      	push	{r4, r7, lr}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = ptr_to_mem(mem->next);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7ff ffd3 	bl	800734c <ptr_to_mem>
 80073a6:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d024      	beq.n	80073fa <plug_holes+0x66>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	791b      	ldrb	r3, [r3, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d120      	bne.n	80073fa <plug_holes+0x66>
 80073b8:	4b26      	ldr	r3, [pc, #152]	; (8007454 <plug_holes+0xc0>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d01b      	beq.n	80073fa <plug_holes+0x66>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80073c2:	4b25      	ldr	r3, [pc, #148]	; (8007458 <plug_holes+0xc4>)
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d102      	bne.n	80073d2 <plug_holes+0x3e>
      lfree = mem;
 80073cc:	4a22      	ldr	r2, [pc, #136]	; (8007458 <plug_holes+0xc4>)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	881a      	ldrh	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80073e2:	d00a      	beq.n	80073fa <plug_holes+0x66>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7ff ffaf 	bl	800734c <ptr_to_mem>
 80073ee:	4604      	mov	r4, r0
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff ffbd 	bl	8007370 <mem_to_ptr>
 80073f6:	4603      	mov	r3, r0
 80073f8:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	885b      	ldrh	r3, [r3, #2]
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff ffa4 	bl	800734c <ptr_to_mem>
 8007404:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	429a      	cmp	r2, r3
 800740c:	d01f      	beq.n	800744e <plug_holes+0xba>
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	791b      	ldrb	r3, [r3, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d11b      	bne.n	800744e <plug_holes+0xba>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007416:	4b10      	ldr	r3, [pc, #64]	; (8007458 <plug_holes+0xc4>)
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	429a      	cmp	r2, r3
 800741e:	d102      	bne.n	8007426 <plug_holes+0x92>
      lfree = pmem;
 8007420:	4a0d      	ldr	r2, [pc, #52]	; (8007458 <plug_holes+0xc4>)
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	881a      	ldrh	r2, [r3, #0]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007436:	d00a      	beq.n	800744e <plug_holes+0xba>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	f7ff ff85 	bl	800734c <ptr_to_mem>
 8007442:	4604      	mov	r4, r0
 8007444:	68b8      	ldr	r0, [r7, #8]
 8007446:	f7ff ff93 	bl	8007370 <mem_to_ptr>
 800744a:	4603      	mov	r3, r0
 800744c:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	bd90      	pop	{r4, r7, pc}
 8007454:	1ffe9230 	.word	0x1ffe9230
 8007458:	1ffe9234 	.word	0x1ffe9234

0800745c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007462:	4b18      	ldr	r3, [pc, #96]	; (80074c4 <mem_init+0x68>)
 8007464:	3303      	adds	r3, #3
 8007466:	f023 0303 	bic.w	r3, r3, #3
 800746a:	461a      	mov	r2, r3
 800746c:	4b16      	ldr	r3, [pc, #88]	; (80074c8 <mem_init+0x6c>)
 800746e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007470:	4b15      	ldr	r3, [pc, #84]	; (80074c8 <mem_init+0x6c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800747c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800748a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800748e:	f7ff ff5d 	bl	800734c <ptr_to_mem>
 8007492:	4602      	mov	r2, r0
 8007494:	4b0d      	ldr	r3, [pc, #52]	; (80074cc <mem_init+0x70>)
 8007496:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8007498:	4b0c      	ldr	r3, [pc, #48]	; (80074cc <mem_init+0x70>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2201      	movs	r2, #1
 800749e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80074a0:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <mem_init+0x70>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80074a8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80074aa:	4b08      	ldr	r3, [pc, #32]	; (80074cc <mem_init+0x70>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80074b2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80074b4:	4b04      	ldr	r3, [pc, #16]	; (80074c8 <mem_init+0x6c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a05      	ldr	r2, [pc, #20]	; (80074d0 <mem_init+0x74>)
 80074ba:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	1ffe94c8 	.word	0x1ffe94c8
 80074c8:	1ffe922c 	.word	0x1ffe922c
 80074cc:	1ffe9230 	.word	0x1ffe9230
 80074d0:	1ffe9234 	.word	0x1ffe9234

080074d4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7ff ff47 	bl	8007370 <mem_to_ptr>
 80074e2:	4603      	mov	r3, r0
 80074e4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff ff2e 	bl	800734c <ptr_to_mem>
 80074f0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	885b      	ldrh	r3, [r3, #2]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff ff28 	bl	800734c <ptr_to_mem>
 80074fc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007506:	d818      	bhi.n	800753a <mem_link_valid+0x66>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	885b      	ldrh	r3, [r3, #2]
 800750c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007510:	d813      	bhi.n	800753a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	885b      	ldrh	r3, [r3, #2]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007516:	8afa      	ldrh	r2, [r7, #22]
 8007518:	429a      	cmp	r2, r3
 800751a:	d004      	beq.n	8007526 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	8afa      	ldrh	r2, [r7, #22]
 8007522:	429a      	cmp	r2, r3
 8007524:	d109      	bne.n	800753a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007526:	4b08      	ldr	r3, [pc, #32]	; (8007548 <mem_link_valid+0x74>)
 8007528:	681b      	ldr	r3, [r3, #0]
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	429a      	cmp	r2, r3
 800752e:	d006      	beq.n	800753e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	885b      	ldrh	r3, [r3, #2]
 8007534:	8afa      	ldrh	r2, [r7, #22]
 8007536:	429a      	cmp	r2, r3
 8007538:	d001      	beq.n	800753e <mem_link_valid+0x6a>
    return 0;
 800753a:	2300      	movs	r3, #0
 800753c:	e000      	b.n	8007540 <mem_link_valid+0x6c>
  }
  return 1;
 800753e:	2301      	movs	r3, #1
}
 8007540:	4618      	mov	r0, r3
 8007542:	3718      	adds	r7, #24
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	1ffe9230 	.word	0x1ffe9230

0800754c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d100      	bne.n	800755c <mem_free+0x10>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
 800755a:	e02f      	b.n	80075bc <mem_free+0x70>
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f003 0303 	and.w	r3, r3, #3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d000      	beq.n	8007568 <mem_free+0x1c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007566:	e029      	b.n	80075bc <mem_free+0x70>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3b08      	subs	r3, #8
 800756c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800756e:	4b15      	ldr	r3, [pc, #84]	; (80075c4 <mem_free+0x78>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	429a      	cmp	r2, r3
 8007576:	d306      	bcc.n	8007586 <mem_free+0x3a>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f103 020c 	add.w	r2, r3, #12
 800757e:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <mem_free+0x7c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d900      	bls.n	8007588 <mem_free+0x3c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007586:	e019      	b.n	80075bc <mem_free+0x70>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	791b      	ldrb	r3, [r3, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d100      	bne.n	8007592 <mem_free+0x46>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007590:	e014      	b.n	80075bc <mem_free+0x70>
  }

  if (!mem_link_valid(mem)) {
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f7ff ff9e 	bl	80074d4 <mem_link_valid>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d100      	bne.n	80075a0 <mem_free+0x54>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800759e:	e00d      	b.n	80075bc <mem_free+0x70>
  }

  /* mem is now unused. */
  mem->used = 0;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80075a6:	4b09      	ldr	r3, [pc, #36]	; (80075cc <mem_free+0x80>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d202      	bcs.n	80075b6 <mem_free+0x6a>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80075b0:	4a06      	ldr	r2, [pc, #24]	; (80075cc <mem_free+0x80>)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f7ff feec 	bl	8007394 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	1ffe922c 	.word	0x1ffe922c
 80075c8:	1ffe9230 	.word	0x1ffe9230
 80075cc:	1ffe9234 	.word	0x1ffe9234

080075d0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80075dc:	887b      	ldrh	r3, [r7, #2]
 80075de:	3303      	adds	r3, #3
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f023 0303 	bic.w	r3, r3, #3
 80075e6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80075e8:	8bfb      	ldrh	r3, [r7, #30]
 80075ea:	2b0b      	cmp	r3, #11
 80075ec:	d801      	bhi.n	80075f2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80075ee:	230c      	movs	r3, #12
 80075f0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80075f2:	8bfb      	ldrh	r3, [r7, #30]
 80075f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80075f8:	d803      	bhi.n	8007602 <mem_trim+0x32>
 80075fa:	8bfa      	ldrh	r2, [r7, #30]
 80075fc:	887b      	ldrh	r3, [r7, #2]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d201      	bcs.n	8007606 <mem_trim+0x36>
    return NULL;
 8007602:	2300      	movs	r3, #0
 8007604:	e099      	b.n	800773a <mem_trim+0x16a>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007606:	4b4f      	ldr	r3, [pc, #316]	; (8007744 <mem_trim+0x174>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	429a      	cmp	r2, r3
 800760e:	d304      	bcc.n	800761a <mem_trim+0x4a>
 8007610:	4b4d      	ldr	r3, [pc, #308]	; (8007748 <mem_trim+0x178>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	429a      	cmp	r2, r3
 8007618:	d301      	bcc.n	800761e <mem_trim+0x4e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	e08d      	b.n	800773a <mem_trim+0x16a>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3b08      	subs	r3, #8
 8007622:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007624:	69b8      	ldr	r0, [r7, #24]
 8007626:	f7ff fea3 	bl	8007370 <mem_to_ptr>
 800762a:	4603      	mov	r3, r0
 800762c:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	881a      	ldrh	r2, [r3, #0]
 8007632:	8afb      	ldrh	r3, [r7, #22]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	b29b      	uxth	r3, r3
 8007638:	3b08      	subs	r3, #8
 800763a:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
 800763c:	8bfa      	ldrh	r2, [r7, #30]
 800763e:	8abb      	ldrh	r3, [r7, #20]
 8007640:	429a      	cmp	r2, r3
 8007642:	d901      	bls.n	8007648 <mem_trim+0x78>
    /* not supported */
    return NULL;
 8007644:	2300      	movs	r3, #0
 8007646:	e078      	b.n	800773a <mem_trim+0x16a>
  }
  if (newsize == size) {
 8007648:	8bfa      	ldrh	r2, [r7, #30]
 800764a:	8abb      	ldrh	r3, [r7, #20]
 800764c:	429a      	cmp	r2, r3
 800764e:	d101      	bne.n	8007654 <mem_trim+0x84>
    /* No change in size, simply return */
    return rmem;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	e072      	b.n	800773a <mem_trim+0x16a>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	4618      	mov	r0, r3
 800765a:	f7ff fe77 	bl	800734c <ptr_to_mem>
 800765e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	791b      	ldrb	r3, [r3, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d134      	bne.n	80076d2 <mem_trim+0x102>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
    /* remember the old next pointer */
    next = mem2->next;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800766e:	8afa      	ldrh	r2, [r7, #22]
 8007670:	8bfb      	ldrh	r3, [r7, #30]
 8007672:	4413      	add	r3, r2
 8007674:	b29b      	uxth	r3, r3
 8007676:	3308      	adds	r3, #8
 8007678:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 800767a:	4b34      	ldr	r3, [pc, #208]	; (800774c <mem_trim+0x17c>)
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	429a      	cmp	r2, r3
 8007682:	d106      	bne.n	8007692 <mem_trim+0xc2>
      lfree = ptr_to_mem(ptr2);
 8007684:	89bb      	ldrh	r3, [r7, #12]
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff fe60 	bl	800734c <ptr_to_mem>
 800768c:	4602      	mov	r2, r0
 800768e:	4b2f      	ldr	r3, [pc, #188]	; (800774c <mem_trim+0x17c>)
 8007690:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007692:	89bb      	ldrh	r3, [r7, #12]
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff fe59 	bl	800734c <ptr_to_mem>
 800769a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	2200      	movs	r2, #0
 80076a0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	89fa      	ldrh	r2, [r7, #14]
 80076a6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	8afa      	ldrh	r2, [r7, #22]
 80076ac:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	89ba      	ldrh	r2, [r7, #12]
 80076b2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80076bc:	d008      	beq.n	80076d0 <mem_trim+0x100>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7ff fe42 	bl	800734c <ptr_to_mem>
 80076c8:	4602      	mov	r2, r0
 80076ca:	89bb      	ldrh	r3, [r7, #12]
 80076cc:	8053      	strh	r3, [r2, #2]
 80076ce:	e033      	b.n	8007738 <mem_trim+0x168>
 80076d0:	e032      	b.n	8007738 <mem_trim+0x168>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80076d2:	8bfb      	ldrh	r3, [r7, #30]
 80076d4:	f103 0214 	add.w	r2, r3, #20
 80076d8:	8abb      	ldrh	r3, [r7, #20]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d82c      	bhi.n	8007738 <mem_trim+0x168>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80076de:	8afa      	ldrh	r2, [r7, #22]
 80076e0:	8bfb      	ldrh	r3, [r7, #30]
 80076e2:	4413      	add	r3, r2
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	3308      	adds	r3, #8
 80076e8:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
    mem2 = ptr_to_mem(ptr2);
 80076ea:	89bb      	ldrh	r3, [r7, #12]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff fe2d 	bl	800734c <ptr_to_mem>
 80076f2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80076f4:	4b15      	ldr	r3, [pc, #84]	; (800774c <mem_trim+0x17c>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d202      	bcs.n	8007704 <mem_trim+0x134>
      lfree = mem2;
 80076fe:	4a13      	ldr	r2, [pc, #76]	; (800774c <mem_trim+0x17c>)
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	2200      	movs	r2, #0
 8007708:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	881a      	ldrh	r2, [r3, #0]
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	8afa      	ldrh	r2, [r7, #22]
 8007716:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	89ba      	ldrh	r2, [r7, #12]
 800771c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007726:	d007      	beq.n	8007738 <mem_trim+0x168>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	4618      	mov	r0, r3
 800772e:	f7ff fe0d 	bl	800734c <ptr_to_mem>
 8007732:	4602      	mov	r2, r0
 8007734:	89bb      	ldrh	r3, [r7, #12]
 8007736:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007738:	687b      	ldr	r3, [r7, #4]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3720      	adds	r7, #32
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	1ffe922c 	.word	0x1ffe922c
 8007748:	1ffe9230 	.word	0x1ffe9230
 800774c:	1ffe9234 	.word	0x1ffe9234

08007750 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b088      	sub	sp, #32
 8007754:	af00      	add	r7, sp, #0
 8007756:	4603      	mov	r3, r0
 8007758:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800775a:	88fb      	ldrh	r3, [r7, #6]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <mem_malloc+0x14>
    return NULL;
 8007760:	2300      	movs	r3, #0
 8007762:	e092      	b.n	800788a <mem_malloc+0x13a>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	3303      	adds	r3, #3
 8007768:	b29b      	uxth	r3, r3
 800776a:	f023 0303 	bic.w	r3, r3, #3
 800776e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007770:	8bbb      	ldrh	r3, [r7, #28]
 8007772:	2b0b      	cmp	r3, #11
 8007774:	d801      	bhi.n	800777a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007776:	230c      	movs	r3, #12
 8007778:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800777a:	8bbb      	ldrh	r3, [r7, #28]
 800777c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007780:	d803      	bhi.n	800778a <mem_malloc+0x3a>
 8007782:	8bba      	ldrh	r2, [r7, #28]
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	429a      	cmp	r2, r3
 8007788:	d201      	bcs.n	800778e <mem_malloc+0x3e>
    return NULL;
 800778a:	2300      	movs	r3, #0
 800778c:	e07d      	b.n	800788a <mem_malloc+0x13a>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800778e:	4b41      	ldr	r3, [pc, #260]	; (8007894 <mem_malloc+0x144>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4618      	mov	r0, r3
 8007794:	f7ff fdec 	bl	8007370 <mem_to_ptr>
 8007798:	4603      	mov	r3, r0
 800779a:	83fb      	strh	r3, [r7, #30]
 800779c:	e06e      	b.n	800787c <mem_malloc+0x12c>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800779e:	8bfb      	ldrh	r3, [r7, #30]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff fdd3 	bl	800734c <ptr_to_mem>
 80077a6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	791b      	ldrb	r3, [r3, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d15e      	bne.n	800786e <mem_malloc+0x11e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	461a      	mov	r2, r3
 80077b6:	8bfb      	ldrh	r3, [r7, #30]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	f1a3 0208 	sub.w	r2, r3, #8
 80077be:	8bbb      	ldrh	r3, [r7, #28]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d354      	bcc.n	800786e <mem_malloc+0x11e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	881b      	ldrh	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	8bfb      	ldrh	r3, [r7, #30]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	f1a3 0208 	sub.w	r2, r3, #8
 80077d2:	8bbb      	ldrh	r3, [r7, #28]
 80077d4:	3314      	adds	r3, #20
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d328      	bcc.n	800782c <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80077da:	8bfa      	ldrh	r2, [r7, #30]
 80077dc:	8bbb      	ldrh	r3, [r7, #28]
 80077de:	4413      	add	r3, r2
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	3308      	adds	r3, #8
 80077e4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80077e6:	8a7b      	ldrh	r3, [r7, #18]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7ff fdaf 	bl	800734c <ptr_to_mem>
 80077ee:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	881a      	ldrh	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8bfa      	ldrh	r2, [r7, #30]
 8007802:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	8a7a      	ldrh	r2, [r7, #18]
 8007808:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2201      	movs	r2, #1
 800780e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007818:	d00b      	beq.n	8007832 <mem_malloc+0xe2>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	4618      	mov	r0, r3
 8007820:	f7ff fd94 	bl	800734c <ptr_to_mem>
 8007824:	4602      	mov	r2, r0
 8007826:	8a7b      	ldrh	r3, [r7, #18]
 8007828:	8053      	strh	r3, [r2, #2]
 800782a:	e002      	b.n	8007832 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	2201      	movs	r2, #1
 8007830:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007832:	4b18      	ldr	r3, [pc, #96]	; (8007894 <mem_malloc+0x144>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	429a      	cmp	r2, r3
 800783a:	d115      	bne.n	8007868 <mem_malloc+0x118>
          struct mem *cur = lfree;
 800783c:	4b15      	ldr	r3, [pc, #84]	; (8007894 <mem_malloc+0x144>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007842:	e005      	b.n	8007850 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff fd7f 	bl	800734c <ptr_to_mem>
 800784e:	61b8      	str	r0, [r7, #24]
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	791b      	ldrb	r3, [r3, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d004      	beq.n	8007862 <mem_malloc+0x112>
 8007858:	4b0f      	ldr	r3, [pc, #60]	; (8007898 <mem_malloc+0x148>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	429a      	cmp	r2, r3
 8007860:	d1f0      	bne.n	8007844 <mem_malloc+0xf4>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
 8007862:	4a0c      	ldr	r2, [pc, #48]	; (8007894 <mem_malloc+0x144>)
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	6013      	str	r3, [r2, #0]

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	3308      	adds	r3, #8
 800786c:	e00d      	b.n	800788a <mem_malloc+0x13a>

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ptr_to_mem(ptr)->next) {
 800786e:	8bfb      	ldrh	r3, [r7, #30]
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff fd6b 	bl	800734c <ptr_to_mem>
 8007876:	4603      	mov	r3, r0
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	83fb      	strh	r3, [r7, #30]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800787c:	8bfa      	ldrh	r2, [r7, #30]
 800787e:	8bbb      	ldrh	r3, [r7, #28]
 8007880:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007884:	429a      	cmp	r2, r3
 8007886:	d38a      	bcc.n	800779e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	1ffe9234 	.word	0x1ffe9234
 8007898:	1ffe9230 	.word	0x1ffe9230

0800789c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	3303      	adds	r3, #3
 80078b2:	f023 0303 	bic.w	r3, r3, #3
 80078b6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80078b8:	2300      	movs	r3, #0
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	e011      	b.n	80078e2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4413      	add	r3, r2
 80078da:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	3301      	adds	r3, #1
 80078e0:	60fb      	str	r3, [r7, #12]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	885b      	ldrh	r3, [r3, #2]
 80078e6:	461a      	mov	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	dce7      	bgt.n	80078be <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80078fe:	2300      	movs	r3, #0
 8007900:	80fb      	strh	r3, [r7, #6]
 8007902:	e009      	b.n	8007918 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007904:	88fb      	ldrh	r3, [r7, #6]
 8007906:	4a07      	ldr	r2, [pc, #28]	; (8007924 <memp_init+0x2c>)
 8007908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800790c:	4618      	mov	r0, r3
 800790e:	f7ff ffc5 	bl	800789c <memp_init_pool>
memp_init(void)
{
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007912:	88fb      	ldrh	r3, [r7, #6]
 8007914:	3301      	adds	r3, #1
 8007916:	80fb      	strh	r3, [r7, #6]
 8007918:	88fb      	ldrh	r3, [r7, #6]
 800791a:	2b06      	cmp	r3, #6
 800791c:	d9f2      	bls.n	8007904 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	0801434c 	.word	0x0801434c

08007928 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d006      	beq.n	800794c <do_memp_malloc_pool+0x24>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	6812      	ldr	r2, [r2, #0]
 8007946:	601a      	str	r2, [r3, #0]
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	e000      	b.n	800794e <do_memp_malloc_pool+0x26>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop

0800795c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007966:	79fb      	ldrb	r3, [r7, #7]
 8007968:	2b06      	cmp	r3, #6
 800796a:	d901      	bls.n	8007970 <memp_malloc+0x14>
 800796c:	2300      	movs	r3, #0
 800796e:	e008      	b.n	8007982 <memp_malloc+0x26>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007970:	79fb      	ldrb	r3, [r7, #7]
 8007972:	4a06      	ldr	r2, [pc, #24]	; (800798c <memp_malloc+0x30>)
 8007974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff ffd5 	bl	8007928 <do_memp_malloc_pool>
 800797e:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007980:	68fb      	ldr	r3, [r7, #12]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	0801434c 	.word	0x0801434c

08007990 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop

080079bc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4603      	mov	r3, r0
 80079c4:	6039      	str	r1, [r7, #0]
 80079c6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80079c8:	79fb      	ldrb	r3, [r7, #7]
 80079ca:	2b06      	cmp	r3, #6
 80079cc:	d900      	bls.n	80079d0 <memp_free+0x14>
 80079ce:	e00b      	b.n	80079e8 <memp_free+0x2c>

  if (mem == NULL) {
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d100      	bne.n	80079d8 <memp_free+0x1c>
    return;
 80079d6:	e007      	b.n	80079e8 <memp_free+0x2c>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	4a05      	ldr	r2, [pc, #20]	; (80079f0 <memp_free+0x34>)
 80079dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e0:	4618      	mov	r0, r3
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	f7ff ffd4 	bl	8007990 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	0801434c 	.word	0x0801434c

080079f4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80079f4:	b480      	push	{r7}
 80079f6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <netif_add+0x18>
 8007a14:	2300      	movs	r3, #0
 8007a16:	e086      	b.n	8007b26 <netif_add+0x126>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <netif_add+0x22>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	e081      	b.n	8007b26 <netif_add+0x126>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <netif_add+0x2c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007a28:	4b41      	ldr	r3, [pc, #260]	; (8007b30 <netif_add+0x130>)
 8007a2a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <netif_add+0x36>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007a32:	4b3f      	ldr	r3, [pc, #252]	; (8007b30 <netif_add+0x130>)
 8007a34:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <netif_add+0x40>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007a3c:	4b3c      	ldr	r3, [pc, #240]	; (8007b30 <netif_add+0x130>)
 8007a3e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	4a37      	ldr	r2, [pc, #220]	; (8007b34 <netif_add+0x134>)
 8007a56:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a3a      	ldr	r2, [r7, #32]
 8007a70:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007a72:	4b31      	ldr	r3, [pc, #196]	; (8007b38 <netif_add+0x138>)
 8007a74:	781a      	ldrb	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a80:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	68b9      	ldr	r1, [r7, #8]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	f000 f8d9 	bl	8007c40 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	4798      	blx	r3
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <netif_add+0x9e>
    return NULL;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	e043      	b.n	8007b26 <netif_add+0x126>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007aa4:	2bff      	cmp	r3, #255	; 0xff
 8007aa6:	d103      	bne.n	8007ab0 <netif_add+0xb0>
        netif->num = 0;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007ab4:	4b21      	ldr	r3, [pc, #132]	; (8007b3c <netif_add+0x13c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	617b      	str	r3, [r7, #20]
 8007aba:	e016      	b.n	8007aea <netif_add+0xea>
        LWIP_ASSERT("netif already added", netif2 != netif);
        num_netifs++;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
        if (netif2->num == netif->num) {
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d108      	bne.n	8007ae4 <netif_add+0xe4>
          netif->num++;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ad8:	3301      	adds	r3, #1
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007ae2:	e005      	b.n	8007af0 <netif_add+0xf0>
    do {
      if (netif->num == 255) {
        netif->num = 0;
      }
      num_netifs = 0;
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	617b      	str	r3, [r7, #20]
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e5      	bne.n	8007abc <netif_add+0xbc>
        if (netif2->num == netif->num) {
          netif->num++;
          break;
        }
      }
    } while (netif2 != NULL);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1d3      	bne.n	8007a9e <netif_add+0x9e>
  }
  if (netif->num == 254) {
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007afc:	2bfe      	cmp	r3, #254	; 0xfe
 8007afe:	d103      	bne.n	8007b08 <netif_add+0x108>
    netif_num = 0;
 8007b00:	4b0d      	ldr	r3, [pc, #52]	; (8007b38 <netif_add+0x138>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	701a      	strb	r2, [r3, #0]
 8007b06:	e006      	b.n	8007b16 <netif_add+0x116>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b0e:	3301      	adds	r3, #1
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <netif_add+0x138>)
 8007b14:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007b16:	4b09      	ldr	r3, [pc, #36]	; (8007b3c <netif_add+0x13c>)
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007b1e:	4a07      	ldr	r2, [pc, #28]	; (8007b3c <netif_add+0x13c>)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007b24:	68fb      	ldr	r3, [r7, #12]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	080142f4 	.word	0x080142f4
 8007b34:	08007e91 	.word	0x08007e91
 8007b38:	1ffe9254 	.word	0x1ffe9254
 8007b3c:	1fff0274 	.word	0x1fff0274

08007b40 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	f002 f9cb 	bl	8009ee8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	f000 fe93 	bl	8008880 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
}
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
  LWIP_ASSERT("invalid pointer", old_addr != NULL);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	3304      	adds	r3, #4
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d01c      	beq.n	8007bb4 <netif_do_set_ipaddr+0x54>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3304      	adds	r3, #4
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007b8a:	f107 0314 	add.w	r3, r7, #20
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	4619      	mov	r1, r3
 8007b92:	f7ff ffd5 	bl	8007b40 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <netif_do_set_ipaddr+0x42>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	e000      	b.n	8007ba4 <netif_do_set_ipaddr+0x44>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	2101      	movs	r1, #1
 8007bac:	f000 f8be 	bl	8007d2c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e000      	b.n	8007bb6 <netif_do_set_ipaddr+0x56>
  }
  return 0; /* address unchanged */
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3718      	adds	r7, #24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop

08007bc0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d00a      	beq.n	8007bf0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <netif_do_set_netmask+0x26>
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	e000      	b.n	8007be8 <netif_do_set_netmask+0x28>
 8007be6:	2300      	movs	r3, #0
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007bec:	2301      	movs	r3, #1
 8007bee:	e000      	b.n	8007bf2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop

08007c00 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	330c      	adds	r3, #12
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d00a      	beq.n	8007c30 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <netif_do_set_gw+0x26>
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	e000      	b.n	8007c28 <netif_do_set_gw+0x28>
 8007c26:	2300      	movs	r3, #0
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e000      	b.n	8007c32 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop

08007c40 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b088      	sub	sp, #32
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007c52:	2300      	movs	r3, #0
 8007c54:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007c5c:	4b1b      	ldr	r3, [pc, #108]	; (8007ccc <netif_set_addr+0x8c>)
 8007c5e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007c66:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <netif_set_addr+0x8c>)
 8007c68:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007c70:	4b16      	ldr	r3, [pc, #88]	; (8007ccc <netif_set_addr+0x8c>)
 8007c72:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <netif_set_addr+0x42>
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <netif_set_addr+0x46>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <netif_set_addr+0x48>
 8007c86:	2300      	movs	r3, #0
 8007c88:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d006      	beq.n	8007c9e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007c90:	f107 0310 	add.w	r3, r7, #16
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	68b9      	ldr	r1, [r7, #8]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	f7ff ff61 	bl	8007b60 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	69fa      	ldr	r2, [r7, #28]
 8007ca4:	f7ff ff8c 	bl	8007bc0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	f7ff ffa7 	bl	8007c00 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d106      	bne.n	8007cc6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007cb8:	f107 0310 	add.w	r3, r7, #16
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	68b9      	ldr	r1, [r7, #8]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	f7ff ff4d 	bl	8007b60 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007cc6:	3720      	adds	r7, #32
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	080142f4 	.word	0x080142f4

08007cd0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007cd8:	4a03      	ldr	r2, [pc, #12]	; (8007ce8 <netif_set_default+0x18>)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	1fff0278 	.word	0x1fff0278

08007cec <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d100      	bne.n	8007cfc <netif_set_up+0x10>
 8007cfa:	e013      	b.n	8007d24 <netif_set_up+0x38>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10c      	bne.n	8007d24 <netif_set_up+0x38>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d10:	f043 0301 	orr.w	r3, r3, #1
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	2103      	movs	r1, #3
 8007d20:	f000 f804 	bl	8007d2c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop

08007d2c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d3e:	f003 0304 	and.w	r3, r3, #4
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d006      	beq.n	8007d54 <netif_issue_reports+0x28>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d4c:	f003 0301 	and.w	r3, r3, #1
netif_issue_reports(struct netif *netif, u8_t report_type)
{
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d100      	bne.n	8007d56 <netif_issue_reports+0x2a>
      !(netif->flags & NETIF_FLAG_UP)) {
    return;
 8007d54:	e016      	b.n	8007d84 <netif_issue_reports+0x58>
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007d56:	78fb      	ldrb	r3, [r7, #3]
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d011      	beq.n	8007d84 <netif_issue_reports+0x58>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3304      	adds	r3, #4
 8007d64:	681b      	ldr	r3, [r3, #0]
      !(netif->flags & NETIF_FLAG_UP)) {
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00c      	beq.n	8007d84 <netif_issue_reports+0x58>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d70:	f003 0308 	and.w	r3, r3, #8
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d005      	beq.n	8007d84 <netif_issue_reports+0x58>
      etharp_gratuitous(netif);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	4619      	mov	r1, r3
 8007d80:	f7fe fea0 	bl	8006ac4 <etharp_request>
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop

08007d8c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d100      	bne.n	8007d9c <netif_set_down+0x10>
 8007d9a:	e019      	b.n	8007dd0 <netif_set_down+0x44>

  if (netif->flags & NETIF_FLAG_UP) {
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d012      	beq.n	8007dd0 <netif_set_down+0x44>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007db0:	f023 0301 	bic.w	r3, r3, #1
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007dc2:	f003 0308 	and.w	r3, r3, #8
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <netif_set_down+0x44>
      etharp_cleanup_netif(netif);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7fe faf8 	bl	80063c0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop

08007dd8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d100      	bne.n	8007de8 <netif_set_link_up+0x10>
 8007de6:	e01b      	b.n	8007e20 <netif_set_link_up+0x48>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007dee:	f003 0304 	and.w	r3, r3, #4
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d114      	bne.n	8007e20 <netif_set_link_up+0x48>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007dfc:	f043 0304 	orr.w	r3, r3, #4
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	2103      	movs	r1, #3
 8007e0c:	f7ff ff8e 	bl	8007d2c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	69db      	ldr	r3, [r3, #28]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <netif_set_link_up+0x48>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop

08007e28 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d100      	bne.n	8007e38 <netif_set_link_down+0x10>
 8007e36:	e017      	b.n	8007e68 <netif_set_link_down+0x40>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e3e:	f003 0304 	and.w	r3, r3, #4
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d010      	beq.n	8007e68 <netif_set_link_down+0x40>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e4c:	f023 0304 	bic.w	r3, r3, #4
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	69db      	ldr	r3, [r3, #28]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d003      	beq.n	8007e68 <netif_set_link_down+0x40>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	69db      	ldr	r3, [r3, #28]
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop

08007e70 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	61da      	str	r2, [r3, #28]
  }
}
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007e9c:	23f4      	movs	r3, #244	; 0xf4
 8007e9e:	b25b      	sxtb	r3, r3
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d013      	beq.n	8007ee4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007ebc:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <netif_get_by_index+0x48>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	e00c      	b.n	8007ede <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007eca:	3301      	adds	r3, #1
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	79fa      	ldrb	r2, [r7, #7]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d101      	bne.n	8007ed8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	e006      	b.n	8007ee6 <netif_get_by_index+0x3a>
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
    NETIF_FOREACH(netif) {
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1ef      	bne.n	8007ec4 <netif_get_by_index+0x18>
        return netif; /* found! */
      }
    }
  }

  return NULL;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	1fff0274 	.word	0x1fff0274

08007ef8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007efe:	4b0c      	ldr	r3, [pc, #48]	; (8007f30 <pbuf_free_ooseq+0x38>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007f04:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <pbuf_free_ooseq+0x3c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	607b      	str	r3, [r7, #4]
 8007f0a:	e00a      	b.n	8007f22 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f002 f823 	bl	8009f60 <tcp_free_ooseq>
      return;
 8007f1a:	e005      	b.n	8007f28 <pbuf_free_ooseq+0x30>
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	607b      	str	r3, [r7, #4]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1f1      	bne.n	8007f0c <pbuf_free_ooseq+0x14>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
      return;
    }
  }
}
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	1fff027c 	.word	0x1fff027c
 8007f34:	1fff0284 	.word	0x1fff0284

08007f38 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007f3c:	4b03      	ldr	r3, [pc, #12]	; (8007f4c <pbuf_pool_is_empty+0x14>)
 8007f3e:	2201      	movs	r2, #1
 8007f40:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	1fff027c 	.word	0x1fff027c

08007f50 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	460b      	mov	r3, r1
 8007f60:	80fb      	strh	r3, [r7, #6]
 8007f62:	4613      	mov	r3, r2
 8007f64:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	88fa      	ldrh	r2, [r7, #6]
 8007f76:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	88ba      	ldrh	r2, [r7, #4]
 8007f7c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007f7e:	8b3b      	ldrh	r3, [r7, #24]
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	7f3a      	ldrb	r2, [r7, #28]
 8007f8a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	73da      	strb	r2, [r3, #15]
}
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop

08007fa4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007fa4:	b590      	push	{r4, r7, lr}
 8007fa6:	b08d      	sub	sp, #52	; 0x34
 8007fa8:	af02      	add	r7, sp, #8
 8007faa:	4603      	mov	r3, r0
 8007fac:	71fb      	strb	r3, [r7, #7]
 8007fae:	460b      	mov	r3, r1
 8007fb0:	80bb      	strh	r3, [r7, #4]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007fb6:	79fb      	ldrb	r3, [r7, #7]
 8007fb8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007fba:	887b      	ldrh	r3, [r7, #2]
 8007fbc:	2b41      	cmp	r3, #65	; 0x41
 8007fbe:	d00b      	beq.n	8007fd8 <pbuf_alloc+0x34>
 8007fc0:	2b41      	cmp	r3, #65	; 0x41
 8007fc2:	dc02      	bgt.n	8007fca <pbuf_alloc+0x26>
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d007      	beq.n	8007fd8 <pbuf_alloc+0x34>
 8007fc8:	e099      	b.n	80080fe <pbuf_alloc+0x15a>
 8007fca:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007fce:	d00c      	beq.n	8007fea <pbuf_alloc+0x46>
 8007fd0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007fd4:	d055      	beq.n	8008082 <pbuf_alloc+0xde>
 8007fd6:	e092      	b.n	80080fe <pbuf_alloc+0x15a>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007fd8:	88ba      	ldrh	r2, [r7, #4]
 8007fda:	887b      	ldrh	r3, [r7, #2]
 8007fdc:	2000      	movs	r0, #0
 8007fde:	4611      	mov	r1, r2
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	f000 f893 	bl	800810c <pbuf_alloc_reference>
 8007fe6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8007fe8:	e08b      	b.n	8008102 <pbuf_alloc+0x15e>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007ff2:	88bb      	ldrh	r3, [r7, #4]
 8007ff4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007ff6:	2006      	movs	r0, #6
 8007ff8:	f7ff fcb0 	bl	800795c <memp_malloc>
 8007ffc:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d109      	bne.n	8008018 <pbuf_alloc+0x74>
          PBUF_POOL_IS_EMPTY();
 8008004:	f7ff ff98 	bl	8007f38 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <pbuf_alloc+0x70>
            pbuf_free(p);
 800800e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008010:	f000 f9e4 	bl	80083dc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008014:	2300      	movs	r3, #0
 8008016:	e075      	b.n	8008104 <pbuf_alloc+0x160>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800801a:	3303      	adds	r3, #3
 800801c:	b29b      	uxth	r3, r3
 800801e:	f023 0303 	bic.w	r3, r3, #3
 8008022:	b29b      	uxth	r3, r3
 8008024:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 8008028:	b29a      	uxth	r2, r3
 800802a:	8b7b      	ldrh	r3, [r7, #26]
 800802c:	4293      	cmp	r3, r2
 800802e:	bf28      	it	cs
 8008030:	4613      	movcs	r3, r2
 8008032:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008034:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008036:	3310      	adds	r3, #16
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	4413      	add	r3, r2
 800803c:	3303      	adds	r3, #3
 800803e:	f023 0303 	bic.w	r3, r3, #3
 8008042:	4619      	mov	r1, r3
 8008044:	8b7a      	ldrh	r2, [r7, #26]
 8008046:	8a7c      	ldrh	r4, [r7, #18]
 8008048:	887b      	ldrh	r3, [r7, #2]
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	2300      	movs	r3, #0
 800804e:	9301      	str	r3, [sp, #4]
 8008050:	6978      	ldr	r0, [r7, #20]
 8008052:	4623      	mov	r3, r4
 8008054:	f7ff ff7c 	bl	8007f50 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	2b00      	cmp	r3, #0
 800805c:	d102      	bne.n	8008064 <pbuf_alloc+0xc0>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
 8008062:	e002      	b.n	800806a <pbuf_alloc+0xc6>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800806e:	8b7a      	ldrh	r2, [r7, #26]
 8008070:	8a7b      	ldrh	r3, [r7, #18]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800807a:	8b7b      	ldrh	r3, [r7, #26]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1ba      	bne.n	8007ff6 <pbuf_alloc+0x52>
      break;
 8008080:	e03f      	b.n	8008102 <pbuf_alloc+0x15e>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008082:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008084:	3303      	adds	r3, #3
 8008086:	b29b      	uxth	r3, r3
 8008088:	f023 0303 	bic.w	r3, r3, #3
 800808c:	b29a      	uxth	r2, r3
 800808e:	88bb      	ldrh	r3, [r7, #4]
 8008090:	3303      	adds	r3, #3
 8008092:	b29b      	uxth	r3, r3
 8008094:	f023 0303 	bic.w	r3, r3, #3
 8008098:	b29b      	uxth	r3, r3
 800809a:	4413      	add	r3, r2
 800809c:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800809e:	8a3b      	ldrh	r3, [r7, #16]
 80080a0:	3310      	adds	r3, #16
 80080a2:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80080a4:	8a3a      	ldrh	r2, [r7, #16]
 80080a6:	88bb      	ldrh	r3, [r7, #4]
 80080a8:	3303      	adds	r3, #3
 80080aa:	f023 0303 	bic.w	r3, r3, #3
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d306      	bcc.n	80080c0 <pbuf_alloc+0x11c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80080b2:	89fa      	ldrh	r2, [r7, #14]
 80080b4:	88bb      	ldrh	r3, [r7, #4]
 80080b6:	3303      	adds	r3, #3
 80080b8:	f023 0303 	bic.w	r3, r3, #3
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80080bc:	429a      	cmp	r2, r3
 80080be:	d201      	bcs.n	80080c4 <pbuf_alloc+0x120>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e01f      	b.n	8008104 <pbuf_alloc+0x160>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80080c4:	89fb      	ldrh	r3, [r7, #14]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff fb42 	bl	8007750 <mem_malloc>
 80080cc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <pbuf_alloc+0x134>
        return NULL;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e015      	b.n	8008104 <pbuf_alloc+0x160>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80080d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80080da:	3310      	adds	r3, #16
 80080dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080de:	4413      	add	r3, r2
 80080e0:	3303      	adds	r3, #3
 80080e2:	f023 0303 	bic.w	r3, r3, #3
 80080e6:	4619      	mov	r1, r3
 80080e8:	88ba      	ldrh	r2, [r7, #4]
 80080ea:	88bc      	ldrh	r4, [r7, #4]
 80080ec:	887b      	ldrh	r3, [r7, #2]
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	2300      	movs	r3, #0
 80080f2:	9301      	str	r3, [sp, #4]
 80080f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080f6:	4623      	mov	r3, r4
 80080f8:	f7ff ff2a 	bl	8007f50 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80080fc:	e001      	b.n	8008102 <pbuf_alloc+0x15e>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
      return NULL;
 80080fe:	2300      	movs	r3, #0
 8008100:	e000      	b.n	8008104 <pbuf_alloc+0x160>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008104:	4618      	mov	r0, r3
 8008106:	372c      	adds	r7, #44	; 0x2c
 8008108:	46bd      	mov	sp, r7
 800810a:	bd90      	pop	{r4, r7, pc}

0800810c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800810c:	b590      	push	{r4, r7, lr}
 800810e:	b087      	sub	sp, #28
 8008110:	af02      	add	r7, sp, #8
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	807b      	strh	r3, [r7, #2]
 8008118:	4613      	mov	r3, r2
 800811a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800811c:	2005      	movs	r0, #5
 800811e:	f7ff fc1d 	bl	800795c <memp_malloc>
 8008122:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <pbuf_alloc_reference+0x22>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	e00b      	b.n	8008146 <pbuf_alloc_reference+0x3a>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800812e:	887a      	ldrh	r2, [r7, #2]
 8008130:	887c      	ldrh	r4, [r7, #2]
 8008132:	883b      	ldrh	r3, [r7, #0]
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	2300      	movs	r3, #0
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	4623      	mov	r3, r4
 8008140:	f7ff ff06 	bl	8007f50 <pbuf_init_alloced_pbuf>
  return p;
 8008144:	68fb      	ldr	r3, [r7, #12]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	bd90      	pop	{r4, r7, pc}
 800814e:	bf00      	nop

08008150 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	807b      	strh	r3, [r7, #2]
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	891b      	ldrh	r3, [r3, #8]
 8008160:	887a      	ldrh	r2, [r7, #2]
 8008162:	429a      	cmp	r2, r3
 8008164:	d300      	bcc.n	8008168 <pbuf_realloc+0x18>
    /* enlarging not yet supported */
    return;
 8008166:	e049      	b.n	80081fc <pbuf_realloc+0xac>
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	891a      	ldrh	r2, [r3, #8]
 800816c:	887b      	ldrh	r3, [r7, #2]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008172:	887b      	ldrh	r3, [r7, #2]
 8008174:	817b      	strh	r3, [r7, #10]
  q = p;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800817a:	e00e      	b.n	800819a <pbuf_realloc+0x4a>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	895b      	ldrh	r3, [r3, #10]
 8008180:	897a      	ldrh	r2, [r7, #10]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	891a      	ldrh	r2, [r3, #8]
 800818a:	893b      	ldrh	r3, [r7, #8]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	b29a      	uxth	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	895b      	ldrh	r3, [r3, #10]
 800819e:	897a      	ldrh	r2, [r7, #10]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d8eb      	bhi.n	800817c <pbuf_realloc+0x2c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	7b1b      	ldrb	r3, [r3, #12]
 80081a8:	f003 030f 	and.w	r3, r3, #15
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d112      	bne.n	80081d6 <pbuf_realloc+0x86>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	895b      	ldrh	r3, [r3, #10]
 80081b4:	897a      	ldrh	r2, [r7, #10]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d00d      	beq.n	80081d6 <pbuf_realloc+0x86>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	461a      	mov	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	897b      	ldrh	r3, [r7, #10]
 80081c8:	4413      	add	r3, r2
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	4619      	mov	r1, r3
 80081d0:	f7ff f9fe 	bl	80075d0 <mem_trim>
 80081d4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	897a      	ldrh	r2, [r7, #10]
 80081da:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	895a      	ldrh	r2, [r3, #10]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d004      	beq.n	80081f6 <pbuf_realloc+0xa6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 f8f3 	bl	80083dc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]

}
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop

08008204 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008204:	b480      	push	{r7}
 8008206:	b087      	sub	sp, #28
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	4613      	mov	r3, r2
 8008210:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <pbuf_add_header_impl+0x1c>
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800821e:	d301      	bcc.n	8008224 <pbuf_add_header_impl+0x20>
    return 1;
 8008220:	2301      	movs	r3, #1
 8008222:	e044      	b.n	80082ae <pbuf_add_header_impl+0xaa>
  }
  if (header_size_increment == 0) {
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <pbuf_add_header_impl+0x2a>
    return 0;
 800822a:	2300      	movs	r3, #0
 800822c:	e03f      	b.n	80082ae <pbuf_add_header_impl+0xaa>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	891a      	ldrh	r2, [r3, #8]
 8008236:	8a7b      	ldrh	r3, [r7, #18]
 8008238:	4413      	add	r3, r2
 800823a:	b29b      	uxth	r3, r3
 800823c:	8a7a      	ldrh	r2, [r7, #18]
 800823e:	429a      	cmp	r2, r3
 8008240:	d901      	bls.n	8008246 <pbuf_add_header_impl+0x42>
    return 1;
 8008242:	2301      	movs	r3, #1
 8008244:	e033      	b.n	80082ae <pbuf_add_header_impl+0xaa>
  }

  type_internal = p->type_internal;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	7b1b      	ldrb	r3, [r3, #12]
 800824a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800824c:	8a3b      	ldrh	r3, [r7, #16]
 800824e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00d      	beq.n	8008272 <pbuf_add_header_impl+0x6e>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	425b      	negs	r3, r3
 800825e:	4413      	add	r3, r2
 8008260:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f103 0210 	add.w	r2, r3, #16
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	429a      	cmp	r2, r3
 800826c:	d90d      	bls.n	800828a <pbuf_add_header_impl+0x86>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800826e:	2301      	movs	r3, #1
 8008270:	e01d      	b.n	80082ae <pbuf_add_header_impl+0xaa>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d006      	beq.n	8008286 <pbuf_add_header_impl+0x82>
      payload = (u8_t *)p->payload - header_size_increment;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	425b      	negs	r3, r3
 8008280:	4413      	add	r3, r2
 8008282:	617b      	str	r3, [r7, #20]
 8008284:	e001      	b.n	800828a <pbuf_add_header_impl+0x86>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008286:	2301      	movs	r3, #1
 8008288:	e011      	b.n	80082ae <pbuf_add_header_impl+0xaa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	895a      	ldrh	r2, [r3, #10]
 8008294:	8a7b      	ldrh	r3, [r7, #18]
 8008296:	4413      	add	r3, r2
 8008298:	b29a      	uxth	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	891a      	ldrh	r2, [r3, #8]
 80082a2:	8a7b      	ldrh	r3, [r7, #18]
 80082a4:	4413      	add	r3, r2
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	811a      	strh	r2, [r3, #8]


  return 0;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop

080082bc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f7ff ff9a 	bl	8008204 <pbuf_add_header_impl>
 80082d0:	4603      	mov	r3, r0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop

080082dc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <pbuf_remove_header+0x18>
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082f2:	d301      	bcc.n	80082f8 <pbuf_remove_header+0x1c>
    return 1;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e025      	b.n	8008344 <pbuf_remove_header+0x68>
  }
  if (header_size_decrement == 0) {
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <pbuf_remove_header+0x26>
    return 0;
 80082fe:	2300      	movs	r3, #0
 8008300:	e020      	b.n	8008344 <pbuf_remove_header+0x68>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	895b      	ldrh	r3, [r3, #10]
 800830a:	89fa      	ldrh	r2, [r7, #14]
 800830c:	429a      	cmp	r2, r3
 800830e:	d901      	bls.n	8008314 <pbuf_remove_header+0x38>
 8008310:	2301      	movs	r3, #1
 8008312:	e017      	b.n	8008344 <pbuf_remove_header+0x68>

  /* remember current payload pointer */
  payload = p->payload;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	441a      	add	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	895a      	ldrh	r2, [r3, #10]
 800832a:	89fb      	ldrh	r3, [r7, #14]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	b29a      	uxth	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	891a      	ldrh	r2, [r3, #8]
 8008338:	89fb      	ldrh	r3, [r7, #14]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	b29a      	uxth	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	807b      	strh	r3, [r7, #2]
 800835c:	4613      	mov	r3, r2
 800835e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008360:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008364:	2b00      	cmp	r3, #0
 8008366:	da08      	bge.n	800837a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008368:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800836c:	425b      	negs	r3, r3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	4619      	mov	r1, r3
 8008372:	f7ff ffb3 	bl	80082dc <pbuf_remove_header>
 8008376:	4603      	mov	r3, r0
 8008378:	e008      	b.n	800838c <pbuf_header_impl+0x3c>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800837a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800837e:	787b      	ldrb	r3, [r7, #1]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	4611      	mov	r1, r2
 8008384:	461a      	mov	r2, r3
 8008386:	f7ff ff3d 	bl	8008204 <pbuf_add_header_impl>
 800838a:	4603      	mov	r3, r0
  }
}
 800838c:	4618      	mov	r0, r3
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 0);
 80083a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	4619      	mov	r1, r3
 80083a8:	2200      	movs	r2, #0
 80083aa:	f7ff ffd1 	bl	8008350 <pbuf_header_impl>
 80083ae:	4603      	mov	r3, r0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80083c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	4619      	mov	r1, r3
 80083cc:	2201      	movs	r2, #1
 80083ce:	f7ff ffbf 	bl	8008350 <pbuf_header_impl>
 80083d2:	4603      	mov	r3, r0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <pbuf_free+0x12>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	e038      	b.n	8008460 <pbuf_free+0x84>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80083f2:	e031      	b.n	8008458 <pbuf_free+0x7c>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	7b9b      	ldrb	r3, [r3, #14]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	739a      	strb	r2, [r3, #14]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	7b9b      	ldrb	r3, [r3, #14]
 8008404:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008406:	7dbb      	ldrb	r3, [r7, #22]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d123      	bne.n	8008454 <pbuf_free+0x78>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	7b1b      	ldrb	r3, [r3, #12]
 8008416:	f003 030f 	and.w	r3, r3, #15
 800841a:	73fb      	strb	r3, [r7, #15]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d104      	bne.n	800842c <pbuf_free+0x50>
          memp_free(MEMP_PBUF_POOL, p);
 8008422:	2006      	movs	r0, #6
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	f7ff fac9 	bl	80079bc <memp_free>
 800842a:	e00d      	b.n	8008448 <pbuf_free+0x6c>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d104      	bne.n	800843c <pbuf_free+0x60>
          memp_free(MEMP_PBUF, p);
 8008432:	2005      	movs	r0, #5
 8008434:	6879      	ldr	r1, [r7, #4]
 8008436:	f7ff fac1 	bl	80079bc <memp_free>
 800843a:	e005      	b.n	8008448 <pbuf_free+0x6c>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d102      	bne.n	8008448 <pbuf_free+0x6c>
          mem_free(p);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff f882 	bl	800754c <mem_free>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 8008448:	7dfb      	ldrb	r3, [r7, #23]
 800844a:	3301      	adds	r3, #1
 800844c:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	607b      	str	r3, [r7, #4]
 8008452:	e001      	b.n	8008458 <pbuf_free+0x7c>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008454:	2300      	movs	r3, #0
 8008456:	607b      	str	r3, [r7, #4]
  PERF_START;

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1ca      	bne.n	80083f4 <pbuf_free+0x18>
      p = NULL;
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800845e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008470:	2300      	movs	r3, #0
 8008472:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008474:	e005      	b.n	8008482 <pbuf_clen+0x1a>
    ++len;
 8008476:	89fb      	ldrh	r3, [r7, #14]
 8008478:	3301      	adds	r3, #1
 800847a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	607b      	str	r3, [r7, #4]
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1f6      	bne.n	8008476 <pbuf_clen+0xe>
    ++len;
    p = p->next;
  }
  return len;
 8008488:	89fb      	ldrh	r3, [r7, #14]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop

08008498 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d005      	beq.n	80084b2 <pbuf_ref+0x1a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	7b9b      	ldrb	r3, [r3, #14]
 80084aa:	3301      	adds	r3, #1
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
  }
}
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <pbuf_cat+0x16>
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d100      	bne.n	80084d4 <pbuf_cat+0x18>
 80084d2:	e01c      	b.n	800850e <pbuf_cat+0x52>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	e00a      	b.n	80084f0 <pbuf_cat+0x34>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	891a      	ldrh	r2, [r3, #8]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	891b      	ldrh	r3, [r3, #8]
 80084e2:	4413      	add	r3, r2
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	811a      	strh	r2, [r3, #8]

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	60fb      	str	r3, [r7, #12]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1f0      	bne.n	80084da <pbuf_cat+0x1e>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	891a      	ldrh	r2, [r3, #8]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	891b      	ldrh	r3, [r3, #8]
 8008500:	4413      	add	r3, r2
 8008502:	b29a      	uxth	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008522:	2300      	movs	r3, #0
 8008524:	617b      	str	r3, [r7, #20]
 8008526:	2300      	movs	r3, #0
 8008528:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d008      	beq.n	8008542 <pbuf_copy+0x2a>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <pbuf_copy+0x2a>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	891a      	ldrh	r2, [r3, #8]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	891b      	ldrh	r3, [r3, #8]
 800853e:	429a      	cmp	r2, r3
 8008540:	d201      	bcs.n	8008546 <pbuf_copy+0x2e>
 8008542:	23f0      	movs	r3, #240	; 0xf0
 8008544:	e06d      	b.n	8008622 <pbuf_copy+0x10a>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	895b      	ldrh	r3, [r3, #10]
 800854a:	461a      	mov	r2, r3
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	1ad2      	subs	r2, r2, r3
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	895b      	ldrh	r3, [r3, #10]
 8008554:	4619      	mov	r1, r3
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	1acb      	subs	r3, r1, r3
 800855a:	429a      	cmp	r2, r3
 800855c:	d306      	bcc.n	800856c <pbuf_copy+0x54>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	895b      	ldrh	r3, [r3, #10]
 8008562:	461a      	mov	r2, r3
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	60fb      	str	r3, [r7, #12]
 800856a:	e005      	b.n	8008578 <pbuf_copy+0x60>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	895b      	ldrh	r3, [r3, #10]
 8008570:	461a      	mov	r2, r3
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	18d1      	adds	r1, r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	4413      	add	r3, r2
 8008588:	4608      	mov	r0, r1
 800858a:	4619      	mov	r1, r3
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	f7fd fb8d 	bl	8005cac <memcpy>
    offset_to += len;
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4413      	add	r3, r2
 8008598:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	895b      	ldrh	r3, [r3, #10]
 80085a6:	461a      	mov	r2, r3
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d804      	bhi.n	80085b8 <pbuf_copy+0xa0>
      /* on to next p_from (if any) */
      offset_from = 0;
 80085ae:	2300      	movs	r3, #0
 80085b0:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	895b      	ldrh	r3, [r3, #10]
 80085bc:	461a      	mov	r2, r3
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d10c      	bne.n	80085de <pbuf_copy+0xc6>
      /* on to next p_to (if any) */
      offset_to = 0;
 80085c4:	2300      	movs	r3, #0
 80085c6:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d104      	bne.n	80085de <pbuf_copy+0xc6>
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <pbuf_copy+0xc6>
 80085da:	23f0      	movs	r3, #240	; 0xf0
 80085dc:	e021      	b.n	8008622 <pbuf_copy+0x10a>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00b      	beq.n	80085fc <pbuf_copy+0xe4>
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	895a      	ldrh	r2, [r3, #10]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	891b      	ldrh	r3, [r3, #8]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d105      	bne.n	80085fc <pbuf_copy+0xe4>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <pbuf_copy+0xe4>
 80085f8:	23fa      	movs	r3, #250	; 0xfa
 80085fa:	e012      	b.n	8008622 <pbuf_copy+0x10a>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00b      	beq.n	800861a <pbuf_copy+0x102>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	895a      	ldrh	r2, [r3, #10]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	891b      	ldrh	r3, [r3, #8]
 800860a:	429a      	cmp	r2, r3
 800860c:	d105      	bne.n	800861a <pbuf_copy+0x102>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <pbuf_copy+0x102>
 8008616:	23fa      	movs	r3, #250	; 0xfa
 8008618:	e003      	b.n	8008622 <pbuf_copy+0x10a>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d192      	bne.n	8008546 <pbuf_copy+0x2e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	b25b      	sxtb	r3, r3
}
 8008624:	4618      	mov	r0, r3
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b088      	sub	sp, #32
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	4611      	mov	r1, r2
 8008638:	461a      	mov	r2, r3
 800863a:	460b      	mov	r3, r1
 800863c:	80fb      	strh	r3, [r7, #6]
 800863e:	4613      	mov	r3, r2
 8008640:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <pbuf_copy_partial+0x28>
 8008650:	2300      	movs	r3, #0
 8008652:	e045      	b.n	80086e0 <pbuf_copy_partial+0xb4>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <pbuf_copy_partial+0x32>
 800865a:	2300      	movs	r3, #0
 800865c:	e040      	b.n	80086e0 <pbuf_copy_partial+0xb4>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	61fb      	str	r3, [r7, #28]
 8008662:	e036      	b.n	80086d2 <pbuf_copy_partial+0xa6>
    if ((offset != 0) && (offset >= p->len)) {
 8008664:	88bb      	ldrh	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <pbuf_copy_partial+0x54>
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	895b      	ldrh	r3, [r3, #10]
 800866e:	88ba      	ldrh	r2, [r7, #4]
 8008670:	429a      	cmp	r2, r3
 8008672:	d305      	bcc.n	8008680 <pbuf_copy_partial+0x54>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	895b      	ldrh	r3, [r3, #10]
 8008678:	88ba      	ldrh	r2, [r7, #4]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	80bb      	strh	r3, [r7, #4]
 800867e:	e025      	b.n	80086cc <pbuf_copy_partial+0xa0>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	895a      	ldrh	r2, [r3, #10]
 8008684:	88bb      	ldrh	r3, [r7, #4]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800868a:	8b3a      	ldrh	r2, [r7, #24]
 800868c:	88fb      	ldrh	r3, [r7, #6]
 800868e:	429a      	cmp	r2, r3
 8008690:	d901      	bls.n	8008696 <pbuf_copy_partial+0x6a>
        buf_copy_len = len;
 8008692:	88fb      	ldrh	r3, [r7, #6]
 8008694:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008696:	8b7b      	ldrh	r3, [r7, #26]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	18d1      	adds	r1, r2, r3
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	88bb      	ldrh	r3, [r7, #4]
 80086a2:	441a      	add	r2, r3
 80086a4:	8b3b      	ldrh	r3, [r7, #24]
 80086a6:	4608      	mov	r0, r1
 80086a8:	4611      	mov	r1, r2
 80086aa:	461a      	mov	r2, r3
 80086ac:	f7fd fafe 	bl	8005cac <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80086b0:	8afa      	ldrh	r2, [r7, #22]
 80086b2:	8b3b      	ldrh	r3, [r7, #24]
 80086b4:	4413      	add	r3, r2
 80086b6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80086b8:	8b7a      	ldrh	r2, [r7, #26]
 80086ba:	8b3b      	ldrh	r3, [r7, #24]
 80086bc:	4413      	add	r3, r2
 80086be:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80086c0:	88fa      	ldrh	r2, [r7, #6]
 80086c2:	8b3b      	ldrh	r3, [r7, #24]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	80bb      	strh	r3, [r7, #4]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	61fb      	str	r3, [r7, #28]
 80086d2:	88fb      	ldrh	r3, [r7, #6]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <pbuf_copy_partial+0xb2>
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1c2      	bne.n	8008664 <pbuf_copy_partial+0x38>
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
 80086de:	8afb      	ldrh	r3, [r7, #22]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3720      	adds	r7, #32
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	603a      	str	r2, [r7, #0]
 80086f2:	71fb      	strb	r3, [r7, #7]
 80086f4:	460b      	mov	r3, r1
 80086f6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	891a      	ldrh	r2, [r3, #8]
 80086fc:	79f9      	ldrb	r1, [r7, #7]
 80086fe:	88bb      	ldrh	r3, [r7, #4]
 8008700:	4608      	mov	r0, r1
 8008702:	4611      	mov	r1, r2
 8008704:	461a      	mov	r2, r3
 8008706:	f7ff fc4d 	bl	8007fa4 <pbuf_alloc>
 800870a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <pbuf_clone+0x2e>
    return NULL;
 8008712:	2300      	movs	r3, #0
 8008714:	e006      	b.n	8008724 <pbuf_clone+0x3c>
  }
  err = pbuf_copy(q, p);
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	f7ff fefd 	bl	8008518 <pbuf_copy>
 800871e:	4603      	mov	r3, r0
 8008720:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  return q;
 8008722:	68fb      	ldr	r3, [r7, #12]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <raw_input_local_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	7a1b      	ldrb	r3, [r3, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00b      	beq.n	8008758 <raw_input_local_match+0x2c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	7a1a      	ldrb	r2, [r3, #8]
 8008744:	4b15      	ldr	r3, [pc, #84]	; (800879c <raw_input_local_match+0x70>)
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800874c:	3301      	adds	r3, #1
 800874e:	b2db      	uxtb	r3, r3
raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)
{
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008750:	429a      	cmp	r2, r3
 8008752:	d001      	beq.n	8008758 <raw_input_local_match+0x2c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
    return 0;
 8008754:	2300      	movs	r3, #0
 8008756:	e01b      	b.n	8008790 <raw_input_local_match+0x64>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8008758:	78fb      	ldrb	r3, [r7, #3]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d008      	beq.n	8008770 <raw_input_local_match+0x44>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d003      	beq.n	800876c <raw_input_local_match+0x40>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d110      	bne.n	800878e <raw_input_local_match+0x62>
          return 1;
 800876c:	2301      	movs	r3, #1
 800876e:	e00f      	b.n	8008790 <raw_input_local_match+0x64>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: catch all or exact match */
      if (ip_addr_isany(&pcb->local_ip) ||
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d009      	beq.n	800878a <raw_input_local_match+0x5e>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d005      	beq.n	800878a <raw_input_local_match+0x5e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	4b06      	ldr	r3, [pc, #24]	; (800879c <raw_input_local_match+0x70>)
 8008784:	695b      	ldr	r3, [r3, #20]
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: catch all or exact match */
      if (ip_addr_isany(&pcb->local_ip) ||
 8008786:	429a      	cmp	r2, r3
 8008788:	d101      	bne.n	800878e <raw_input_local_match+0x62>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
        return 1;
 800878a:	2301      	movs	r3, #1
 800878c:	e000      	b.n	8008790 <raw_input_local_match+0x64>
      }
  }

  return 0;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	1ffe94b0 	.word	0x1ffe94b0

080087a0 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 80087a0:	b590      	push	{r4, r7, lr}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
 80087aa:	2300      	movs	r3, #0
 80087ac:	73fb      	strb	r3, [r7, #15]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80087ae:	4b31      	ldr	r3, [pc, #196]	; (8008874 <raw_input+0xd4>)
 80087b0:	695a      	ldr	r2, [r3, #20]
 80087b2:	4b30      	ldr	r3, [pc, #192]	; (8008874 <raw_input+0xd4>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4610      	mov	r0, r2
 80087b8:	4619      	mov	r1, r3
 80087ba:	f7fe fd43 	bl	8007244 <ip4_addr_isbroadcast_u32>
 80087be:	4603      	mov	r3, r0
 80087c0:	73bb      	strb	r3, [r7, #14]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	7a5b      	ldrb	r3, [r3, #9]
 80087c8:	81bb      	strh	r3, [r7, #12]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 80087ca:	2300      	movs	r3, #0
 80087cc:	613b      	str	r3, [r7, #16]
  pcb = raw_pcbs;
 80087ce:	4b2a      	ldr	r3, [pc, #168]	; (8008878 <raw_input+0xd8>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	617b      	str	r3, [r7, #20]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 80087d4:	e045      	b.n	8008862 <raw_input+0xc2>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	7c1b      	ldrb	r3, [r3, #16]
 80087da:	461a      	mov	r2, r3
 80087dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d139      	bne.n	8008858 <raw_input+0xb8>
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	6978      	ldr	r0, [r7, #20]
 80087e8:	4619      	mov	r1, r3
 80087ea:	f7ff ff9f 	bl	800872c <raw_input_local_match>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d031      	beq.n	8008858 <raw_input+0xb8>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	7c5b      	ldrb	r3, [r3, #17]
 80087f8:	f003 0301 	and.w	r3, r3, #1
  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	4b1b      	ldr	r3, [pc, #108]	; (8008874 <raw_input+0xd4>)
 8008806:	691b      	ldr	r3, [r3, #16]
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8008808:	429a      	cmp	r2, r3
 800880a:	d125      	bne.n	8008858 <raw_input+0xb8>
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
      /* receive callback function available? */
      if (pcb->recv != NULL) {
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d021      	beq.n	8008858 <raw_input+0xb8>
        u8_t eaten;
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
 8008814:	2302      	movs	r3, #2
 8008816:	73fb      	strb	r3, [r7, #15]
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	695c      	ldr	r4, [r3, #20]
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	4618      	mov	r0, r3
 8008822:	6979      	ldr	r1, [r7, #20]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	4b15      	ldr	r3, [pc, #84]	; (800887c <raw_input+0xdc>)
 8008828:	47a0      	blx	r4
 800882a:	4603      	mov	r3, r0
 800882c:	72fb      	strb	r3, [r7, #11]
        if (eaten != 0) {
 800882e:	7afb      	ldrb	r3, [r7, #11]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d011      	beq.n	8008858 <raw_input+0xb8>
          /* receive function ate the packet */
          p = NULL;
 8008834:	2300      	movs	r3, #0
 8008836:	607b      	str	r3, [r7, #4]
          if (prev != NULL) {
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <raw_input+0xb4>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
            prev->next = pcb->next;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	60da      	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
 8008846:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <raw_input+0xd8>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	60da      	str	r2, [r3, #12]
            raw_pcbs = pcb;
 800884e:	4a0a      	ldr	r2, [pc, #40]	; (8008878 <raw_input+0xd8>)
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	6013      	str	r3, [r2, #0]
          }
          return RAW_INPUT_EATEN;
 8008854:	2301      	movs	r3, #1
 8008856:	e008      	b.n	800886a <raw_input+0xca>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	613b      	str	r3, [r7, #16]
    pcb = pcb->next;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	617b      	str	r3, [r7, #20]

  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1b6      	bne.n	80087d6 <raw_input+0x36>
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
  }
  return ret;
 8008868:	7bfb      	ldrb	r3, [r7, #15]
}
 800886a:	4618      	mov	r0, r3
 800886c:	371c      	adds	r7, #28
 800886e:	46bd      	mov	sp, r7
 8008870:	bd90      	pop	{r4, r7, pc}
 8008872:	bf00      	nop
 8008874:	1ffe94b0 	.word	0x1ffe94b0
 8008878:	1ffe9258 	.word	0x1ffe9258
 800887c:	1ffe94c0 	.word	0x1ffe94c0

08008880 <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d01e      	beq.n	80088ce <raw_netif_ip_addr_changed+0x4e>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d01a      	beq.n	80088ce <raw_netif_ip_addr_changed+0x4e>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d017      	beq.n	80088ce <raw_netif_ip_addr_changed+0x4e>
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d013      	beq.n	80088ce <raw_netif_ip_addr_changed+0x4e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 80088a6:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <raw_netif_ip_addr_changed+0x58>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	e00c      	b.n	80088c8 <raw_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d103      	bne.n	80088c2 <raw_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	601a      	str	r2, [r3, #0]
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	60fb      	str	r3, [r7, #12]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1ef      	bne.n	80088ae <raw_netif_ip_addr_changed+0x2e>
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
      }
    }
  }
}
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	1ffe9258 	.word	0x1ffe9258

080088dc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80088e0:	f006 fdea 	bl	800f4b8 <rand>
 80088e4:	4603      	mov	r3, r0
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	4b01      	ldr	r3, [pc, #4]	; (80088fc <tcp_init+0x20>)
 80088f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	1ffe8864 	.word	0x1ffe8864

08008900 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008908:	2001      	movs	r0, #1
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	f7ff f856 	bl	80079bc <memp_free>
}
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop

08008918 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008920:	2002      	movs	r0, #2
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	f7ff f84a 	bl	80079bc <memp_free>
}
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop

08008930 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008934:	f000 fef8 	bl	8009728 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008938:	4b07      	ldr	r3, [pc, #28]	; (8008958 <tcp_tmr+0x28>)
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	3301      	adds	r3, #1
 800893e:	b2da      	uxtb	r2, r3
 8008940:	4b05      	ldr	r3, [pc, #20]	; (8008958 <tcp_tmr+0x28>)
 8008942:	701a      	strb	r2, [r3, #0]
 8008944:	4b04      	ldr	r3, [pc, #16]	; (8008958 <tcp_tmr+0x28>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b00      	cmp	r3, #0
 800894e:	d001      	beq.n	8008954 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008950:	f000 fc42 	bl	80091d8 <tcp_slowtmr>
  }
}
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	1ffe925c 	.word	0x1ffe925c

0800895c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	60fb      	str	r3, [r7, #12]
 800896a:	e00a      	b.n	8008982 <tcp_remove_listener+0x26>
    if (pcb->listener == lpcb) {
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	429a      	cmp	r2, r3
 8008974:	d102      	bne.n	800897c <tcp_remove_listener+0x20>
      pcb->listener = NULL;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	67da      	str	r2, [r3, #124]	; 0x7c
{
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	60fb      	str	r3, [r7, #12]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1f1      	bne.n	800896c <tcp_remove_listener+0x10>
    if (pcb->listener == lpcb) {
      pcb->listener = NULL;
    }
  }
}
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop

08008994 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800899c:	2301      	movs	r3, #1
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	e00b      	b.n	80089ba <tcp_listen_closed+0x26>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80089a2:	4a09      	ldr	r2, [pc, #36]	; (80089c8 <tcp_listen_closed+0x34>)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4618      	mov	r0, r3
 80089ae:	6879      	ldr	r1, [r7, #4]
 80089b0:	f7ff ffd4 	bl	800895c <tcp_remove_listener>
{
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	3301      	adds	r3, #1
 80089b8:	60fb      	str	r3, [r7, #12]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d9f0      	bls.n	80089a2 <tcp_listen_closed+0xe>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	08014380 	.word	0x08014380

080089cc <tcp_backlog_accepted>:
 *
 * @param pcb the connection pcb which is now fully accepted (or closed/aborted)
 */
void
tcp_backlog_accepted(struct tcp_pcb *pcb)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb->flags & TF_BACKLOGPEND) != 0) {
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	8b5b      	ldrh	r3, [r3, #26]
 80089d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d010      	beq.n	8008a02 <tcp_backlog_accepted+0x36>
    if (pcb->listener != NULL) {
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00c      	beq.n	8008a02 <tcp_backlog_accepted+0x36>
      LWIP_ASSERT("accepts_pending != 0", pcb->listener->accepts_pending != 0);
      pcb->listener->accepts_pending--;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ec:	7f5a      	ldrb	r2, [r3, #29]
 80089ee:	3a01      	subs	r2, #1
 80089f0:	b2d2      	uxtb	r2, r2
 80089f2:	775a      	strb	r2, [r3, #29]
      tcp_clear_flags(pcb, TF_BACKLOGPEND);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	8b5b      	ldrh	r3, [r3, #26]
 80089f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a0e:	b089      	sub	sp, #36	; 0x24
 8008a10:	af04      	add	r7, sp, #16
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008a18:	78fb      	ldrb	r3, [r7, #3]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d059      	beq.n	8008ad2 <tcp_close_shutdown+0xc6>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	7d1b      	ldrb	r3, [r3, #20]
 8008a22:	2b04      	cmp	r3, #4
 8008a24:	d003      	beq.n	8008a2e <tcp_close_shutdown+0x22>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	7d1b      	ldrb	r3, [r3, #20]
 8008a2a:	2b07      	cmp	r3, #7
 8008a2c:	d151      	bne.n	8008ad2 <tcp_close_shutdown+0xc6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d104      	bne.n	8008a40 <tcp_close_shutdown+0x34>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a3a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008a3e:	d048      	beq.n	8008ad2 <tcp_close_shutdown+0xc6>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8008a48:	687c      	ldr	r4, [r7, #4]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	1d19      	adds	r1, r3, #4
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	8ada      	ldrh	r2, [r3, #22]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	8b1b      	ldrh	r3, [r3, #24]
 8008a56:	9100      	str	r1, [sp, #0]
 8008a58:	9201      	str	r2, [sp, #4]
 8008a5a:	9302      	str	r3, [sp, #8]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	4631      	mov	r1, r6
 8008a60:	462a      	mov	r2, r5
 8008a62:	4623      	mov	r3, r4
 8008a64:	f004 fd58 	bl	800d518 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f001 f947 	bl	8009cfc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008a6e:	4b42      	ldr	r3, [pc, #264]	; (8008b78 <tcp_close_shutdown+0x16c>)
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d105      	bne.n	8008a84 <tcp_close_shutdown+0x78>
 8008a78:	4b3f      	ldr	r3, [pc, #252]	; (8008b78 <tcp_close_shutdown+0x16c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	4a3e      	ldr	r2, [pc, #248]	; (8008b78 <tcp_close_shutdown+0x16c>)
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	e013      	b.n	8008aac <tcp_close_shutdown+0xa0>
 8008a84:	4b3c      	ldr	r3, [pc, #240]	; (8008b78 <tcp_close_shutdown+0x16c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	60fb      	str	r3, [r7, #12]
 8008a8a:	e00c      	b.n	8008aa6 <tcp_close_shutdown+0x9a>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	68da      	ldr	r2, [r3, #12]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d104      	bne.n	8008aa0 <tcp_close_shutdown+0x94>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68da      	ldr	r2, [r3, #12]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	60da      	str	r2, [r3, #12]
 8008a9e:	e005      	b.n	8008aac <tcp_close_shutdown+0xa0>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1ef      	bne.n	8008a8c <tcp_close_shutdown+0x80>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	60da      	str	r2, [r3, #12]
 8008ab2:	4b32      	ldr	r3, [pc, #200]	; (8008b7c <tcp_close_shutdown+0x170>)
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008ab8:	4b31      	ldr	r3, [pc, #196]	; (8008b80 <tcp_close_shutdown+0x174>)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d102      	bne.n	8008ac8 <tcp_close_shutdown+0xbc>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008ac2:	f003 fb19 	bl	800c0f8 <tcp_trigger_input_pcb_close>
 8008ac6:	e002      	b.n	8008ace <tcp_close_shutdown+0xc2>
      } else {
        tcp_free(pcb);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7ff ff19 	bl	8008900 <tcp_free>
      }
      return ERR_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e04d      	b.n	8008b6e <tcp_close_shutdown+0x162>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	7d1b      	ldrb	r3, [r3, #20]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d02d      	beq.n	8008b36 <tcp_close_shutdown+0x12a>
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d036      	beq.n	8008b4c <tcp_close_shutdown+0x140>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d13f      	bne.n	8008b62 <tcp_close_shutdown+0x156>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	8adb      	ldrh	r3, [r3, #22]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d021      	beq.n	8008b2e <tcp_close_shutdown+0x122>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008aea:	4b26      	ldr	r3, [pc, #152]	; (8008b84 <tcp_close_shutdown+0x178>)
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d105      	bne.n	8008b00 <tcp_close_shutdown+0xf4>
 8008af4:	4b23      	ldr	r3, [pc, #140]	; (8008b84 <tcp_close_shutdown+0x178>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	4a22      	ldr	r2, [pc, #136]	; (8008b84 <tcp_close_shutdown+0x178>)
 8008afc:	6013      	str	r3, [r2, #0]
 8008afe:	e013      	b.n	8008b28 <tcp_close_shutdown+0x11c>
 8008b00:	4b20      	ldr	r3, [pc, #128]	; (8008b84 <tcp_close_shutdown+0x178>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	60bb      	str	r3, [r7, #8]
 8008b06:	e00c      	b.n	8008b22 <tcp_close_shutdown+0x116>
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	68da      	ldr	r2, [r3, #12]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d104      	bne.n	8008b1c <tcp_close_shutdown+0x110>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	60da      	str	r2, [r3, #12]
 8008b1a:	e005      	b.n	8008b28 <tcp_close_shutdown+0x11c>
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	60bb      	str	r3, [r7, #8]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1ef      	bne.n	8008b08 <tcp_close_shutdown+0xfc>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7ff fee6 	bl	8008900 <tcp_free>
      break;
 8008b34:	e01a      	b.n	8008b6c <tcp_close_shutdown+0x160>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7ff ff2c 	bl	8008994 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008b3c:	4812      	ldr	r0, [pc, #72]	; (8008b88 <tcp_close_shutdown+0x17c>)
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	f001 f922 	bl	8009d88 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7ff fee7 	bl	8008918 <tcp_free_listen>
      break;
 8008b4a:	e00f      	b.n	8008b6c <tcp_close_shutdown+0x160>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008b4c:	480a      	ldr	r0, [pc, #40]	; (8008b78 <tcp_close_shutdown+0x16c>)
 8008b4e:	6879      	ldr	r1, [r7, #4]
 8008b50:	f001 f91a 	bl	8009d88 <tcp_pcb_remove>
 8008b54:	4b09      	ldr	r3, [pc, #36]	; (8008b7c <tcp_close_shutdown+0x170>)
 8008b56:	2201      	movs	r2, #1
 8008b58:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7ff fed0 	bl	8008900 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008b60:	e004      	b.n	8008b6c <tcp_close_shutdown+0x160>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f812 	bl	8008b8c <tcp_close_shutdown_fin>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	e000      	b.n	8008b6e <tcp_close_shutdown+0x162>
  }
  return ERR_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	b25b      	sxtb	r3, r3
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b78:	1fff0284 	.word	0x1fff0284
 8008b7c:	1fff0280 	.word	0x1fff0280
 8008b80:	1fff0298 	.word	0x1fff0298
 8008b84:	1fff0290 	.word	0x1fff0290
 8008b88:	1fff028c 	.word	0x1fff028c

08008b8c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);

  switch (pcb->state) {
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	7d1b      	ldrb	r3, [r3, #20]
 8008b98:	2b04      	cmp	r3, #4
 8008b9a:	d014      	beq.n	8008bc6 <tcp_close_shutdown_fin+0x3a>
 8008b9c:	2b07      	cmp	r3, #7
 8008b9e:	d020      	beq.n	8008be2 <tcp_close_shutdown_fin+0x56>
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	d12c      	bne.n	8008bfe <tcp_close_shutdown_fin+0x72>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f003 ff6f 	bl	800ca88 <tcp_send_fin>
 8008baa:	4603      	mov	r3, r0
 8008bac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d106      	bne.n	8008bc4 <tcp_close_shutdown_fin+0x38>
        tcp_backlog_accepted(pcb);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f7ff ff08 	bl	80089cc <tcp_backlog_accepted>
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2205      	movs	r2, #5
 8008bc0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008bc2:	e01e      	b.n	8008c02 <tcp_close_shutdown_fin+0x76>
 8008bc4:	e01d      	b.n	8008c02 <tcp_close_shutdown_fin+0x76>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f003 ff5e 	bl	800ca88 <tcp_send_fin>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d103      	bne.n	8008be0 <tcp_close_shutdown_fin+0x54>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2205      	movs	r2, #5
 8008bdc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008bde:	e010      	b.n	8008c02 <tcp_close_shutdown_fin+0x76>
 8008be0:	e00f      	b.n	8008c02 <tcp_close_shutdown_fin+0x76>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f003 ff50 	bl	800ca88 <tcp_send_fin>
 8008be8:	4603      	mov	r3, r0
 8008bea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d103      	bne.n	8008bfc <tcp_close_shutdown_fin+0x70>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2209      	movs	r2, #9
 8008bf8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008bfa:	e002      	b.n	8008c02 <tcp_close_shutdown_fin+0x76>
 8008bfc:	e001      	b.n	8008c02 <tcp_close_shutdown_fin+0x76>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	e016      	b.n	8008c30 <tcp_close_shutdown_fin+0xa4>
  }

  if (err == ERR_OK) {
 8008c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d103      	bne.n	8008c12 <tcp_close_shutdown_fin+0x86>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f004 f80c 	bl	800cc28 <tcp_output>
 8008c10:	e00d      	b.n	8008c2e <tcp_close_shutdown_fin+0xa2>
  } else if (err == ERR_MEM) {
 8008c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1a:	d108      	bne.n	8008c2e <tcp_close_shutdown_fin+0xa2>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	8b5b      	ldrh	r3, [r3, #26]
 8008c20:	f043 0308 	orr.w	r3, r3, #8
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	e000      	b.n	8008c30 <tcp_close_shutdown_fin+0xa4>
  }
  return err;
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
 8008c30:	b25b      	sxtb	r3, r3
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop

08008c3c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <tcp_close+0x12>
 8008c4a:	23f0      	movs	r3, #240	; 0xf0
 8008c4c:	e00f      	b.n	8008c6e <tcp_close+0x32>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	7d1b      	ldrb	r3, [r3, #20]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d006      	beq.n	8008c64 <tcp_close+0x28>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	8b5b      	ldrh	r3, [r3, #26]
 8008c5a:	f043 0310 	orr.w	r3, r3, #16
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	2101      	movs	r1, #1
 8008c68:	f7ff fed0 	bl	8008a0c <tcp_close_shutdown>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	b25b      	sxtb	r3, r3
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008c78:	b590      	push	{r4, r7, lr}
 8008c7a:	b08f      	sub	sp, #60	; 0x3c
 8008c7c:	af04      	add	r7, sp, #16
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d100      	bne.n	8008c8a <tcp_abandon+0x12>
 8008c88:	e091      	b.n	8008dae <tcp_abandon+0x136>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	7d1b      	ldrb	r3, [r3, #20]
 8008c8e:	2b0a      	cmp	r3, #10
 8008c90:	d107      	bne.n	8008ca2 <tcp_abandon+0x2a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008c92:	4848      	ldr	r0, [pc, #288]	; (8008db4 <tcp_abandon+0x13c>)
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	f001 f877 	bl	8009d88 <tcp_pcb_remove>
    tcp_free(pcb);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7ff fe30 	bl	8008900 <tcp_free>
 8008ca0:	e085      	b.n	8008dae <tcp_abandon+0x136>
  } else {
    int send_rst = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cbc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	7d1b      	ldrb	r3, [r3, #20]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d126      	bne.n	8008d1a <tcp_abandon+0xa2>
      if (pcb->local_port != 0) {
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	8adb      	ldrh	r3, [r3, #22]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d02e      	beq.n	8008d32 <tcp_abandon+0xba>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008cd4:	4b38      	ldr	r3, [pc, #224]	; (8008db8 <tcp_abandon+0x140>)
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d105      	bne.n	8008cea <tcp_abandon+0x72>
 8008cde:	4b36      	ldr	r3, [pc, #216]	; (8008db8 <tcp_abandon+0x140>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	4a34      	ldr	r2, [pc, #208]	; (8008db8 <tcp_abandon+0x140>)
 8008ce6:	6013      	str	r3, [r2, #0]
 8008ce8:	e013      	b.n	8008d12 <tcp_abandon+0x9a>
 8008cea:	4b33      	ldr	r3, [pc, #204]	; (8008db8 <tcp_abandon+0x140>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	61fb      	str	r3, [r7, #28]
 8008cf0:	e00c      	b.n	8008d0c <tcp_abandon+0x94>
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	68da      	ldr	r2, [r3, #12]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d104      	bne.n	8008d06 <tcp_abandon+0x8e>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	68da      	ldr	r2, [r3, #12]
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	60da      	str	r2, [r3, #12]
 8008d04:	e005      	b.n	8008d12 <tcp_abandon+0x9a>
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	61fb      	str	r3, [r7, #28]
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1ef      	bne.n	8008cf2 <tcp_abandon+0x7a>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	60da      	str	r2, [r3, #12]
 8008d18:	e00b      	b.n	8008d32 <tcp_abandon+0xba>
      }
    } else {
      send_rst = reset;
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	8adb      	ldrh	r3, [r3, #22]
 8008d22:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008d24:	4825      	ldr	r0, [pc, #148]	; (8008dbc <tcp_abandon+0x144>)
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	f001 f82e 	bl	8009d88 <tcp_pcb_remove>
 8008d2c:	4b24      	ldr	r3, [pc, #144]	; (8008dc0 <tcp_abandon+0x148>)
 8008d2e:	2201      	movs	r2, #1
 8008d30:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d004      	beq.n	8008d44 <tcp_abandon+0xcc>
      tcp_segs_free(pcb->unacked);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 fdc2 	bl	80098c8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d004      	beq.n	8008d56 <tcp_abandon+0xde>
      tcp_segs_free(pcb->unsent);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d50:	4618      	mov	r0, r3
 8008d52:	f000 fdb9 	bl	80098c8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d004      	beq.n	8008d68 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->ooseq);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 fdb0 	bl	80098c8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7ff fe2f 	bl	80089cc <tcp_backlog_accepted>
    if (send_rst) {
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00e      	beq.n	8008d92 <tcp_abandon+0x11a>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008d74:	687c      	ldr	r4, [r7, #4]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	1d1a      	adds	r2, r3, #4
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	8b1b      	ldrh	r3, [r3, #24]
 8008d7e:	9200      	str	r2, [sp, #0]
 8008d80:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008d82:	9201      	str	r2, [sp, #4]
 8008d84:	9302      	str	r3, [sp, #8]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	69b9      	ldr	r1, [r7, #24]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	4623      	mov	r3, r4
 8008d8e:	f004 fbc3 	bl	800d518 <tcp_rst>
    }
    last_state = pcb->state;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	7d1b      	ldrb	r3, [r3, #20]
 8008d96:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7ff fdb1 	bl	8008900 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d004      	beq.n	8008dae <tcp_abandon+0x136>
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f06f 010c 	mvn.w	r1, #12
 8008dac:	4798      	blx	r3
  }
}
 8008dae:	372c      	adds	r7, #44	; 0x2c
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd90      	pop	{r4, r7, pc}
 8008db4:	1fff0294 	.word	0x1fff0294
 8008db8:	1fff0290 	.word	0x1fff0290
 8008dbc:	1fff0284 	.word	0x1fff0284
 8008dc0:	1fff0280 	.word	0x1fff0280

08008dc4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	2101      	movs	r1, #1
 8008dd0:	f7ff ff52 	bl	8008c78 <tcp_abandon>
}
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop

08008ddc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b088      	sub	sp, #32
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	4613      	mov	r3, r2
 8008de8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008dea:	2304      	movs	r3, #4
 8008dec:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8008df4:	4b36      	ldr	r3, [pc, #216]	; (8008ed0 <tcp_bind+0xf4>)
 8008df6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <tcp_bind+0x26>
 8008dfe:	23f0      	movs	r3, #240	; 0xf0
 8008e00:	e060      	b.n	8008ec4 <tcp_bind+0xe8>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	7d1b      	ldrb	r3, [r3, #20]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <tcp_bind+0x32>
 8008e0a:	23fa      	movs	r3, #250	; 0xfa
 8008e0c:	e05a      	b.n	8008ec4 <tcp_bind+0xe8>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8008e0e:	88fb      	ldrh	r3, [r7, #6]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d108      	bne.n	8008e26 <tcp_bind+0x4a>
    port = tcp_new_port();
 8008e14:	f000 f998 	bl	8009148 <tcp_new_port>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008e1c:	88fb      	ldrh	r3, [r7, #6]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d133      	bne.n	8008e8a <tcp_bind+0xae>
      return ERR_BUF;
 8008e22:	23fe      	movs	r3, #254	; 0xfe
 8008e24:	e04e      	b.n	8008ec4 <tcp_bind+0xe8>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8008e26:	2300      	movs	r3, #0
 8008e28:	61fb      	str	r3, [r7, #28]
 8008e2a:	e02a      	b.n	8008e82 <tcp_bind+0xa6>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008e2c:	4a29      	ldr	r2, [pc, #164]	; (8008ed4 <tcp_bind+0xf8>)
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	61bb      	str	r3, [r7, #24]
 8008e38:	e01d      	b.n	8008e76 <tcp_bind+0x9a>
        if (cpcb->local_port == port) {
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	8adb      	ldrh	r3, [r3, #22]
 8008e3e:	88fa      	ldrh	r2, [r7, #6]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d115      	bne.n	8008e70 <tcp_bind+0x94>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8008e44:	69bb      	ldr	r3, [r7, #24]
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d010      	beq.n	8008e6c <tcp_bind+0x90>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00c      	beq.n	8008e6c <tcp_bind+0x90>
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d009      	beq.n	8008e6c <tcp_bind+0x90>
                 ip_addr_isany(ipaddr) ||
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d005      	beq.n	8008e6c <tcp_bind+0x90>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	681b      	ldr	r3, [r3, #0]
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d101      	bne.n	8008e70 <tcp_bind+0x94>
                (ip_addr_isany(&cpcb->local_ip) ||
                 ip_addr_isany(ipaddr) ||
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
              return ERR_USE;
 8008e6c:	23f8      	movs	r3, #248	; 0xf8
 8008e6e:	e029      	b.n	8008ec4 <tcp_bind+0xe8>
      return ERR_BUF;
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	61bb      	str	r3, [r7, #24]
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1de      	bne.n	8008e3a <tcp_bind+0x5e>
    if (port == 0) {
      return ERR_BUF;
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	61fb      	str	r3, [r7, #28]
 8008e82:	69fa      	ldr	r2, [r7, #28]
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	dbd0      	blt.n	8008e2c <tcp_bind+0x50>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00c      	beq.n	8008eaa <tcp_bind+0xce>
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d008      	beq.n	8008eaa <tcp_bind+0xce>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <tcp_bind+0xc8>
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	e000      	b.n	8008ea6 <tcp_bind+0xca>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	88fa      	ldrh	r2, [r7, #6]
 8008eae:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008eb0:	4b09      	ldr	r3, [pc, #36]	; (8008ed8 <tcp_bind+0xfc>)
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	60da      	str	r2, [r3, #12]
 8008eb8:	4a07      	ldr	r2, [pc, #28]	; (8008ed8 <tcp_bind+0xfc>)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	f004 fca1 	bl	800d804 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	b25b      	sxtb	r3, r3
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3720      	adds	r7, #32
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	080142f4 	.word	0x080142f4
 8008ed4:	08014380 	.word	0x08014380
 8008ed8:	1fff0290 	.word	0x1fff0290

08008edc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);

  tcp_abort(pcb);
 8008eea:	68b8      	ldr	r0, [r7, #8]
 8008eec:	f7ff ff6a 	bl	8008dc4 <tcp_abort>

  return ERR_ABRT;
 8008ef0:	23f3      	movs	r3, #243	; 0xf3
 8008ef2:	b25b      	sxtb	r3, r3
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8008f08:	78fb      	ldrb	r3, [r7, #3]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f000 f806 	bl	8008f20 <tcp_listen_with_backlog_and_err>
 8008f14:	4603      	mov	r3, r0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop

08008f20 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b088      	sub	sp, #32
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d102      	bne.n	8008f3e <tcp_listen_with_backlog_and_err+0x1e>
 8008f38:	23f0      	movs	r3, #240	; 0xf0
 8008f3a:	76fb      	strb	r3, [r7, #27]
 8008f3c:	e07d      	b.n	800903a <tcp_listen_with_backlog_and_err+0x11a>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	7d1b      	ldrb	r3, [r3, #20]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d002      	beq.n	8008f4c <tcp_listen_with_backlog_and_err+0x2c>
 8008f46:	23f1      	movs	r3, #241	; 0xf1
 8008f48:	76fb      	strb	r3, [r7, #27]
 8008f4a:	e076      	b.n	800903a <tcp_listen_with_backlog_and_err+0x11a>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	7d1b      	ldrb	r3, [r3, #20]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d104      	bne.n	8008f5e <tcp_listen_with_backlog_and_err+0x3e>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8008f58:	23f7      	movs	r3, #247	; 0xf7
 8008f5a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008f5c:	e06d      	b.n	800903a <tcp_listen_with_backlog_and_err+0x11a>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008f5e:	2002      	movs	r0, #2
 8008f60:	f7fe fcfc 	bl	800795c <memp_malloc>
 8008f64:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d102      	bne.n	8008f72 <tcp_listen_with_backlog_and_err+0x52>
    res = ERR_MEM;
 8008f6c:	23ff      	movs	r3, #255	; 0xff
 8008f6e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008f70:	e063      	b.n	800903a <tcp_listen_with_backlog_and_err+0x11a>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	691a      	ldr	r2, [r3, #16]
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	8ada      	ldrh	r2, [r3, #22]
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	2201      	movs	r2, #1
 8008f86:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	7d5a      	ldrb	r2, [r3, #21]
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	7a5a      	ldrb	r2, [r3, #9]
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	7ada      	ldrb	r2, [r3, #11]
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	7a9a      	ldrb	r2, [r3, #10]
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	8adb      	ldrh	r3, [r3, #22]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d021      	beq.n	8009002 <tcp_listen_with_backlog_and_err+0xe2>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008fbe:	4b24      	ldr	r3, [pc, #144]	; (8009050 <tcp_listen_with_backlog_and_err+0x130>)
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d105      	bne.n	8008fd4 <tcp_listen_with_backlog_and_err+0xb4>
 8008fc8:	4b21      	ldr	r3, [pc, #132]	; (8009050 <tcp_listen_with_backlog_and_err+0x130>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	4a20      	ldr	r2, [pc, #128]	; (8009050 <tcp_listen_with_backlog_and_err+0x130>)
 8008fd0:	6013      	str	r3, [r2, #0]
 8008fd2:	e013      	b.n	8008ffc <tcp_listen_with_backlog_and_err+0xdc>
 8008fd4:	4b1e      	ldr	r3, [pc, #120]	; (8009050 <tcp_listen_with_backlog_and_err+0x130>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	617b      	str	r3, [r7, #20]
 8008fda:	e00c      	b.n	8008ff6 <tcp_listen_with_backlog_and_err+0xd6>
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	68da      	ldr	r2, [r3, #12]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d104      	bne.n	8008ff0 <tcp_listen_with_backlog_and_err+0xd0>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	68da      	ldr	r2, [r3, #12]
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	60da      	str	r2, [r3, #12]
 8008fee:	e005      	b.n	8008ffc <tcp_listen_with_backlog_and_err+0xdc>
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	617b      	str	r3, [r7, #20]
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1ef      	bne.n	8008fdc <tcp_listen_with_backlog_and_err+0xbc>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f7ff fc7c 	bl	8008900 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	4a12      	ldr	r2, [pc, #72]	; (8009054 <tcp_listen_with_backlog_and_err+0x134>)
 800900c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	2200      	movs	r2, #0
 8009012:	775a      	strb	r2, [r3, #29]
  tcp_backlog_set(lpcb, backlog);
 8009014:	7afb      	ldrb	r3, [r7, #11]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <tcp_listen_with_backlog_and_err+0xfe>
 800901a:	7afa      	ldrb	r2, [r7, #11]
 800901c:	e000      	b.n	8009020 <tcp_listen_with_backlog_and_err+0x100>
 800901e:	2201      	movs	r2, #1
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	771a      	strb	r2, [r3, #28]
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009024:	4b0c      	ldr	r3, [pc, #48]	; (8009058 <tcp_listen_with_backlog_and_err+0x138>)
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	60da      	str	r2, [r3, #12]
 800902c:	4a0a      	ldr	r2, [pc, #40]	; (8009058 <tcp_listen_with_backlog_and_err+0x138>)
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	6013      	str	r3, [r2, #0]
 8009032:	f004 fbe7 	bl	800d804 <tcp_timer_needed>
  res = ERR_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d002      	beq.n	8009046 <tcp_listen_with_backlog_and_err+0x126>
    *err = res;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	7efa      	ldrb	r2, [r7, #27]
 8009044:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8009046:	69fb      	ldr	r3, [r7, #28]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3720      	adds	r7, #32
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	1fff0290 	.word	0x1fff0290
 8009054:	08008edd 	.word	0x08008edd
 8009058:	1fff028c 	.word	0x1fff028c

0800905c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800906c:	4413      	add	r3, r2
 800906e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009078:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800907c:	d802      	bhi.n	8009084 <tcp_update_rcv_ann_wnd+0x28>
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009082:	e001      	b.n	8009088 <tcp_update_rcv_ann_wnd+0x2c>
 8009084:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009088:	4413      	add	r3, r2
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	2b00      	cmp	r3, #0
 8009090:	db08      	blt.n	80090a4 <tcp_update_rcv_ann_wnd+0x48>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	e015      	b.n	80090d0 <tcp_update_rcv_ann_wnd+0x74>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	dd03      	ble.n	80090ba <tcp_update_rcv_ann_wnd+0x5e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80090b8:	e009      	b.n	80090ce <tcp_update_rcv_ann_wnd+0x72>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80090ce:	2300      	movs	r3, #0
  }
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3714      	adds	r7, #20
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d100      	bne.n	80090f0 <tcp_recved+0x14>
 80090ee:	e027      	b.n	8009140 <tcp_recved+0x64>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80090f4:	887b      	ldrh	r3, [r7, #2]
 80090f6:	4413      	add	r3, r2
 80090f8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80090fa:	89fb      	ldrh	r3, [r7, #14]
 80090fc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009100:	d804      	bhi.n	800910c <tcp_recved+0x30>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009106:	89fa      	ldrh	r2, [r7, #14]
 8009108:	429a      	cmp	r2, r3
 800910a:	d204      	bcs.n	8009116 <tcp_recved+0x3a>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009112:	851a      	strh	r2, [r3, #40]	; 0x28
 8009114:	e002      	b.n	800911c <tcp_recved+0x40>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	89fa      	ldrh	r2, [r7, #14]
 800911a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f7ff ff9d 	bl	800905c <tcp_update_rcv_ann_wnd>
 8009122:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800912a:	d309      	bcc.n	8009140 <tcp_recved+0x64>
    tcp_ack_now(pcb);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	8b5b      	ldrh	r3, [r3, #26]
 8009130:	f043 0302 	orr.w	r3, r3, #2
 8009134:	b29a      	uxth	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f003 fd74 	bl	800cc28 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop

08009148 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8009152:	4b1f      	ldr	r3, [pc, #124]	; (80091d0 <tcp_new_port+0x88>)
 8009154:	881b      	ldrh	r3, [r3, #0]
 8009156:	3301      	adds	r3, #1
 8009158:	b29a      	uxth	r2, r3
 800915a:	4b1d      	ldr	r3, [pc, #116]	; (80091d0 <tcp_new_port+0x88>)
 800915c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800915e:	4b1c      	ldr	r3, [pc, #112]	; (80091d0 <tcp_new_port+0x88>)
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009166:	4293      	cmp	r3, r2
 8009168:	d103      	bne.n	8009172 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800916a:	4b19      	ldr	r3, [pc, #100]	; (80091d0 <tcp_new_port+0x88>)
 800916c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009170:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009172:	2300      	movs	r3, #0
 8009174:	71fb      	strb	r3, [r7, #7]
 8009176:	e01f      	b.n	80091b8 <tcp_new_port+0x70>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009178:	79fb      	ldrb	r3, [r7, #7]
 800917a:	4a16      	ldr	r2, [pc, #88]	; (80091d4 <tcp_new_port+0x8c>)
 800917c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	603b      	str	r3, [r7, #0]
 8009184:	e012      	b.n	80091ac <tcp_new_port+0x64>
      if (pcb->local_port == tcp_port) {
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	8ada      	ldrh	r2, [r3, #22]
 800918a:	4b11      	ldr	r3, [pc, #68]	; (80091d0 <tcp_new_port+0x88>)
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	429a      	cmp	r2, r3
 8009190:	d109      	bne.n	80091a6 <tcp_new_port+0x5e>
        n++;
 8009192:	88bb      	ldrh	r3, [r7, #4]
 8009194:	3301      	adds	r3, #1
 8009196:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009198:	88bb      	ldrh	r3, [r7, #4]
 800919a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800919e:	d301      	bcc.n	80091a4 <tcp_new_port+0x5c>
          return 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	e00e      	b.n	80091c2 <tcp_new_port+0x7a>
        }
        goto again;
 80091a4:	e7d5      	b.n	8009152 <tcp_new_port+0xa>
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	603b      	str	r3, [r7, #0]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1e9      	bne.n	8009186 <tcp_new_port+0x3e>
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80091b2:	79fb      	ldrb	r3, [r7, #7]
 80091b4:	3301      	adds	r3, #1
 80091b6:	71fb      	strb	r3, [r7, #7]
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d9dc      	bls.n	8009178 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80091be:	4b04      	ldr	r3, [pc, #16]	; (80091d0 <tcp_new_port+0x88>)
 80091c0:	881b      	ldrh	r3, [r3, #0]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	1ffe8864 	.word	0x1ffe8864
 80091d4:	08014380 	.word	0x08014380

080091d8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80091d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091da:	b091      	sub	sp, #68	; 0x44
 80091dc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80091e4:	4b78      	ldr	r3, [pc, #480]	; (80093c8 <tcp_slowtmr+0x1f0>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3301      	adds	r3, #1
 80091ea:	4a77      	ldr	r2, [pc, #476]	; (80093c8 <tcp_slowtmr+0x1f0>)
 80091ec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80091ee:	4b77      	ldr	r3, [pc, #476]	; (80093cc <tcp_slowtmr+0x1f4>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	3301      	adds	r3, #1
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	4b75      	ldr	r3, [pc, #468]	; (80093cc <tcp_slowtmr+0x1f4>)
 80091f8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80091fe:	4b74      	ldr	r3, [pc, #464]	; (80093d0 <tcp_slowtmr+0x1f8>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009204:	e242      	b.n	800968c <tcp_slowtmr+0x4b4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
 8009206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009208:	7f9a      	ldrb	r2, [r3, #30]
 800920a:	4b70      	ldr	r3, [pc, #448]	; (80093cc <tcp_slowtmr+0x1f4>)
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	429a      	cmp	r2, r3
 8009210:	d105      	bne.n	800921e <tcp_slowtmr+0x46>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800921c:	e236      	b.n	800968c <tcp_slowtmr+0x4b4>
    }
    pcb->last_timer = tcp_timer_ctr;
 800921e:	4b6b      	ldr	r3, [pc, #428]	; (80093cc <tcp_slowtmr+0x1f4>)
 8009220:	781a      	ldrb	r2, [r3, #0]
 8009222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009224:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009226:	2300      	movs	r3, #0
 8009228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800922c:	2300      	movs	r3, #0
 800922e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009234:	7d1b      	ldrb	r3, [r3, #20]
 8009236:	2b02      	cmp	r3, #2
 8009238:	d10a      	bne.n	8009250 <tcp_slowtmr+0x78>
 800923a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009240:	2b05      	cmp	r3, #5
 8009242:	d905      	bls.n	8009250 <tcp_slowtmr+0x78>
      ++pcb_remove;
 8009244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009248:	3301      	adds	r3, #1
 800924a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800924e:	e0f9      	b.n	8009444 <tcp_slowtmr+0x26c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009256:	2b0b      	cmp	r3, #11
 8009258:	d905      	bls.n	8009266 <tcp_slowtmr+0x8e>
      ++pcb_remove;
 800925a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800925e:	3301      	adds	r3, #1
 8009260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009264:	e0ee      	b.n	8009444 <tcp_slowtmr+0x26c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009268:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800926c:	2b00      	cmp	r3, #0
 800926e:	d05d      	beq.n	800932c <tcp_slowtmr+0x154>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009272:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009276:	2b0b      	cmp	r3, #11
 8009278:	d905      	bls.n	8009286 <tcp_slowtmr+0xae>
          ++pcb_remove; /* max probes reached */
 800927a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800927e:	3301      	adds	r3, #1
 8009280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009284:	e0de      	b.n	8009444 <tcp_slowtmr+0x26c>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009288:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800928c:	3b01      	subs	r3, #1
 800928e:	4a51      	ldr	r2, [pc, #324]	; (80093d4 <tcp_slowtmr+0x1fc>)
 8009290:	5cd3      	ldrb	r3, [r2, r3]
 8009292:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 8009294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009296:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800929a:	7ffa      	ldrb	r2, [r7, #31]
 800929c:	429a      	cmp	r2, r3
 800929e:	d907      	bls.n	80092b0 <tcp_slowtmr+0xd8>
            pcb->persist_cnt++;
 80092a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80092a6:	3301      	adds	r3, #1
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80092b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80092b6:	7ffa      	ldrb	r2, [r7, #31]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d836      	bhi.n	800932a <tcp_slowtmr+0x152>
            int next_slot = 1; /* increment timer to next slot */
 80092bc:	2301      	movs	r3, #1
 80092be:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80092c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d108      	bne.n	80092dc <tcp_slowtmr+0x104>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80092ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092cc:	f004 f9dc 	bl	800d688 <tcp_zero_window_probe>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d014      	beq.n	8009300 <tcp_slowtmr+0x128>
                next_slot = 0; /* try probe again with current slot */
 80092d6:	2300      	movs	r3, #0
 80092d8:	623b      	str	r3, [r7, #32]
 80092da:	e011      	b.n	8009300 <tcp_slowtmr+0x128>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80092dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092e4:	4619      	mov	r1, r3
 80092e6:	f003 fac9 	bl	800c87c <tcp_split_unsent_seg>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d107      	bne.n	8009300 <tcp_slowtmr+0x128>
                if (tcp_output(pcb) == ERR_OK) {
 80092f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092f2:	f003 fc99 	bl	800cc28 <tcp_output>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d101      	bne.n	8009300 <tcp_slowtmr+0x128>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80092fc:	2300      	movs	r3, #0
 80092fe:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d011      	beq.n	800932a <tcp_slowtmr+0x152>
              pcb->persist_cnt = 0;
 8009306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009308:	2200      	movs	r2, #0
 800930a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800930e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009310:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009314:	2b06      	cmp	r3, #6
 8009316:	d808      	bhi.n	800932a <tcp_slowtmr+0x152>
                pcb->persist_backoff++;
 8009318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800931e:	3301      	adds	r3, #1
 8009320:	b2da      	uxtb	r2, r3
 8009322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009324:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009328:	e08c      	b.n	8009444 <tcp_slowtmr+0x26c>
 800932a:	e08b      	b.n	8009444 <tcp_slowtmr+0x26c>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800932c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009330:	b21b      	sxth	r3, r3
 8009332:	2b00      	cmp	r3, #0
 8009334:	db0e      	blt.n	8009354 <tcp_slowtmr+0x17c>
 8009336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009338:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800933a:	b21b      	sxth	r3, r3
 800933c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009340:	4293      	cmp	r3, r2
 8009342:	d007      	beq.n	8009354 <tcp_slowtmr+0x17c>
          ++pcb->rtime;
 8009344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009346:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009348:	b29b      	uxth	r3, r3
 800934a:	3301      	adds	r3, #1
 800934c:	b29b      	uxth	r3, r3
 800934e:	b29a      	uxth	r2, r3
 8009350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009352:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009356:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8009358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800935e:	b212      	sxth	r2, r2
 8009360:	b21b      	sxth	r3, r3
 8009362:	429a      	cmp	r2, r3
 8009364:	db6e      	blt.n	8009444 <tcp_slowtmr+0x26c>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009368:	f003 fec4 	bl	800d0f4 <tcp_rexmit_rto_prepare>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d007      	beq.n	8009382 <tcp_slowtmr+0x1aa>
 8009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009376:	2b00      	cmp	r3, #0
 8009378:	d164      	bne.n	8009444 <tcp_slowtmr+0x26c>
 800937a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800937e:	2b00      	cmp	r3, #0
 8009380:	d060      	beq.n	8009444 <tcp_slowtmr+0x26c>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8009382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009384:	7d1b      	ldrb	r3, [r3, #20]
 8009386:	2b02      	cmp	r3, #2
 8009388:	d02d      	beq.n	80093e6 <tcp_slowtmr+0x20e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800938a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009390:	2b0c      	cmp	r3, #12
 8009392:	bf28      	it	cs
 8009394:	230c      	movcs	r3, #12
 8009396:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800939c:	b21b      	sxth	r3, r3
 800939e:	10db      	asrs	r3, r3, #3
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	b21a      	sxth	r2, r3
 80093a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093a8:	b21b      	sxth	r3, r3
 80093aa:	4413      	add	r3, r2
 80093ac:	7fba      	ldrb	r2, [r7, #30]
 80093ae:	490a      	ldr	r1, [pc, #40]	; (80093d8 <tcp_slowtmr+0x200>)
 80093b0:	5c8a      	ldrb	r2, [r1, r2]
 80093b2:	4093      	lsls	r3, r2
 80093b4:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80093bc:	4293      	cmp	r3, r2
 80093be:	dc0d      	bgt.n	80093dc <tcp_slowtmr+0x204>
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	e00c      	b.n	80093e0 <tcp_slowtmr+0x208>
 80093c6:	bf00      	nop
 80093c8:	1fff0288 	.word	0x1fff0288
 80093cc:	1ffe925d 	.word	0x1ffe925d
 80093d0:	1fff0284 	.word	0x1fff0284
 80093d4:	08014378 	.word	0x08014378
 80093d8:	08014368 	.word	0x08014368
 80093dc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	2200      	movs	r2, #0
 80093ea:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80093ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80093f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80093f8:	4293      	cmp	r3, r2
 80093fa:	bf28      	it	cs
 80093fc:	4613      	movcs	r3, r2
 80093fe:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 8009400:	8afb      	ldrh	r3, [r7, #22]
 8009402:	085b      	lsrs	r3, r3, #1
 8009404:	b29a      	uxth	r2, r3
 8009406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009408:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800940c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009414:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009416:	005b      	lsls	r3, r3, #1
 8009418:	b29b      	uxth	r3, r3
 800941a:	429a      	cmp	r2, r3
 800941c:	d206      	bcs.n	800942c <tcp_slowtmr+0x254>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800941e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009420:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	b29a      	uxth	r2, r3
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800942c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009432:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8009436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009438:	2200      	movs	r2, #0
 800943a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800943e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009440:	f003 feb6 	bl	800d1b0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009446:	7d1b      	ldrb	r3, [r3, #20]
 8009448:	2b06      	cmp	r3, #6
 800944a:	d111      	bne.n	8009470 <tcp_slowtmr+0x298>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800944c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944e:	8b5b      	ldrh	r3, [r3, #26]
 8009450:	f003 0310 	and.w	r3, r3, #16
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00b      	beq.n	8009470 <tcp_slowtmr+0x298>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009458:	4ba0      	ldr	r3, [pc, #640]	; (80096dc <tcp_slowtmr+0x504>)
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945e:	6a1b      	ldr	r3, [r3, #32]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	2b28      	cmp	r3, #40	; 0x28
 8009464:	d904      	bls.n	8009470 <tcp_slowtmr+0x298>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800946a:	3301      	adds	r3, #1
 800946c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009472:	7a5b      	ldrb	r3, [r3, #9]
 8009474:	f003 0308 	and.w	r3, r3, #8
 8009478:	2b00      	cmp	r3, #0
 800947a:	d04c      	beq.n	8009516 <tcp_slowtmr+0x33e>
        ((pcb->state == ESTABLISHED) ||
 800947c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947e:	7d1b      	ldrb	r3, [r3, #20]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009480:	2b04      	cmp	r3, #4
 8009482:	d003      	beq.n	800948c <tcp_slowtmr+0x2b4>
        ((pcb->state == ESTABLISHED) ||
         (pcb->state == CLOSE_WAIT))) {
 8009484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009486:	7d1b      	ldrb	r3, [r3, #20]
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
        ((pcb->state == ESTABLISHED) ||
 8009488:	2b07      	cmp	r3, #7
 800948a:	d144      	bne.n	8009516 <tcp_slowtmr+0x33e>
         (pcb->state == CLOSE_WAIT))) {
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800948c:	4b93      	ldr	r3, [pc, #588]	; (80096dc <tcp_slowtmr+0x504>)
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009492:	6a1b      	ldr	r3, [r3, #32]
 8009494:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800949c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80094a0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80094a4:	498e      	ldr	r1, [pc, #568]	; (80096e0 <tcp_slowtmr+0x508>)
 80094a6:	fba1 1303 	umull	r1, r3, r1, r3
 80094aa:	095b      	lsrs	r3, r3, #5

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
        ((pcb->state == ESTABLISHED) ||
         (pcb->state == CLOSE_WAIT))) {
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d90a      	bls.n	80094c6 <tcp_slowtmr+0x2ee>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80094b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094b4:	3301      	adds	r3, #1
 80094b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80094ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80094be:	3301      	adds	r3, #1
 80094c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80094c4:	e027      	b.n	8009516 <tcp_slowtmr+0x33e>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094c6:	4b85      	ldr	r3, [pc, #532]	; (80096dc <tcp_slowtmr+0x504>)
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80094d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80094d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80094dc:	4618      	mov	r0, r3
 80094de:	4b81      	ldr	r3, [pc, #516]	; (80096e4 <tcp_slowtmr+0x50c>)
 80094e0:	fb03 f300 	mul.w	r3, r3, r0
 80094e4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80094e6:	497e      	ldr	r1, [pc, #504]	; (80096e0 <tcp_slowtmr+0x508>)
 80094e8:	fba1 1303 	umull	r1, r3, r1, r3
 80094ec:	095b      	lsrs	r3, r3, #5
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
        ++pcb_reset;
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d911      	bls.n	8009516 <tcp_slowtmr+0x33e>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
                 / TCP_SLOW_INTERVAL) {
        err = tcp_keepalive(pcb);
 80094f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094f4:	f004 f898 	bl	800d628 <tcp_keepalive>
 80094f8:	4603      	mov	r3, r0
 80094fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80094fe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009502:	2b00      	cmp	r3, #0
 8009504:	d107      	bne.n	8009516 <tcp_slowtmr+0x33e>
          pcb->keep_cnt_sent++;
 8009506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009508:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800950c:	3301      	adds	r3, #1
 800950e:	b2da      	uxtb	r2, r3
 8009510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009512:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800951a:	2b00      	cmp	r3, #0
 800951c:	d011      	beq.n	8009542 <tcp_slowtmr+0x36a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800951e:	4b6f      	ldr	r3, [pc, #444]	; (80096dc <tcp_slowtmr+0x504>)
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	1ad1      	subs	r1, r2, r3
 8009528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800952e:	b21a      	sxth	r2, r3
 8009530:	4613      	mov	r3, r2
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	4413      	add	r3, r2
 8009536:	005b      	lsls	r3, r3, #1

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009538:	4299      	cmp	r1, r3
 800953a:	d302      	bcc.n	8009542 <tcp_slowtmr+0x36a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800953c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800953e:	f000 fd0f 	bl	8009f60 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009544:	7d1b      	ldrb	r3, [r3, #20]
 8009546:	2b03      	cmp	r3, #3
 8009548:	d10b      	bne.n	8009562 <tcp_slowtmr+0x38a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800954a:	4b64      	ldr	r3, [pc, #400]	; (80096dc <tcp_slowtmr+0x504>)
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	2b28      	cmp	r3, #40	; 0x28
 8009556:	d904      	bls.n	8009562 <tcp_slowtmr+0x38a>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800955c:	3301      	adds	r3, #1
 800955e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	7d1b      	ldrb	r3, [r3, #20]
 8009566:	2b09      	cmp	r3, #9
 8009568:	d10b      	bne.n	8009582 <tcp_slowtmr+0x3aa>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800956a:	4b5c      	ldr	r3, [pc, #368]	; (80096dc <tcp_slowtmr+0x504>)
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	2bf0      	cmp	r3, #240	; 0xf0
 8009576:	d904      	bls.n	8009582 <tcp_slowtmr+0x3aa>
        ++pcb_remove;
 8009578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800957c:	3301      	adds	r3, #1
 800957e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009586:	2b00      	cmp	r3, #0
 8009588:	d049      	beq.n	800961e <tcp_slowtmr+0x446>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800958a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009590:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009594:	f000 fbb2 	bl	8009cfc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959a:	2b00      	cmp	r3, #0
 800959c:	d004      	beq.n	80095a8 <tcp_slowtmr+0x3d0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
 800959e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a0:	68da      	ldr	r2, [r3, #12]
 80095a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a4:	60da      	str	r2, [r3, #12]
 80095a6:	e003      	b.n	80095b0 <tcp_slowtmr+0x3d8>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
 80095a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	4a4e      	ldr	r2, [pc, #312]	; (80096e8 <tcp_slowtmr+0x510>)
 80095ae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80095b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d013      	beq.n	80095e0 <tcp_slowtmr+0x408>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80095b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ba:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 80095bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095be:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80095c0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80095c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c4:	1d19      	adds	r1, r3, #4
 80095c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c8:	8ada      	ldrh	r2, [r3, #22]
 80095ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095cc:	8b1b      	ldrh	r3, [r3, #24]
 80095ce:	9100      	str	r1, [sp, #0]
 80095d0:	9201      	str	r2, [sp, #4]
 80095d2:	9302      	str	r3, [sp, #8]
 80095d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095d6:	4631      	mov	r1, r6
 80095d8:	462a      	mov	r2, r5
 80095da:	4623      	mov	r3, r4
 80095dc:	f003 ff9c 	bl	800d518 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80095e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 80095e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e8:	7d1b      	ldrb	r3, [r3, #20]
 80095ea:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 80095ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ee:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 80095f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f7ff f982 	bl	8008900 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80095fc:	4b3b      	ldr	r3, [pc, #236]	; (80096ec <tcp_slowtmr+0x514>)
 80095fe:	2200      	movs	r2, #0
 8009600:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d004      	beq.n	8009612 <tcp_slowtmr+0x43a>
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f06f 010c 	mvn.w	r1, #12
 8009610:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009612:	4b36      	ldr	r3, [pc, #216]	; (80096ec <tcp_slowtmr+0x514>)
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d000      	beq.n	800961c <tcp_slowtmr+0x444>
        goto tcp_slowtmr_start;
 800961a:	e5ee      	b.n	80091fa <tcp_slowtmr+0x22>
 800961c:	e036      	b.n	800968c <tcp_slowtmr+0x4b4>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800961e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009620:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	7f1b      	ldrb	r3, [r3, #28]
 800962c:	3301      	adds	r3, #1
 800962e:	b2da      	uxtb	r2, r3
 8009630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009632:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009636:	7f1a      	ldrb	r2, [r3, #28]
 8009638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963a:	7f5b      	ldrb	r3, [r3, #29]
 800963c:	429a      	cmp	r2, r3
 800963e:	d325      	bcc.n	800968c <tcp_slowtmr+0x4b4>
        prev->polltmr = 0;
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	2200      	movs	r2, #0
 8009644:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009646:	4b29      	ldr	r3, [pc, #164]	; (80096ec <tcp_slowtmr+0x514>)
 8009648:	2200      	movs	r2, #0
 800964a:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00b      	beq.n	800966e <tcp_slowtmr+0x496>
 8009656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800965c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800965e:	6912      	ldr	r2, [r2, #16]
 8009660:	4610      	mov	r0, r2
 8009662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009664:	4798      	blx	r3
 8009666:	4603      	mov	r3, r0
 8009668:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800966c:	e002      	b.n	8009674 <tcp_slowtmr+0x49c>
 800966e:	2300      	movs	r3, #0
 8009670:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009674:	4b1d      	ldr	r3, [pc, #116]	; (80096ec <tcp_slowtmr+0x514>)
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d000      	beq.n	800967e <tcp_slowtmr+0x4a6>
          goto tcp_slowtmr_start;
 800967c:	e5bd      	b.n	80091fa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800967e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009682:	2b00      	cmp	r3, #0
 8009684:	d102      	bne.n	800968c <tcp_slowtmr+0x4b4>
          tcp_output(prev);
 8009686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009688:	f003 face 	bl	800cc28 <tcp_output>
  prev = NULL;
  pcb = tcp_active_pcbs;
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800968c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968e:	2b00      	cmp	r3, #0
 8009690:	f47f adb9 	bne.w	8009206 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009694:	2300      	movs	r3, #0
 8009696:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009698:	4b15      	ldr	r3, [pc, #84]	; (80096f0 <tcp_slowtmr+0x518>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800969e:	e03b      	b.n	8009718 <tcp_slowtmr+0x540>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;
 80096a0:	2300      	movs	r3, #0
 80096a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80096a6:	4b0d      	ldr	r3, [pc, #52]	; (80096dc <tcp_slowtmr+0x504>)
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2bf0      	cmp	r3, #240	; 0xf0
 80096b2:	d904      	bls.n	80096be <tcp_slowtmr+0x4e6>
      ++pcb_remove;
 80096b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096b8:	3301      	adds	r3, #1
 80096ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80096be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d023      	beq.n	800970e <tcp_slowtmr+0x536>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80096c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096c8:	f000 fb18 	bl	8009cfc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80096cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d010      	beq.n	80096f4 <tcp_slowtmr+0x51c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
 80096d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d8:	60da      	str	r2, [r3, #12]
 80096da:	e00f      	b.n	80096fc <tcp_slowtmr+0x524>
 80096dc:	1fff0288 	.word	0x1fff0288
 80096e0:	10624dd3 	.word	0x10624dd3
 80096e4:	000124f8 	.word	0x000124f8
 80096e8:	1fff0284 	.word	0x1fff0284
 80096ec:	1fff0280 	.word	0x1fff0280
 80096f0:	1fff0294 	.word	0x1fff0294
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
 80096f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	4a0a      	ldr	r2, [pc, #40]	; (8009724 <tcp_slowtmr+0x54c>)
 80096fa:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80096fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009706:	6838      	ldr	r0, [r7, #0]
 8009708:	f7ff f8fa 	bl	8008900 <tcp_free>
 800970c:	e004      	b.n	8009718 <tcp_slowtmr+0x540>
    } else {
      prev = pcb;
 800970e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009710:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
  while (pcb != NULL) {
 8009718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1c0      	bne.n	80096a0 <tcp_slowtmr+0x4c8>
    } else {
      prev = pcb;
      pcb = pcb->next;
    }
  }
}
 800971e:	3734      	adds	r7, #52	; 0x34
 8009720:	46bd      	mov	sp, r7
 8009722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009724:	1fff0294 	.word	0x1fff0294

08009728 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800972e:	4b2c      	ldr	r3, [pc, #176]	; (80097e0 <tcp_fasttmr+0xb8>)
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	3301      	adds	r3, #1
 8009734:	b2da      	uxtb	r2, r3
 8009736:	4b2a      	ldr	r3, [pc, #168]	; (80097e0 <tcp_fasttmr+0xb8>)
 8009738:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800973a:	4b2a      	ldr	r3, [pc, #168]	; (80097e4 <tcp_fasttmr+0xbc>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009740:	e048      	b.n	80097d4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	7f9a      	ldrb	r2, [r3, #30]
 8009746:	4b26      	ldr	r3, [pc, #152]	; (80097e0 <tcp_fasttmr+0xb8>)
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	429a      	cmp	r2, r3
 800974c:	d03f      	beq.n	80097ce <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800974e:	4b24      	ldr	r3, [pc, #144]	; (80097e0 <tcp_fasttmr+0xb8>)
 8009750:	781a      	ldrb	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	8b5b      	ldrh	r3, [r3, #26]
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	2b00      	cmp	r3, #0
 8009760:	d010      	beq.n	8009784 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	8b5b      	ldrh	r3, [r3, #26]
 8009766:	f043 0302 	orr.w	r3, r3, #2
 800976a:	b29a      	uxth	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f003 fa59 	bl	800cc28 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	8b5b      	ldrh	r3, [r3, #26]
 800977a:	f023 0303 	bic.w	r3, r3, #3
 800977e:	b29a      	uxth	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	8b5b      	ldrh	r3, [r3, #26]
 8009788:	f003 0308 	and.w	r3, r3, #8
 800978c:	2b00      	cmp	r3, #0
 800978e:	d009      	beq.n	80097a4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	8b5b      	ldrh	r3, [r3, #26]
 8009794:	f023 0308 	bic.w	r3, r3, #8
 8009798:	b29a      	uxth	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7ff f9f4 	bl	8008b8c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00a      	beq.n	80097c8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80097b2:	4b0d      	ldr	r3, [pc, #52]	; (80097e8 <tcp_fasttmr+0xc0>)
 80097b4:	2200      	movs	r2, #0
 80097b6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 f817 	bl	80097ec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80097be:	4b0a      	ldr	r3, [pc, #40]	; (80097e8 <tcp_fasttmr+0xc0>)
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d000      	beq.n	80097c8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80097c6:	e7b8      	b.n	800973a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	607b      	str	r3, [r7, #4]
 80097cc:	e002      	b.n	80097d4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	607b      	str	r3, [r7, #4]
  ++tcp_timer_ctr;

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;

  while (pcb != NULL) {
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1b3      	bne.n	8009742 <tcp_fasttmr+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	1ffe925d 	.word	0x1ffe925d
 80097e4:	1fff0284 	.word	0x1fff0284
 80097e8:	1fff0280 	.word	0x1fff0280

080097ec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80097ec:	b590      	push	{r4, r7, lr}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <tcp_process_refused_data+0x12>
 80097fa:	23f0      	movs	r3, #240	; 0xf0
 80097fc:	e05f      	b.n	80098be <tcp_process_refused_data+0xd2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009802:	7b5b      	ldrb	r3, [r3, #13]
 8009804:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800980a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00c      	beq.n	8009836 <tcp_process_refused_data+0x4a>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	4618      	mov	r0, r3
 8009828:	6879      	ldr	r1, [r7, #4]
 800982a:	68ba      	ldr	r2, [r7, #8]
 800982c:	2300      	movs	r3, #0
 800982e:	47a0      	blx	r4
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]
 8009834:	e007      	b.n	8009846 <tcp_process_refused_data+0x5a>
 8009836:	2000      	movs	r0, #0
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	2300      	movs	r3, #0
 800983e:	f000 f88b 	bl	8009958 <tcp_recv_null>
 8009842:	4603      	mov	r3, r0
 8009844:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d12a      	bne.n	80098a4 <tcp_process_refused_data+0xb8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800984e:	7bbb      	ldrb	r3, [r7, #14]
 8009850:	f003 0320 	and.w	r3, r3, #32
 8009854:	2b00      	cmp	r3, #0
 8009856:	d031      	beq.n	80098bc <tcp_process_refused_data+0xd0>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800985c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009860:	d005      	beq.n	800986e <tcp_process_refused_data+0x82>
          pcb->rcv_wnd++;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009866:	3301      	adds	r3, #1
 8009868:	b29a      	uxth	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00c      	beq.n	8009892 <tcp_process_refused_data+0xa6>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	4618      	mov	r0, r3
 8009884:	6879      	ldr	r1, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	2300      	movs	r3, #0
 800988a:	47a0      	blx	r4
 800988c:	4603      	mov	r3, r0
 800988e:	73fb      	strb	r3, [r7, #15]
 8009890:	e001      	b.n	8009896 <tcp_process_refused_data+0xaa>
 8009892:	2300      	movs	r3, #0
 8009894:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800989a:	f113 0f0d 	cmn.w	r3, #13
 800989e:	d10d      	bne.n	80098bc <tcp_process_refused_data+0xd0>
          return ERR_ABRT;
 80098a0:	23f3      	movs	r3, #243	; 0xf3
 80098a2:	e00c      	b.n	80098be <tcp_process_refused_data+0xd2>
        }
      }
    } else if (err == ERR_ABRT) {
 80098a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098a8:	f113 0f0d 	cmn.w	r3, #13
 80098ac:	d101      	bne.n	80098b2 <tcp_process_refused_data+0xc6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80098ae:	23f3      	movs	r3, #243	; 0xf3
 80098b0:	e005      	b.n	80098be <tcp_process_refused_data+0xd2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80098b8:	23fb      	movs	r3, #251	; 0xfb
 80098ba:	e000      	b.n	80098be <tcp_process_refused_data+0xd2>
    }
  }
  return ERR_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	b25b      	sxtb	r3, r3
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd90      	pop	{r4, r7, pc}

080098c8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80098d0:	e007      	b.n	80098e2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f809 	bl	80098f0 <tcp_seg_free>
    seg = next;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	607b      	str	r3, [r7, #4]
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1f4      	bne.n	80098d2 <tcp_segs_free+0xa>
    struct tcp_seg *next = seg->next;
    tcp_seg_free(seg);
    seg = next;
  }
}
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop

080098f0 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00c      	beq.n	8009918 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d004      	beq.n	8009910 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	4618      	mov	r0, r3
 800990c:	f7fe fd66 	bl	80083dc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009910:	2003      	movs	r0, #3
 8009912:	6879      	ldr	r1, [r7, #4]
 8009914:	f7fe f852 	bl	80079bc <memp_free>
  }
}
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop

08009920 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009928:	2003      	movs	r0, #3
 800992a:	f7fe f817 	bl	800795c <memp_malloc>
 800992e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <tcp_seg_copy+0x1a>
    return NULL;
 8009936:	2300      	movs	r3, #0
 8009938:	e00a      	b.n	8009950 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	6879      	ldr	r1, [r7, #4]
 800993e:	2210      	movs	r2, #16
 8009940:	f7fc f9b4 	bl	8005cac <memcpy>
  pbuf_ref(cseg->p);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	4618      	mov	r0, r3
 800994a:	f7fe fda5 	bl	8008498 <pbuf_ref>
  return cseg;
 800994e:	68fb      	ldr	r3, [r7, #12]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <tcp_recv_null+0x18>
 800996c:	23f0      	movs	r3, #240	; 0xf0
 800996e:	e016      	b.n	800999e <tcp_recv_null+0x46>

  if (p != NULL) {
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d009      	beq.n	800998a <tcp_recv_null+0x32>
    tcp_recved(pcb, p->tot_len);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	891b      	ldrh	r3, [r3, #8]
 800997a:	68b8      	ldr	r0, [r7, #8]
 800997c:	4619      	mov	r1, r3
 800997e:	f7ff fbad 	bl	80090dc <tcp_recved>
    pbuf_free(p);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7fe fd2a 	bl	80083dc <pbuf_free>
 8009988:	e008      	b.n	800999c <tcp_recv_null+0x44>
  } else if (err == ERR_OK) {
 800998a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d104      	bne.n	800999c <tcp_recv_null+0x44>
    return tcp_close(pcb);
 8009992:	68b8      	ldr	r0, [r7, #8]
 8009994:	f7ff f952 	bl	8008c3c <tcp_close>
 8009998:	4603      	mov	r3, r0
 800999a:	e000      	b.n	800999e <tcp_recv_null+0x46>
  }
  return ERR_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	b25b      	sxtb	r3, r3
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	4603      	mov	r3, r0
 80099b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80099b2:	79fb      	ldrb	r3, [r7, #7]
 80099b4:	b25b      	sxtb	r3, r3
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	db01      	blt.n	80099be <tcp_kill_prio+0x16>
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	e000      	b.n	80099c0 <tcp_kill_prio+0x18>
 80099be:	237f      	movs	r3, #127	; 0x7f
 80099c0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80099c2:	7afb      	ldrb	r3, [r7, #11]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d100      	bne.n	80099ca <tcp_kill_prio+0x22>
    return;
 80099c8:	e033      	b.n	8009a32 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80099ca:	7afb      	ldrb	r3, [r7, #11]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80099d4:	2300      	movs	r3, #0
 80099d6:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80099d8:	4b17      	ldr	r3, [pc, #92]	; (8009a38 <tcp_kill_prio+0x90>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	617b      	str	r3, [r7, #20]
 80099de:	e01f      	b.n	8009a20 <tcp_kill_prio+0x78>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	7d5b      	ldrb	r3, [r3, #21]
 80099e4:	7afa      	ldrb	r2, [r7, #11]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d80c      	bhi.n	8009a04 <tcp_kill_prio+0x5c>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	7d5b      	ldrb	r3, [r3, #21]

  inactivity = 0;
  inactive = NULL;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80099ee:	7afa      	ldrb	r2, [r7, #11]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d112      	bne.n	8009a1a <tcp_kill_prio+0x72>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80099f4:	4b11      	ldr	r3, [pc, #68]	; (8009a3c <tcp_kill_prio+0x94>)
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	6a1b      	ldr	r3, [r3, #32]
 80099fc:	1ad2      	subs	r2, r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d30a      	bcc.n	8009a1a <tcp_kill_prio+0x72>
      inactivity = tcp_ticks - pcb->tmr;
 8009a04:	4b0d      	ldr	r3, [pc, #52]	; (8009a3c <tcp_kill_prio+0x94>)
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	6a1b      	ldr	r3, [r3, #32]
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	7d5b      	ldrb	r3, [r3, #21]
 8009a18:	72fb      	strb	r3, [r7, #11]
   */
  mprio--;

  inactivity = 0;
  inactive = NULL;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	617b      	str	r3, [r7, #20]
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1dc      	bne.n	80099e0 <tcp_kill_prio+0x38>
      inactivity = tcp_ticks - pcb->tmr;
      inactive   = pcb;
      mprio      = pcb->prio;
    }
  }
  if (inactive != NULL) {
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d002      	beq.n	8009a32 <tcp_kill_prio+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009a2c:	6938      	ldr	r0, [r7, #16]
 8009a2e:	f7ff f9c9 	bl	8008dc4 <tcp_abort>
  }
}
 8009a32:	3718      	adds	r7, #24
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	1fff0284 	.word	0x1fff0284
 8009a3c:	1fff0288 	.word	0x1fff0288

08009a40 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	4603      	mov	r3, r0
 8009a48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));

  inactivity = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a52:	4b14      	ldr	r3, [pc, #80]	; (8009aa4 <tcp_kill_state+0x64>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	617b      	str	r3, [r7, #20]
 8009a58:	e017      	b.n	8009a8a <tcp_kill_state+0x4a>
    if (pcb->state == state) {
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	7d1b      	ldrb	r3, [r3, #20]
 8009a5e:	79fa      	ldrb	r2, [r7, #7]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d10f      	bne.n	8009a84 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009a64:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <tcp_kill_state+0x68>)
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	6a1b      	ldr	r3, [r3, #32]
 8009a6c:	1ad2      	subs	r2, r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d307      	bcc.n	8009a84 <tcp_kill_state+0x44>
        inactivity = tcp_ticks - pcb->tmr;
 8009a74:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <tcp_kill_state+0x68>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	6a1b      	ldr	r3, [r3, #32]
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	613b      	str	r3, [r7, #16]

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	617b      	str	r3, [r7, #20]
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1e4      	bne.n	8009a5a <tcp_kill_state+0x1a>
        inactivity = tcp_ticks - pcb->tmr;
        inactive = pcb;
      }
    }
  }
  if (inactive != NULL) {
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <tcp_kill_state+0x5e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009a96:	6938      	ldr	r0, [r7, #16]
 8009a98:	2100      	movs	r1, #0
 8009a9a:	f7ff f8ed 	bl	8008c78 <tcp_abandon>
  }
}
 8009a9e:	3718      	adds	r7, #24
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	1fff0284 	.word	0x1fff0284
 8009aa8:	1fff0288 	.word	0x1fff0288

08009aac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009aba:	4b11      	ldr	r3, [pc, #68]	; (8009b00 <tcp_kill_timewait+0x54>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	60fb      	str	r3, [r7, #12]
 8009ac0:	e012      	b.n	8009ae8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009ac2:	4b10      	ldr	r3, [pc, #64]	; (8009b04 <tcp_kill_timewait+0x58>)
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	1ad2      	subs	r2, r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d307      	bcc.n	8009ae2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009ad2:	4b0c      	ldr	r3, [pc, #48]	; (8009b04 <tcp_kill_timewait+0x58>)
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6a1b      	ldr	r3, [r3, #32]
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	60bb      	str	r3, [r7, #8]
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	60fb      	str	r3, [r7, #12]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1e9      	bne.n	8009ac2 <tcp_kill_timewait+0x16>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
    }
  }
  if (inactive != NULL) {
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009af4:	68b8      	ldr	r0, [r7, #8]
 8009af6:	f7ff f965 	bl	8008dc4 <tcp_abort>
  }
}
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	1fff0294 	.word	0x1fff0294
 8009b04:	1fff0288 	.word	0x1fff0288

08009b08 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <tcp_handle_closepend+0x44>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009b14:	e014      	b.n	8009b40 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	8b5b      	ldrh	r3, [r3, #26]
 8009b20:	f003 0308 	and.w	r3, r3, #8
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d009      	beq.n	8009b3c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	8b5b      	ldrh	r3, [r3, #26]
 8009b2c:	f023 0308 	bic.w	r3, r3, #8
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7ff f828 	bl	8008b8c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	607b      	str	r3, [r7, #4]
static void
tcp_handle_closepend(void)
{
  struct tcp_pcb *pcb = tcp_active_pcbs;

  while (pcb != NULL) {
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1e7      	bne.n	8009b16 <tcp_handle_closepend+0xe>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
      tcp_close_shutdown_fin(pcb);
    }
    pcb = next;
  }
}
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	1fff0284 	.word	0x1fff0284

08009b50 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009b5a:	2001      	movs	r0, #1
 8009b5c:	f7fd fefe 	bl	800795c <memp_malloc>
 8009b60:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d126      	bne.n	8009bb6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009b68:	f7ff ffce 	bl	8009b08 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009b6c:	f7ff ff9e 	bl	8009aac <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009b70:	2001      	movs	r0, #1
 8009b72:	f7fd fef3 	bl	800795c <memp_malloc>
 8009b76:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d11b      	bne.n	8009bb6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009b7e:	2009      	movs	r0, #9
 8009b80:	f7ff ff5e 	bl	8009a40 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009b84:	2001      	movs	r0, #1
 8009b86:	f7fd fee9 	bl	800795c <memp_malloc>
 8009b8a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d111      	bne.n	8009bb6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009b92:	2008      	movs	r0, #8
 8009b94:	f7ff ff54 	bl	8009a40 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009b98:	2001      	movs	r0, #1
 8009b9a:	f7fd fedf 	bl	800795c <memp_malloc>
 8009b9e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d107      	bne.n	8009bb6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009ba6:	79fb      	ldrb	r3, [r7, #7]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7ff fefd 	bl	80099a8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009bae:	2001      	movs	r0, #1
 8009bb0:	f7fd fed4 	bl	800795c <memp_malloc>
 8009bb4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d03f      	beq.n	8009c3c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	229c      	movs	r2, #156	; 0x9c
 8009bc2:	f005 fbe1 	bl	800f388 <memset>
    pcb->prio = prio;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	79fa      	ldrb	r2, [r7, #7]
 8009bca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009bd2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	22ff      	movs	r2, #255	; 0xff
 8009bea:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009bf2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2206      	movs	r2, #6
 8009bf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2206      	movs	r2, #6
 8009c00:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c08:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009c12:	4b0d      	ldr	r3, [pc, #52]	; (8009c48 <tcp_alloc+0xf8>)
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009c1a:	4b0c      	ldr	r3, [pc, #48]	; (8009c4c <tcp_alloc+0xfc>)
 8009c1c:	781a      	ldrb	r2, [r3, #0]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009c28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4a08      	ldr	r2, [pc, #32]	; (8009c50 <tcp_alloc+0x100>)
 8009c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	4a07      	ldr	r2, [pc, #28]	; (8009c54 <tcp_alloc+0x104>)
 8009c38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	1fff0288 	.word	0x1fff0288
 8009c4c:	1ffe925d 	.word	0x1ffe925d
 8009c50:	08009959 	.word	0x08009959
 8009c54:	006ddd00 	.word	0x006ddd00

08009c58 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8009c5c:	2040      	movs	r0, #64	; 0x40
 8009c5e:	f7ff ff77 	bl	8009b50 <tcp_alloc>
 8009c62:	4603      	mov	r3, r0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d002      	beq.n	8009c7e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	611a      	str	r2, [r3, #16]
  }
}
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d003      	beq.n	8009ca0 <tcp_recv+0x18>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
    pcb->recv = recv;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8009ca0:	370c      	adds	r7, #12
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop

08009cac <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d003      	beq.n	8009cc4 <tcp_sent+0x18>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
    pcb->sent = sent;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8009cc4:	370c      	adds	r7, #12
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop

08009cd0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d008      	beq.n	8009cf2 <tcp_accept+0x22>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	7d1b      	ldrb	r3, [r3, #20]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d104      	bne.n	8009cf2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	619a      	str	r2, [r3, #24]
  }
}
 8009cf2:	3714      	adds	r7, #20
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d100      	bne.n	8009d0c <tcp_pcb_purge+0x10>
 8009d0a:	e03a      	b.n	8009d82 <tcp_pcb_purge+0x86>

  if (pcb->state != CLOSED &&
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	7d1b      	ldrb	r3, [r3, #20]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d036      	beq.n	8009d82 <tcp_pcb_purge+0x86>
      pcb->state != TIME_WAIT &&
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	7d1b      	ldrb	r3, [r3, #20]
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);

  if (pcb->state != CLOSED &&
 8009d18:	2b0a      	cmp	r3, #10
 8009d1a:	d032      	beq.n	8009d82 <tcp_pcb_purge+0x86>
      pcb->state != TIME_WAIT &&
      pcb->state != LISTEN) {
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	7d1b      	ldrb	r3, [r3, #20]
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);

  if (pcb->state != CLOSED &&
      pcb->state != TIME_WAIT &&
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d02e      	beq.n	8009d82 <tcp_pcb_purge+0x86>
      pcb->state != LISTEN) {

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7fe fe51 	bl	80089cc <tcp_backlog_accepted>

    if (pcb->refused_data != NULL) {
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d007      	beq.n	8009d42 <tcp_pcb_purge+0x46>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe fb50 	bl	80083dc <pbuf_free>
      pcb->refused_data = NULL;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d002      	beq.n	8009d50 <tcp_pcb_purge+0x54>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f908 	bl	8009f60 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d56:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7ff fdb3 	bl	80098c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7ff fdae 	bl	80098c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	66da      	str	r2, [r3, #108]	; 0x6c
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);

  TCP_RMV(pcblist, pcb);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d105      	bne.n	8009da8 <tcp_pcb_remove+0x20>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68da      	ldr	r2, [r3, #12]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	e013      	b.n	8009dd0 <tcp_pcb_remove+0x48>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60fb      	str	r3, [r7, #12]
 8009dae:	e00c      	b.n	8009dca <tcp_pcb_remove+0x42>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	68da      	ldr	r2, [r3, #12]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d104      	bne.n	8009dc4 <tcp_pcb_remove+0x3c>
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	68da      	ldr	r2, [r3, #12]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	60da      	str	r2, [r3, #12]
 8009dc2:	e005      	b.n	8009dd0 <tcp_pcb_remove+0x48>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	60fb      	str	r3, [r7, #12]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1ef      	bne.n	8009db0 <tcp_pcb_remove+0x28>
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009dd6:	6838      	ldr	r0, [r7, #0]
 8009dd8:	f7ff ff90 	bl	8009cfc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	7d1b      	ldrb	r3, [r3, #20]
 8009de0:	2b0a      	cmp	r3, #10
 8009de2:	d013      	beq.n	8009e0c <tcp_pcb_remove+0x84>
      (pcb->state != LISTEN) &&
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	7d1b      	ldrb	r3, [r3, #20]
  TCP_RMV(pcblist, pcb);

  tcp_pcb_purge(pcb);

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d00f      	beq.n	8009e0c <tcp_pcb_remove+0x84>
      (pcb->state != LISTEN) &&
      (pcb->flags & TF_ACK_DELAY)) {
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	8b5b      	ldrh	r3, [r3, #26]
 8009df0:	f003 0301 	and.w	r3, r3, #1

  tcp_pcb_purge(pcb);

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
      (pcb->state != LISTEN) &&
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d009      	beq.n	8009e0c <tcp_pcb_remove+0x84>
      (pcb->flags & TF_ACK_DELAY)) {
    tcp_ack_now(pcb);
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	8b5b      	ldrh	r3, [r3, #26]
 8009dfc:	f043 0302 	orr.w	r3, r3, #2
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009e06:	6838      	ldr	r0, [r7, #0]
 8009e08:	f002 ff0e 	bl	800cc28 <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	2200      	movs	r2, #0
 8009e16:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop

08009e20 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009e28:	4b07      	ldr	r3, [pc, #28]	; (8009e48 <tcp_next_iss+0x28>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	4b07      	ldr	r3, [pc, #28]	; (8009e4c <tcp_next_iss+0x2c>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4413      	add	r3, r2
 8009e32:	4a05      	ldr	r2, [pc, #20]	; (8009e48 <tcp_next_iss+0x28>)
 8009e34:	6013      	str	r3, [r2, #0]
  return iss;
 8009e36:	4b04      	ldr	r3, [pc, #16]	; (8009e48 <tcp_next_iss+0x28>)
 8009e38:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	1ffe8868 	.word	0x1ffe8868
 8009e4c:	1fff0288 	.word	0x1fff0288

08009e50 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	4603      	mov	r3, r0
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
 8009e5c:	81fb      	strh	r3, [r7, #14]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <tcp_eff_send_mss_netif+0x18>
      return sendmss;
 8009e64:	89fb      	ldrh	r3, [r7, #14]
 8009e66:	e019      	b.n	8009e9c <tcp_eff_send_mss_netif+0x4c>
    }
    mtu = outif->mtu;
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009e6c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009e6e:	8afb      	ldrh	r3, [r7, #22]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d012      	beq.n	8009e9a <tcp_eff_send_mss_netif+0x4a>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009e74:	2328      	movs	r3, #40	; 0x28
 8009e76:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009e78:	8afa      	ldrh	r2, [r7, #22]
 8009e7a:	8abb      	ldrh	r3, [r7, #20]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d904      	bls.n	8009e8a <tcp_eff_send_mss_netif+0x3a>
 8009e80:	8afa      	ldrh	r2, [r7, #22]
 8009e82:	8abb      	ldrh	r3, [r7, #20]
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	e000      	b.n	8009e8c <tcp_eff_send_mss_netif+0x3c>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009e8e:	8a7a      	ldrh	r2, [r7, #18]
 8009e90:	89fb      	ldrh	r3, [r7, #14]
 8009e92:	4293      	cmp	r3, r2
 8009e94:	bf28      	it	cs
 8009e96:	4613      	movcs	r3, r2
 8009e98:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009e9a:	89fb      	ldrh	r3, [r7, #14]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	371c      	adds	r7, #28
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);

  while (pcb != NULL) {
 8009eb6:	e011      	b.n	8009edc <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d108      	bne.n	8009ed6 <tcp_netif_ip_addr_changed_pcblist+0x2e>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f7fe ff7a 	bl	8008dc4 <tcp_abort>
      pcb = next;
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	e002      	b.n	8009edc <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	60fb      	str	r3, [r7, #12]
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);

  while (pcb != NULL) {
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1ea      	bne.n	8009eb8 <tcp_netif_ip_addr_changed_pcblist+0x10>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d02a      	beq.n	8009f4e <tcp_netif_ip_addr_changed+0x66>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d026      	beq.n	8009f4e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009f00:	4b14      	ldr	r3, [pc, #80]	; (8009f54 <tcp_netif_ip_addr_changed+0x6c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	4619      	mov	r1, r3
 8009f08:	f7ff ffce 	bl	8009ea8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009f0c:	4b12      	ldr	r3, [pc, #72]	; (8009f58 <tcp_netif_ip_addr_changed+0x70>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	4619      	mov	r1, r3
 8009f14:	f7ff ffc8 	bl	8009ea8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d017      	beq.n	8009f4e <tcp_netif_ip_addr_changed+0x66>
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d013      	beq.n	8009f4e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009f26:	4b0d      	ldr	r3, [pc, #52]	; (8009f5c <tcp_netif_ip_addr_changed+0x74>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	60fb      	str	r3, [r7, #12]
 8009f2c:	e00c      	b.n	8009f48 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d103      	bne.n	8009f42 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	601a      	str	r2, [r3, #0]
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);

    if (!ip_addr_isany(new_addr)) {
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	60fb      	str	r3, [r7, #12]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1ef      	bne.n	8009f2e <tcp_netif_ip_addr_changed+0x46>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	1fff0284 	.word	0x1fff0284
 8009f58:	1fff0290 	.word	0x1fff0290
 8009f5c:	1fff028c 	.word	0x1fff028c

08009f60 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d007      	beq.n	8009f80 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7ff fca7 	bl	80098c8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop

08009f88 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009f88:	b5b0      	push	{r4, r5, r7, lr}
 8009f8a:	b08c      	sub	sp, #48	; 0x30
 8009f8c:	af04      	add	r7, sp, #16
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	4a95      	ldr	r2, [pc, #596]	; (800a1ec <tcp_input+0x264>)
 8009f98:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	895b      	ldrh	r3, [r3, #10]
 8009f9e:	2b13      	cmp	r3, #19
 8009fa0:	d800      	bhi.n	8009fa4 <tcp_input+0x1c>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
 8009fa2:	e332      	b.n	800a60a <tcp_input+0x682>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009fa4:	4b92      	ldr	r3, [pc, #584]	; (800a1f0 <tcp_input+0x268>)
 8009fa6:	695a      	ldr	r2, [r3, #20]
 8009fa8:	4b91      	ldr	r3, [pc, #580]	; (800a1f0 <tcp_input+0x268>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4610      	mov	r0, r2
 8009fae:	4619      	mov	r1, r3
 8009fb0:	f7fd f948 	bl	8007244 <ip4_addr_isbroadcast_u32>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f040 8327 	bne.w	800a60a <tcp_input+0x682>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009fbc:	4b8c      	ldr	r3, [pc, #560]	; (800a1f0 <tcp_input+0x268>)
 8009fbe:	695b      	ldr	r3, [r3, #20]
 8009fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009fc4:	2be0      	cmp	r3, #224	; 0xe0
 8009fc6:	f000 8320 	beq.w	800a60a <tcp_input+0x682>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009fca:	4b88      	ldr	r3, [pc, #544]	; (800a1ec <tcp_input+0x264>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	899b      	ldrh	r3, [r3, #12]
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fd f978 	bl	80072c8 <lwip_htons>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	0b1b      	lsrs	r3, r3, #12
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009fe4:	7cbb      	ldrb	r3, [r7, #18]
 8009fe6:	2b13      	cmp	r3, #19
 8009fe8:	f240 830f 	bls.w	800a60a <tcp_input+0x682>
 8009fec:	7cbb      	ldrb	r3, [r7, #18]
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	891b      	ldrh	r3, [r3, #8]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	f200 8308 	bhi.w	800a60a <tcp_input+0x682>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009ffa:	7cbb      	ldrb	r3, [r7, #18]
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	3b14      	subs	r3, #20
 800a000:	b29a      	uxth	r2, r3
 800a002:	4b7c      	ldr	r3, [pc, #496]	; (800a1f4 <tcp_input+0x26c>)
 800a004:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a006:	4b7c      	ldr	r3, [pc, #496]	; (800a1f8 <tcp_input+0x270>)
 800a008:	2200      	movs	r2, #0
 800a00a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	895a      	ldrh	r2, [r3, #10]
 800a010:	7cbb      	ldrb	r3, [r7, #18]
 800a012:	b29b      	uxth	r3, r3
 800a014:	429a      	cmp	r2, r3
 800a016:	d309      	bcc.n	800a02c <tcp_input+0xa4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a018:	4b76      	ldr	r3, [pc, #472]	; (800a1f4 <tcp_input+0x26c>)
 800a01a:	881a      	ldrh	r2, [r3, #0]
 800a01c:	4b77      	ldr	r3, [pc, #476]	; (800a1fc <tcp_input+0x274>)
 800a01e:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a020:	7cbb      	ldrb	r3, [r7, #18]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	4619      	mov	r1, r3
 800a026:	f7fe f959 	bl	80082dc <pbuf_remove_header>
 800a02a:	e02d      	b.n	800a088 <tcp_input+0x100>
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	2114      	movs	r1, #20
 800a030:	f7fe f954 	bl	80082dc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	895a      	ldrh	r2, [r3, #10]
 800a038:	4b70      	ldr	r3, [pc, #448]	; (800a1fc <tcp_input+0x274>)
 800a03a:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a03c:	4b6d      	ldr	r3, [pc, #436]	; (800a1f4 <tcp_input+0x26c>)
 800a03e:	881a      	ldrh	r2, [r3, #0]
 800a040:	4b6e      	ldr	r3, [pc, #440]	; (800a1fc <tcp_input+0x274>)
 800a042:	881b      	ldrh	r3, [r3, #0]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a048:	4b6c      	ldr	r3, [pc, #432]	; (800a1fc <tcp_input+0x274>)
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	4619      	mov	r1, r3
 800a050:	f7fe f944 	bl	80082dc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	895b      	ldrh	r3, [r3, #10]
 800a05a:	8a3a      	ldrh	r2, [r7, #16]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d900      	bls.n	800a062 <tcp_input+0xda>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
 800a060:	e2d3      	b.n	800a60a <tcp_input+0x682>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	4a63      	ldr	r2, [pc, #396]	; (800a1f8 <tcp_input+0x270>)
 800a06a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	8a3b      	ldrh	r3, [r7, #16]
 800a072:	4610      	mov	r0, r2
 800a074:	4619      	mov	r1, r3
 800a076:	f7fe f931 	bl	80082dc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	891a      	ldrh	r2, [r3, #8]
 800a07e:	8a3b      	ldrh	r3, [r7, #16]
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	b29a      	uxth	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a088:	4b58      	ldr	r3, [pc, #352]	; (800a1ec <tcp_input+0x264>)
 800a08a:	681c      	ldr	r4, [r3, #0]
 800a08c:	4b57      	ldr	r3, [pc, #348]	; (800a1ec <tcp_input+0x264>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	881b      	ldrh	r3, [r3, #0]
 800a092:	b29b      	uxth	r3, r3
 800a094:	4618      	mov	r0, r3
 800a096:	f7fd f917 	bl	80072c8 <lwip_htons>
 800a09a:	4603      	mov	r3, r0
 800a09c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a09e:	4b53      	ldr	r3, [pc, #332]	; (800a1ec <tcp_input+0x264>)
 800a0a0:	681c      	ldr	r4, [r3, #0]
 800a0a2:	4b52      	ldr	r3, [pc, #328]	; (800a1ec <tcp_input+0x264>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	885b      	ldrh	r3, [r3, #2]
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fd f90c 	bl	80072c8 <lwip_htons>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a0b4:	4b4d      	ldr	r3, [pc, #308]	; (800a1ec <tcp_input+0x264>)
 800a0b6:	681c      	ldr	r4, [r3, #0]
 800a0b8:	4b4c      	ldr	r3, [pc, #304]	; (800a1ec <tcp_input+0x264>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fd f918 	bl	80072f4 <lwip_htonl>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	6063      	str	r3, [r4, #4]
 800a0c8:	6863      	ldr	r3, [r4, #4]
 800a0ca:	4a4d      	ldr	r2, [pc, #308]	; (800a200 <tcp_input+0x278>)
 800a0cc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a0ce:	4b47      	ldr	r3, [pc, #284]	; (800a1ec <tcp_input+0x264>)
 800a0d0:	681c      	ldr	r4, [r3, #0]
 800a0d2:	4b46      	ldr	r3, [pc, #280]	; (800a1ec <tcp_input+0x264>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fd f90b 	bl	80072f4 <lwip_htonl>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	60a3      	str	r3, [r4, #8]
 800a0e2:	68a3      	ldr	r3, [r4, #8]
 800a0e4:	4a47      	ldr	r2, [pc, #284]	; (800a204 <tcp_input+0x27c>)
 800a0e6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a0e8:	4b40      	ldr	r3, [pc, #256]	; (800a1ec <tcp_input+0x264>)
 800a0ea:	681c      	ldr	r4, [r3, #0]
 800a0ec:	4b3f      	ldr	r3, [pc, #252]	; (800a1ec <tcp_input+0x264>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	89db      	ldrh	r3, [r3, #14]
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fd f8e7 	bl	80072c8 <lwip_htons>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a0fe:	4b3b      	ldr	r3, [pc, #236]	; (800a1ec <tcp_input+0x264>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	899b      	ldrh	r3, [r3, #12]
 800a104:	b29b      	uxth	r3, r3
 800a106:	4618      	mov	r0, r3
 800a108:	f7fd f8de 	bl	80072c8 <lwip_htons>
 800a10c:	4603      	mov	r3, r0
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a114:	b2da      	uxtb	r2, r3
 800a116:	4b3c      	ldr	r3, [pc, #240]	; (800a208 <tcp_input+0x280>)
 800a118:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	891a      	ldrh	r2, [r3, #8]
 800a11e:	4b3b      	ldr	r3, [pc, #236]	; (800a20c <tcp_input+0x284>)
 800a120:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a122:	4b39      	ldr	r3, [pc, #228]	; (800a208 <tcp_input+0x280>)
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	f003 0303 	and.w	r3, r3, #3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00c      	beq.n	800a148 <tcp_input+0x1c0>
    tcplen++;
 800a12e:	4b37      	ldr	r3, [pc, #220]	; (800a20c <tcp_input+0x284>)
 800a130:	881b      	ldrh	r3, [r3, #0]
 800a132:	3301      	adds	r3, #1
 800a134:	b29a      	uxth	r2, r3
 800a136:	4b35      	ldr	r3, [pc, #212]	; (800a20c <tcp_input+0x284>)
 800a138:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	891a      	ldrh	r2, [r3, #8]
 800a13e:	4b33      	ldr	r3, [pc, #204]	; (800a20c <tcp_input+0x284>)
 800a140:	881b      	ldrh	r3, [r3, #0]
 800a142:	429a      	cmp	r2, r3
 800a144:	d900      	bls.n	800a148 <tcp_input+0x1c0>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
 800a146:	e260      	b.n	800a60a <tcp_input+0x682>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a148:	2300      	movs	r3, #0
 800a14a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a14c:	4b30      	ldr	r3, [pc, #192]	; (800a210 <tcp_input+0x288>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	61fb      	str	r3, [r7, #28]
 800a152:	e040      	b.n	800a1d6 <tcp_input+0x24e>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	7a1b      	ldrb	r3, [r3, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00c      	beq.n	800a176 <tcp_input+0x1ee>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	7a1a      	ldrb	r2, [r3, #8]
 800a160:	4b23      	ldr	r3, [pc, #140]	; (800a1f0 <tcp_input+0x268>)
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a168:	3301      	adds	r3, #1
 800a16a:	b2db      	uxtb	r3, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d002      	beq.n	800a176 <tcp_input+0x1ee>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
      prev = pcb;
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	61bb      	str	r3, [r7, #24]
      continue;
 800a174:	e02c      	b.n	800a1d0 <tcp_input+0x248>
    }

    if (pcb->remote_port == tcphdr->src &&
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	8b1a      	ldrh	r2, [r3, #24]
 800a17a:	4b1c      	ldr	r3, [pc, #112]	; (800a1ec <tcp_input+0x264>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	881b      	ldrh	r3, [r3, #0]
 800a180:	b29b      	uxth	r3, r3
 800a182:	429a      	cmp	r2, r3
 800a184:	d122      	bne.n	800a1cc <tcp_input+0x244>
        pcb->local_port == tcphdr->dest &&
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	8ada      	ldrh	r2, [r3, #22]
 800a18a:	4b18      	ldr	r3, [pc, #96]	; (800a1ec <tcp_input+0x264>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	885b      	ldrh	r3, [r3, #2]
 800a190:	b29b      	uxth	r3, r3
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
      prev = pcb;
      continue;
    }

    if (pcb->remote_port == tcphdr->src &&
 800a192:	429a      	cmp	r2, r3
 800a194:	d11a      	bne.n	800a1cc <tcp_input+0x244>
        pcb->local_port == tcphdr->dest &&
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	685a      	ldr	r2, [r3, #4]
 800a19a:	4b15      	ldr	r3, [pc, #84]	; (800a1f0 <tcp_input+0x268>)
 800a19c:	691b      	ldr	r3, [r3, #16]
      prev = pcb;
      continue;
    }

    if (pcb->remote_port == tcphdr->src &&
        pcb->local_port == tcphdr->dest &&
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d114      	bne.n	800a1cc <tcp_input+0x244>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	4b12      	ldr	r3, [pc, #72]	; (800a1f0 <tcp_input+0x268>)
 800a1a8:	695b      	ldr	r3, [r3, #20]
      continue;
    }

    if (pcb->remote_port == tcphdr->src &&
        pcb->local_port == tcphdr->dest &&
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d10e      	bne.n	800a1cc <tcp_input+0x244>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00a      	beq.n	800a1ca <tcp_input+0x242>
        prev->next = pcb->next;
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	68da      	ldr	r2, [r3, #12]
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a1bc:	4b14      	ldr	r3, [pc, #80]	; (800a210 <tcp_input+0x288>)
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a1c4:	4a12      	ldr	r2, [pc, #72]	; (800a210 <tcp_input+0x288>)
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
 800a1ca:	e007      	b.n	800a1dc <tcp_input+0x254>
    }
    prev = pcb;
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	61bb      	str	r3, [r7, #24]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	61fb      	str	r3, [r7, #28]
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1bb      	bne.n	800a154 <tcp_input+0x1cc>
      break;
    }
    prev = pcb;
  }

  if (pcb == NULL) {
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f040 809f 	bne.w	800a322 <tcp_input+0x39a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1e4:	4b0b      	ldr	r3, [pc, #44]	; (800a214 <tcp_input+0x28c>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	61fb      	str	r3, [r7, #28]
 800a1ea:	e04a      	b.n	800a282 <tcp_input+0x2fa>
 800a1ec:	1ffe9270 	.word	0x1ffe9270
 800a1f0:	1ffe94b0 	.word	0x1ffe94b0
 800a1f4:	1ffe9274 	.word	0x1ffe9274
 800a1f8:	1ffe9278 	.word	0x1ffe9278
 800a1fc:	1ffe9276 	.word	0x1ffe9276
 800a200:	1ffe9280 	.word	0x1ffe9280
 800a204:	1ffe9284 	.word	0x1ffe9284
 800a208:	1ffe928c 	.word	0x1ffe928c
 800a20c:	1ffe928a 	.word	0x1ffe928a
 800a210:	1fff0284 	.word	0x1fff0284
 800a214:	1fff0294 	.word	0x1fff0294
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	7a1b      	ldrb	r3, [r3, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00a      	beq.n	800a236 <tcp_input+0x2ae>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	7a1a      	ldrb	r2, [r3, #8]
 800a224:	4b95      	ldr	r3, [pc, #596]	; (800a47c <tcp_input+0x4f4>)
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a22c:	3301      	adds	r3, #1
 800a22e:	b2db      	uxtb	r3, r3
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a230:	429a      	cmp	r2, r3
 800a232:	d000      	beq.n	800a236 <tcp_input+0x2ae>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
        continue;
 800a234:	e022      	b.n	800a27c <tcp_input+0x2f4>
      }

      if (pcb->remote_port == tcphdr->src &&
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	8b1a      	ldrh	r2, [r3, #24]
 800a23a:	4b91      	ldr	r3, [pc, #580]	; (800a480 <tcp_input+0x4f8>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	881b      	ldrh	r3, [r3, #0]
 800a240:	b29b      	uxth	r3, r3
 800a242:	429a      	cmp	r2, r3
 800a244:	d11a      	bne.n	800a27c <tcp_input+0x2f4>
          pcb->local_port == tcphdr->dest &&
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	8ada      	ldrh	r2, [r3, #22]
 800a24a:	4b8d      	ldr	r3, [pc, #564]	; (800a480 <tcp_input+0x4f8>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	885b      	ldrh	r3, [r3, #2]
 800a250:	b29b      	uxth	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a252:	429a      	cmp	r2, r3
 800a254:	d112      	bne.n	800a27c <tcp_input+0x2f4>
          pcb->local_port == tcphdr->dest &&
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	685a      	ldr	r2, [r3, #4]
 800a25a:	4b88      	ldr	r3, [pc, #544]	; (800a47c <tcp_input+0x4f4>)
 800a25c:	691b      	ldr	r3, [r3, #16]
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
          pcb->local_port == tcphdr->dest &&
 800a25e:	429a      	cmp	r2, r3
 800a260:	d10c      	bne.n	800a27c <tcp_input+0x2f4>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	4b85      	ldr	r3, [pc, #532]	; (800a47c <tcp_input+0x4f4>)
 800a268:	695b      	ldr	r3, [r3, #20]
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
          pcb->local_port == tcphdr->dest &&
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d106      	bne.n	800a27c <tcp_input+0x2f4>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a26e:	69f8      	ldr	r0, [r7, #28]
 800a270:	f000 fb18 	bl	800a8a4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7fe f8b1 	bl	80083dc <pbuf_free>
        return;
 800a27a:	e1c9      	b.n	800a610 <tcp_input+0x688>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	61fb      	str	r3, [r7, #28]
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1c7      	bne.n	800a218 <tcp_input+0x290>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a28c:	4b7d      	ldr	r3, [pc, #500]	; (800a484 <tcp_input+0x4fc>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	617b      	str	r3, [r7, #20]
 800a292:	e02b      	b.n	800a2ec <tcp_input+0x364>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	7a1b      	ldrb	r3, [r3, #8]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00c      	beq.n	800a2b6 <tcp_input+0x32e>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	7a1a      	ldrb	r2, [r3, #8]
 800a2a0:	4b76      	ldr	r3, [pc, #472]	; (800a47c <tcp_input+0x4f4>)
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	b2db      	uxtb	r3, r3
    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d002      	beq.n	800a2b6 <tcp_input+0x32e>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
        prev = (struct tcp_pcb *)lpcb;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	61bb      	str	r3, [r7, #24]
        continue;
 800a2b4:	e017      	b.n	800a2e6 <tcp_input+0x35e>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	8ada      	ldrh	r2, [r3, #22]
 800a2ba:	4b71      	ldr	r3, [pc, #452]	; (800a480 <tcp_input+0x4f8>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	885b      	ldrh	r3, [r3, #2]
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d10d      	bne.n	800a2e2 <tcp_input+0x35a>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	4b6c      	ldr	r3, [pc, #432]	; (800a47c <tcp_input+0x4f4>)
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d100      	bne.n	800a2d4 <tcp_input+0x34c>
            /* found an exact match */
            break;
 800a2d2:	e00e      	b.n	800a2f2 <tcp_input+0x36a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00b      	beq.n	800a2f2 <tcp_input+0x36a>
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d007      	beq.n	800a2f2 <tcp_input+0x36a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	61bb      	str	r3, [r7, #24]
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	617b      	str	r3, [r7, #20]
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1d0      	bne.n	800a294 <tcp_input+0x30c>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d014      	beq.n	800a322 <tcp_input+0x39a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00a      	beq.n	800a314 <tcp_input+0x38c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	68da      	ldr	r2, [r3, #12]
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a306:	4b5f      	ldr	r3, [pc, #380]	; (800a484 <tcp_input+0x4fc>)
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a30e:	4a5d      	ldr	r2, [pc, #372]	; (800a484 <tcp_input+0x4fc>)
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a314:	6978      	ldr	r0, [r7, #20]
 800a316:	f000 f9c3 	bl	800a6a0 <tcp_listen_input>
      }
      pbuf_free(p);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7fe f85e 	bl	80083dc <pbuf_free>
      return;
 800a320:	e176      	b.n	800a610 <tcp_input+0x688>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	2b00      	cmp	r3, #0
 800a326:	f000 8144 	beq.w	800a5b2 <tcp_input+0x62a>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a32a:	4b57      	ldr	r3, [pc, #348]	; (800a488 <tcp_input+0x500>)
 800a32c:	2200      	movs	r2, #0
 800a32e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	891a      	ldrh	r2, [r3, #8]
 800a334:	4b54      	ldr	r3, [pc, #336]	; (800a488 <tcp_input+0x500>)
 800a336:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a338:	4a53      	ldr	r2, [pc, #332]	; (800a488 <tcp_input+0x500>)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a33e:	4b50      	ldr	r3, [pc, #320]	; (800a480 <tcp_input+0x4f8>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a51      	ldr	r2, [pc, #324]	; (800a488 <tcp_input+0x500>)
 800a344:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a346:	4b51      	ldr	r3, [pc, #324]	; (800a48c <tcp_input+0x504>)
 800a348:	2200      	movs	r2, #0
 800a34a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a34c:	4b50      	ldr	r3, [pc, #320]	; (800a490 <tcp_input+0x508>)
 800a34e:	2200      	movs	r2, #0
 800a350:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a352:	4b50      	ldr	r3, [pc, #320]	; (800a494 <tcp_input+0x50c>)
 800a354:	2200      	movs	r2, #0
 800a356:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a358:	4b4f      	ldr	r3, [pc, #316]	; (800a498 <tcp_input+0x510>)
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	f003 0308 	and.w	r3, r3, #8
 800a360:	2b00      	cmp	r3, #0
 800a362:	d006      	beq.n	800a372 <tcp_input+0x3ea>
      p->flags |= PBUF_FLAG_PUSH;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	7b5b      	ldrb	r3, [r3, #13]
 800a368:	f043 0301 	orr.w	r3, r3, #1
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a376:	2b00      	cmp	r3, #0
 800a378:	d017      	beq.n	800a3aa <tcp_input+0x422>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a37a:	69f8      	ldr	r0, [r7, #28]
 800a37c:	f7ff fa36 	bl	80097ec <tcp_process_refused_data>
 800a380:	4603      	mov	r3, r0
 800a382:	f113 0f0d 	cmn.w	r3, #13
 800a386:	d007      	beq.n	800a398 <tcp_input+0x410>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      p->flags |= PBUF_FLAG_PUSH;
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00c      	beq.n	800a3aa <tcp_input+0x422>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a390:	4b42      	ldr	r3, [pc, #264]	; (800a49c <tcp_input+0x514>)
 800a392:	881b      	ldrh	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d008      	beq.n	800a3aa <tcp_input+0x422>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d103      	bne.n	800a3a8 <tcp_input+0x420>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a3a0:	69f8      	ldr	r0, [r7, #28]
 800a3a2:	f003 f8ed 	bl	800d580 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a3a6:	e0f1      	b.n	800a58c <tcp_input+0x604>
 800a3a8:	e0f0      	b.n	800a58c <tcp_input+0x604>
      }
    }
    tcp_input_pcb = pcb;
 800a3aa:	4a3d      	ldr	r2, [pc, #244]	; (800a4a0 <tcp_input+0x518>)
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a3b0:	69f8      	ldr	r0, [r7, #28]
 800a3b2:	f000 fae1 	bl	800a978 <tcp_process>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a3ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a3be:	f113 0f0d 	cmn.w	r3, #13
 800a3c2:	f000 80e3 	beq.w	800a58c <tcp_input+0x604>
      if (recv_flags & TF_RESET) {
 800a3c6:	4b32      	ldr	r3, [pc, #200]	; (800a490 <tcp_input+0x508>)
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	f003 0308 	and.w	r3, r3, #8
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d015      	beq.n	800a3fe <tcp_input+0x476>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d008      	beq.n	800a3ee <tcp_input+0x466>
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3e2:	69fa      	ldr	r2, [r7, #28]
 800a3e4:	6912      	ldr	r2, [r2, #16]
 800a3e6:	4610      	mov	r0, r2
 800a3e8:	f06f 010d 	mvn.w	r1, #13
 800a3ec:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a3ee:	482d      	ldr	r0, [pc, #180]	; (800a4a4 <tcp_input+0x51c>)
 800a3f0:	69f9      	ldr	r1, [r7, #28]
 800a3f2:	f7ff fcc9 	bl	8009d88 <tcp_pcb_remove>
        tcp_free(pcb);
 800a3f6:	69f8      	ldr	r0, [r7, #28]
 800a3f8:	f7fe fa82 	bl	8008900 <tcp_free>
 800a3fc:	e0c6      	b.n	800a58c <tcp_input+0x604>
      } else {
        err = ERR_OK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a402:	4b24      	ldr	r3, [pc, #144]	; (800a494 <tcp_input+0x50c>)
 800a404:	881b      	ldrh	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d01e      	beq.n	800a448 <tcp_input+0x4c0>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a40a:	4b22      	ldr	r3, [pc, #136]	; (800a494 <tcp_input+0x50c>)
 800a40c:	881b      	ldrh	r3, [r3, #0]
 800a40e:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00b      	beq.n	800a432 <tcp_input+0x4aa>
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a420:	69fa      	ldr	r2, [r7, #28]
 800a422:	6911      	ldr	r1, [r2, #16]
 800a424:	89fa      	ldrh	r2, [r7, #14]
 800a426:	4608      	mov	r0, r1
 800a428:	69f9      	ldr	r1, [r7, #28]
 800a42a:	4798      	blx	r3
 800a42c:	4603      	mov	r3, r0
 800a42e:	74fb      	strb	r3, [r7, #19]
 800a430:	e001      	b.n	800a436 <tcp_input+0x4ae>
 800a432:	2300      	movs	r3, #0
 800a434:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a436:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a43a:	f113 0f0d 	cmn.w	r3, #13
 800a43e:	d100      	bne.n	800a442 <tcp_input+0x4ba>
              goto aborted;
 800a440:	e0a4      	b.n	800a58c <tcp_input+0x604>
            }
          }
          recv_acked = 0;
 800a442:	4b14      	ldr	r3, [pc, #80]	; (800a494 <tcp_input+0x50c>)
 800a444:	2200      	movs	r2, #0
 800a446:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a448:	69f8      	ldr	r0, [r7, #28]
 800a44a:	f000 f8f9 	bl	800a640 <tcp_input_delayed_close>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d000      	beq.n	800a456 <tcp_input+0x4ce>
          goto aborted;
 800a454:	e09a      	b.n	800a58c <tcp_input+0x604>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a456:	4b0d      	ldr	r3, [pc, #52]	; (800a48c <tcp_input+0x504>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d050      	beq.n	800a500 <tcp_input+0x578>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	8b5b      	ldrh	r3, [r3, #26]
 800a462:	f003 0310 	and.w	r3, r3, #16
 800a466:	2b00      	cmp	r3, #0
 800a468:	d01e      	beq.n	800a4a8 <tcp_input+0x520>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a46a:	4b08      	ldr	r3, [pc, #32]	; (800a48c <tcp_input+0x504>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fd ffb4 	bl	80083dc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a474:	69f8      	ldr	r0, [r7, #28]
 800a476:	f7fe fca5 	bl	8008dc4 <tcp_abort>
            goto aborted;
 800a47a:	e087      	b.n	800a58c <tcp_input+0x604>
 800a47c:	1ffe94b0 	.word	0x1ffe94b0
 800a480:	1ffe9270 	.word	0x1ffe9270
 800a484:	1fff028c 	.word	0x1fff028c
 800a488:	1ffe9260 	.word	0x1ffe9260
 800a48c:	1ffe9290 	.word	0x1ffe9290
 800a490:	1ffe928d 	.word	0x1ffe928d
 800a494:	1ffe9288 	.word	0x1ffe9288
 800a498:	1ffe928c 	.word	0x1ffe928c
 800a49c:	1ffe928a 	.word	0x1ffe928a
 800a4a0:	1fff0298 	.word	0x1fff0298
 800a4a4:	1fff0284 	.word	0x1fff0284
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00e      	beq.n	800a4d0 <tcp_input+0x548>
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	691a      	ldr	r2, [r3, #16]
 800a4bc:	4b56      	ldr	r3, [pc, #344]	; (800a618 <tcp_input+0x690>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4610      	mov	r0, r2
 800a4c2:	69f9      	ldr	r1, [r7, #28]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	47a0      	blx	r4
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	74fb      	strb	r3, [r7, #19]
 800a4ce:	e009      	b.n	800a4e4 <tcp_input+0x55c>
 800a4d0:	4b51      	ldr	r3, [pc, #324]	; (800a618 <tcp_input+0x690>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	69f9      	ldr	r1, [r7, #28]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	2300      	movs	r3, #0
 800a4dc:	f7ff fa3c 	bl	8009958 <tcp_recv_null>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a4e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a4e8:	f113 0f0d 	cmn.w	r3, #13
 800a4ec:	d100      	bne.n	800a4f0 <tcp_input+0x568>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
 800a4ee:	e04d      	b.n	800a58c <tcp_input+0x604>
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a4f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d003      	beq.n	800a500 <tcp_input+0x578>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a4f8:	4b47      	ldr	r3, [pc, #284]	; (800a618 <tcp_input+0x690>)
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a500:	4b46      	ldr	r3, [pc, #280]	; (800a61c <tcp_input+0x694>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	f003 0320 	and.w	r3, r3, #32
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d032      	beq.n	800a572 <tcp_input+0x5ea>
          if (pcb->refused_data != NULL) {
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a510:	2b00      	cmp	r3, #0
 800a512:	d009      	beq.n	800a528 <tcp_input+0x5a0>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a518:	69fa      	ldr	r2, [r7, #28]
 800a51a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800a51c:	7b52      	ldrb	r2, [r2, #13]
 800a51e:	f042 0220 	orr.w	r2, r2, #32
 800a522:	b2d2      	uxtb	r2, r2
 800a524:	735a      	strb	r2, [r3, #13]
 800a526:	e024      	b.n	800a572 <tcp_input+0x5ea>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a52c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a530:	d005      	beq.n	800a53e <tcp_input+0x5b6>
              pcb->rcv_wnd++;
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a536:	3301      	adds	r3, #1
 800a538:	b29a      	uxth	r2, r3
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00c      	beq.n	800a562 <tcp_input+0x5da>
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	4618      	mov	r0, r3
 800a554:	69f9      	ldr	r1, [r7, #28]
 800a556:	2200      	movs	r2, #0
 800a558:	2300      	movs	r3, #0
 800a55a:	47a0      	blx	r4
 800a55c:	4603      	mov	r3, r0
 800a55e:	74fb      	strb	r3, [r7, #19]
 800a560:	e001      	b.n	800a566 <tcp_input+0x5de>
 800a562:	2300      	movs	r3, #0
 800a564:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a566:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a56a:	f113 0f0d 	cmn.w	r3, #13
 800a56e:	d100      	bne.n	800a572 <tcp_input+0x5ea>
              goto aborted;
 800a570:	e00c      	b.n	800a58c <tcp_input+0x604>
            }
          }
        }

        tcp_input_pcb = NULL;
 800a572:	4b2b      	ldr	r3, [pc, #172]	; (800a620 <tcp_input+0x698>)
 800a574:	2200      	movs	r2, #0
 800a576:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a578:	69f8      	ldr	r0, [r7, #28]
 800a57a:	f000 f861 	bl	800a640 <tcp_input_delayed_close>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d000      	beq.n	800a586 <tcp_input+0x5fe>
          goto aborted;
 800a584:	e002      	b.n	800a58c <tcp_input+0x604>
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a586:	69f8      	ldr	r0, [r7, #28]
 800a588:	f002 fb4e 	bl	800cc28 <tcp_output>
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 800a58c:	4b24      	ldr	r3, [pc, #144]	; (800a620 <tcp_input+0x698>)
 800a58e:	2200      	movs	r2, #0
 800a590:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a592:	4b21      	ldr	r3, [pc, #132]	; (800a618 <tcp_input+0x690>)
 800a594:	2200      	movs	r2, #0
 800a596:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a598:	4b22      	ldr	r3, [pc, #136]	; (800a624 <tcp_input+0x69c>)
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d033      	beq.n	800a608 <tcp_input+0x680>
      pbuf_free(inseg.p);
 800a5a0:	4b20      	ldr	r3, [pc, #128]	; (800a624 <tcp_input+0x69c>)
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7fd ff19 	bl	80083dc <pbuf_free>
      inseg.p = NULL;
 800a5aa:	4b1e      	ldr	r3, [pc, #120]	; (800a624 <tcp_input+0x69c>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a5b0:	e02e      	b.n	800a610 <tcp_input+0x688>
    }
  } else {
    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a5b2:	4b1d      	ldr	r3, [pc, #116]	; (800a628 <tcp_input+0x6a0>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	899b      	ldrh	r3, [r3, #12]
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fc fe84 	bl	80072c8 <lwip_htons>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	f003 0304 	and.w	r3, r3, #4
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d119      	bne.n	800a600 <tcp_input+0x678>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a5cc:	4b17      	ldr	r3, [pc, #92]	; (800a62c <tcp_input+0x6a4>)
 800a5ce:	681d      	ldr	r5, [r3, #0]
 800a5d0:	4b17      	ldr	r3, [pc, #92]	; (800a630 <tcp_input+0x6a8>)
 800a5d2:	881b      	ldrh	r3, [r3, #0]
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	4b17      	ldr	r3, [pc, #92]	; (800a634 <tcp_input+0x6ac>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	18d4      	adds	r4, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a5dc:	4b12      	ldr	r3, [pc, #72]	; (800a628 <tcp_input+0x6a0>)
 800a5de:	681b      	ldr	r3, [r3, #0]
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a5e0:	885b      	ldrh	r3, [r3, #2]
 800a5e2:	b29a      	uxth	r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a5e4:	4b10      	ldr	r3, [pc, #64]	; (800a628 <tcp_input+0x6a0>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a5e8:	881b      	ldrh	r3, [r3, #0]
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	4912      	ldr	r1, [pc, #72]	; (800a638 <tcp_input+0x6b0>)
 800a5ee:	9100      	str	r1, [sp, #0]
 800a5f0:	9201      	str	r2, [sp, #4]
 800a5f2:	9302      	str	r3, [sp, #8]
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	4629      	mov	r1, r5
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	4b10      	ldr	r3, [pc, #64]	; (800a63c <tcp_input+0x6b4>)
 800a5fc:	f002 ff8c 	bl	800d518 <tcp_rst>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    }
    pbuf_free(p);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f7fd feeb 	bl	80083dc <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a606:	e003      	b.n	800a610 <tcp_input+0x688>
 800a608:	e002      	b.n	800a610 <tcp_input+0x688>
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f7fd fee6 	bl	80083dc <pbuf_free>
}
 800a610:	3720      	adds	r7, #32
 800a612:	46bd      	mov	sp, r7
 800a614:	bdb0      	pop	{r4, r5, r7, pc}
 800a616:	bf00      	nop
 800a618:	1ffe9290 	.word	0x1ffe9290
 800a61c:	1ffe928d 	.word	0x1ffe928d
 800a620:	1fff0298 	.word	0x1fff0298
 800a624:	1ffe9260 	.word	0x1ffe9260
 800a628:	1ffe9270 	.word	0x1ffe9270
 800a62c:	1ffe9284 	.word	0x1ffe9284
 800a630:	1ffe928a 	.word	0x1ffe928a
 800a634:	1ffe9280 	.word	0x1ffe9280
 800a638:	1ffe94c0 	.word	0x1ffe94c0
 800a63c:	1ffe94c4 	.word	0x1ffe94c4

0800a640 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);

  if (recv_flags & TF_CLOSED) {
 800a648:	4b13      	ldr	r3, [pc, #76]	; (800a698 <tcp_input_delayed_close+0x58>)
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	f003 0310 	and.w	r3, r3, #16
 800a650:	2b00      	cmp	r3, #0
 800a652:	d01c      	beq.n	800a68e <tcp_input_delayed_close+0x4e>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	8b5b      	ldrh	r3, [r3, #26]
 800a658:	f003 0310 	and.w	r3, r3, #16
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10d      	bne.n	800a67c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a666:	2b00      	cmp	r3, #0
 800a668:	d008      	beq.n	800a67c <tcp_input_delayed_close+0x3c>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	6912      	ldr	r2, [r2, #16]
 800a674:	4610      	mov	r0, r2
 800a676:	f06f 010e 	mvn.w	r1, #14
 800a67a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a67c:	4807      	ldr	r0, [pc, #28]	; (800a69c <tcp_input_delayed_close+0x5c>)
 800a67e:	6879      	ldr	r1, [r7, #4]
 800a680:	f7ff fb82 	bl	8009d88 <tcp_pcb_remove>
    tcp_free(pcb);
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f7fe f93b 	bl	8008900 <tcp_free>
    return 1;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e000      	b.n	800a690 <tcp_input_delayed_close+0x50>
  }
  return 0;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3708      	adds	r7, #8
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	1ffe928d 	.word	0x1ffe928d
 800a69c:	1fff0284 	.word	0x1fff0284

0800a6a0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a6a0:	b5b0      	push	{r4, r5, r7, lr}
 800a6a2:	b08a      	sub	sp, #40	; 0x28
 800a6a4:	af04      	add	r7, sp, #16
 800a6a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a6a8:	4b74      	ldr	r3, [pc, #464]	; (800a87c <tcp_listen_input+0x1dc>)
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	f003 0304 	and.w	r3, r3, #4
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d000      	beq.n	800a6b6 <tcp_listen_input+0x16>
    /* An incoming RST should be ignored. Return. */
    return;
 800a6b4:	e0de      	b.n	800a874 <tcp_listen_input+0x1d4>

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a6b6:	4b71      	ldr	r3, [pc, #452]	; (800a87c <tcp_listen_input+0x1dc>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	f003 0310 	and.w	r3, r3, #16
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d01a      	beq.n	800a6f8 <tcp_listen_input+0x58>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6c2:	4b6f      	ldr	r3, [pc, #444]	; (800a880 <tcp_listen_input+0x1e0>)
 800a6c4:	681d      	ldr	r5, [r3, #0]
 800a6c6:	4b6f      	ldr	r3, [pc, #444]	; (800a884 <tcp_listen_input+0x1e4>)
 800a6c8:	881b      	ldrh	r3, [r3, #0]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	4b6e      	ldr	r3, [pc, #440]	; (800a888 <tcp_listen_input+0x1e8>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	18d4      	adds	r4, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6d2:	4b6e      	ldr	r3, [pc, #440]	; (800a88c <tcp_listen_input+0x1ec>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6d6:	885b      	ldrh	r3, [r3, #2]
 800a6d8:	b29a      	uxth	r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6da:	4b6c      	ldr	r3, [pc, #432]	; (800a88c <tcp_listen_input+0x1ec>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	496b      	ldr	r1, [pc, #428]	; (800a890 <tcp_listen_input+0x1f0>)
 800a6e4:	9100      	str	r1, [sp, #0]
 800a6e6:	9201      	str	r2, [sp, #4]
 800a6e8:	9302      	str	r3, [sp, #8]
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	4629      	mov	r1, r5
 800a6ee:	4622      	mov	r2, r4
 800a6f0:	4b68      	ldr	r3, [pc, #416]	; (800a894 <tcp_listen_input+0x1f4>)
 800a6f2:	f002 ff11 	bl	800d518 <tcp_rst>
 800a6f6:	e0bc      	b.n	800a872 <tcp_listen_input+0x1d2>
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  } else if (flags & TCP_SYN) {
 800a6f8:	4b60      	ldr	r3, [pc, #384]	; (800a87c <tcp_listen_input+0x1dc>)
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	f003 0302 	and.w	r3, r3, #2
 800a700:	2b00      	cmp	r3, #0
 800a702:	f000 80b6 	beq.w	800a872 <tcp_listen_input+0x1d2>
    LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->dest));
#if TCP_LISTEN_BACKLOG
    if (pcb->accepts_pending >= pcb->backlog) {
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	7f5a      	ldrb	r2, [r3, #29]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	7f1b      	ldrb	r3, [r3, #28]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d300      	bcc.n	800a714 <tcp_listen_input+0x74>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return;
 800a712:	e0af      	b.n	800a874 <tcp_listen_input+0x1d4>
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	7d5b      	ldrb	r3, [r3, #21]
 800a718:	4618      	mov	r0, r3
 800a71a:	f7ff fa19 	bl	8009b50 <tcp_alloc>
 800a71e:	6178      	str	r0, [r7, #20]
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d112      	bne.n	800a74c <tcp_listen_input+0xac>
      err_t err;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
      TCP_STATS_INC(tcp.memerr);
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00b      	beq.n	800a746 <tcp_listen_input+0xa6>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	6912      	ldr	r2, [r2, #16]
 800a736:	4610      	mov	r0, r2
 800a738:	2100      	movs	r1, #0
 800a73a:	f04f 32ff 	mov.w	r2, #4294967295
 800a73e:	4798      	blx	r3
 800a740:	4603      	mov	r3, r0
 800a742:	74fb      	strb	r3, [r7, #19]
      LWIP_UNUSED_ARG(err); /* err not useful here */
      return;
 800a744:	e096      	b.n	800a874 <tcp_listen_input+0x1d4>
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
      err_t err;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
      TCP_STATS_INC(tcp.memerr);
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a746:	23f0      	movs	r3, #240	; 0xf0
 800a748:	74fb      	strb	r3, [r7, #19]
      LWIP_UNUSED_ARG(err); /* err not useful here */
      return;
 800a74a:	e093      	b.n	800a874 <tcp_listen_input+0x1d4>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	7f5b      	ldrb	r3, [r3, #29]
 800a750:	3301      	adds	r3, #1
 800a752:	b2da      	uxtb	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	775a      	strb	r2, [r3, #29]
    tcp_set_flags(npcb, TF_BACKLOGPEND);
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	8b5b      	ldrh	r3, [r3, #26]
 800a75c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a760:	b29a      	uxth	r2, r3
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	835a      	strh	r2, [r3, #26]
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a766:	4b4c      	ldr	r3, [pc, #304]	; (800a898 <tcp_listen_input+0x1f8>)
 800a768:	695a      	ldr	r2, [r3, #20]
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a76e:	4b4a      	ldr	r3, [pc, #296]	; (800a898 <tcp_listen_input+0x1f8>)
 800a770:	691a      	ldr	r2, [r3, #16]
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	8ada      	ldrh	r2, [r3, #22]
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a77e:	4b43      	ldr	r3, [pc, #268]	; (800a88c <tcp_listen_input+0x1ec>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	881b      	ldrh	r3, [r3, #0]
 800a784:	b29a      	uxth	r2, r3
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	2203      	movs	r2, #3
 800a78e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a790:	4b3d      	ldr	r3, [pc, #244]	; (800a888 <tcp_listen_input+0x1e8>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	1c5a      	adds	r2, r3, #1
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a7a2:	6978      	ldr	r0, [r7, #20]
 800a7a4:	f7ff fb3c 	bl	8009e20 <tcp_next_iss>
 800a7a8:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a7c2:	4b31      	ldr	r3, [pc, #196]	; (800a888 <tcp_listen_input+0x1e8>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	1e5a      	subs	r2, r3, #1
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	691a      	ldr	r2, [r3, #16]
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	611a      	str	r2, [r3, #16]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
    npcb->listener = pcb;
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	7a5b      	ldrb	r3, [r3, #9]
 800a7de:	f003 030c 	and.w	r3, r3, #12
 800a7e2:	b2da      	uxtb	r2, r3
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	7a1a      	ldrb	r2, [r3, #8]
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	721a      	strb	r2, [r3, #8]
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
 800a7f0:	4b2a      	ldr	r3, [pc, #168]	; (800a89c <tcp_listen_input+0x1fc>)
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	60da      	str	r2, [r3, #12]
 800a7f8:	4a28      	ldr	r2, [pc, #160]	; (800a89c <tcp_listen_input+0x1fc>)
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	6013      	str	r3, [r2, #0]
 800a7fe:	f003 f801 	bl	800d804 <tcp_timer_needed>
 800a802:	4b27      	ldr	r3, [pc, #156]	; (800a8a0 <tcp_listen_input+0x200>)
 800a804:	2201      	movs	r2, #1
 800a806:	701a      	strb	r2, [r3, #0]

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
 800a808:	6978      	ldr	r0, [r7, #20]
 800a80a:	f001 fc13 	bl	800c034 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a80e:	4b1f      	ldr	r3, [pc, #124]	; (800a88c <tcp_listen_input+0x1ec>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	89db      	ldrh	r3, [r3, #14]
 800a814:	b29a      	uxth	r2, r3
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	3304      	adds	r3, #4
 800a830:	4618      	mov	r0, r3
 800a832:	f7fc faa5 	bl	8006d80 <ip4_route>
 800a836:	4602      	mov	r2, r0
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	3304      	adds	r3, #4
 800a83c:	4620      	mov	r0, r4
 800a83e:	4611      	mov	r1, r2
 800a840:	461a      	mov	r2, r3
 800a842:	f7ff fb05 	bl	8009e50 <tcp_eff_send_mss_netif>
 800a846:	4603      	mov	r3, r0
 800a848:	461a      	mov	r2, r3
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	865a      	strh	r2, [r3, #50]	; 0x32
      return;
    }
#endif

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a84e:	6978      	ldr	r0, [r7, #20]
 800a850:	2112      	movs	r1, #18
 800a852:	f002 f959 	bl	800cb08 <tcp_enqueue_flags>
 800a856:	4603      	mov	r3, r0
 800a858:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 800a85a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d004      	beq.n	800a86c <tcp_listen_input+0x1cc>
      tcp_abandon(npcb, 0);
 800a862:	6978      	ldr	r0, [r7, #20]
 800a864:	2100      	movs	r1, #0
 800a866:	f7fe fa07 	bl	8008c78 <tcp_abandon>
      return;
 800a86a:	e003      	b.n	800a874 <tcp_listen_input+0x1d4>
    }
    tcp_output(npcb);
 800a86c:	6978      	ldr	r0, [r7, #20]
 800a86e:	f002 f9db 	bl	800cc28 <tcp_output>
  }
  return;
 800a872:	bf00      	nop
}
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bdb0      	pop	{r4, r5, r7, pc}
 800a87a:	bf00      	nop
 800a87c:	1ffe928c 	.word	0x1ffe928c
 800a880:	1ffe9284 	.word	0x1ffe9284
 800a884:	1ffe928a 	.word	0x1ffe928a
 800a888:	1ffe9280 	.word	0x1ffe9280
 800a88c:	1ffe9270 	.word	0x1ffe9270
 800a890:	1ffe94c0 	.word	0x1ffe94c0
 800a894:	1ffe94c4 	.word	0x1ffe94c4
 800a898:	1ffe94b0 	.word	0x1ffe94b0
 800a89c:	1fff0284 	.word	0x1fff0284
 800a8a0:	1fff0280 	.word	0x1fff0280

0800a8a4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a8a4:	b5b0      	push	{r4, r5, r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af04      	add	r7, sp, #16
 800a8aa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a8ac:	4b2a      	ldr	r3, [pc, #168]	; (800a958 <tcp_timewait_input+0xb4>)
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	f003 0304 	and.w	r3, r3, #4
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d000      	beq.n	800a8ba <tcp_timewait_input+0x16>
    return;
 800a8b8:	e04a      	b.n	800a950 <tcp_timewait_input+0xac>
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a8ba:	4b27      	ldr	r3, [pc, #156]	; (800a958 <tcp_timewait_input+0xb4>)
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	f003 0302 	and.w	r3, r3, #2
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d02b      	beq.n	800a91e <tcp_timewait_input+0x7a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a8c6:	4b25      	ldr	r3, [pc, #148]	; (800a95c <tcp_timewait_input+0xb8>)
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	db2e      	blt.n	800a932 <tcp_timewait_input+0x8e>
 800a8d4:	4b21      	ldr	r3, [pc, #132]	; (800a95c <tcp_timewait_input+0xb8>)
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8dc:	6879      	ldr	r1, [r7, #4]
 800a8de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a8e0:	440b      	add	r3, r1
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	dc24      	bgt.n	800a932 <tcp_timewait_input+0x8e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8e8:	4b1d      	ldr	r3, [pc, #116]	; (800a960 <tcp_timewait_input+0xbc>)
 800a8ea:	681d      	ldr	r5, [r3, #0]
 800a8ec:	4b1d      	ldr	r3, [pc, #116]	; (800a964 <tcp_timewait_input+0xc0>)
 800a8ee:	881b      	ldrh	r3, [r3, #0]
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	4b1a      	ldr	r3, [pc, #104]	; (800a95c <tcp_timewait_input+0xb8>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	18d4      	adds	r4, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a8f8:	4b1b      	ldr	r3, [pc, #108]	; (800a968 <tcp_timewait_input+0xc4>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
  if (flags & TCP_SYN) {
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8fc:	885b      	ldrh	r3, [r3, #2]
 800a8fe:	b29a      	uxth	r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a900:	4b19      	ldr	r3, [pc, #100]	; (800a968 <tcp_timewait_input+0xc4>)
 800a902:	681b      	ldr	r3, [r3, #0]
  if (flags & TCP_SYN) {
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a904:	881b      	ldrh	r3, [r3, #0]
 800a906:	b29b      	uxth	r3, r3
 800a908:	4918      	ldr	r1, [pc, #96]	; (800a96c <tcp_timewait_input+0xc8>)
 800a90a:	9100      	str	r1, [sp, #0]
 800a90c:	9201      	str	r2, [sp, #4]
 800a90e:	9302      	str	r3, [sp, #8]
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	4629      	mov	r1, r5
 800a914:	4622      	mov	r2, r4
 800a916:	4b16      	ldr	r3, [pc, #88]	; (800a970 <tcp_timewait_input+0xcc>)
 800a918:	f002 fdfe 	bl	800d518 <tcp_rst>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
      return;
 800a91c:	e018      	b.n	800a950 <tcp_timewait_input+0xac>
    }
  } else if (flags & TCP_FIN) {
 800a91e:	4b0e      	ldr	r3, [pc, #56]	; (800a958 <tcp_timewait_input+0xb4>)
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	d003      	beq.n	800a932 <tcp_timewait_input+0x8e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a92a:	4b12      	ldr	r3, [pc, #72]	; (800a974 <tcp_timewait_input+0xd0>)
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a932:	4b0c      	ldr	r3, [pc, #48]	; (800a964 <tcp_timewait_input+0xc0>)
 800a934:	881b      	ldrh	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d009      	beq.n	800a94e <tcp_timewait_input+0xaa>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	8b5b      	ldrh	r3, [r3, #26]
 800a93e:	f043 0302 	orr.w	r3, r3, #2
 800a942:	b29a      	uxth	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f002 f96d 	bl	800cc28 <tcp_output>
  }
  return;
 800a94e:	bf00      	nop
}
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bdb0      	pop	{r4, r5, r7, pc}
 800a956:	bf00      	nop
 800a958:	1ffe928c 	.word	0x1ffe928c
 800a95c:	1ffe9280 	.word	0x1ffe9280
 800a960:	1ffe9284 	.word	0x1ffe9284
 800a964:	1ffe928a 	.word	0x1ffe928a
 800a968:	1ffe9270 	.word	0x1ffe9270
 800a96c:	1ffe94c0 	.word	0x1ffe94c0
 800a970:	1ffe94c4 	.word	0x1ffe94c4
 800a974:	1fff0288 	.word	0x1fff0288

0800a978 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a978:	b5b0      	push	{r4, r5, r7, lr}
 800a97a:	b08c      	sub	sp, #48	; 0x30
 800a97c:	af04      	add	r7, sp, #16
 800a97e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a980:	2300      	movs	r3, #0
 800a982:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a984:	2300      	movs	r3, #0
 800a986:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a988:	4ba1      	ldr	r3, [pc, #644]	; (800ac10 <tcp_process+0x298>)
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	f003 0304 	and.w	r3, r3, #4
 800a990:	2b00      	cmp	r3, #0
 800a992:	d042      	beq.n	800aa1a <tcp_process+0xa2>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	7d1b      	ldrb	r3, [r3, #20]
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d108      	bne.n	800a9ae <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a9a0:	4b9c      	ldr	r3, [pc, #624]	; (800ac14 <tcp_process+0x29c>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d123      	bne.n	800a9f0 <tcp_process+0x78>
        acceptable = 1;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	76fb      	strb	r3, [r7, #27]
 800a9ac:	e020      	b.n	800a9f0 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9b2:	4b99      	ldr	r3, [pc, #612]	; (800ac18 <tcp_process+0x2a0>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d102      	bne.n	800a9c0 <tcp_process+0x48>
        acceptable = 1;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	76fb      	strb	r3, [r7, #27]
 800a9be:	e017      	b.n	800a9f0 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a9c0:	4b95      	ldr	r3, [pc, #596]	; (800ac18 <tcp_process+0x2a0>)
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	db10      	blt.n	800a9f0 <tcp_process+0x78>
 800a9ce:	4b92      	ldr	r3, [pc, #584]	; (800ac18 <tcp_process+0x2a0>)
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d6:	6879      	ldr	r1, [r7, #4]
 800a9d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a9da:	440b      	add	r3, r1
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	dc06      	bgt.n	800a9f0 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	8b5b      	ldrh	r3, [r3, #26]
 800a9e6:	f043 0302 	orr.w	r3, r3, #2
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a9f0:	7efb      	ldrb	r3, [r7, #27]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00f      	beq.n	800aa16 <tcp_process+0x9e>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
 800a9f6:	4b89      	ldr	r3, [pc, #548]	; (800ac1c <tcp_process+0x2a4>)
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	f043 0308 	orr.w	r3, r3, #8
 800a9fe:	b2da      	uxtb	r2, r3
 800aa00:	4b86      	ldr	r3, [pc, #536]	; (800ac1c <tcp_process+0x2a4>)
 800aa02:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	8b5b      	ldrh	r3, [r3, #26]
 800aa08:	f023 0301 	bic.w	r3, r3, #1
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800aa12:	23f2      	movs	r3, #242	; 0xf2
 800aa14:	e33c      	b.n	800b090 <tcp_process+0x718>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	e33a      	b.n	800b090 <tcp_process+0x718>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800aa1a:	4b7d      	ldr	r3, [pc, #500]	; (800ac10 <tcp_process+0x298>)
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	f003 0302 	and.w	r3, r3, #2
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d010      	beq.n	800aa48 <tcp_process+0xd0>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	7d1b      	ldrb	r3, [r3, #20]
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d00c      	beq.n	800aa48 <tcp_process+0xd0>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	7d1b      	ldrb	r3, [r3, #20]
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d008      	beq.n	800aa48 <tcp_process+0xd0>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	8b5b      	ldrh	r3, [r3, #26]
 800aa3a:	f043 0302 	orr.w	r3, r3, #2
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	e323      	b.n	800b090 <tcp_process+0x718>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	8b5b      	ldrh	r3, [r3, #26]
 800aa4c:	f003 0310 	and.w	r3, r3, #16
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d103      	bne.n	800aa5c <tcp_process+0xe4>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800aa54:	4b72      	ldr	r3, [pc, #456]	; (800ac20 <tcp_process+0x2a8>)
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f001 fae1 	bl	800c034 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	7d1b      	ldrb	r3, [r3, #20]
 800aa76:	3b02      	subs	r3, #2
 800aa78:	2b07      	cmp	r3, #7
 800aa7a:	f200 8307 	bhi.w	800b08c <tcp_process+0x714>
 800aa7e:	a201      	add	r2, pc, #4	; (adr r2, 800aa84 <tcp_process+0x10c>)
 800aa80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa84:	0800aaa5 	.word	0x0800aaa5
 800aa88:	0800ac93 	.word	0x0800ac93
 800aa8c:	0800adfb 	.word	0x0800adfb
 800aa90:	0800ae25 	.word	0x0800ae25
 800aa94:	0800af37 	.word	0x0800af37
 800aa98:	0800adfb 	.word	0x0800adfb
 800aa9c:	0800afc3 	.word	0x0800afc3
 800aaa0:	0800b055 	.word	0x0800b055
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800aaa4:	4b5a      	ldr	r3, [pc, #360]	; (800ac10 <tcp_process+0x298>)
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	f003 0310 	and.w	r3, r3, #16
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f000 80c3 	beq.w	800ac38 <tcp_process+0x2c0>
 800aab2:	4b57      	ldr	r3, [pc, #348]	; (800ac10 <tcp_process+0x298>)
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	f003 0302 	and.w	r3, r3, #2
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f000 80bc 	beq.w	800ac38 <tcp_process+0x2c0>
          && (ackno == pcb->lastack + 1)) {
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aac4:	1c5a      	adds	r2, r3, #1
 800aac6:	4b53      	ldr	r3, [pc, #332]	; (800ac14 <tcp_process+0x29c>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	f040 80b4 	bne.w	800ac38 <tcp_process+0x2c0>
        pcb->rcv_nxt = seqno + 1;
 800aad0:	4b51      	ldr	r3, [pc, #324]	; (800ac18 <tcp_process+0x2a0>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	1c5a      	adds	r2, r3, #1
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800aae2:	4b4c      	ldr	r3, [pc, #304]	; (800ac14 <tcp_process+0x29c>)
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800aaea:	4b4e      	ldr	r3, [pc, #312]	; (800ac24 <tcp_process+0x2ac>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	89db      	ldrh	r3, [r3, #14]
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ab04:	4b44      	ldr	r3, [pc, #272]	; (800ac18 <tcp_process+0x2a0>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	1e5a      	subs	r2, r3, #1
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2204      	movs	r2, #4
 800ab12:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fc f92f 	bl	8006d80 <ip4_route>
 800ab22:	4602      	mov	r2, r0
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	3304      	adds	r3, #4
 800ab28:	4620      	mov	r0, r4
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	f7ff f98f 	bl	8009e50 <tcp_eff_send_mss_netif>
 800ab32:	4603      	mov	r3, r0
 800ab34:	461a      	mov	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab3e:	009a      	lsls	r2, r3, #2
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab44:	005b      	lsls	r3, r3, #1
 800ab46:	f241 111c 	movw	r1, #4380	; 0x111c
 800ab4a:	428b      	cmp	r3, r1
 800ab4c:	bf38      	it	cc
 800ab4e:	460b      	movcc	r3, r1
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d204      	bcs.n	800ab5e <tcp_process+0x1e6>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	e00d      	b.n	800ab7a <tcp_process+0x202>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab62:	005b      	lsls	r3, r3, #1
 800ab64:	f241 121c 	movw	r2, #4380	; 0x111c
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d904      	bls.n	800ab76 <tcp_process+0x1fe>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab70:	005b      	lsls	r3, r3, #1
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	e001      	b.n	800ab7a <tcp_process+0x202>
 800ab76:	f241 131c 	movw	r3, #4380	; 0x111c
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
        --pcb->snd_queuelen;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ab86:	3b01      	subs	r3, #1
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab94:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d107      	bne.n	800abac <tcp_process+0x234>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aba0:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
          pcb->unsent = rseg->next;
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	66da      	str	r2, [r3, #108]	; 0x6c
 800abaa:	e003      	b.n	800abb4 <tcp_process+0x23c>
        } else {
          pcb->unacked = rseg->next;
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800abb4:	69f8      	ldr	r0, [r7, #28]
 800abb6:	f7fe fe9b 	bl	80098f0 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d104      	bne.n	800abcc <tcp_process+0x254>
          pcb->rtime = -1;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abc8:	861a      	strh	r2, [r3, #48]	; 0x30
 800abca:	e006      	b.n	800abda <tcp_process+0x262>
        } else {
          pcb->rtime = 0;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00b      	beq.n	800abfc <tcp_process+0x284>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	6912      	ldr	r2, [r2, #16]
 800abee:	4610      	mov	r0, r2
 800abf0:	6879      	ldr	r1, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	4798      	blx	r3
 800abf6:	4603      	mov	r3, r0
 800abf8:	76bb      	strb	r3, [r7, #26]
 800abfa:	e001      	b.n	800ac00 <tcp_process+0x288>
 800abfc:	2300      	movs	r3, #0
 800abfe:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ac00:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ac04:	f113 0f0d 	cmn.w	r3, #13
 800ac08:	d10e      	bne.n	800ac28 <tcp_process+0x2b0>
          return ERR_ABRT;
 800ac0a:	23f3      	movs	r3, #243	; 0xf3
 800ac0c:	e240      	b.n	800b090 <tcp_process+0x718>
 800ac0e:	bf00      	nop
 800ac10:	1ffe928c 	.word	0x1ffe928c
 800ac14:	1ffe9284 	.word	0x1ffe9284
 800ac18:	1ffe9280 	.word	0x1ffe9280
 800ac1c:	1ffe928d 	.word	0x1ffe928d
 800ac20:	1fff0288 	.word	0x1fff0288
 800ac24:	1ffe9270 	.word	0x1ffe9270
        }
        tcp_ack_now(pcb);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	8b5b      	ldrh	r3, [r3, #26]
 800ac2c:	f043 0302 	orr.w	r3, r3, #2
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	835a      	strh	r2, [r3, #26]
 800ac36:	e02b      	b.n	800ac90 <tcp_process+0x318>
      }
      /* received ACK? possibly a half-open connection */
      else if (flags & TCP_ACK) {
 800ac38:	4b98      	ldr	r3, [pc, #608]	; (800ae9c <tcp_process+0x524>)
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	f003 0310 	and.w	r3, r3, #16
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d025      	beq.n	800ac90 <tcp_process+0x318>
        /* send a RST to bring the other side in a non-synchronized state. */
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac44:	4b96      	ldr	r3, [pc, #600]	; (800aea0 <tcp_process+0x528>)
 800ac46:	681d      	ldr	r5, [r3, #0]
 800ac48:	4b96      	ldr	r3, [pc, #600]	; (800aea4 <tcp_process+0x52c>)
 800ac4a:	881b      	ldrh	r3, [r3, #0]
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	4b96      	ldr	r3, [pc, #600]	; (800aea8 <tcp_process+0x530>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	18d4      	adds	r4, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac54:	4b95      	ldr	r3, [pc, #596]	; (800aeac <tcp_process+0x534>)
 800ac56:	681b      	ldr	r3, [r3, #0]
        tcp_ack_now(pcb);
      }
      /* received ACK? possibly a half-open connection */
      else if (flags & TCP_ACK) {
        /* send a RST to bring the other side in a non-synchronized state. */
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac58:	885b      	ldrh	r3, [r3, #2]
 800ac5a:	b29a      	uxth	r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac5c:	4b93      	ldr	r3, [pc, #588]	; (800aeac <tcp_process+0x534>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
        tcp_ack_now(pcb);
      }
      /* received ACK? possibly a half-open connection */
      else if (flags & TCP_ACK) {
        /* send a RST to bring the other side in a non-synchronized state. */
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac60:	881b      	ldrh	r3, [r3, #0]
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	4992      	ldr	r1, [pc, #584]	; (800aeb0 <tcp_process+0x538>)
 800ac66:	9100      	str	r1, [sp, #0]
 800ac68:	9201      	str	r2, [sp, #4]
 800ac6a:	9302      	str	r3, [sp, #8]
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	4629      	mov	r1, r5
 800ac70:	4622      	mov	r2, r4
 800ac72:	4b90      	ldr	r3, [pc, #576]	; (800aeb4 <tcp_process+0x53c>)
 800ac74:	f002 fc50 	bl	800d518 <tcp_rst>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
        /* Resend SYN immediately (don't wait for rto timeout) to establish
          connection faster, but do not send more SYNs than we otherwise would
          have, or we might get caught in a loop on loopback interfaces. */
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac7e:	2b05      	cmp	r3, #5
 800ac80:	d806      	bhi.n	800ac90 <tcp_process+0x318>
          pcb->rtime = 0;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f002 faa9 	bl	800d1e0 <tcp_rexmit_rto>
        }
      }
      break;
 800ac8e:	e1fe      	b.n	800b08e <tcp_process+0x716>
 800ac90:	e1fd      	b.n	800b08e <tcp_process+0x716>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ac92:	4b82      	ldr	r3, [pc, #520]	; (800ae9c <tcp_process+0x524>)
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	f003 0310 	and.w	r3, r3, #16
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	f000 809b 	beq.w	800add6 <tcp_process+0x45e>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aca0:	4b7f      	ldr	r3, [pc, #508]	; (800aea0 <tcp_process+0x528>)
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	3b01      	subs	r3, #1
 800acac:	2b00      	cmp	r3, #0
 800acae:	db76      	blt.n	800ad9e <tcp_process+0x426>
 800acb0:	4b7b      	ldr	r3, [pc, #492]	; (800aea0 <tcp_process+0x528>)
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	2b00      	cmp	r3, #0
 800acbc:	dc6f      	bgt.n	800ad9e <tcp_process+0x426>
          pcb->state = ESTABLISHED;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2204      	movs	r2, #4
 800acc2:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d102      	bne.n	800acd2 <tcp_process+0x35a>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800accc:	23fa      	movs	r3, #250	; 0xfa
 800acce:	76bb      	strb	r3, [r7, #26]
 800acd0:	e015      	b.n	800acfe <tcp_process+0x386>
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
#endif
            tcp_backlog_accepted(pcb);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7fd fe7a 	bl	80089cc <tcp_backlog_accepted>
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acdc:	699b      	ldr	r3, [r3, #24]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00b      	beq.n	800acfa <tcp_process+0x382>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	6912      	ldr	r2, [r2, #16]
 800acec:	4610      	mov	r0, r2
 800acee:	6879      	ldr	r1, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	4798      	blx	r3
 800acf4:	4603      	mov	r3, r0
 800acf6:	76bb      	strb	r3, [r7, #26]
 800acf8:	e001      	b.n	800acfe <tcp_process+0x386>
 800acfa:	23f0      	movs	r3, #240	; 0xf0
 800acfc:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800acfe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d009      	beq.n	800ad1a <tcp_process+0x3a2>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ad06:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ad0a:	f113 0f0d 	cmn.w	r3, #13
 800ad0e:	d002      	beq.n	800ad16 <tcp_process+0x39e>
              tcp_abort(pcb);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f7fe f857 	bl	8008dc4 <tcp_abort>
            }
            return ERR_ABRT;
 800ad16:	23f3      	movs	r3, #243	; 0xf3
 800ad18:	e1ba      	b.n	800b090 <tcp_process+0x718>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fa98 	bl	800b250 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ad20:	4b65      	ldr	r3, [pc, #404]	; (800aeb8 <tcp_process+0x540>)
 800ad22:	881b      	ldrh	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d005      	beq.n	800ad34 <tcp_process+0x3bc>
            recv_acked--;
 800ad28:	4b63      	ldr	r3, [pc, #396]	; (800aeb8 <tcp_process+0x540>)
 800ad2a:	881b      	ldrh	r3, [r3, #0]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	b29a      	uxth	r2, r3
 800ad30:	4b61      	ldr	r3, [pc, #388]	; (800aeb8 <tcp_process+0x540>)
 800ad32:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad38:	009a      	lsls	r2, r3, #2
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad3e:	005b      	lsls	r3, r3, #1
 800ad40:	f241 111c 	movw	r1, #4380	; 0x111c
 800ad44:	428b      	cmp	r3, r1
 800ad46:	bf38      	it	cc
 800ad48:	460b      	movcc	r3, r1
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d204      	bcs.n	800ad58 <tcp_process+0x3e0>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	e00d      	b.n	800ad74 <tcp_process+0x3fc>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad5c:	005b      	lsls	r3, r3, #1
 800ad5e:	f241 121c 	movw	r2, #4380	; 0x111c
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d904      	bls.n	800ad70 <tcp_process+0x3f8>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad6a:	005b      	lsls	r3, r3, #1
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	e001      	b.n	800ad74 <tcp_process+0x3fc>
 800ad70:	f241 131c 	movw	r3, #4380	; 0x111c
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ad7a:	4b50      	ldr	r3, [pc, #320]	; (800aebc <tcp_process+0x544>)
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	f003 0320 	and.w	r3, r3, #32
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00a      	beq.n	800ad9c <tcp_process+0x424>
            tcp_ack_now(pcb);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	8b5b      	ldrh	r3, [r3, #26]
 800ad8a:	f043 0302 	orr.w	r3, r3, #2
 800ad8e:	b29a      	uxth	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2207      	movs	r2, #7
 800ad98:	751a      	strb	r2, [r3, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ad9a:	e01b      	b.n	800add4 <tcp_process+0x45c>
 800ad9c:	e01a      	b.n	800add4 <tcp_process+0x45c>
            tcp_ack_now(pcb);
            pcb->state = CLOSE_WAIT;
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad9e:	4b40      	ldr	r3, [pc, #256]	; (800aea0 <tcp_process+0x528>)
 800ada0:	681d      	ldr	r5, [r3, #0]
 800ada2:	4b40      	ldr	r3, [pc, #256]	; (800aea4 <tcp_process+0x52c>)
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	461a      	mov	r2, r3
 800ada8:	4b3f      	ldr	r3, [pc, #252]	; (800aea8 <tcp_process+0x530>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	18d4      	adds	r4, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adae:	4b3f      	ldr	r3, [pc, #252]	; (800aeac <tcp_process+0x534>)
 800adb0:	681b      	ldr	r3, [r3, #0]
            tcp_ack_now(pcb);
            pcb->state = CLOSE_WAIT;
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adb2:	885b      	ldrh	r3, [r3, #2]
 800adb4:	b29a      	uxth	r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adb6:	4b3d      	ldr	r3, [pc, #244]	; (800aeac <tcp_process+0x534>)
 800adb8:	681b      	ldr	r3, [r3, #0]
            tcp_ack_now(pcb);
            pcb->state = CLOSE_WAIT;
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adba:	881b      	ldrh	r3, [r3, #0]
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	493c      	ldr	r1, [pc, #240]	; (800aeb0 <tcp_process+0x538>)
 800adc0:	9100      	str	r1, [sp, #0]
 800adc2:	9201      	str	r2, [sp, #4]
 800adc4:	9302      	str	r3, [sp, #8]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	4629      	mov	r1, r5
 800adca:	4622      	mov	r2, r4
 800adcc:	4b39      	ldr	r3, [pc, #228]	; (800aeb4 <tcp_process+0x53c>)
 800adce:	f002 fba3 	bl	800d518 <tcp_rst>
 800add2:	e011      	b.n	800adf8 <tcp_process+0x480>
 800add4:	e010      	b.n	800adf8 <tcp_process+0x480>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800add6:	4b31      	ldr	r3, [pc, #196]	; (800ae9c <tcp_process+0x524>)
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	f003 0302 	and.w	r3, r3, #2
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d00a      	beq.n	800adf8 <tcp_process+0x480>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade6:	1e5a      	subs	r2, r3, #1
 800ade8:	4b2f      	ldr	r3, [pc, #188]	; (800aea8 <tcp_process+0x530>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	429a      	cmp	r2, r3
 800adee:	d103      	bne.n	800adf8 <tcp_process+0x480>
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f002 fa05 	bl	800d200 <tcp_rexmit>
      }
      break;
 800adf6:	e14a      	b.n	800b08e <tcp_process+0x716>
 800adf8:	e149      	b.n	800b08e <tcp_process+0x716>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fa28 	bl	800b250 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ae00:	4b2e      	ldr	r3, [pc, #184]	; (800aebc <tcp_process+0x544>)
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	f003 0320 	and.w	r3, r3, #32
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00a      	beq.n	800ae22 <tcp_process+0x4aa>
        tcp_ack_now(pcb);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	8b5b      	ldrh	r3, [r3, #26]
 800ae10:	f043 0302 	orr.w	r3, r3, #2
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2207      	movs	r2, #7
 800ae1e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ae20:	e135      	b.n	800b08e <tcp_process+0x716>
 800ae22:	e134      	b.n	800b08e <tcp_process+0x716>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fa13 	bl	800b250 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ae2a:	4b24      	ldr	r3, [pc, #144]	; (800aebc <tcp_process+0x544>)
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	f003 0320 	and.w	r3, r3, #32
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d06a      	beq.n	800af0c <tcp_process+0x594>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ae36:	4b19      	ldr	r3, [pc, #100]	; (800ae9c <tcp_process+0x524>)
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	f003 0310 	and.w	r3, r3, #16
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d059      	beq.n	800aef6 <tcp_process+0x57e>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae46:	4b16      	ldr	r3, [pc, #88]	; (800aea0 <tcp_process+0x528>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d153      	bne.n	800aef6 <tcp_process+0x57e>
            pcb->unsent == NULL) {
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      }
      break;
    case FIN_WAIT_1:
      tcp_receive(pcb);
      if (recv_flags & TF_GOT_FIN) {
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d14f      	bne.n	800aef6 <tcp_process+0x57e>
            pcb->unsent == NULL) {
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	8b5b      	ldrh	r3, [r3, #26]
 800ae5a:	f043 0302 	orr.w	r3, r3, #2
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7fe ff49 	bl	8009cfc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ae6a:	4b15      	ldr	r3, [pc, #84]	; (800aec0 <tcp_process+0x548>)
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d105      	bne.n	800ae80 <tcp_process+0x508>
 800ae74:	4b12      	ldr	r3, [pc, #72]	; (800aec0 <tcp_process+0x548>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	4a11      	ldr	r2, [pc, #68]	; (800aec0 <tcp_process+0x548>)
 800ae7c:	6013      	str	r3, [r2, #0]
 800ae7e:	e027      	b.n	800aed0 <tcp_process+0x558>
 800ae80:	4b0f      	ldr	r3, [pc, #60]	; (800aec0 <tcp_process+0x548>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	617b      	str	r3, [r7, #20]
 800ae86:	e020      	b.n	800aeca <tcp_process+0x552>
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	68da      	ldr	r2, [r3, #12]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d118      	bne.n	800aec4 <tcp_process+0x54c>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	68da      	ldr	r2, [r3, #12]
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	60da      	str	r2, [r3, #12]
 800ae9a:	e019      	b.n	800aed0 <tcp_process+0x558>
 800ae9c:	1ffe928c 	.word	0x1ffe928c
 800aea0:	1ffe9284 	.word	0x1ffe9284
 800aea4:	1ffe928a 	.word	0x1ffe928a
 800aea8:	1ffe9280 	.word	0x1ffe9280
 800aeac:	1ffe9270 	.word	0x1ffe9270
 800aeb0:	1ffe94c0 	.word	0x1ffe94c0
 800aeb4:	1ffe94c4 	.word	0x1ffe94c4
 800aeb8:	1ffe9288 	.word	0x1ffe9288
 800aebc:	1ffe928d 	.word	0x1ffe928d
 800aec0:	1fff0284 	.word	0x1fff0284
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	617b      	str	r3, [r7, #20]
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1db      	bne.n	800ae88 <tcp_process+0x510>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	60da      	str	r2, [r3, #12]
 800aed6:	4b71      	ldr	r3, [pc, #452]	; (800b09c <tcp_process+0x724>)
 800aed8:	2201      	movs	r2, #1
 800aeda:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	220a      	movs	r2, #10
 800aee0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800aee2:	4b6f      	ldr	r3, [pc, #444]	; (800b0a0 <tcp_process+0x728>)
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	60da      	str	r2, [r3, #12]
 800aeea:	4a6d      	ldr	r2, [pc, #436]	; (800b0a0 <tcp_process+0x728>)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6013      	str	r3, [r2, #0]
 800aef0:	f002 fc88 	bl	800d804 <tcp_timer_needed>
 800aef4:	e01e      	b.n	800af34 <tcp_process+0x5bc>
        } else {
          tcp_ack_now(pcb);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	8b5b      	ldrh	r3, [r3, #26]
 800aefa:	f043 0302 	orr.w	r3, r3, #2
 800aefe:	b29a      	uxth	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2208      	movs	r2, #8
 800af08:	751a      	strb	r2, [r3, #20]
 800af0a:	e013      	b.n	800af34 <tcp_process+0x5bc>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800af0c:	4b65      	ldr	r3, [pc, #404]	; (800b0a4 <tcp_process+0x72c>)
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	f003 0310 	and.w	r3, r3, #16
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00d      	beq.n	800af34 <tcp_process+0x5bc>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af1c:	4b62      	ldr	r3, [pc, #392]	; (800b0a8 <tcp_process+0x730>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	429a      	cmp	r2, r3
 800af22:	d107      	bne.n	800af34 <tcp_process+0x5bc>
                 pcb->unsent == NULL) {
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          TCP_REG(&tcp_tw_pcbs, pcb);
        } else {
          tcp_ack_now(pcb);
          pcb->state = CLOSING;
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d103      	bne.n	800af34 <tcp_process+0x5bc>
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2206      	movs	r2, #6
 800af30:	751a      	strb	r2, [r3, #20]
      }
      break;
 800af32:	e0ac      	b.n	800b08e <tcp_process+0x716>
 800af34:	e0ab      	b.n	800b08e <tcp_process+0x716>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f98a 	bl	800b250 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800af3c:	4b5b      	ldr	r3, [pc, #364]	; (800b0ac <tcp_process+0x734>)
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	f003 0320 	and.w	r3, r3, #32
 800af44:	2b00      	cmp	r3, #0
 800af46:	d03b      	beq.n	800afc0 <tcp_process+0x648>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	8b5b      	ldrh	r3, [r3, #26]
 800af4c:	f043 0302 	orr.w	r3, r3, #2
 800af50:	b29a      	uxth	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7fe fed0 	bl	8009cfc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800af5c:	4b54      	ldr	r3, [pc, #336]	; (800b0b0 <tcp_process+0x738>)
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	429a      	cmp	r2, r3
 800af64:	d105      	bne.n	800af72 <tcp_process+0x5fa>
 800af66:	4b52      	ldr	r3, [pc, #328]	; (800b0b0 <tcp_process+0x738>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	4a50      	ldr	r2, [pc, #320]	; (800b0b0 <tcp_process+0x738>)
 800af6e:	6013      	str	r3, [r2, #0]
 800af70:	e013      	b.n	800af9a <tcp_process+0x622>
 800af72:	4b4f      	ldr	r3, [pc, #316]	; (800b0b0 <tcp_process+0x738>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	613b      	str	r3, [r7, #16]
 800af78:	e00c      	b.n	800af94 <tcp_process+0x61c>
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	68da      	ldr	r2, [r3, #12]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	429a      	cmp	r2, r3
 800af82:	d104      	bne.n	800af8e <tcp_process+0x616>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	68da      	ldr	r2, [r3, #12]
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	60da      	str	r2, [r3, #12]
 800af8c:	e005      	b.n	800af9a <tcp_process+0x622>
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	613b      	str	r3, [r7, #16]
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1ef      	bne.n	800af7a <tcp_process+0x602>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	60da      	str	r2, [r3, #12]
 800afa0:	4b3e      	ldr	r3, [pc, #248]	; (800b09c <tcp_process+0x724>)
 800afa2:	2201      	movs	r2, #1
 800afa4:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	220a      	movs	r2, #10
 800afaa:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800afac:	4b3c      	ldr	r3, [pc, #240]	; (800b0a0 <tcp_process+0x728>)
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	60da      	str	r2, [r3, #12]
 800afb4:	4a3a      	ldr	r2, [pc, #232]	; (800b0a0 <tcp_process+0x728>)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6013      	str	r3, [r2, #0]
 800afba:	f002 fc23 	bl	800d804 <tcp_timer_needed>
      }
      break;
 800afbe:	e066      	b.n	800b08e <tcp_process+0x716>
 800afc0:	e065      	b.n	800b08e <tcp_process+0x716>
    case CLOSING:
      tcp_receive(pcb);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f944 	bl	800b250 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800afc8:	4b36      	ldr	r3, [pc, #216]	; (800b0a4 <tcp_process+0x72c>)
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	f003 0310 	and.w	r3, r3, #16
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d03e      	beq.n	800b052 <tcp_process+0x6da>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800afd8:	4b33      	ldr	r3, [pc, #204]	; (800b0a8 <tcp_process+0x730>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d138      	bne.n	800b052 <tcp_process+0x6da>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d134      	bne.n	800b052 <tcp_process+0x6da>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7fe fe87 	bl	8009cfc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800afee:	4b30      	ldr	r3, [pc, #192]	; (800b0b0 <tcp_process+0x738>)
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d105      	bne.n	800b004 <tcp_process+0x68c>
 800aff8:	4b2d      	ldr	r3, [pc, #180]	; (800b0b0 <tcp_process+0x738>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	4a2c      	ldr	r2, [pc, #176]	; (800b0b0 <tcp_process+0x738>)
 800b000:	6013      	str	r3, [r2, #0]
 800b002:	e013      	b.n	800b02c <tcp_process+0x6b4>
 800b004:	4b2a      	ldr	r3, [pc, #168]	; (800b0b0 <tcp_process+0x738>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	60fb      	str	r3, [r7, #12]
 800b00a:	e00c      	b.n	800b026 <tcp_process+0x6ae>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	68da      	ldr	r2, [r3, #12]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	429a      	cmp	r2, r3
 800b014:	d104      	bne.n	800b020 <tcp_process+0x6a8>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68da      	ldr	r2, [r3, #12]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	60da      	str	r2, [r3, #12]
 800b01e:	e005      	b.n	800b02c <tcp_process+0x6b4>
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	60fb      	str	r3, [r7, #12]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1ef      	bne.n	800b00c <tcp_process+0x694>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	60da      	str	r2, [r3, #12]
 800b032:	4b1a      	ldr	r3, [pc, #104]	; (800b09c <tcp_process+0x724>)
 800b034:	2201      	movs	r2, #1
 800b036:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	220a      	movs	r2, #10
 800b03c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b03e:	4b18      	ldr	r3, [pc, #96]	; (800b0a0 <tcp_process+0x728>)
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	60da      	str	r2, [r3, #12]
 800b046:	4a16      	ldr	r2, [pc, #88]	; (800b0a0 <tcp_process+0x728>)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6013      	str	r3, [r2, #0]
 800b04c:	f002 fbda 	bl	800d804 <tcp_timer_needed>
      }
      break;
 800b050:	e01d      	b.n	800b08e <tcp_process+0x716>
 800b052:	e01c      	b.n	800b08e <tcp_process+0x716>
    case LAST_ACK:
      tcp_receive(pcb);
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f8fb 	bl	800b250 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b05a:	4b12      	ldr	r3, [pc, #72]	; (800b0a4 <tcp_process+0x72c>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	f003 0310 	and.w	r3, r3, #16
 800b062:	2b00      	cmp	r3, #0
 800b064:	d011      	beq.n	800b08a <tcp_process+0x712>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b06a:	4b0f      	ldr	r3, [pc, #60]	; (800b0a8 <tcp_process+0x730>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d10b      	bne.n	800b08a <tcp_process+0x712>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b076:	2b00      	cmp	r3, #0
 800b078:	d107      	bne.n	800b08a <tcp_process+0x712>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b07a:	4b0c      	ldr	r3, [pc, #48]	; (800b0ac <tcp_process+0x734>)
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	f043 0310 	orr.w	r3, r3, #16
 800b082:	b2da      	uxtb	r2, r3
 800b084:	4b09      	ldr	r3, [pc, #36]	; (800b0ac <tcp_process+0x734>)
 800b086:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b088:	e001      	b.n	800b08e <tcp_process+0x716>
 800b08a:	e000      	b.n	800b08e <tcp_process+0x716>
    default:
      break;
 800b08c:	bf00      	nop
  }
  return ERR_OK;
 800b08e:	2300      	movs	r3, #0
 800b090:	b25b      	sxtb	r3, r3
}
 800b092:	4618      	mov	r0, r3
 800b094:	3720      	adds	r7, #32
 800b096:	46bd      	mov	sp, r7
 800b098:	bdb0      	pop	{r4, r5, r7, pc}
 800b09a:	bf00      	nop
 800b09c:	1fff0280 	.word	0x1fff0280
 800b0a0:	1fff0294 	.word	0x1fff0294
 800b0a4:	1ffe928c 	.word	0x1ffe928c
 800b0a8:	1ffe9284 	.word	0x1ffe9284
 800b0ac:	1ffe928d 	.word	0x1ffe928d
 800b0b0:	1fff0284 	.word	0x1fff0284

0800b0b4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b0b4:	b5b0      	push	{r4, r5, r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	899b      	ldrh	r3, [r3, #12]
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fc f8fe 	bl	80072c8 <lwip_htons>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	f003 0301 	and.w	r3, r3, #1
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d005      	beq.n	800b0e4 <tcp_oos_insert_segment+0x30>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b0d8:	6838      	ldr	r0, [r7, #0]
 800b0da:	f7fe fbf5 	bl	80098c8 <tcp_segs_free>
    next = NULL;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	603b      	str	r3, [r7, #0]
 800b0e2:	e056      	b.n	800b192 <tcp_oos_insert_segment+0xde>
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
 800b0e4:	e021      	b.n	800b12a <tcp_oos_insert_segment+0x76>
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	899b      	ldrh	r3, [r3, #12]
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fc f8ea 	bl	80072c8 <lwip_htons>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	f003 0301 	and.w	r3, r3, #1
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00c      	beq.n	800b11a <tcp_oos_insert_segment+0x66>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	68dc      	ldr	r4, [r3, #12]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	899b      	ldrh	r3, [r3, #12]
 800b10a:	b29d      	uxth	r5, r3
 800b10c:	2001      	movs	r0, #1
 800b10e:	f7fc f8db 	bl	80072c8 <lwip_htons>
 800b112:	4603      	mov	r3, r0
 800b114:	432b      	orrs	r3, r5
 800b116:	b29b      	uxth	r3, r3
 800b118:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f7fe fbe3 	bl	80098f0 <tcp_seg_free>
    tcp_segs_free(next);
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00e      	beq.n	800b14e <tcp_oos_insert_segment+0x9a>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	891b      	ldrh	r3, [r3, #8]
 800b134:	461a      	mov	r2, r3
 800b136:	4b1a      	ldr	r3, [pc, #104]	; (800b1a0 <tcp_oos_insert_segment+0xec>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	441a      	add	r2, r3
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	6839      	ldr	r1, [r7, #0]
 800b144:	8909      	ldrh	r1, [r1, #8]
 800b146:	440b      	add	r3, r1
 800b148:	1ad3      	subs	r3, r2, r3
    tcp_segs_free(next);
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	dacb      	bge.n	800b0e6 <tcp_oos_insert_segment+0x32>
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d01e      	beq.n	800b192 <tcp_oos_insert_segment+0xde>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	891b      	ldrh	r3, [r3, #8]
 800b158:	461a      	mov	r2, r3
 800b15a:	4b11      	ldr	r3, [pc, #68]	; (800b1a0 <tcp_oos_insert_segment+0xec>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	441a      	add	r2, r3
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	1ad3      	subs	r3, r2, r3
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
 800b168:	2b00      	cmp	r3, #0
 800b16a:	dd12      	ble.n	800b192 <tcp_oos_insert_segment+0xde>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	b29a      	uxth	r2, r3
 800b174:	4b0a      	ldr	r3, [pc, #40]	; (800b1a0 <tcp_oos_insert_segment+0xec>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	b29b      	uxth	r3, r3
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	685a      	ldr	r2, [r3, #4]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	891b      	ldrh	r3, [r3, #8]
 800b18a:	4610      	mov	r0, r2
 800b18c:	4619      	mov	r1, r3
 800b18e:	f7fc ffdf 	bl	8008150 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	601a      	str	r2, [r3, #0]
}
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bdb0      	pop	{r4, r5, r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	1ffe9280 	.word	0x1ffe9280

0800b1a4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b1a4:	b5b0      	push	{r4, r5, r7, lr}
 800b1a6:	b086      	sub	sp, #24
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
 800b1b0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b1b2:	e01f      	b.n	800b1f4 <tcp_free_acked_segments+0x50>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7fd f950 	bl	8008468 <pbuf_clen>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b1d2:	8a7b      	ldrh	r3, [r7, #18]
 800b1d4:	1ad3      	subs	r3, r2, r3
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	891a      	ldrh	r2, [r3, #8]
 800b1e2:	4b19      	ldr	r3, [pc, #100]	; (800b248 <tcp_free_acked_segments+0xa4>)
 800b1e4:	881b      	ldrh	r3, [r3, #0]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	b29a      	uxth	r2, r3
 800b1ea:	4b17      	ldr	r3, [pc, #92]	; (800b248 <tcp_free_acked_segments+0xa4>)
 800b1ec:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b1ee:	6978      	ldr	r0, [r7, #20]
 800b1f0:	f7fe fb7e 	bl	80098f0 <tcp_seg_free>
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d020      	beq.n	800b23c <tcp_free_acked_segments+0x98>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	4618      	mov	r0, r3
 800b202:	f7fc f877 	bl	80072f4 <lwip_htonl>
 800b206:	4604      	mov	r4, r0
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	891b      	ldrh	r3, [r3, #8]
 800b20c:	461d      	mov	r5, r3
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	899b      	ldrh	r3, [r3, #12]
 800b214:	b29b      	uxth	r3, r3
 800b216:	4618      	mov	r0, r3
 800b218:	f7fc f856 	bl	80072c8 <lwip_htons>
 800b21c:	4603      	mov	r3, r0
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	f003 0303 	and.w	r3, r3, #3
 800b224:	2b00      	cmp	r3, #0
 800b226:	d001      	beq.n	800b22c <tcp_free_acked_segments+0x88>
 800b228:	2301      	movs	r3, #1
 800b22a:	e000      	b.n	800b22e <tcp_free_acked_segments+0x8a>
 800b22c:	2300      	movs	r3, #0
 800b22e:	442b      	add	r3, r5
 800b230:	18e2      	adds	r2, r4, r3
 800b232:	4b06      	ldr	r3, [pc, #24]	; (800b24c <tcp_free_acked_segments+0xa8>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	1ad3      	subs	r3, r2, r3
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b238:	2b00      	cmp	r3, #0
 800b23a:	ddbb      	ble.n	800b1b4 <tcp_free_acked_segments+0x10>
    if (pcb->snd_queuelen != 0) {
      LWIP_ASSERT("tcp_receive: valid queue length",
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b23c:	68bb      	ldr	r3, [r7, #8]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3718      	adds	r7, #24
 800b242:	46bd      	mov	sp, r7
 800b244:	bdb0      	pop	{r4, r5, r7, pc}
 800b246:	bf00      	nop
 800b248:	1ffe9288 	.word	0x1ffe9288
 800b24c:	1ffe9284 	.word	0x1ffe9284

0800b250 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b250:	b5b0      	push	{r4, r5, r7, lr}
 800b252:	b094      	sub	sp, #80	; 0x50
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b258:	2300      	movs	r3, #0
 800b25a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 800b25c:	4b9f      	ldr	r3, [pc, #636]	; (800b4dc <tcp_receive+0x28c>)
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	f003 0310 	and.w	r3, r3, #16
 800b264:	2b00      	cmp	r3, #0
 800b266:	f000 825e 	beq.w	800b726 <tcp_receive+0x4d6>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b270:	461a      	mov	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b276:	4413      	add	r3, r2
 800b278:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b27e:	4b98      	ldr	r3, [pc, #608]	; (800b4e0 <tcp_receive+0x290>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	1ad3      	subs	r3, r2, r3
 800b284:	2b00      	cmp	r3, #0
 800b286:	db1b      	blt.n	800b2c0 <tcp_receive+0x70>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b28c:	4b94      	ldr	r3, [pc, #592]	; (800b4e0 <tcp_receive+0x290>)
 800b28e:	681b      	ldr	r3, [r3, #0]

  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b290:	429a      	cmp	r2, r3
 800b292:	d106      	bne.n	800b2a2 <tcp_receive+0x52>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b298:	4b92      	ldr	r3, [pc, #584]	; (800b4e4 <tcp_receive+0x294>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	db0e      	blt.n	800b2c0 <tcp_receive+0x70>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b2a6:	4b8f      	ldr	r3, [pc, #572]	; (800b4e4 <tcp_receive+0x294>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d125      	bne.n	800b2fa <tcp_receive+0xaa>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b2ae:	4b8e      	ldr	r3, [pc, #568]	; (800b4e8 <tcp_receive+0x298>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	89db      	ldrh	r3, [r3, #14]
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d91c      	bls.n	800b2fa <tcp_receive+0xaa>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b2c0:	4b89      	ldr	r3, [pc, #548]	; (800b4e8 <tcp_receive+0x298>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	89db      	ldrh	r3, [r3, #14]
 800b2c6:	b29a      	uxth	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d205      	bcs.n	800b2ea <tcp_receive+0x9a>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b2ea:	4b7d      	ldr	r3, [pc, #500]	; (800b4e0 <tcp_receive+0x290>)
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b2f2:	4b7c      	ldr	r3, [pc, #496]	; (800b4e4 <tcp_receive+0x294>)
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b2fa:	4b7a      	ldr	r3, [pc, #488]	; (800b4e4 <tcp_receive+0x294>)
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	2b00      	cmp	r3, #0
 800b306:	dc5d      	bgt.n	800b3c4 <tcp_receive+0x174>
      /* Clause 2 */
      if (tcplen == 0) {
 800b308:	4b78      	ldr	r3, [pc, #480]	; (800b4ec <tcp_receive+0x29c>)
 800b30a:	881b      	ldrh	r3, [r3, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d150      	bne.n	800b3b2 <tcp_receive+0x162>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b31a:	441a      	add	r2, r3
 800b31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31e:	429a      	cmp	r2, r3
 800b320:	d147      	bne.n	800b3b2 <tcp_receive+0x162>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b326:	b21b      	sxth	r3, r3
 800b328:	2b00      	cmp	r3, #0
 800b32a:	db42      	blt.n	800b3b2 <tcp_receive+0x162>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b330:	4b6c      	ldr	r3, [pc, #432]	; (800b4e4 <tcp_receive+0x294>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	429a      	cmp	r2, r3
 800b336:	d13c      	bne.n	800b3b2 <tcp_receive+0x162>
              found_dupack = 1;
 800b338:	2301      	movs	r3, #1
 800b33a:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b342:	3301      	adds	r3, #1
 800b344:	b2da      	uxtb	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d907      	bls.n	800b360 <tcp_receive+0x110>
                ++pcb->dupacks;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b356:	3301      	adds	r3, #1
 800b358:	b2da      	uxtb	r2, r3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b366:	2b03      	cmp	r3, #3
 800b368:	d91b      	bls.n	800b3a2 <tcp_receive+0x152>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b374:	4413      	add	r3, r2
 800b376:	b29a      	uxth	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b37e:	429a      	cmp	r2, r3
 800b380:	d30a      	bcc.n	800b398 <tcp_receive+0x148>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b38c:	4413      	add	r3, r2
 800b38e:	b29a      	uxth	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b396:	e004      	b.n	800b3a2 <tcp_receive+0x152>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b39e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d902      	bls.n	800b3b2 <tcp_receive+0x162>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f001 ff83 	bl	800d2b8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b3b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f040 8159 	bne.w	800b66c <tcp_receive+0x41c>
        pcb->dupacks = 0;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b3c2:	e153      	b.n	800b66c <tcp_receive+0x41c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b3c4:	4b47      	ldr	r3, [pc, #284]	; (800b4e4 <tcp_receive+0x294>)
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f2c0 8148 	blt.w	800b666 <tcp_receive+0x416>
 800b3d6:	4b43      	ldr	r3, [pc, #268]	; (800b4e4 <tcp_receive+0x294>)
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	f300 8140 	bgt.w	800b666 <tcp_receive+0x416>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	8b5b      	ldrh	r3, [r3, #26]
 800b3ea:	f003 0304 	and.w	r3, r3, #4
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d010      	beq.n	800b414 <tcp_receive+0x1c4>
        tcp_clear_flags(pcb, TF_INFR);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	8b5b      	ldrh	r3, [r3, #26]
 800b3f6:	f023 0304 	bic.w	r3, r3, #4
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b420:	b21b      	sxth	r3, r3
 800b422:	10db      	asrs	r3, r3, #3
 800b424:	b29b      	uxth	r3, r3
 800b426:	b29a      	uxth	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	4413      	add	r3, r2
 800b430:	b29b      	uxth	r3, r3
 800b432:	b29a      	uxth	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b43a:	4b2a      	ldr	r3, [pc, #168]	; (800b4e4 <tcp_receive+0x294>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	b29a      	uxth	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b444:	b29b      	uxth	r3, r3
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b452:	4b24      	ldr	r3, [pc, #144]	; (800b4e4 <tcp_receive+0x294>)
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	7d1b      	ldrb	r3, [r3, #20]
 800b45e:	2b03      	cmp	r3, #3
 800b460:	f240 808f 	bls.w	800b582 <tcp_receive+0x332>
        if (pcb->cwnd < pcb->ssthresh) {
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b470:	429a      	cmp	r2, r3
 800b472:	d23d      	bcs.n	800b4f0 <tcp_receive+0x2a0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	8b5b      	ldrh	r3, [r3, #26]
 800b478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <tcp_receive+0x234>
 800b480:	2301      	movs	r3, #1
 800b482:	e000      	b.n	800b486 <tcp_receive+0x236>
 800b484:	2302      	movs	r3, #2
 800b486:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b48a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b48e:	b29a      	uxth	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b494:	fb12 f303 	smulbb	r3, r2, r3
 800b498:	b29a      	uxth	r2, r3
 800b49a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b49c:	4293      	cmp	r3, r2
 800b49e:	bf28      	it	cs
 800b4a0:	4613      	movcs	r3, r2
 800b4a2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b4aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b4ac:	4413      	add	r3, r2
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d309      	bcc.n	800b4ce <tcp_receive+0x27e>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b4c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b4c2:	4413      	add	r3, r2
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b4cc:	e059      	b.n	800b582 <tcp_receive+0x332>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b4d8:	e053      	b.n	800b582 <tcp_receive+0x332>
 800b4da:	bf00      	nop
 800b4dc:	1ffe928c 	.word	0x1ffe928c
 800b4e0:	1ffe9280 	.word	0x1ffe9280
 800b4e4:	1ffe9284 	.word	0x1ffe9284
 800b4e8:	1ffe9270 	.word	0x1ffe9270
 800b4ec:	1ffe928a 	.word	0x1ffe928a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b4f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4f8:	4413      	add	r3, r2
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b502:	429a      	cmp	r2, r3
 800b504:	d309      	bcc.n	800b51a <tcp_receive+0x2ca>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b50c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b50e:	4413      	add	r3, r2
 800b510:	b29a      	uxth	r2, r3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b518:	e004      	b.n	800b524 <tcp_receive+0x2d4>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b520:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b530:	429a      	cmp	r2, r3
 800b532:	d326      	bcc.n	800b582 <tcp_receive+0x332>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	b29a      	uxth	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b554:	4413      	add	r3, r2
 800b556:	b29a      	uxth	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b55e:	429a      	cmp	r2, r3
 800b560:	d30a      	bcc.n	800b578 <tcp_receive+0x328>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b56c:	4413      	add	r3, r2
 800b56e:	b29a      	uxth	r2, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b576:	e004      	b.n	800b582 <tcp_receive+0x332>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b57e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	4611      	mov	r1, r2
 800b58e:	4a96      	ldr	r2, [pc, #600]	; (800b7e8 <tcp_receive+0x598>)
 800b590:	f7ff fe08 	bl	800b1a4 <tcp_free_acked_segments>
 800b594:	4602      	mov	r2, r0
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	4a91      	ldr	r2, [pc, #580]	; (800b7ec <tcp_receive+0x59c>)
 800b5a8:	f7ff fdfc 	bl	800b1a4 <tcp_free_acked_segments>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d104      	bne.n	800b5c4 <tcp_receive+0x374>
        pcb->rtime = -1;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5c0:	861a      	strh	r2, [r3, #48]	; 0x30
 800b5c2:	e002      	b.n	800b5ca <tcp_receive+0x37a>
      } else {
        pcb->rtime = 0;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d103      	bne.n	800b5e0 <tcp_receive+0x390>
        pcb->unsent_oversize = 0;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b5e6:	4b82      	ldr	r3, [pc, #520]	; (800b7f0 <tcp_receive+0x5a0>)
 800b5e8:	881b      	ldrh	r3, [r3, #0]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	8b5b      	ldrh	r3, [r3, #26]
 800b5f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d031      	beq.n	800b664 <tcp_receive+0x414>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b604:	2b00      	cmp	r3, #0
 800b606:	d118      	bne.n	800b63a <tcp_receive+0x3ea>
          if ((pcb->unsent == NULL) ||
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00c      	beq.n	800b62a <tcp_receive+0x3da>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7fb fe69 	bl	80072f4 <lwip_htonl>
 800b622:	4603      	mov	r3, r0
 800b624:	1ae3      	subs	r3, r4, r3
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
          if ((pcb->unsent == NULL) ||
 800b626:	2b00      	cmp	r3, #0
 800b628:	dc1c      	bgt.n	800b664 <tcp_receive+0x414>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
            tcp_clear_flags(pcb, TF_RTO);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	8b5b      	ldrh	r3, [r3, #26]
 800b62e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b632:	b29a      	uxth	r2, r3
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	835a      	strh	r2, [r3, #26]
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b638:	e018      	b.n	800b66c <tcp_receive+0x41c>
        if (pcb->unacked == NULL) {
          if ((pcb->unsent == NULL) ||
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
            tcp_clear_flags(pcb, TF_RTO);
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	4618      	mov	r0, r3
 800b648:	f7fb fe54 	bl	80072f4 <lwip_htonl>
 800b64c:	4603      	mov	r3, r0
 800b64e:	1ae3      	subs	r3, r4, r3
 800b650:	2b00      	cmp	r3, #0
 800b652:	dc07      	bgt.n	800b664 <tcp_receive+0x414>
          tcp_clear_flags(pcb, TF_RTO);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	8b5b      	ldrh	r3, [r3, #26]
 800b658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	835a      	strh	r2, [r3, #26]
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b662:	e003      	b.n	800b66c <tcp_receive+0x41c>
 800b664:	e002      	b.n	800b66c <tcp_receive+0x41c>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f001 ff8a 	bl	800d580 <tcp_send_empty_ack>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b670:	2b00      	cmp	r3, #0
 800b672:	d058      	beq.n	800b726 <tcp_receive+0x4d6>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b678:	4b5e      	ldr	r3, [pc, #376]	; (800b7f4 <tcp_receive+0x5a4>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	2b00      	cmp	r3, #0
 800b680:	da51      	bge.n	800b726 <tcp_receive+0x4d6>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b682:	4b5d      	ldr	r3, [pc, #372]	; (800b7f8 <tcp_receive+0x5a8>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	b29a      	uxth	r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	1ad3      	subs	r3, r2, r3
 800b690:	b29b      	uxth	r3, r3
 800b692:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b696:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b69e:	b21b      	sxth	r3, r3
 800b6a0:	10db      	asrs	r3, r3, #3
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	1ad3      	subs	r3, r2, r3
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b6b8:	4413      	add	r3, r2
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b6c2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	da05      	bge.n	800b6d6 <tcp_receive+0x486>
        m = (s16_t) - m;
 800b6ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b6ce:	425b      	negs	r3, r3
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b6d6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6de:	b21b      	sxth	r3, r3
 800b6e0:	109b      	asrs	r3, r3, #2
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	1ad3      	subs	r3, r2, r3
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b6f8:	4413      	add	r3, r2
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b706:	b21b      	sxth	r3, r3
 800b708:	10db      	asrs	r3, r3, #3
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	b29a      	uxth	r2, r3
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b712:	b29b      	uxth	r3, r3
 800b714:	4413      	add	r3, r2
 800b716:	b29b      	uxth	r3, r3
 800b718:	b29a      	uxth	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b726:	4b35      	ldr	r3, [pc, #212]	; (800b7fc <tcp_receive+0x5ac>)
 800b728:	881b      	ldrh	r3, [r3, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f000 842a 	beq.w	800bf84 <tcp_receive+0xd34>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	7d1b      	ldrb	r3, [r3, #20]
 800b734:	2b06      	cmp	r3, #6
 800b736:	f200 8425 	bhi.w	800bf84 <tcp_receive+0xd34>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b73e:	4b30      	ldr	r3, [pc, #192]	; (800b800 <tcp_receive+0x5b0>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	1ad3      	subs	r3, r2, r3
 800b744:	3b01      	subs	r3, #1
 800b746:	2b00      	cmp	r3, #0
 800b748:	db5e      	blt.n	800b808 <tcp_receive+0x5b8>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b74e:	4b2b      	ldr	r3, [pc, #172]	; (800b7fc <tcp_receive+0x5ac>)
 800b750:	881b      	ldrh	r3, [r3, #0]
 800b752:	4619      	mov	r1, r3
 800b754:	4b2a      	ldr	r3, [pc, #168]	; (800b800 <tcp_receive+0x5b0>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	440b      	add	r3, r1
 800b75a:	1ad3      	subs	r3, r2, r3
 800b75c:	3301      	adds	r3, #1
 800b75e:	2b00      	cmp	r3, #0
 800b760:	dc52      	bgt.n	800b808 <tcp_receive+0x5b8>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b762:	4b28      	ldr	r3, [pc, #160]	; (800b804 <tcp_receive+0x5b4>)
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b76c:	4b24      	ldr	r3, [pc, #144]	; (800b800 <tcp_receive+0x5b0>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	1ad3      	subs	r3, r2, r3
 800b772:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
      off = (u16_t)off32;
 800b774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b776:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
      inseg.len -= off;
 800b77a:	4b22      	ldr	r3, [pc, #136]	; (800b804 <tcp_receive+0x5b4>)
 800b77c:	891a      	ldrh	r2, [r3, #8]
 800b77e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b782:	1ad3      	subs	r3, r2, r3
 800b784:	b29a      	uxth	r2, r3
 800b786:	4b1f      	ldr	r3, [pc, #124]	; (800b804 <tcp_receive+0x5b4>)
 800b788:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b78a:	4b1e      	ldr	r3, [pc, #120]	; (800b804 <tcp_receive+0x5b4>)
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	891a      	ldrh	r2, [r3, #8]
 800b790:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b798:	e00f      	b.n	800b7ba <tcp_receive+0x56a>
        off -= p->len;
 800b79a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b79c:	895b      	ldrh	r3, [r3, #10]
 800b79e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7a2:	1ad3      	subs	r3, r2, r3
 800b7a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b7a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b7ac:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b7ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b7b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	647b      	str	r3, [r7, #68]	; 0x44
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
      off = (u16_t)off32;
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
      inseg.len -= off;
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
      while (p->len < off) {
 800b7ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7bc:	895b      	ldrh	r3, [r3, #10]
 800b7be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d8e9      	bhi.n	800b79a <tcp_receive+0x54a>
        p->tot_len = new_tot_len;
        p->len = 0;
        p = p->next;
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b7c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	f7fc fd85 	bl	80082dc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b7d2:	4b0c      	ldr	r3, [pc, #48]	; (800b804 <tcp_receive+0x5b4>)
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b7da:	4909      	ldr	r1, [pc, #36]	; (800b800 <tcp_receive+0x5b0>)
 800b7dc:	600a      	str	r2, [r1, #0]
 800b7de:	4a08      	ldr	r2, [pc, #32]	; (800b800 <tcp_receive+0x5b0>)
 800b7e0:	6812      	ldr	r2, [r2, #0]
 800b7e2:	605a      	str	r2, [r3, #4]
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b7e4:	e01e      	b.n	800b824 <tcp_receive+0x5d4>
 800b7e6:	bf00      	nop
 800b7e8:	08014390 	.word	0x08014390
 800b7ec:	08014398 	.word	0x08014398
 800b7f0:	1ffe9288 	.word	0x1ffe9288
 800b7f4:	1ffe9284 	.word	0x1ffe9284
 800b7f8:	1fff0288 	.word	0x1fff0288
 800b7fc:	1ffe928a 	.word	0x1ffe928a
 800b800:	1ffe9280 	.word	0x1ffe9280
 800b804:	1ffe9260 	.word	0x1ffe9260
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b808:	4b83      	ldr	r3, [pc, #524]	; (800ba18 <tcp_receive+0x7c8>)
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b810:	1ad3      	subs	r3, r2, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	da06      	bge.n	800b824 <tcp_receive+0x5d4>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	8b5b      	ldrh	r3, [r3, #26]
 800b81a:	f043 0302 	orr.w	r3, r3, #2
 800b81e:	b29a      	uxth	r2, r3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b824:	4b7c      	ldr	r3, [pc, #496]	; (800ba18 <tcp_receive+0x7c8>)
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82c:	1ad3      	subs	r3, r2, r3
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f2c0 83a3 	blt.w	800bf7a <tcp_receive+0xd2a>
 800b834:	4b78      	ldr	r3, [pc, #480]	; (800ba18 <tcp_receive+0x7c8>)
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83c:	6879      	ldr	r1, [r7, #4]
 800b83e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b840:	440b      	add	r3, r1
 800b842:	1ad3      	subs	r3, r2, r3
 800b844:	3301      	adds	r3, #1
 800b846:	2b00      	cmp	r3, #0
 800b848:	f300 8397 	bgt.w	800bf7a <tcp_receive+0xd2a>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b850:	4b71      	ldr	r3, [pc, #452]	; (800ba18 <tcp_receive+0x7c8>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	429a      	cmp	r2, r3
 800b856:	f040 8235 	bne.w	800bcc4 <tcp_receive+0xa74>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b85a:	4b70      	ldr	r3, [pc, #448]	; (800ba1c <tcp_receive+0x7cc>)
 800b85c:	891c      	ldrh	r4, [r3, #8]
 800b85e:	4b6f      	ldr	r3, [pc, #444]	; (800ba1c <tcp_receive+0x7cc>)
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	899b      	ldrh	r3, [r3, #12]
 800b864:	b29b      	uxth	r3, r3
 800b866:	4618      	mov	r0, r3
 800b868:	f7fb fd2e 	bl	80072c8 <lwip_htons>
 800b86c:	4603      	mov	r3, r0
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	f003 0303 	and.w	r3, r3, #3
 800b874:	2b00      	cmp	r3, #0
 800b876:	d001      	beq.n	800b87c <tcp_receive+0x62c>
 800b878:	2301      	movs	r3, #1
 800b87a:	e000      	b.n	800b87e <tcp_receive+0x62e>
 800b87c:	2300      	movs	r3, #0
 800b87e:	4423      	add	r3, r4
 800b880:	b29a      	uxth	r2, r3
 800b882:	4b67      	ldr	r3, [pc, #412]	; (800ba20 <tcp_receive+0x7d0>)
 800b884:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b88a:	4b65      	ldr	r3, [pc, #404]	; (800ba20 <tcp_receive+0x7d0>)
 800b88c:	881b      	ldrh	r3, [r3, #0]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d262      	bcs.n	800b958 <tcp_receive+0x708>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b892:	4b62      	ldr	r3, [pc, #392]	; (800ba1c <tcp_receive+0x7cc>)
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	899b      	ldrh	r3, [r3, #12]
 800b898:	b29b      	uxth	r3, r3
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fb fd14 	bl	80072c8 <lwip_htons>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	f003 0301 	and.w	r3, r3, #1
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d020      	beq.n	800b8ee <tcp_receive+0x69e>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b8ac:	4b5b      	ldr	r3, [pc, #364]	; (800ba1c <tcp_receive+0x7cc>)
 800b8ae:	68dc      	ldr	r4, [r3, #12]
 800b8b0:	4b5a      	ldr	r3, [pc, #360]	; (800ba1c <tcp_receive+0x7cc>)
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	899b      	ldrh	r3, [r3, #12]
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b8be:	b29d      	uxth	r5, r3
 800b8c0:	4b56      	ldr	r3, [pc, #344]	; (800ba1c <tcp_receive+0x7cc>)
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	899b      	ldrh	r3, [r3, #12]
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fb fcfd 	bl	80072c8 <lwip_htons>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fb fcf4 	bl	80072c8 <lwip_htons>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	462a      	mov	r2, r5
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b8f2:	4b4a      	ldr	r3, [pc, #296]	; (800ba1c <tcp_receive+0x7cc>)
 800b8f4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b8f6:	4b49      	ldr	r3, [pc, #292]	; (800ba1c <tcp_receive+0x7cc>)
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	899b      	ldrh	r3, [r3, #12]
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fb fce2 	bl	80072c8 <lwip_htons>
 800b904:	4603      	mov	r3, r0
 800b906:	b2db      	uxtb	r3, r3
 800b908:	f003 0302 	and.w	r3, r3, #2
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d005      	beq.n	800b91c <tcp_receive+0x6cc>
            inseg.len -= 1;
 800b910:	4b42      	ldr	r3, [pc, #264]	; (800ba1c <tcp_receive+0x7cc>)
 800b912:	891b      	ldrh	r3, [r3, #8]
 800b914:	3b01      	subs	r3, #1
 800b916:	b29a      	uxth	r2, r3
 800b918:	4b40      	ldr	r3, [pc, #256]	; (800ba1c <tcp_receive+0x7cc>)
 800b91a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b91c:	4b3f      	ldr	r3, [pc, #252]	; (800ba1c <tcp_receive+0x7cc>)
 800b91e:	685a      	ldr	r2, [r3, #4]
 800b920:	4b3e      	ldr	r3, [pc, #248]	; (800ba1c <tcp_receive+0x7cc>)
 800b922:	891b      	ldrh	r3, [r3, #8]
 800b924:	4610      	mov	r0, r2
 800b926:	4619      	mov	r1, r3
 800b928:	f7fc fc12 	bl	8008150 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b92c:	4b3b      	ldr	r3, [pc, #236]	; (800ba1c <tcp_receive+0x7cc>)
 800b92e:	891c      	ldrh	r4, [r3, #8]
 800b930:	4b3a      	ldr	r3, [pc, #232]	; (800ba1c <tcp_receive+0x7cc>)
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	899b      	ldrh	r3, [r3, #12]
 800b936:	b29b      	uxth	r3, r3
 800b938:	4618      	mov	r0, r3
 800b93a:	f7fb fcc5 	bl	80072c8 <lwip_htons>
 800b93e:	4603      	mov	r3, r0
 800b940:	b2db      	uxtb	r3, r3
 800b942:	f003 0303 	and.w	r3, r3, #3
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <tcp_receive+0x6fe>
 800b94a:	2301      	movs	r3, #1
 800b94c:	e000      	b.n	800b950 <tcp_receive+0x700>
 800b94e:	2300      	movs	r3, #0
 800b950:	4423      	add	r3, r4
 800b952:	b29a      	uxth	r2, r3
 800b954:	4b32      	ldr	r3, [pc, #200]	; (800ba20 <tcp_receive+0x7d0>)
 800b956:	801a      	strh	r2, [r3, #0]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f000 80ce 	beq.w	800bafe <tcp_receive+0x8ae>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b962:	4b2e      	ldr	r3, [pc, #184]	; (800ba1c <tcp_receive+0x7cc>)
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	899b      	ldrh	r3, [r3, #12]
 800b968:	b29b      	uxth	r3, r3
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fb fcac 	bl	80072c8 <lwip_htons>
 800b970:	4603      	mov	r3, r0
 800b972:	b2db      	uxtb	r3, r3
 800b974:	f003 0301 	and.w	r3, r3, #1
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d010      	beq.n	800b99e <tcp_receive+0x74e>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b97c:	e00a      	b.n	800b994 <tcp_receive+0x744>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b982:	61fb      	str	r3, [r7, #28]
              pcb->ooseq = pcb->ooseq->next;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b98e:	69f8      	ldr	r0, [r7, #28]
 800b990:	f7fd ffae 	bl	80098f0 <tcp_seg_free>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d1f0      	bne.n	800b97e <tcp_receive+0x72e>
 800b99c:	e0af      	b.n	800bafe <tcp_receive+0x8ae>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b9a4:	e04b      	b.n	800ba3e <tcp_receive+0x7ee>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	899b      	ldrh	r3, [r3, #12]
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7fb fc8a 	bl	80072c8 <lwip_htons>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	f003 0301 	and.w	r3, r3, #1
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d036      	beq.n	800ba2e <tcp_receive+0x7de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b9c0:	4b16      	ldr	r3, [pc, #88]	; (800ba1c <tcp_receive+0x7cc>)
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	899b      	ldrh	r3, [r3, #12]
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fb fc7d 	bl	80072c8 <lwip_htons>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	f003 0302 	and.w	r3, r3, #2
            while (next &&
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d129      	bne.n	800ba2e <tcp_receive+0x7de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b9da:	4b10      	ldr	r3, [pc, #64]	; (800ba1c <tcp_receive+0x7cc>)
 800b9dc:	68dc      	ldr	r4, [r3, #12]
 800b9de:	4b0f      	ldr	r3, [pc, #60]	; (800ba1c <tcp_receive+0x7cc>)
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	899b      	ldrh	r3, [r3, #12]
 800b9e4:	b29d      	uxth	r5, r3
 800b9e6:	2001      	movs	r0, #1
 800b9e8:	f7fb fc6e 	bl	80072c8 <lwip_htons>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	432b      	orrs	r3, r5
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b9f4:	4b09      	ldr	r3, [pc, #36]	; (800ba1c <tcp_receive+0x7cc>)
 800b9f6:	891c      	ldrh	r4, [r3, #8]
 800b9f8:	4b08      	ldr	r3, [pc, #32]	; (800ba1c <tcp_receive+0x7cc>)
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	899b      	ldrh	r3, [r3, #12]
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7fb fc61 	bl	80072c8 <lwip_htons>
 800ba06:	4603      	mov	r3, r0
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	f003 0303 	and.w	r3, r3, #3
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d008      	beq.n	800ba24 <tcp_receive+0x7d4>
 800ba12:	2301      	movs	r3, #1
 800ba14:	e007      	b.n	800ba26 <tcp_receive+0x7d6>
 800ba16:	bf00      	nop
 800ba18:	1ffe9280 	.word	0x1ffe9280
 800ba1c:	1ffe9260 	.word	0x1ffe9260
 800ba20:	1ffe928a 	.word	0x1ffe928a
 800ba24:	2300      	movs	r3, #0
 800ba26:	4423      	add	r3, r4
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	4b9d      	ldr	r3, [pc, #628]	; (800bca0 <tcp_receive+0xa50>)
 800ba2c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ba2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba30:	61bb      	str	r3, [r7, #24]
              next = next->next;
 800ba32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ba38:	69b8      	ldr	r0, [r7, #24]
 800ba3a:	f7fd ff59 	bl	80098f0 <tcp_seg_free>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ba3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00e      	beq.n	800ba62 <tcp_receive+0x812>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ba44:	4b96      	ldr	r3, [pc, #600]	; (800bca0 <tcp_receive+0xa50>)
 800ba46:	881b      	ldrh	r3, [r3, #0]
 800ba48:	461a      	mov	r2, r3
 800ba4a:	4b96      	ldr	r3, [pc, #600]	; (800bca4 <tcp_receive+0xa54>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	441a      	add	r2, r3
 800ba50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba58:	8909      	ldrh	r1, [r1, #8]
 800ba5a:	440b      	add	r3, r1
 800ba5c:	1ad3      	subs	r3, r2, r3
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	daa1      	bge.n	800b9a6 <tcp_receive+0x756>
              next = next->next;
              tcp_seg_free(tmp);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ba62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d047      	beq.n	800baf8 <tcp_receive+0x8a8>
                TCP_SEQ_GT(seqno + tcplen,
 800ba68:	4b8d      	ldr	r3, [pc, #564]	; (800bca0 <tcp_receive+0xa50>)
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	4b8d      	ldr	r3, [pc, #564]	; (800bca4 <tcp_receive+0xa54>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	441a      	add	r2, r3
 800ba74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	1ad3      	subs	r3, r2, r3
              next = next->next;
              tcp_seg_free(tmp);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	dd3b      	ble.n	800baf8 <tcp_receive+0x8a8>
                TCP_SEQ_GT(seqno + tcplen,
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ba80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	4b86      	ldr	r3, [pc, #536]	; (800bca4 <tcp_receive+0xa54>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	4b85      	ldr	r3, [pc, #532]	; (800bca8 <tcp_receive+0xa58>)
 800ba94:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ba96:	4b84      	ldr	r3, [pc, #528]	; (800bca8 <tcp_receive+0xa58>)
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	899b      	ldrh	r3, [r3, #12]
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7fb fc12 	bl	80072c8 <lwip_htons>
 800baa4:	4603      	mov	r3, r0
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	f003 0302 	and.w	r3, r3, #2
 800baac:	2b00      	cmp	r3, #0
 800baae:	d005      	beq.n	800babc <tcp_receive+0x86c>
                inseg.len -= 1;
 800bab0:	4b7d      	ldr	r3, [pc, #500]	; (800bca8 <tcp_receive+0xa58>)
 800bab2:	891b      	ldrh	r3, [r3, #8]
 800bab4:	3b01      	subs	r3, #1
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	4b7b      	ldr	r3, [pc, #492]	; (800bca8 <tcp_receive+0xa58>)
 800baba:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800babc:	4b7a      	ldr	r3, [pc, #488]	; (800bca8 <tcp_receive+0xa58>)
 800babe:	685a      	ldr	r2, [r3, #4]
 800bac0:	4b79      	ldr	r3, [pc, #484]	; (800bca8 <tcp_receive+0xa58>)
 800bac2:	891b      	ldrh	r3, [r3, #8]
 800bac4:	4610      	mov	r0, r2
 800bac6:	4619      	mov	r1, r3
 800bac8:	f7fc fb42 	bl	8008150 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800bacc:	4b76      	ldr	r3, [pc, #472]	; (800bca8 <tcp_receive+0xa58>)
 800bace:	891c      	ldrh	r4, [r3, #8]
 800bad0:	4b75      	ldr	r3, [pc, #468]	; (800bca8 <tcp_receive+0xa58>)
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	899b      	ldrh	r3, [r3, #12]
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	4618      	mov	r0, r3
 800bada:	f7fb fbf5 	bl	80072c8 <lwip_htons>
 800bade:	4603      	mov	r3, r0
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	f003 0303 	and.w	r3, r3, #3
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <tcp_receive+0x89e>
 800baea:	2301      	movs	r3, #1
 800baec:	e000      	b.n	800baf0 <tcp_receive+0x8a0>
 800baee:	2300      	movs	r3, #0
 800baf0:	4423      	add	r3, r4
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	4b6a      	ldr	r3, [pc, #424]	; (800bca0 <tcp_receive+0xa50>)
 800baf6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bafc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800bafe:	4b68      	ldr	r3, [pc, #416]	; (800bca0 <tcp_receive+0xa50>)
 800bb00:	881b      	ldrh	r3, [r3, #0]
 800bb02:	461a      	mov	r2, r3
 800bb04:	4b67      	ldr	r3, [pc, #412]	; (800bca4 <tcp_receive+0xa54>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	441a      	add	r2, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb12:	4b63      	ldr	r3, [pc, #396]	; (800bca0 <tcp_receive+0xa50>)
 800bb14:	881b      	ldrh	r3, [r3, #0]
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f7fd fa9c 	bl	800905c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800bb24:	4b60      	ldr	r3, [pc, #384]	; (800bca8 <tcp_receive+0xa58>)
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	891b      	ldrh	r3, [r3, #8]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d006      	beq.n	800bb3c <tcp_receive+0x8ec>
          recv_data = inseg.p;
 800bb2e:	4b5e      	ldr	r3, [pc, #376]	; (800bca8 <tcp_receive+0xa58>)
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	4a5e      	ldr	r2, [pc, #376]	; (800bcac <tcp_receive+0xa5c>)
 800bb34:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800bb36:	4b5c      	ldr	r3, [pc, #368]	; (800bca8 <tcp_receive+0xa58>)
 800bb38:	2200      	movs	r2, #0
 800bb3a:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bb3c:	4b5a      	ldr	r3, [pc, #360]	; (800bca8 <tcp_receive+0xa58>)
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	899b      	ldrh	r3, [r3, #12]
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fb fbbf 	bl	80072c8 <lwip_htons>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	f003 0301 	and.w	r3, r3, #1
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d006      	beq.n	800bb64 <tcp_receive+0x914>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800bb56:	4b56      	ldr	r3, [pc, #344]	; (800bcb0 <tcp_receive+0xa60>)
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	f043 0320 	orr.w	r3, r3, #32
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	4b53      	ldr	r3, [pc, #332]	; (800bcb0 <tcp_receive+0xa60>)
 800bb62:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800bb64:	e07a      	b.n	800bc5c <tcp_receive+0xa0c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb6a:	617b      	str	r3, [r7, #20]
          seqno = pcb->ooseq->tcphdr->seqno;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	4a4b      	ldr	r2, [pc, #300]	; (800bca4 <tcp_receive+0xa54>)
 800bb76:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	891b      	ldrh	r3, [r3, #8]
 800bb7c:	461c      	mov	r4, r3
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	899b      	ldrh	r3, [r3, #12]
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7fb fb9e 	bl	80072c8 <lwip_htons>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	f003 0303 	and.w	r3, r3, #3
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <tcp_receive+0x94c>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e000      	b.n	800bb9e <tcp_receive+0x94e>
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	4423      	add	r3, r4
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bba4:	441a      	add	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	891b      	ldrh	r3, [r3, #8]
 800bbae:	461c      	mov	r4, r3
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	899b      	ldrh	r3, [r3, #12]
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7fb fb85 	bl	80072c8 <lwip_htons>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	f003 0303 	and.w	r3, r3, #3
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <tcp_receive+0x97e>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e000      	b.n	800bbd0 <tcp_receive+0x980>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	18e1      	adds	r1, r4, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bbd6:	b28b      	uxth	r3, r1
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f7fd fa3b 	bl	800905c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	891b      	ldrh	r3, [r3, #8]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d013      	beq.n	800bc18 <tcp_receive+0x9c8>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800bbf0:	4b2e      	ldr	r3, [pc, #184]	; (800bcac <tcp_receive+0xa5c>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d008      	beq.n	800bc0a <tcp_receive+0x9ba>
              pbuf_cat(recv_data, cseg->p);
 800bbf8:	4b2c      	ldr	r3, [pc, #176]	; (800bcac <tcp_receive+0xa5c>)
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	4610      	mov	r0, r2
 800bc02:	4619      	mov	r1, r3
 800bc04:	f7fc fc5a 	bl	80084bc <pbuf_cat>
 800bc08:	e003      	b.n	800bc12 <tcp_receive+0x9c2>
            } else {
              recv_data = cseg->p;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	4a27      	ldr	r2, [pc, #156]	; (800bcac <tcp_receive+0xa5c>)
 800bc10:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	2200      	movs	r2, #0
 800bc16:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	899b      	ldrh	r3, [r3, #12]
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7fb fb51 	bl	80072c8 <lwip_htons>
 800bc26:	4603      	mov	r3, r0
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	f003 0301 	and.w	r3, r3, #1
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00d      	beq.n	800bc4e <tcp_receive+0x9fe>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800bc32:	4b1f      	ldr	r3, [pc, #124]	; (800bcb0 <tcp_receive+0xa60>)
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	f043 0320 	orr.w	r3, r3, #32
 800bc3a:	b2da      	uxtb	r2, r3
 800bc3c:	4b1c      	ldr	r3, [pc, #112]	; (800bcb0 <tcp_receive+0xa60>)
 800bc3e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	7d1b      	ldrb	r3, [r3, #20]
 800bc44:	2b04      	cmp	r3, #4
 800bc46:	d102      	bne.n	800bc4e <tcp_receive+0x9fe>
              pcb->state = CLOSE_WAIT;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2207      	movs	r2, #7
 800bc4c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800bc56:	6978      	ldr	r0, [r7, #20]
 800bc58:	f7fd fe4a 	bl	80098f0 <tcp_seg_free>
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d008      	beq.n	800bc76 <tcp_receive+0xa26>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	685a      	ldr	r2, [r3, #4]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800bc70:	429a      	cmp	r2, r3
 800bc72:	f43f af78 	beq.w	800bb66 <tcp_receive+0x916>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	8b5b      	ldrh	r3, [r3, #26]
 800bc7a:	f003 0301 	and.w	r3, r3, #1
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d018      	beq.n	800bcb4 <tcp_receive+0xa64>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	8b5b      	ldrh	r3, [r3, #26]
 800bc86:	f023 0301 	bic.w	r3, r3, #1
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	835a      	strh	r2, [r3, #26]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	8b5b      	ldrh	r3, [r3, #26]
 800bc94:	f043 0302 	orr.w	r3, r3, #2
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	835a      	strh	r2, [r3, #26]
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800bc9e:	e170      	b.n	800bf82 <tcp_receive+0xd32>
 800bca0:	1ffe928a 	.word	0x1ffe928a
 800bca4:	1ffe9280 	.word	0x1ffe9280
 800bca8:	1ffe9260 	.word	0x1ffe9260
 800bcac:	1ffe9290 	.word	0x1ffe9290
 800bcb0:	1ffe928d 	.word	0x1ffe928d
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	8b5b      	ldrh	r3, [r3, #26]
 800bcb8:	f043 0301 	orr.w	r3, r3, #1
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	835a      	strh	r2, [r3, #26]
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800bcc2:	e15e      	b.n	800bf82 <tcp_receive+0xd32>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d106      	bne.n	800bcda <tcp_receive+0xa8a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800bccc:	4855      	ldr	r0, [pc, #340]	; (800be24 <tcp_receive+0xbd4>)
 800bcce:	f7fd fe27 	bl	8009920 <tcp_seg_copy>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	675a      	str	r2, [r3, #116]	; 0x74
 800bcd8:	e14b      	b.n	800bf72 <tcp_receive+0xd22>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bce2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bce4:	e141      	b.n	800bf6a <tcp_receive+0xd1a>
            if (seqno == next->tcphdr->seqno) {
 800bce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	685a      	ldr	r2, [r3, #4]
 800bcec:	4b4e      	ldr	r3, [pc, #312]	; (800be28 <tcp_receive+0xbd8>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d11d      	bne.n	800bd30 <tcp_receive+0xae0>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800bcf4:	4b4b      	ldr	r3, [pc, #300]	; (800be24 <tcp_receive+0xbd4>)
 800bcf6:	891a      	ldrh	r2, [r3, #8]
 800bcf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfa:	891b      	ldrh	r3, [r3, #8]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d916      	bls.n	800bd2e <tcp_receive+0xade>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bd00:	4848      	ldr	r0, [pc, #288]	; (800be24 <tcp_receive+0xbd4>)
 800bd02:	f7fd fe0d 	bl	8009920 <tcp_seg_copy>
 800bd06:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00e      	beq.n	800bd2c <tcp_receive+0xadc>
                  if (prev != NULL) {
 800bd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d003      	beq.n	800bd1c <tcp_receive+0xacc>
                    prev->next = cseg;
 800bd14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd16:	68ba      	ldr	r2, [r7, #8]
 800bd18:	601a      	str	r2, [r3, #0]
 800bd1a:	e002      	b.n	800bd22 <tcp_receive+0xad2>
                  } else {
                    pcb->ooseq = cseg;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	68ba      	ldr	r2, [r7, #8]
 800bd20:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bd22:	68b8      	ldr	r0, [r7, #8]
 800bd24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd26:	f7ff f9c5 	bl	800b0b4 <tcp_oos_insert_segment>
                }
                break;
 800bd2a:	e122      	b.n	800bf72 <tcp_receive+0xd22>
 800bd2c:	e121      	b.n	800bf72 <tcp_receive+0xd22>
              } else {
                /* Either the lengths are the same or the incoming
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
 800bd2e:	e120      	b.n	800bf72 <tcp_receive+0xd22>
              }
            } else {
              if (prev == NULL) {
 800bd30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d117      	bne.n	800bd66 <tcp_receive+0xb16>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bd36:	4b3c      	ldr	r3, [pc, #240]	; (800be28 <tcp_receive+0xbd8>)
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	1ad3      	subs	r3, r2, r3
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	da4f      	bge.n	800bde6 <tcp_receive+0xb96>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bd46:	4837      	ldr	r0, [pc, #220]	; (800be24 <tcp_receive+0xbd4>)
 800bd48:	f7fd fdea 	bl	8009920 <tcp_seg_copy>
 800bd4c:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d007      	beq.n	800bd64 <tcp_receive+0xb14>
                    pcb->ooseq = cseg;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	693a      	ldr	r2, [r7, #16]
 800bd58:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800bd5a:	6938      	ldr	r0, [r7, #16]
 800bd5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd5e:	f7ff f9a9 	bl	800b0b4 <tcp_oos_insert_segment>
                  }
                  break;
 800bd62:	e106      	b.n	800bf72 <tcp_receive+0xd22>
 800bd64:	e105      	b.n	800bf72 <tcp_receive+0xd22>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bd66:	4b30      	ldr	r3, [pc, #192]	; (800be28 <tcp_receive+0xbd8>)
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	3b01      	subs	r3, #1
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	db36      	blt.n	800bde6 <tcp_receive+0xb96>
 800bd78:	4b2b      	ldr	r3, [pc, #172]	; (800be28 <tcp_receive+0xbd8>)
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	1ad3      	subs	r3, r2, r3
 800bd84:	3301      	adds	r3, #1
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	dc2d      	bgt.n	800bde6 <tcp_receive+0xb96>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bd8a:	4826      	ldr	r0, [pc, #152]	; (800be24 <tcp_receive+0xbd4>)
 800bd8c:	f7fd fdc8 	bl	8009920 <tcp_seg_copy>
 800bd90:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d025      	beq.n	800bde4 <tcp_receive+0xb94>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800bd98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bda0:	8912      	ldrh	r2, [r2, #8]
 800bda2:	441a      	add	r2, r3
 800bda4:	4b20      	ldr	r3, [pc, #128]	; (800be28 <tcp_receive+0xbd8>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	1ad3      	subs	r3, r2, r3
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	dd12      	ble.n	800bdd4 <tcp_receive+0xb84>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bdae:	4b1e      	ldr	r3, [pc, #120]	; (800be28 <tcp_receive+0xbd8>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	b29a      	uxth	r2, r3
 800bdb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bdc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc6:	685a      	ldr	r2, [r3, #4]
 800bdc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdca:	891b      	ldrh	r3, [r3, #8]
 800bdcc:	4610      	mov	r0, r2
 800bdce:	4619      	mov	r1, r3
 800bdd0:	f7fc f9be 	bl	8008150 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bdd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bdde:	f7ff f969 	bl	800b0b4 <tcp_oos_insert_segment>
                  }
                  break;
 800bde2:	e0c6      	b.n	800bf72 <tcp_receive+0xd22>
 800bde4:	e0c5      	b.n	800bf72 <tcp_receive+0xd22>
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800bde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde8:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	f040 80b8 	bne.w	800bf64 <tcp_receive+0xd14>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800bdf4:	4b0c      	ldr	r3, [pc, #48]	; (800be28 <tcp_receive+0xbd8>)
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	1ad3      	subs	r3, r2, r3
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800be00:	2b00      	cmp	r3, #0
 800be02:	f340 80af 	ble.w	800bf64 <tcp_receive+0xd14>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800be06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	899b      	ldrh	r3, [r3, #12]
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fb fa5a 	bl	80072c8 <lwip_htons>
 800be14:	4603      	mov	r3, r0
 800be16:	b2db      	uxtb	r3, r3
 800be18:	f003 0301 	and.w	r3, r3, #1
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d005      	beq.n	800be2c <tcp_receive+0xbdc>
                  /* segment "next" already contains all data */
                  break;
 800be20:	e0a7      	b.n	800bf72 <tcp_receive+0xd22>
 800be22:	bf00      	nop
 800be24:	1ffe9260 	.word	0x1ffe9260
 800be28:	1ffe9280 	.word	0x1ffe9280
                }
                next->next = tcp_seg_copy(&inseg);
 800be2c:	4863      	ldr	r0, [pc, #396]	; (800bfbc <tcp_receive+0xd6c>)
 800be2e:	f7fd fd77 	bl	8009920 <tcp_seg_copy>
 800be32:	4602      	mov	r2, r0
 800be34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be36:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800be38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f000 8090 	beq.w	800bf62 <tcp_receive+0xd12>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800be42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be4a:	8912      	ldrh	r2, [r2, #8]
 800be4c:	441a      	add	r2, r3
 800be4e:	4b5c      	ldr	r3, [pc, #368]	; (800bfc0 <tcp_receive+0xd70>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	1ad3      	subs	r3, r2, r3
 800be54:	2b00      	cmp	r3, #0
 800be56:	dd12      	ble.n	800be7e <tcp_receive+0xc2e>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800be58:	4b59      	ldr	r3, [pc, #356]	; (800bfc0 <tcp_receive+0xd70>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	b29a      	uxth	r2, r3
 800be5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	b29b      	uxth	r3, r3
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	b29a      	uxth	r2, r3
 800be6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800be6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be70:	685a      	ldr	r2, [r3, #4]
 800be72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be74:	891b      	ldrh	r3, [r3, #8]
 800be76:	4610      	mov	r0, r2
 800be78:	4619      	mov	r1, r3
 800be7a:	f7fc f969 	bl	8008150 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800be7e:	4b51      	ldr	r3, [pc, #324]	; (800bfc4 <tcp_receive+0xd74>)
 800be80:	881b      	ldrh	r3, [r3, #0]
 800be82:	461a      	mov	r2, r3
 800be84:	4b4e      	ldr	r3, [pc, #312]	; (800bfc0 <tcp_receive+0xd70>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	441a      	add	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8e:	6879      	ldr	r1, [r7, #4]
 800be90:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800be92:	440b      	add	r3, r1
 800be94:	1ad3      	subs	r3, r2, r3
 800be96:	2b00      	cmp	r3, #0
 800be98:	dd63      	ble.n	800bf62 <tcp_receive+0xd12>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800be9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	899b      	ldrh	r3, [r3, #12]
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7fb fa0f 	bl	80072c8 <lwip_htons>
 800beaa:	4603      	mov	r3, r0
 800beac:	b2db      	uxtb	r3, r3
 800beae:	f003 0301 	and.w	r3, r3, #1
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d023      	beq.n	800befe <tcp_receive+0xcae>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800beb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	68dc      	ldr	r4, [r3, #12]
 800bebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	899b      	ldrh	r3, [r3, #12]
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800becc:	b29d      	uxth	r5, r3
 800bece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	899b      	ldrh	r3, [r3, #12]
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	4618      	mov	r0, r3
 800beda:	f7fb f9f5 	bl	80072c8 <lwip_htons>
 800bede:	4603      	mov	r3, r0
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bee8:	b29b      	uxth	r3, r3
 800beea:	4618      	mov	r0, r3
 800beec:	f7fb f9ec 	bl	80072c8 <lwip_htons>
 800bef0:	4603      	mov	r3, r0
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	462a      	mov	r2, r5
 800bef6:	4313      	orrs	r3, r2
 800bef8:	b29b      	uxth	r3, r3
 800befa:	b29b      	uxth	r3, r3
 800befc:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800befe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bf06:	b291      	uxth	r1, r2
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800bf0c:	440a      	add	r2, r1
 800bf0e:	b291      	uxth	r1, r2
 800bf10:	4a2b      	ldr	r2, [pc, #172]	; (800bfc0 <tcp_receive+0xd70>)
 800bf12:	6812      	ldr	r2, [r2, #0]
 800bf14:	b292      	uxth	r2, r2
 800bf16:	1a8a      	subs	r2, r1, r2
 800bf18:	b292      	uxth	r2, r2
 800bf1a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	685a      	ldr	r2, [r3, #4]
 800bf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	891b      	ldrh	r3, [r3, #8]
 800bf28:	4610      	mov	r0, r2
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	f7fc f910 	bl	8008150 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	891c      	ldrh	r4, [r3, #8]
 800bf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	899b      	ldrh	r3, [r3, #12]
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7fb f9c1 	bl	80072c8 <lwip_htons>
 800bf46:	4603      	mov	r3, r0
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	f003 0303 	and.w	r3, r3, #3
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d001      	beq.n	800bf56 <tcp_receive+0xd06>
 800bf52:	2301      	movs	r3, #1
 800bf54:	e000      	b.n	800bf58 <tcp_receive+0xd08>
 800bf56:	2300      	movs	r3, #0
 800bf58:	4423      	add	r3, r4
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	4b19      	ldr	r3, [pc, #100]	; (800bfc4 <tcp_receive+0xd74>)
 800bf5e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bf60:	e007      	b.n	800bf72 <tcp_receive+0xd22>
 800bf62:	e006      	b.n	800bf72 <tcp_receive+0xd22>
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f47f aeba 	bne.w	800bce6 <tcp_receive+0xa96>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f001 fb04 	bl	800d580 <tcp_send_empty_ack>
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800bf78:	e003      	b.n	800bf82 <tcp_receive+0xd32>
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f001 fb00 	bl	800d580 <tcp_send_empty_ack>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bf80:	e019      	b.n	800bfb6 <tcp_receive+0xd66>
 800bf82:	e018      	b.n	800bfb6 <tcp_receive+0xd66>
      tcp_send_empty_ack(pcb);
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bf84:	4b0e      	ldr	r3, [pc, #56]	; (800bfc0 <tcp_receive+0xd70>)
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8c:	1ad3      	subs	r3, r2, r3
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	db0a      	blt.n	800bfa8 <tcp_receive+0xd58>
 800bf92:	4b0b      	ldr	r3, [pc, #44]	; (800bfc0 <tcp_receive+0xd70>)
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9a:	6879      	ldr	r1, [r7, #4]
 800bf9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bf9e:	440b      	add	r3, r1
 800bfa0:	1ad3      	subs	r3, r2, r3
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	dd06      	ble.n	800bfb6 <tcp_receive+0xd66>
      tcp_ack_now(pcb);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	8b5b      	ldrh	r3, [r3, #26]
 800bfac:	f043 0302 	orr.w	r3, r3, #2
 800bfb0:	b29a      	uxth	r2, r3
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800bfb6:	3750      	adds	r7, #80	; 0x50
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bdb0      	pop	{r4, r5, r7, pc}
 800bfbc:	1ffe9260 	.word	0x1ffe9260
 800bfc0:	1ffe9280 	.word	0x1ffe9280
 800bfc4:	1ffe928a 	.word	0x1ffe928a

0800bfc8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800bfce:	4b15      	ldr	r3, [pc, #84]	; (800c024 <tcp_get_next_optbyte+0x5c>)
 800bfd0:	881b      	ldrh	r3, [r3, #0]
 800bfd2:	1c5a      	adds	r2, r3, #1
 800bfd4:	b291      	uxth	r1, r2
 800bfd6:	4a13      	ldr	r2, [pc, #76]	; (800c024 <tcp_get_next_optbyte+0x5c>)
 800bfd8:	8011      	strh	r1, [r2, #0]
 800bfda:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bfdc:	4b12      	ldr	r3, [pc, #72]	; (800c028 <tcp_get_next_optbyte+0x60>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d004      	beq.n	800bfee <tcp_get_next_optbyte+0x26>
 800bfe4:	4b11      	ldr	r3, [pc, #68]	; (800c02c <tcp_get_next_optbyte+0x64>)
 800bfe6:	881b      	ldrh	r3, [r3, #0]
 800bfe8:	88fa      	ldrh	r2, [r7, #6]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d208      	bcs.n	800c000 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bfee:	4b10      	ldr	r3, [pc, #64]	; (800c030 <tcp_get_next_optbyte+0x68>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	3314      	adds	r3, #20
 800bff4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800bff6:	88fb      	ldrh	r3, [r7, #6]
 800bff8:	683a      	ldr	r2, [r7, #0]
 800bffa:	4413      	add	r3, r2
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	e00b      	b.n	800c018 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c000:	88fb      	ldrh	r3, [r7, #6]
 800c002:	b2da      	uxtb	r2, r3
 800c004:	4b09      	ldr	r3, [pc, #36]	; (800c02c <tcp_get_next_optbyte+0x64>)
 800c006:	881b      	ldrh	r3, [r3, #0]
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	1ad3      	subs	r3, r2, r3
 800c00c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c00e:	4b06      	ldr	r3, [pc, #24]	; (800c028 <tcp_get_next_optbyte+0x60>)
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	797b      	ldrb	r3, [r7, #5]
 800c014:	4413      	add	r3, r2
 800c016:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c018:	4618      	mov	r0, r3
 800c01a:	370c      	adds	r7, #12
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr
 800c024:	1ffe927c 	.word	0x1ffe927c
 800c028:	1ffe9278 	.word	0x1ffe9278
 800c02c:	1ffe9276 	.word	0x1ffe9276
 800c030:	1ffe9270 	.word	0x1ffe9270

0800c034 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c03c:	4b2c      	ldr	r3, [pc, #176]	; (800c0f0 <tcp_parseopt+0xbc>)
 800c03e:	881b      	ldrh	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d051      	beq.n	800c0e8 <tcp_parseopt+0xb4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c044:	4b2b      	ldr	r3, [pc, #172]	; (800c0f4 <tcp_parseopt+0xc0>)
 800c046:	2200      	movs	r2, #0
 800c048:	801a      	strh	r2, [r3, #0]
 800c04a:	e045      	b.n	800c0d8 <tcp_parseopt+0xa4>
      u8_t opt = tcp_get_next_optbyte();
 800c04c:	f7ff ffbc 	bl	800bfc8 <tcp_get_next_optbyte>
 800c050:	4603      	mov	r3, r0
 800c052:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c054:	7bfb      	ldrb	r3, [r7, #15]
 800c056:	2b01      	cmp	r3, #1
 800c058:	d03e      	beq.n	800c0d8 <tcp_parseopt+0xa4>
 800c05a:	2b02      	cmp	r3, #2
 800c05c:	d002      	beq.n	800c064 <tcp_parseopt+0x30>
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d041      	beq.n	800c0e6 <tcp_parseopt+0xb2>
 800c062:	e027      	b.n	800c0b4 <tcp_parseopt+0x80>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c064:	f7ff ffb0 	bl	800bfc8 <tcp_get_next_optbyte>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b04      	cmp	r3, #4
 800c06c:	d106      	bne.n	800c07c <tcp_parseopt+0x48>
 800c06e:	4b21      	ldr	r3, [pc, #132]	; (800c0f4 <tcp_parseopt+0xc0>)
 800c070:	881b      	ldrh	r3, [r3, #0]
 800c072:	3302      	adds	r3, #2
 800c074:	4a1e      	ldr	r2, [pc, #120]	; (800c0f0 <tcp_parseopt+0xbc>)
 800c076:	8812      	ldrh	r2, [r2, #0]
 800c078:	4293      	cmp	r3, r2
 800c07a:	dd00      	ble.n	800c07e <tcp_parseopt+0x4a>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
 800c07c:	e034      	b.n	800c0e8 <tcp_parseopt+0xb4>
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c07e:	f7ff ffa3 	bl	800bfc8 <tcp_get_next_optbyte>
 800c082:	4603      	mov	r3, r0
 800c084:	b29b      	uxth	r3, r3
 800c086:	021b      	lsls	r3, r3, #8
 800c088:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c08a:	f7ff ff9d 	bl	800bfc8 <tcp_get_next_optbyte>
 800c08e:	4603      	mov	r3, r0
 800c090:	b29a      	uxth	r2, r3
 800c092:	89bb      	ldrh	r3, [r7, #12]
 800c094:	4313      	orrs	r3, r2
 800c096:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c098:	89bb      	ldrh	r3, [r7, #12]
 800c09a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c09e:	d804      	bhi.n	800c0aa <tcp_parseopt+0x76>
 800c0a0:	89bb      	ldrh	r3, [r7, #12]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d001      	beq.n	800c0aa <tcp_parseopt+0x76>
 800c0a6:	89ba      	ldrh	r2, [r7, #12]
 800c0a8:	e001      	b.n	800c0ae <tcp_parseopt+0x7a>
 800c0aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c0b2:	e011      	b.n	800c0d8 <tcp_parseopt+0xa4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c0b4:	f7ff ff88 	bl	800bfc8 <tcp_get_next_optbyte>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c0bc:	7afb      	ldrb	r3, [r7, #11]
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d800      	bhi.n	800c0c4 <tcp_parseopt+0x90>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            /* If the length field is zero, the options are malformed
               and we don't process them further. */
            return;
 800c0c2:	e011      	b.n	800c0e8 <tcp_parseopt+0xb4>
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c0c4:	7afb      	ldrb	r3, [r7, #11]
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	4b0a      	ldr	r3, [pc, #40]	; (800c0f4 <tcp_parseopt+0xc0>)
 800c0ca:	881b      	ldrh	r3, [r3, #0]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	3b02      	subs	r3, #2
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	4b07      	ldr	r3, [pc, #28]	; (800c0f4 <tcp_parseopt+0xc0>)
 800c0d6:	801a      	strh	r2, [r3, #0]

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c0d8:	4b06      	ldr	r3, [pc, #24]	; (800c0f4 <tcp_parseopt+0xc0>)
 800c0da:	881a      	ldrh	r2, [r3, #0]
 800c0dc:	4b04      	ldr	r3, [pc, #16]	; (800c0f0 <tcp_parseopt+0xbc>)
 800c0de:	881b      	ldrh	r3, [r3, #0]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d3b3      	bcc.n	800c04c <tcp_parseopt+0x18>
 800c0e4:	e000      	b.n	800c0e8 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
        case LWIP_TCP_OPT_EOL:
          /* End of options. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
 800c0e6:	bf00      	nop
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	1ffe9274 	.word	0x1ffe9274
 800c0f4:	1ffe927c 	.word	0x1ffe927c

0800c0f8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c0fc:	4b05      	ldr	r3, [pc, #20]	; (800c114 <tcp_trigger_input_pcb_close+0x1c>)
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	f043 0310 	orr.w	r3, r3, #16
 800c104:	b2da      	uxtb	r2, r3
 800c106:	4b03      	ldr	r3, [pc, #12]	; (800c114 <tcp_trigger_input_pcb_close+0x1c>)
 800c108:	701a      	strb	r2, [r3, #0]
}
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	1ffe928d 	.word	0x1ffe928d

0800c118 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00a      	beq.n	800c140 <tcp_route+0x28>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	7a1b      	ldrb	r3, [r3, #8]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d006      	beq.n	800c140 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	7a1b      	ldrb	r3, [r3, #8]
 800c136:	4618      	mov	r0, r3
 800c138:	f7fb feb8 	bl	8007eac <netif_get_by_index>
 800c13c:	4603      	mov	r3, r0
 800c13e:	e003      	b.n	800c148 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f7fa fe1d 	bl	8006d80 <ip4_route>
 800c146:	4603      	mov	r3, r0
  }
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c150:	b590      	push	{r4, r7, lr}
 800c152:	b087      	sub	sp, #28
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	603b      	str	r3, [r7, #0]
 800c15c:	4613      	mov	r3, r2
 800c15e:	71fb      	strb	r3, [r7, #7]
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c160:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c164:	f003 0301 	and.w	r3, r3, #1
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d001      	beq.n	800c170 <tcp_create_segment+0x20>
 800c16c:	2304      	movs	r3, #4
 800c16e:	e000      	b.n	800c172 <tcp_create_segment+0x22>
 800c170:	2300      	movs	r3, #0
 800c172:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c174:	2003      	movs	r0, #3
 800c176:	f7fb fbf1 	bl	800795c <memp_malloc>
 800c17a:	6138      	str	r0, [r7, #16]
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d104      	bne.n	800c18c <tcp_create_segment+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c182:	68b8      	ldr	r0, [r7, #8]
 800c184:	f7fc f92a 	bl	80083dc <pbuf_free>
    return NULL;
 800c188:	2300      	movs	r3, #0
 800c18a:	e055      	b.n	800c238 <tcp_create_segment+0xe8>
  }
  seg->flags = optflags;
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c192:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	2200      	movs	r2, #0
 800c198:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	68ba      	ldr	r2, [r7, #8]
 800c19e:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  seg->len = p->tot_len - optlen;
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	891a      	ldrh	r2, [r3, #8]
 800c1a4:	7dfb      	ldrb	r3, [r7, #23]
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	b29a      	uxth	r2, r3
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c1b0:	68b8      	ldr	r0, [r7, #8]
 800c1b2:	2114      	movs	r1, #20
 800c1b4:	f7fc f882 	bl	80082bc <pbuf_add_header>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d004      	beq.n	800c1c8 <tcp_create_segment+0x78>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c1be:	6938      	ldr	r0, [r7, #16]
 800c1c0:	f7fd fb96 	bl	80098f0 <tcp_seg_free>
    return NULL;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	e037      	b.n	800c238 <tcp_create_segment+0xe8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	685a      	ldr	r2, [r3, #4]
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	68dc      	ldr	r4, [r3, #12]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	8adb      	ldrh	r3, [r3, #22]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fb f874 	bl	80072c8 <lwip_htons>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	68dc      	ldr	r4, [r3, #12]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	8b1b      	ldrh	r3, [r3, #24]
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7fb f86b 	bl	80072c8 <lwip_htons>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	68dc      	ldr	r4, [r3, #12]
 800c1fa:	6838      	ldr	r0, [r7, #0]
 800c1fc:	f7fb f87a 	bl	80072f4 <lwip_htonl>
 800c200:	4603      	mov	r3, r0
 800c202:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	68dc      	ldr	r4, [r3, #12]
 800c208:	7dfb      	ldrb	r3, [r7, #23]
 800c20a:	089b      	lsrs	r3, r3, #2
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	b29b      	uxth	r3, r3
 800c210:	3305      	adds	r3, #5
 800c212:	b29b      	uxth	r3, r3
 800c214:	031b      	lsls	r3, r3, #12
 800c216:	b29a      	uxth	r2, r3
 800c218:	79fb      	ldrb	r3, [r7, #7]
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	4313      	orrs	r3, r2
 800c21e:	b29b      	uxth	r3, r3
 800c220:	4618      	mov	r0, r3
 800c222:	f7fb f851 	bl	80072c8 <lwip_htons>
 800c226:	4603      	mov	r3, r0
 800c228:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	2200      	movs	r2, #0
 800c230:	749a      	strb	r2, [r3, #18]
 800c232:	2200      	movs	r2, #0
 800c234:	74da      	strb	r2, [r3, #19]
  return seg;
 800c236:	693b      	ldr	r3, [r7, #16]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	371c      	adds	r7, #28
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd90      	pop	{r4, r7, pc}

0800c240 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b086      	sub	sp, #24
 800c244:	af00      	add	r7, sp, #0
 800c246:	607b      	str	r3, [r7, #4]
 800c248:	4603      	mov	r3, r0
 800c24a:	73fb      	strb	r3, [r7, #15]
 800c24c:	460b      	mov	r3, r1
 800c24e:	81bb      	strh	r3, [r7, #12]
 800c250:	4613      	mov	r3, r2
 800c252:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c254:	89bb      	ldrh	r3, [r7, #12]
 800c256:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c258:	89ba      	ldrh	r2, [r7, #12]
 800c25a:	897b      	ldrh	r3, [r7, #10]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d221      	bcs.n	800c2a4 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c260:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c264:	f003 0302 	and.w	r3, r3, #2
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d111      	bne.n	800c290 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800c26c:	6a3b      	ldr	r3, [r7, #32]
 800c26e:	8b5b      	ldrh	r3, [r3, #26]
 800c270:	f003 0340 	and.w	r3, r3, #64	; 0x40
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c274:	2b00      	cmp	r3, #0
 800c276:	d115      	bne.n	800c2a4 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800c278:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d007      	beq.n	800c290 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c280:	6a3b      	ldr	r3, [r7, #32]
 800c282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
 800c284:	2b00      	cmp	r3, #0
 800c286:	d103      	bne.n	800c290 <tcp_pbuf_prealloc+0x50>
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
 800c288:	6a3b      	ldr	r3, [r7, #32]
 800c28a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d009      	beq.n	800c2a4 <tcp_pbuf_prealloc+0x64>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c290:	89bb      	ldrh	r3, [r7, #12]
 800c292:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800c296:	f023 0203 	bic.w	r2, r3, #3
 800c29a:	897b      	ldrh	r3, [r7, #10]
 800c29c:	4293      	cmp	r3, r2
 800c29e:	bf28      	it	cs
 800c2a0:	4613      	movcs	r3, r2
 800c2a2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c2a4:	7bfa      	ldrb	r2, [r7, #15]
 800c2a6:	8afb      	ldrh	r3, [r7, #22]
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c2b0:	f7fb fe78 	bl	8007fa4 <pbuf_alloc>
 800c2b4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d101      	bne.n	800c2c0 <tcp_pbuf_prealloc+0x80>
    return NULL;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	e00e      	b.n	800c2de <tcp_pbuf_prealloc+0x9e>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	895a      	ldrh	r2, [r3, #10]
 800c2c4:	89bb      	ldrh	r3, [r7, #12]
 800c2c6:	1ad3      	subs	r3, r2, r3
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	89ba      	ldrh	r2, [r7, #12]
 800c2d2:	811a      	strh	r2, [r3, #8]
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	891a      	ldrh	r2, [r3, #8]
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	815a      	strh	r2, [r3, #10]
  return p;
 800c2dc:	693b      	ldr	r3, [r7, #16]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3718      	adds	r7, #24
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop

0800c2e8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	7d1b      	ldrb	r3, [r3, #20]
 800c2f8:	2b04      	cmp	r3, #4
 800c2fa:	d00d      	beq.n	800c318 <tcp_write_checks+0x30>
      (pcb->state != CLOSE_WAIT) &&
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	7d1b      	ldrb	r3, [r3, #20]
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c300:	2b07      	cmp	r3, #7
 800c302:	d009      	beq.n	800c318 <tcp_write_checks+0x30>
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	7d1b      	ldrb	r3, [r3, #20]
{
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
 800c308:	2b02      	cmp	r3, #2
 800c30a:	d005      	beq.n	800c318 <tcp_write_checks+0x30>
      (pcb->state != SYN_SENT) &&
      (pcb->state != SYN_RCVD)) {
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	7d1b      	ldrb	r3, [r3, #20]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
 800c310:	2b03      	cmp	r3, #3
 800c312:	d001      	beq.n	800c318 <tcp_write_checks+0x30>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c314:	23f5      	movs	r3, #245	; 0xf5
 800c316:	e022      	b.n	800c35e <tcp_write_checks+0x76>
  } else if (len == 0) {
 800c318:	887b      	ldrh	r3, [r7, #2]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d101      	bne.n	800c322 <tcp_write_checks+0x3a>
    return ERR_OK;
 800c31e:	2300      	movs	r3, #0
 800c320:	e01d      	b.n	800c35e <tcp_write_checks+0x76>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c328:	887a      	ldrh	r2, [r7, #2]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d908      	bls.n	800c340 <tcp_write_checks+0x58>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	8b5b      	ldrh	r3, [r3, #26]
 800c332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c336:	b29a      	uxth	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c33c:	23ff      	movs	r3, #255	; 0xff
 800c33e:	e00e      	b.n	800c35e <tcp_write_checks+0x76>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c346:	2b07      	cmp	r3, #7
 800c348:	d908      	bls.n	800c35c <tcp_write_checks+0x74>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	8b5b      	ldrh	r3, [r3, #26]
 800c34e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c352:	b29a      	uxth	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c358:	23ff      	movs	r3, #255	; 0xff
 800c35a:	e000      	b.n	800c35e <tcp_write_checks+0x76>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c35c:	2300      	movs	r3, #0
 800c35e:	b25b      	sxtb	r3, r3
}
 800c360:	4618      	mov	r0, r3
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c36c:	b5b0      	push	{r4, r5, r7, lr}
 800c36e:	b09a      	sub	sp, #104	; 0x68
 800c370:	af04      	add	r7, sp, #16
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	4611      	mov	r1, r2
 800c378:	461a      	mov	r2, r3
 800c37a:	460b      	mov	r3, r1
 800c37c:	80fb      	strh	r3, [r7, #6]
 800c37e:	4613      	mov	r3, r2
 800c380:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c382:	2300      	movs	r3, #0
 800c384:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c386:	2300      	movs	r3, #0
 800c388:	653b      	str	r3, [r7, #80]	; 0x50
 800c38a:	2300      	movs	r3, #0
 800c38c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c38e:	2300      	movs	r3, #0
 800c390:	64bb      	str	r3, [r7, #72]	; 0x48
 800c392:	2300      	movs	r3, #0
 800c394:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c396:	2300      	movs	r3, #0
 800c398:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c39c:	2300      	movs	r3, #0
 800c39e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d101      	bne.n	800c3b8 <tcp_write+0x4c>
 800c3b4:	23f0      	movs	r3, #240	; 0xf0
 800c3b6:	e25c      	b.n	800c872 <tcp_write+0x506>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c3be:	085b      	lsrs	r3, r3, #1
 800c3c0:	b29a      	uxth	r2, r3
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	bf28      	it	cs
 800c3ca:	4613      	movcs	r3, r2
 800c3cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c3ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d102      	bne.n	800c3da <tcp_write+0x6e>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c3d8:	e000      	b.n	800c3dc <tcp_write+0x70>
 800c3da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <tcp_write+0x7c>
 800c3e4:	23f0      	movs	r3, #240	; 0xf0
 800c3e6:	e244      	b.n	800c872 <tcp_write+0x506>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c3e8:	88fb      	ldrh	r3, [r7, #6]
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	f7ff ff7b 	bl	800c2e8 <tcp_write_checks>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800c3f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <tcp_write+0x9a>
    return err;
 800c400:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c404:	e235      	b.n	800c872 <tcp_write+0x506>
  }
  queuelen = pcb->snd_queuelen;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c40c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c410:	2300      	movs	r3, #0
 800c412:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f000 80c4 	beq.w	800c5a8 <tcp_write+0x23c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c424:	653b      	str	r3, [r7, #80]	; 0x50
 800c426:	e002      	b.n	800c42e <tcp_write+0xc2>
         last_unsent = last_unsent->next);
 800c428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	653b      	str	r3, [r7, #80]	; 0x50
  if (pcb->unsent != NULL) {
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c42e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d1f8      	bne.n	800c428 <tcp_write+0xbc>
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c438:	7a9b      	ldrb	r3, [r3, #10]
 800c43a:	f003 0301 	and.w	r3, r3, #1
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d001      	beq.n	800c446 <tcp_write+0xda>
 800c442:	2304      	movs	r3, #4
 800c444:	e000      	b.n	800c448 <tcp_write+0xdc>
 800c446:	2300      	movs	r3, #0
 800c448:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c44a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c44c:	891a      	ldrh	r2, [r3, #8]
 800c44e:	8c3b      	ldrh	r3, [r7, #32]
 800c450:	4413      	add	r3, r2
 800c452:	b29b      	uxth	r3, r3
 800c454:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c456:	1ad3      	subs	r3, r2, r3
 800c458:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c460:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c462:	8a7b      	ldrh	r3, [r7, #18]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d01b      	beq.n	800c4a0 <tcp_write+0x134>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
      seg = last_unsent;
 800c468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c46a:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c46c:	8a7b      	ldrh	r3, [r7, #18]
 800c46e:	88fa      	ldrh	r2, [r7, #6]
 800c470:	4293      	cmp	r3, r2
 800c472:	bf28      	it	cs
 800c474:	4613      	movcs	r3, r2
 800c476:	b29a      	uxth	r2, r3
 800c478:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c47a:	4293      	cmp	r3, r2
 800c47c:	bf28      	it	cs
 800c47e:	4613      	movcs	r3, r2
 800c480:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800c482:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c486:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c488:	4413      	add	r3, r2
 800c48a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800c48e:	8a7a      	ldrh	r2, [r7, #18]
 800c490:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c492:	1ad3      	subs	r3, r2, r3
 800c494:	b29b      	uxth	r3, r3
 800c496:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c498:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c49a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c49c:	1ad3      	subs	r3, r2, r3
 800c49e:	877b      	strh	r3, [r7, #58]	; 0x3a
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c4a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c4a4:	88fb      	ldrh	r3, [r7, #6]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d27e      	bcs.n	800c5a8 <tcp_write+0x23c>
 800c4aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d07b      	beq.n	800c5a8 <tcp_write+0x23c>
 800c4b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4b2:	891b      	ldrh	r3, [r3, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d077      	beq.n	800c5a8 <tcp_write+0x23c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c4b8:	88fa      	ldrh	r2, [r7, #6]
 800c4ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c4be:	1ad2      	subs	r2, r2, r3
 800c4c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	bfa8      	it	ge
 800c4c6:	4613      	movge	r3, r2
 800c4c8:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c4ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4cc:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c4ce:	797b      	ldrb	r3, [r7, #5]
 800c4d0:	f003 0301 	and.w	r3, r3, #1
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d029      	beq.n	800c52c <tcp_write+0x1c0>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c4d8:	8bf9      	ldrh	r1, [r7, #30]
 800c4da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c4dc:	f107 0412 	add.w	r4, r7, #18
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	9300      	str	r3, [sp, #0]
 800c4e4:	797b      	ldrb	r3, [r7, #5]
 800c4e6:	9301      	str	r3, [sp, #4]
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	9302      	str	r3, [sp, #8]
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	4623      	mov	r3, r4
 800c4f0:	f7ff fea6 	bl	800c240 <tcp_pbuf_prealloc>
 800c4f4:	6578      	str	r0, [r7, #84]	; 0x54
 800c4f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d100      	bne.n	800c4fe <tcp_write+0x192>
          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
 800c4fc:	e1a5      	b.n	800c84a <tcp_write+0x4de>
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c4fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c500:	6859      	ldr	r1, [r3, #4]
 800c502:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c506:	68ba      	ldr	r2, [r7, #8]
 800c508:	441a      	add	r2, r3
 800c50a:	8bfb      	ldrh	r3, [r7, #30]
 800c50c:	4608      	mov	r0, r1
 800c50e:	4611      	mov	r1, r2
 800c510:	461a      	mov	r2, r3
 800c512:	f7f9 fbcb 	bl	8005cac <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c516:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c518:	f7fb ffa6 	bl	8008468 <pbuf_clen>
 800c51c:	4603      	mov	r3, r0
 800c51e:	461a      	mov	r2, r3
 800c520:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c524:	4413      	add	r3, r2
 800c526:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c52a:	e036      	b.n	800c59a <tcp_write+0x22e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c52c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	637b      	str	r3, [r7, #52]	; 0x34
 800c532:	e002      	b.n	800c53a <tcp_write+0x1ce>
 800c534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	637b      	str	r3, [r7, #52]	; 0x34
 800c53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1f8      	bne.n	800c534 <tcp_write+0x1c8>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c544:	7b1b      	ldrb	r3, [r3, #12]
 800c546:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d10a      	bne.n	800c564 <tcp_write+0x1f8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c554:	8952      	ldrh	r2, [r2, #10]
 800c556:	441a      	add	r2, r3
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d102      	bne.n	800c564 <tcp_write+0x1f8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
          extendlen = seglen;
 800c55e:	8bfb      	ldrh	r3, [r7, #30]
 800c560:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c562:	e01a      	b.n	800c59a <tcp_write+0x22e>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c564:	8bfb      	ldrh	r3, [r7, #30]
 800c566:	2000      	movs	r0, #0
 800c568:	4619      	mov	r1, r3
 800c56a:	2201      	movs	r2, #1
 800c56c:	f7fb fd1a 	bl	8007fa4 <pbuf_alloc>
 800c570:	6578      	str	r0, [r7, #84]	; 0x54
 800c572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c574:	2b00      	cmp	r3, #0
 800c576:	d100      	bne.n	800c57a <tcp_write+0x20e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
 800c578:	e167      	b.n	800c84a <tcp_write+0x4de>
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c57a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	441a      	add	r2, r3
 800c582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c584:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800c586:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c588:	f7fb ff6e 	bl	8008468 <pbuf_clen>
 800c58c:	4603      	mov	r3, r0
 800c58e:	461a      	mov	r2, r3
 800c590:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c594:	4413      	add	r3, r2
 800c596:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c59a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c59e:	8bfb      	ldrh	r3, [r7, #30]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c5a6:	e7ff      	b.n	800c5a8 <tcp_write+0x23c>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c5a8:	e09f      	b.n	800c6ea <tcp_write+0x37e>
    struct pbuf *p;
    u16_t left = len - pos;
 800c5aa:	88fa      	ldrh	r2, [r7, #6]
 800c5ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c5b0:	1ad3      	subs	r3, r2, r3
 800c5b2:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800c5b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c5bc:	1ad3      	subs	r3, r2, r3
 800c5be:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c5c0:	8b7a      	ldrh	r2, [r7, #26]
 800c5c2:	8bbb      	ldrh	r3, [r7, #28]
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	bf28      	it	cs
 800c5c8:	4613      	movcs	r3, r2
 800c5ca:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c5cc:	797b      	ldrb	r3, [r7, #5]
 800c5ce:	f003 0301 	and.w	r3, r3, #1
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d02d      	beq.n	800c632 <tcp_write+0x2c6>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c5d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	8b3b      	ldrh	r3, [r7, #24]
 800c5de:	4413      	add	r3, r2
 800c5e0:	b299      	uxth	r1, r3
 800c5e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	bf0c      	ite	eq
 800c5e8:	2301      	moveq	r3, #1
 800c5ea:	2300      	movne	r3, #0
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c5f2:	f107 0412 	add.w	r4, r7, #18
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	797b      	ldrb	r3, [r7, #5]
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	9002      	str	r0, [sp, #8]
 800c600:	2038      	movs	r0, #56	; 0x38
 800c602:	4623      	mov	r3, r4
 800c604:	f7ff fe1c 	bl	800c240 <tcp_pbuf_prealloc>
 800c608:	6338      	str	r0, [r7, #48]	; 0x30
 800c60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d100      	bne.n	800c612 <tcp_write+0x2a6>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
 800c610:	e11b      	b.n	800c84a <tcp_write+0x4de>
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c614:	685a      	ldr	r2, [r3, #4]
 800c616:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c61a:	18d1      	adds	r1, r2, r3
 800c61c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c620:	68ba      	ldr	r2, [r7, #8]
 800c622:	441a      	add	r2, r3
 800c624:	8b3b      	ldrh	r3, [r7, #24]
 800c626:	4608      	mov	r0, r1
 800c628:	4611      	mov	r1, r2
 800c62a:	461a      	mov	r2, r3
 800c62c:	f7f9 fb3e 	bl	8005cac <memcpy>
 800c630:	e025      	b.n	800c67e <tcp_write+0x312>
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c632:	8b3b      	ldrh	r3, [r7, #24]
 800c634:	2038      	movs	r0, #56	; 0x38
 800c636:	4619      	mov	r1, r3
 800c638:	2201      	movs	r2, #1
 800c63a:	f7fb fcb3 	bl	8007fa4 <pbuf_alloc>
 800c63e:	6178      	str	r0, [r7, #20]
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d100      	bne.n	800c648 <tcp_write+0x2dc>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
        goto memerr;
 800c646:	e100      	b.n	800c84a <tcp_write+0x4de>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c648:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	441a      	add	r2, r3
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c654:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c658:	b29b      	uxth	r3, r3
 800c65a:	2038      	movs	r0, #56	; 0x38
 800c65c:	4619      	mov	r1, r3
 800c65e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c662:	f7fb fc9f 	bl	8007fa4 <pbuf_alloc>
 800c666:	6338      	str	r0, [r7, #48]	; 0x30
 800c668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d103      	bne.n	800c676 <tcp_write+0x30a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c66e:	6978      	ldr	r0, [r7, #20]
 800c670:	f7fb feb4 	bl	80083dc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c674:	e0e9      	b.n	800c84a <tcp_write+0x4de>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c676:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c678:	6979      	ldr	r1, [r7, #20]
 800c67a:	f7fb ff1f 	bl	80084bc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c67e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c680:	f7fb fef2 	bl	8008468 <pbuf_clen>
 800c684:	4603      	mov	r3, r0
 800c686:	461a      	mov	r2, r3
 800c688:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c68c:	4413      	add	r3, r2
 800c68e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c692:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c696:	2b08      	cmp	r3, #8
 800c698:	d903      	bls.n	800c6a2 <tcp_write+0x336>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c69a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c69c:	f7fb fe9e 	bl	80083dc <pbuf_free>
      goto memerr;
 800c6a0:	e0d3      	b.n	800c84a <tcp_write+0x4de>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c6a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c6aa:	18d4      	adds	r4, r2, r3
 800c6ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	4623      	mov	r3, r4
 800c6ba:	f7ff fd49 	bl	800c150 <tcp_create_segment>
 800c6be:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c6c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d100      	bne.n	800c6c8 <tcp_write+0x35c>
      goto memerr;
 800c6c6:	e0c0      	b.n	800c84a <tcp_write+0x4de>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c6c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d102      	bne.n	800c6d4 <tcp_write+0x368>
      queue = seg;
 800c6ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6d0:	647b      	str	r3, [r7, #68]	; 0x44
 800c6d2:	e002      	b.n	800c6da <tcp_write+0x36e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
      prev_seg->next = seg;
 800c6d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c6d8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c6da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6dc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c6de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c6e2:	8b3b      	ldrh	r3, [r7, #24]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c6ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c6ee:	88fb      	ldrh	r3, [r7, #6]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	f4ff af5a 	bcc.w	800c5aa <tcp_write+0x23e>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c6f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d02d      	beq.n	800c758 <tcp_write+0x3ec>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c6fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c702:	e01f      	b.n	800c744 <tcp_write+0x3d8>
      p->tot_len += oversize_used;
 800c704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c706:	891a      	ldrh	r2, [r3, #8]
 800c708:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c70a:	4413      	add	r3, r2
 800c70c:	b29a      	uxth	r2, r3
 800c70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c710:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d111      	bne.n	800c73e <tcp_write+0x3d2>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c720:	8952      	ldrh	r2, [r2, #10]
 800c722:	441a      	add	r2, r3
 800c724:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c726:	4610      	mov	r0, r2
 800c728:	68b9      	ldr	r1, [r7, #8]
 800c72a:	461a      	mov	r2, r3
 800c72c:	f7f9 fabe 	bl	8005cac <memcpy>
        p->len += oversize_used;
 800c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c732:	895a      	ldrh	r2, [r3, #10]
 800c734:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c736:	4413      	add	r3, r2
 800c738:	b29a      	uxth	r2, r3
 800c73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73c:	815a      	strh	r2, [r3, #10]
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1dc      	bne.n	800c704 <tcp_write+0x398>
      if (p->next == NULL) {
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
        p->len += oversize_used;
      }
    }
    last_unsent->len += oversize_used;
 800c74a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c74c:	891a      	ldrh	r2, [r3, #8]
 800c74e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c750:	4413      	add	r3, r2
 800c752:	b29a      	uxth	r2, r3
 800c754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c756:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c758:	8a7a      	ldrh	r2, [r7, #18]
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00e      	beq.n	800c784 <tcp_write+0x418>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	4618      	mov	r0, r3
 800c76c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c76e:	f7fb fea5 	bl	80084bc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c774:	891a      	ldrh	r2, [r3, #8]
 800c776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c778:	891b      	ldrh	r3, [r3, #8]
 800c77a:	4413      	add	r3, r2
 800c77c:	b29a      	uxth	r2, r3
 800c77e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c780:	811a      	strh	r2, [r3, #8]
 800c782:	e029      	b.n	800c7d8 <tcp_write+0x46c>
  } else if (extendlen > 0) {
 800c784:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c786:	2b00      	cmp	r3, #0
 800c788:	d026      	beq.n	800c7d8 <tcp_write+0x46c>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c78a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c790:	e009      	b.n	800c7a6 <tcp_write+0x43a>
      p->tot_len += extendlen;
 800c792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c794:	891a      	ldrh	r2, [r3, #8]
 800c796:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c798:	4413      	add	r3, r2
 800c79a:	b29a      	uxth	r2, r3
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	811a      	strh	r2, [r3, #8]
    last_unsent->len += concat_p->tot_len;
  } else if (extendlen > 0) {
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1f1      	bne.n	800c792 <tcp_write+0x426>
      p->tot_len += extendlen;
    }
    p->tot_len += extendlen;
 800c7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b0:	891a      	ldrh	r2, [r3, #8]
 800c7b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c7b4:	4413      	add	r3, r2
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ba:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7be:	895a      	ldrh	r2, [r3, #10]
 800c7c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c7c2:	4413      	add	r3, r2
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c8:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c7ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7cc:	891a      	ldrh	r2, [r3, #8]
 800c7ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c7d0:	4413      	add	r3, r2
 800c7d2:	b29a      	uxth	r2, r3
 800c7d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7d6:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800c7d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d103      	bne.n	800c7e6 <tcp_write+0x47a>
    pcb->unsent = queue;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c7e2:	66da      	str	r2, [r3, #108]	; 0x6c
 800c7e4:	e002      	b.n	800c7ec <tcp_write+0x480>
  } else {
    last_unsent->next = queue;
 800c7e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c7ea:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c7f0:	88fb      	ldrh	r3, [r7, #6]
 800c7f2:	441a      	add	r2, r3
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c7fe:	88fb      	ldrh	r3, [r7, #6]
 800c800:	1ad3      	subs	r3, r2, r3
 800c802:	b29a      	uxth	r2, r3
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c810:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    LWIP_ASSERT("tcp_write: valid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c816:	2b00      	cmp	r3, #0
 800c818:	d015      	beq.n	800c846 <tcp_write+0x4da>
 800c81a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d011      	beq.n	800c846 <tcp_write+0x4da>
 800c822:	797b      	ldrb	r3, [r7, #5]
 800c824:	f003 0302 	and.w	r3, r3, #2
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d10c      	bne.n	800c846 <tcp_write+0x4da>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c82c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c82e:	68dc      	ldr	r4, [r3, #12]
 800c830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c832:	68db      	ldr	r3, [r3, #12]
 800c834:	899b      	ldrh	r3, [r3, #12]
 800c836:	b29d      	uxth	r5, r3
 800c838:	2008      	movs	r0, #8
 800c83a:	f7fa fd45 	bl	80072c8 <lwip_htons>
 800c83e:	4603      	mov	r3, r0
 800c840:	432b      	orrs	r3, r5
 800c842:	b29b      	uxth	r3, r3
 800c844:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 800c846:	2300      	movs	r3, #0
 800c848:	e013      	b.n	800c872 <tcp_write+0x506>
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	8b5b      	ldrh	r3, [r3, #26]
 800c84e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c852:	b29a      	uxth	r2, r3
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d002      	beq.n	800c864 <tcp_write+0x4f8>
    pbuf_free(concat_p);
 800c85e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c860:	f7fb fdbc 	bl	80083dc <pbuf_free>
  }
  if (queue != NULL) {
 800c864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c866:	2b00      	cmp	r3, #0
 800c868:	d002      	beq.n	800c870 <tcp_write+0x504>
    tcp_segs_free(queue);
 800c86a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c86c:	f7fd f82c 	bl	80098c8 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c870:	23ff      	movs	r3, #255	; 0xff
 800c872:	b25b      	sxtb	r3, r3
}
 800c874:	4618      	mov	r0, r3
 800c876:	3758      	adds	r7, #88	; 0x58
 800c878:	46bd      	mov	sp, r7
 800c87a:	bdb0      	pop	{r4, r5, r7, pc}

0800c87c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c87c:	b5b0      	push	{r4, r5, r7, lr}
 800c87e:	b08a      	sub	sp, #40	; 0x28
 800c880:	af02      	add	r7, sp, #8
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	460b      	mov	r3, r1
 800c886:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c888:	2300      	movs	r3, #0
 800c88a:	61bb      	str	r3, [r7, #24]
 800c88c:	2300      	movs	r3, #0
 800c88e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c890:	2300      	movs	r3, #0
 800c892:	613b      	str	r3, [r7, #16]
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);

  useg = pcb->unsent;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c898:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d101      	bne.n	800c8a4 <tcp_split_unsent_seg+0x28>
    return ERR_MEM;
 800c8a0:	23ff      	movs	r3, #255	; 0xff
 800c8a2:	e0eb      	b.n	800ca7c <tcp_split_unsent_seg+0x200>
  }

  if (split == 0) {
 800c8a4:	887b      	ldrh	r3, [r7, #2]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d101      	bne.n	800c8ae <tcp_split_unsent_seg+0x32>
    LWIP_ASSERT("Can't split segment into length 0", 0);
    return ERR_VAL;
 800c8aa:	23fa      	movs	r3, #250	; 0xfa
 800c8ac:	e0e6      	b.n	800ca7c <tcp_split_unsent_seg+0x200>
  }

  if (useg->len <= split) {
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	891b      	ldrh	r3, [r3, #8]
 800c8b2:	887a      	ldrh	r2, [r7, #2]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d301      	bcc.n	800c8bc <tcp_split_unsent_seg+0x40>
    return ERR_OK;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	e0df      	b.n	800ca7c <tcp_split_unsent_seg+0x200>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	7a9b      	ldrb	r3, [r3, #10]
 800c8c0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c8c2:	7bfb      	ldrb	r3, [r7, #15]
 800c8c4:	f003 0301 	and.w	r3, r3, #1
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d001      	beq.n	800c8d0 <tcp_split_unsent_seg+0x54>
 800c8cc:	2304      	movs	r3, #4
 800c8ce:	e000      	b.n	800c8d2 <tcp_split_unsent_seg+0x56>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	891a      	ldrh	r2, [r3, #8]
 800c8d8:	887b      	ldrh	r3, [r7, #2]
 800c8da:	1ad3      	subs	r3, r2, r3
 800c8dc:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c8de:	7bbb      	ldrb	r3, [r7, #14]
 800c8e0:	b29a      	uxth	r2, r3
 800c8e2:	89bb      	ldrh	r3, [r7, #12]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	2038      	movs	r0, #56	; 0x38
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c8f0:	f7fb fb58 	bl	8007fa4 <pbuf_alloc>
 800c8f4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d100      	bne.n	800c8fe <tcp_split_unsent_seg+0x82>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
 800c8fc:	e0b7      	b.n	800ca6e <tcp_split_unsent_seg+0x1f2>
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	891a      	ldrh	r2, [r3, #8]
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	891b      	ldrh	r3, [r3, #8]
 800c908:	1ad3      	subs	r3, r2, r3
 800c90a:	b29a      	uxth	r2, r3
 800c90c:	887b      	ldrh	r3, [r7, #2]
 800c90e:	4413      	add	r3, r2
 800c910:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	6858      	ldr	r0, [r3, #4]
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	685a      	ldr	r2, [r3, #4]
 800c91a:	7bbb      	ldrb	r3, [r7, #14]
 800c91c:	18d1      	adds	r1, r2, r3
 800c91e:	89ba      	ldrh	r2, [r7, #12]
 800c920:	897b      	ldrh	r3, [r7, #10]
 800c922:	f7fb fe83 	bl	800862c <pbuf_copy_partial>
 800c926:	4603      	mov	r3, r0
 800c928:	461a      	mov	r2, r3
 800c92a:	89bb      	ldrh	r3, [r7, #12]
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d000      	beq.n	800c932 <tcp_split_unsent_seg+0xb6>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not copy pbuf remainder %u\n", remainder));
    goto memerr;
 800c930:	e09d      	b.n	800ca6e <tcp_split_unsent_seg+0x1f2>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	68db      	ldr	r3, [r3, #12]
 800c936:	899b      	ldrh	r3, [r3, #12]
 800c938:	b29b      	uxth	r3, r3
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7fa fcc4 	bl	80072c8 <lwip_htons>
 800c940:	4603      	mov	r3, r0
 800c942:	b2db      	uxtb	r3, r3
 800c944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c948:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c94a:	2300      	movs	r3, #0
 800c94c:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 800c94e:	7ffb      	ldrb	r3, [r7, #31]
 800c950:	f003 0308 	and.w	r3, r3, #8
 800c954:	2b00      	cmp	r3, #0
 800c956:	d007      	beq.n	800c968 <tcp_split_unsent_seg+0xec>
    split_flags &= ~TCP_PSH;
 800c958:	7ffb      	ldrb	r3, [r7, #31]
 800c95a:	f023 0308 	bic.w	r3, r3, #8
 800c95e:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800c960:	7fbb      	ldrb	r3, [r7, #30]
 800c962:	f043 0308 	orr.w	r3, r3, #8
 800c966:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 800c968:	7ffb      	ldrb	r3, [r7, #31]
 800c96a:	f003 0301 	and.w	r3, r3, #1
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d007      	beq.n	800c982 <tcp_split_unsent_seg+0x106>
    split_flags &= ~TCP_FIN;
 800c972:	7ffb      	ldrb	r3, [r7, #31]
 800c974:	f023 0301 	bic.w	r3, r3, #1
 800c978:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 800c97a:	7fbb      	ldrb	r3, [r7, #30]
 800c97c:	f043 0301 	orr.w	r3, r3, #1
 800c980:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	4618      	mov	r0, r3
 800c98a:	f7fa fcb3 	bl	80072f4 <lwip_htonl>
 800c98e:	4602      	mov	r2, r0
 800c990:	887b      	ldrh	r3, [r7, #2]
 800c992:	18d4      	adds	r4, r2, r3
 800c994:	7fba      	ldrb	r2, [r7, #30]
 800c996:	7bfb      	ldrb	r3, [r7, #15]
 800c998:	9300      	str	r3, [sp, #0]
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	6939      	ldr	r1, [r7, #16]
 800c99e:	4623      	mov	r3, r4
 800c9a0:	f7ff fbd6 	bl	800c150 <tcp_create_segment>
 800c9a4:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d100      	bne.n	800c9ae <tcp_split_unsent_seg+0x132>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 800c9ac:	e05f      	b.n	800ca6e <tcp_split_unsent_seg+0x1f2>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7fb fd58 	bl	8008468 <pbuf_clen>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c9c2:	1a9b      	subs	r3, r3, r2
 800c9c4:	b29a      	uxth	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	6859      	ldr	r1, [r3, #4]
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	891a      	ldrh	r2, [r3, #8]
 800c9d6:	89bb      	ldrh	r3, [r7, #12]
 800c9d8:	1ad3      	subs	r3, r2, r3
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	4608      	mov	r0, r1
 800c9de:	4619      	mov	r1, r3
 800c9e0:	f7fb fbb6 	bl	8008150 <pbuf_realloc>
  useg->len -= remainder;
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	891a      	ldrh	r2, [r3, #8]
 800c9e8:	89bb      	ldrh	r3, [r7, #12]
 800c9ea:	1ad3      	subs	r3, r2, r3
 800c9ec:	b29a      	uxth	r2, r3
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	68dc      	ldr	r4, [r3, #12]
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	899b      	ldrh	r3, [r3, #12]
 800c9fc:	b29d      	uxth	r5, r3
 800c9fe:	7ffb      	ldrb	r3, [r7, #31]
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fa fc60 	bl	80072c8 <lwip_htons>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	432b      	orrs	r3, r5
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	81a3      	strh	r3, [r4, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7fb fd27 	bl	8008468 <pbuf_clen>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ca24:	4413      	add	r3, r2
 800ca26:	b29a      	uxth	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7fb fd18 	bl	8008468 <pbuf_clen>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ca42:	4413      	add	r3, r2
 800ca44:	b29a      	uxth	r2, r3
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	69ba      	ldr	r2, [r7, #24]
 800ca58:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d103      	bne.n	800ca6a <tcp_split_unsent_seg+0x1ee>
    pcb->unsent_oversize = 0;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	e006      	b.n	800ca7c <tcp_split_unsent_seg+0x200>
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
  if (p != NULL) {
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d002      	beq.n	800ca7a <tcp_split_unsent_seg+0x1fe>
    pbuf_free(p);
 800ca74:	6938      	ldr	r0, [r7, #16]
 800ca76:	f7fb fcb1 	bl	80083dc <pbuf_free>
  }

  return ERR_MEM;
 800ca7a:	23ff      	movs	r3, #255	; 0xff
 800ca7c:	b25b      	sxtb	r3, r3
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3720      	adds	r7, #32
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bdb0      	pop	{r4, r5, r7, pc}
 800ca86:	bf00      	nop

0800ca88 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ca88:	b5b0      	push	{r4, r5, r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d02d      	beq.n	800caf4 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca9c:	60fb      	str	r3, [r7, #12]
 800ca9e:	e002      	b.n	800caa6 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d1f8      	bne.n	800caa0 <tcp_send_fin+0x18>
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	899b      	ldrh	r3, [r3, #12]
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fa fc06 	bl	80072c8 <lwip_htons>
 800cabc:	4603      	mov	r3, r0
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	f003 0307 	and.w	r3, r3, #7
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d115      	bne.n	800caf4 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	68dc      	ldr	r4, [r3, #12]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	899b      	ldrh	r3, [r3, #12]
 800cad2:	b29d      	uxth	r5, r3
 800cad4:	2001      	movs	r0, #1
 800cad6:	f7fa fbf7 	bl	80072c8 <lwip_htons>
 800cada:	4603      	mov	r3, r0
 800cadc:	432b      	orrs	r3, r5
 800cade:	b29b      	uxth	r3, r3
 800cae0:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	8b5b      	ldrh	r3, [r3, #26]
 800cae6:	f043 0320 	orr.w	r3, r3, #32
 800caea:	b29a      	uxth	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800caf0:	2300      	movs	r3, #0
 800caf2:	e004      	b.n	800cafe <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	2101      	movs	r1, #1
 800caf8:	f000 f806 	bl	800cb08 <tcp_enqueue_flags>
 800cafc:	4603      	mov	r3, r0
 800cafe:	b25b      	sxtb	r3, r3
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3710      	adds	r7, #16
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bdb0      	pop	{r4, r5, r7, pc}

0800cb08 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cb08:	b590      	push	{r4, r7, lr}
 800cb0a:	b08b      	sub	sp, #44	; 0x2c
 800cb0c:	af02      	add	r7, sp, #8
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	460b      	mov	r3, r1
 800cb12:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	75fb      	strb	r3, [r7, #23]

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cb1c:	78fb      	ldrb	r3, [r7, #3]
 800cb1e:	f003 0302 	and.w	r3, r3, #2
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d001      	beq.n	800cb2a <tcp_enqueue_flags+0x22>
    optflags = TF_SEG_OPTS_MSS;
 800cb26:	2301      	movs	r3, #1
 800cb28:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cb2a:	7ffb      	ldrb	r3, [r7, #31]
 800cb2c:	f003 0301 	and.w	r3, r3, #1
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d001      	beq.n	800cb38 <tcp_enqueue_flags+0x30>
 800cb34:	2304      	movs	r3, #4
 800cb36:	e000      	b.n	800cb3a <tcp_enqueue_flags+0x32>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cb3c:	7dfb      	ldrb	r3, [r7, #23]
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	2038      	movs	r0, #56	; 0x38
 800cb42:	4619      	mov	r1, r3
 800cb44:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cb48:	f7fb fa2c 	bl	8007fa4 <pbuf_alloc>
 800cb4c:	6138      	str	r0, [r7, #16]
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d108      	bne.n	800cb66 <tcp_enqueue_flags+0x5e>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	8b5b      	ldrh	r3, [r3, #26]
 800cb58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb5c:	b29a      	uxth	r2, r3
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cb62:	23ff      	movs	r3, #255	; 0xff
 800cb64:	e05b      	b.n	800cc1e <tcp_enqueue_flags+0x116>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800cb6a:	78fa      	ldrb	r2, [r7, #3]
 800cb6c:	7ffb      	ldrb	r3, [r7, #31]
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	6939      	ldr	r1, [r7, #16]
 800cb74:	4623      	mov	r3, r4
 800cb76:	f7ff faeb 	bl	800c150 <tcp_create_segment>
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d108      	bne.n	800cb94 <tcp_enqueue_flags+0x8c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	8b5b      	ldrh	r3, [r3, #26]
 800cb86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cb90:	23ff      	movs	r3, #255	; 0xff
 800cb92:	e044      	b.n	800cc1e <tcp_enqueue_flags+0x116>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d103      	bne.n	800cba4 <tcp_enqueue_flags+0x9c>
    pcb->unsent = seg;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	66da      	str	r2, [r3, #108]	; 0x6c
 800cba2:	e00d      	b.n	800cbc0 <tcp_enqueue_flags+0xb8>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cba8:	61bb      	str	r3, [r7, #24]
 800cbaa:	e002      	b.n	800cbb2 <tcp_enqueue_flags+0xaa>
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	61bb      	str	r3, [r7, #24]
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d1f8      	bne.n	800cbac <tcp_enqueue_flags+0xa4>
    useg->next = seg;
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	68fa      	ldr	r2, [r7, #12]
 800cbbe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cbc8:	78fb      	ldrb	r3, [r7, #3]
 800cbca:	f003 0302 	and.w	r3, r3, #2
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d104      	bne.n	800cbdc <tcp_enqueue_flags+0xd4>
 800cbd2:	78fb      	ldrb	r3, [r7, #3]
 800cbd4:	f003 0301 	and.w	r3, r3, #1
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d004      	beq.n	800cbe6 <tcp_enqueue_flags+0xde>
    pcb->snd_lbb++;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbe0:	1c5a      	adds	r2, r3, #1
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800cbe6:	78fb      	ldrb	r3, [r7, #3]
 800cbe8:	f003 0301 	and.w	r3, r3, #1
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d006      	beq.n	800cbfe <tcp_enqueue_flags+0xf6>
    tcp_set_flags(pcb, TF_FIN);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	8b5b      	ldrh	r3, [r3, #26]
 800cbf4:	f043 0320 	orr.w	r3, r3, #32
 800cbf8:	b29a      	uxth	r2, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fb fc30 	bl	8008468 <pbuf_clen>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cc12:	4413      	add	r3, r2
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	b25b      	sxtb	r3, r3
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3724      	adds	r7, #36	; 0x24
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd90      	pop	{r4, r7, pc}

0800cc28 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cc28:	b5b0      	push	{r4, r5, r7, lr}
 800cc2a:	b08a      	sub	sp, #40	; 0x28
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cc30:	4ba0      	ldr	r3, [pc, #640]	; (800ceb4 <tcp_output+0x28c>)
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d101      	bne.n	800cc3e <tcp_output+0x16>
    return ERR_OK;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	e1a3      	b.n	800cf86 <tcp_output+0x35e>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	bf28      	it	cs
 800cc4e:	4613      	movcs	r3, r2
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc58:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d10b      	bne.n	800cc78 <tcp_output+0x50>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	8b5b      	ldrh	r3, [r3, #26]
 800cc64:	f003 0302 	and.w	r3, r3, #2
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d004      	beq.n	800cc76 <tcp_output+0x4e>
      return tcp_send_empty_ack(pcb);
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 fc87 	bl	800d580 <tcp_send_empty_ack>
 800cc72:	4603      	mov	r3, r0
 800cc74:	e187      	b.n	800cf86 <tcp_output+0x35e>
    }
    /* nothing to send: shortcut out of here */
    goto output_done;
 800cc76:	e17e      	b.n	800cf76 <tcp_output+0x34e>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	3304      	adds	r3, #4
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	4611      	mov	r1, r2
 800cc82:	461a      	mov	r2, r3
 800cc84:	f7ff fa48 	bl	800c118 <tcp_route>
 800cc88:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d101      	bne.n	800cc94 <tcp_output+0x6c>
    return ERR_RTE;
 800cc90:	23fc      	movs	r3, #252	; 0xfc
 800cc92:	e178      	b.n	800cf86 <tcp_output+0x35e>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d003      	beq.n	800cca2 <tcp_output+0x7a>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d110      	bne.n	800ccc4 <tcp_output+0x9c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d002      	beq.n	800ccae <tcp_output+0x86>
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	3304      	adds	r3, #4
 800ccac:	e000      	b.n	800ccb0 <tcp_output+0x88>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d101      	bne.n	800ccbc <tcp_output+0x94>
      return ERR_RTE;
 800ccb8:	23fc      	movs	r3, #252	; 0xfc
 800ccba:	e164      	b.n	800cf86 <tcp_output+0x35e>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ccc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7fa fb12 	bl	80072f4 <lwip_htonl>
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccd6:	1ad3      	subs	r3, r2, r3
 800ccd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccda:	8912      	ldrh	r2, [r2, #8]
 800ccdc:	441a      	add	r2, r3
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d927      	bls.n	800cd34 <tcp_output+0x10c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ccea:	461a      	mov	r2, r3
 800ccec:	69bb      	ldr	r3, [r7, #24]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d114      	bne.n	800cd1c <tcp_output+0xf4>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d110      	bne.n	800cd1c <tcp_output+0xf4>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d10b      	bne.n	800cd1c <tcp_output+0xf4>
      pcb->persist_cnt = 0;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	8b5b      	ldrh	r3, [r3, #26]
 800cd20:	f003 0302 	and.w	r3, r3, #2
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d004      	beq.n	800cd32 <tcp_output+0x10a>
      return tcp_send_empty_ack(pcb);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f000 fc29 	bl	800d580 <tcp_send_empty_ack>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	e129      	b.n	800cf86 <tcp_output+0x35e>
    }
    goto output_done;
 800cd32:	e120      	b.n	800cf76 <tcp_output+0x34e>
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd40:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800cd42:	6a3b      	ldr	r3, [r7, #32]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d007      	beq.n	800cd58 <tcp_output+0x130>
    for (; useg->next != NULL; useg = useg->next);
 800cd48:	e002      	b.n	800cd50 <tcp_output+0x128>
 800cd4a:	6a3b      	ldr	r3, [r7, #32]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	623b      	str	r3, [r7, #32]
 800cd50:	6a3b      	ldr	r3, [r7, #32]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d1f8      	bne.n	800cd4a <tcp_output+0x122>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800cd58:	e0f1      	b.n	800cf3e <tcp_output+0x316>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d01f      	beq.n	800cda2 <tcp_output+0x17a>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	8b5b      	ldrh	r3, [r3, #26]
 800cd66:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d119      	bne.n	800cda2 <tcp_output+0x17a>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00b      	beq.n	800cd8e <tcp_output+0x166>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d110      	bne.n	800cda2 <tcp_output+0x17a>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd84:	891a      	ldrh	r2, [r3, #8]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d209      	bcs.n	800cda2 <tcp_output+0x17a>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d004      	beq.n	800cda2 <tcp_output+0x17a>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd9e:	2b07      	cmp	r3, #7
 800cda0:	d901      	bls.n	800cda6 <tcp_output+0x17e>
 800cda2:	2301      	movs	r3, #1
 800cda4:	e000      	b.n	800cda8 <tcp_output+0x180>
 800cda6:	2300      	movs	r3, #0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d106      	bne.n	800cdba <tcp_output+0x192>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	8b5b      	ldrh	r3, [r3, #26]
 800cdb0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d100      	bne.n	800cdba <tcp_output+0x192>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
      break;
 800cdb8:	e0d5      	b.n	800cf66 <tcp_output+0x33e>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	7d1b      	ldrb	r3, [r3, #20]
 800cdbe:	2b02      	cmp	r3, #2
 800cdc0:	d00c      	beq.n	800cddc <tcp_output+0x1b4>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc4:	68dc      	ldr	r4, [r3, #12]
 800cdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	899b      	ldrh	r3, [r3, #12]
 800cdcc:	b29d      	uxth	r5, r3
 800cdce:	2010      	movs	r0, #16
 800cdd0:	f7fa fa7a 	bl	80072c8 <lwip_htons>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	432b      	orrs	r3, r5
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800cddc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdde:	6879      	ldr	r1, [r7, #4]
 800cde0:	697a      	ldr	r2, [r7, #20]
 800cde2:	f000 f8e7 	bl	800cfb4 <tcp_output_segment>
 800cde6:	4603      	mov	r3, r0
 800cde8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800cdea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d008      	beq.n	800ce04 <tcp_output+0x1dc>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	8b5b      	ldrh	r3, [r3, #26]
 800cdf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	835a      	strh	r2, [r3, #26]
      return err;
 800ce00:	7bfb      	ldrb	r3, [r7, #15]
 800ce02:	e0c0      	b.n	800cf86 <tcp_output+0x35e>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	7d1b      	ldrb	r3, [r3, #20]
 800ce10:	2b02      	cmp	r3, #2
 800ce12:	d006      	beq.n	800ce22 <tcp_output+0x1fa>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	8b5b      	ldrh	r3, [r3, #26]
 800ce18:	f023 0303 	bic.w	r3, r3, #3
 800ce1c:	b29a      	uxth	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ce22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7fa fa63 	bl	80072f4 <lwip_htonl>
 800ce2e:	4604      	mov	r4, r0
 800ce30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce32:	891b      	ldrh	r3, [r3, #8]
 800ce34:	461d      	mov	r5, r3
 800ce36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce38:	68db      	ldr	r3, [r3, #12]
 800ce3a:	899b      	ldrh	r3, [r3, #12]
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7fa fa42 	bl	80072c8 <lwip_htons>
 800ce44:	4603      	mov	r3, r0
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	f003 0303 	and.w	r3, r3, #3
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d001      	beq.n	800ce54 <tcp_output+0x22c>
 800ce50:	2301      	movs	r3, #1
 800ce52:	e000      	b.n	800ce56 <tcp_output+0x22e>
 800ce54:	2300      	movs	r3, #0
 800ce56:	442b      	add	r3, r5
 800ce58:	4423      	add	r3, r4
 800ce5a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	1ad3      	subs	r3, r2, r3
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	da02      	bge.n	800ce6e <tcp_output+0x246>
      pcb->snd_nxt = snd_nxt;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	68ba      	ldr	r2, [r7, #8]
 800ce6c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce70:	891b      	ldrh	r3, [r3, #8]
 800ce72:	461c      	mov	r4, r3
 800ce74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	899b      	ldrh	r3, [r3, #12]
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7fa fa23 	bl	80072c8 <lwip_htons>
 800ce82:	4603      	mov	r3, r0
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	f003 0303 	and.w	r3, r3, #3
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d001      	beq.n	800ce92 <tcp_output+0x26a>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e000      	b.n	800ce94 <tcp_output+0x26c>
 800ce92:	2300      	movs	r3, #0
 800ce94:	4423      	add	r3, r4
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d04b      	beq.n	800cf32 <tcp_output+0x30a>
      seg->next = NULL;
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d107      	bne.n	800ceb8 <tcp_output+0x290>
        pcb->unacked = seg;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceac:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ceae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb0:	623b      	str	r3, [r7, #32]
 800ceb2:	e041      	b.n	800cf38 <tcp_output+0x310>
 800ceb4:	1fff0298 	.word	0x1fff0298
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ceb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceba:	68db      	ldr	r3, [r3, #12]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fa fa18 	bl	80072f4 <lwip_htonl>
 800cec4:	4604      	mov	r4, r0
 800cec6:	6a3b      	ldr	r3, [r7, #32]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	4618      	mov	r0, r3
 800cece:	f7fa fa11 	bl	80072f4 <lwip_htonl>
 800ced2:	4603      	mov	r3, r0
 800ced4:	1ae3      	subs	r3, r4, r3
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	da24      	bge.n	800cf24 <tcp_output+0x2fc>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	3370      	adds	r3, #112	; 0x70
 800cede:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cee0:	e002      	b.n	800cee8 <tcp_output+0x2c0>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	61fb      	str	r3, [r7, #28]
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d011      	beq.n	800cf14 <tcp_output+0x2ec>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	68db      	ldr	r3, [r3, #12]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7fa f9fb 	bl	80072f4 <lwip_htonl>
 800cefe:	4604      	mov	r4, r0
 800cf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf02:	68db      	ldr	r3, [r3, #12]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7fa f9f4 	bl	80072f4 <lwip_htonl>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	1ae3      	subs	r3, r4, r3
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	dbe6      	blt.n	800cee2 <tcp_output+0x2ba>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
          }
          seg->next = (*cur_seg);
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf20:	601a      	str	r2, [r3, #0]
 800cf22:	e009      	b.n	800cf38 <tcp_output+0x310>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800cf24:	6a3b      	ldr	r3, [r7, #32]
 800cf26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf28:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800cf2a:	6a3b      	ldr	r3, [r7, #32]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	623b      	str	r3, [r7, #32]
 800cf30:	e002      	b.n	800cf38 <tcp_output+0x310>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800cf32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf34:	f7fc fcdc 	bl	80098f0 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf3c:	627b      	str	r3, [r7, #36]	; 0x24
  useg = pcb->unacked;
  if (useg != NULL) {
    for (; useg->next != NULL; useg = useg->next);
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800cf3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d010      	beq.n	800cf66 <tcp_output+0x33e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800cf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7fa f9d2 	bl	80072f4 <lwip_htonl>
 800cf50:	4602      	mov	r2, r0
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf56:	1ad3      	subs	r3, r2, r3
 800cf58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf5a:	8912      	ldrh	r2, [r2, #8]
 800cf5c:	441a      	add	r2, r3
  useg = pcb->unacked;
  if (useg != NULL) {
    for (; useg->next != NULL; useg = useg->next);
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	f67f aefa 	bls.w	800cd5a <tcp_output+0x132>
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d103      	bne.n	800cf76 <tcp_output+0x34e>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	8b5b      	ldrh	r3, [r3, #26]
 800cf7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf7e:	b29a      	uxth	r2, r3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800cf84:	2300      	movs	r3, #0
 800cf86:	b25b      	sxtb	r3, r3
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3728      	adds	r7, #40	; 0x28
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bdb0      	pop	{r4, r5, r7, pc}

0800cf90 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	7b9b      	ldrb	r3, [r3, #14]
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	d001      	beq.n	800cfa6 <tcp_output_segment_busy+0x16>
    /* other reference found */
    return 1;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e000      	b.n	800cfa8 <tcp_output_segment_busy+0x18>
  }
  /* no other references found */
  return 0;
 800cfa6:	2300      	movs	r3, #0
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800cfb4:	b590      	push	{r4, r7, lr}
 800cfb6:	b08d      	sub	sp, #52	; 0x34
 800cfb8:	af04      	add	r7, sp, #16
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);

  if (tcp_output_segment_busy(seg)) {
 800cfc0:	68f8      	ldr	r0, [r7, #12]
 800cfc2:	f7ff ffe5 	bl	800cf90 <tcp_output_segment_busy>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d001      	beq.n	800cfd0 <tcp_output_segment+0x1c>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	e08a      	b.n	800d0e6 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	68dc      	ldr	r4, [r3, #12]
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7fa f98b 	bl	80072f4 <lwip_htonl>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	68dc      	ldr	r4, [r3, #12]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7fa f96c 	bl	80072c8 <lwip_htons>
 800cff0:	4603      	mov	r3, r0
 800cff2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff8:	68ba      	ldr	r2, [r7, #8]
 800cffa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cffc:	441a      	add	r2, r3
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	68db      	ldr	r3, [r3, #12]
 800d006:	3314      	adds	r3, #20
 800d008:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	7a9b      	ldrb	r3, [r3, #10]
 800d00e:	f003 0301 	and.w	r3, r3, #1
 800d012:	2b00      	cmp	r3, #0
 800d014:	d015      	beq.n	800d042 <tcp_output_segment+0x8e>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	3304      	adds	r3, #4
 800d01a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d01e:	6879      	ldr	r1, [r7, #4]
 800d020:	461a      	mov	r2, r3
 800d022:	f7fc ff15 	bl	8009e50 <tcp_eff_send_mss_netif>
 800d026:	4603      	mov	r3, r0
 800d028:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d02a:	8b7b      	ldrh	r3, [r7, #26]
 800d02c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d030:	4618      	mov	r0, r3
 800d032:	f7fa f95f 	bl	80072f4 <lwip_htonl>
 800d036:	4602      	mov	r2, r0
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	3304      	adds	r3, #4
 800d040:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d046:	b21b      	sxth	r3, r3
 800d048:	2b00      	cmp	r3, #0
 800d04a:	da02      	bge.n	800d052 <tcp_output_segment+0x9e>
    pcb->rtime = 0;
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	2200      	movs	r2, #0
 800d050:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d056:	2b00      	cmp	r3, #0
 800d058:	d10c      	bne.n	800d074 <tcp_output_segment+0xc0>
    pcb->rttest = tcp_ticks;
 800d05a:	4b25      	ldr	r3, [pc, #148]	; (800d0f0 <tcp_output_segment+0x13c>)
 800d05c:	681a      	ldr	r2, [r3, #0]
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	4618      	mov	r0, r3
 800d06a:	f7fa f943 	bl	80072f4 <lwip_htonl>
 800d06e:	4602      	mov	r2, r0
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	461a      	mov	r2, r3
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	1ad3      	subs	r3, r2, r3
 800d082:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	68fa      	ldr	r2, [r7, #12]
 800d08a:	6852      	ldr	r2, [r2, #4]
 800d08c:	8951      	ldrh	r1, [r2, #10]
 800d08e:	8b3a      	ldrh	r2, [r7, #24]
 800d090:	1a8a      	subs	r2, r1, r2
 800d092:	b292      	uxth	r2, r2
 800d094:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	68fa      	ldr	r2, [r7, #12]
 800d09c:	6852      	ldr	r2, [r2, #4]
 800d09e:	8911      	ldrh	r1, [r2, #8]
 800d0a0:	8b3a      	ldrh	r2, [r7, #24]
 800d0a2:	1a8a      	subs	r2, r1, r2
 800d0a4:	b292      	uxth	r2, r2
 800d0a6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	68d2      	ldr	r2, [r2, #12]
 800d0b0:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	741a      	strb	r2, [r3, #16]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	6858      	ldr	r0, [r3, #4]
 800d0c2:	68b9      	ldr	r1, [r7, #8]
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	1d1a      	adds	r2, r3, #4
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	7adc      	ldrb	r4, [r3, #11]
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	7a9b      	ldrb	r3, [r3, #10]
 800d0d0:	9300      	str	r3, [sp, #0]
 800d0d2:	2306      	movs	r3, #6
 800d0d4:	9301      	str	r3, [sp, #4]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	9302      	str	r3, [sp, #8]
 800d0da:	4623      	mov	r3, r4
 800d0dc:	f7fa f80a 	bl	80070f4 <ip4_output_if>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d0e4:	7dfb      	ldrb	r3, [r7, #23]
 800d0e6:	b25b      	sxtb	r3, r3
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3724      	adds	r7, #36	; 0x24
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd90      	pop	{r4, r7, pc}
 800d0f0:	1fff0288 	.word	0x1fff0288

0800d0f4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d0f4:	b5b0      	push	{r4, r5, r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);

  if (pcb->unacked == NULL) {
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d100:	2b00      	cmp	r3, #0
 800d102:	d101      	bne.n	800d108 <tcp_rexmit_rto_prepare+0x14>
    return ERR_VAL;
 800d104:	23fa      	movs	r3, #250	; 0xfa
 800d106:	e04e      	b.n	800d1a6 <tcp_rexmit_rto_prepare+0xb2>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d10c:	60fb      	str	r3, [r7, #12]
 800d10e:	e00a      	b.n	800d126 <tcp_rexmit_rto_prepare+0x32>
    if (tcp_output_segment_busy(seg)) {
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f7ff ff3d 	bl	800cf90 <tcp_output_segment_busy>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d001      	beq.n	800d120 <tcp_rexmit_rto_prepare+0x2c>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d11c:	23fa      	movs	r3, #250	; 0xfa
 800d11e:	e042      	b.n	800d1a6 <tcp_rexmit_rto_prepare+0xb2>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	60fb      	str	r3, [r7, #12]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1f0      	bne.n	800d110 <tcp_rexmit_rto_prepare+0x1c>
    if (tcp_output_segment_busy(seg)) {
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f7ff ff2e 	bl	800cf90 <tcp_output_segment_busy>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d001      	beq.n	800d13e <tcp_rexmit_rto_prepare+0x4a>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d13a:	23fa      	movs	r3, #250	; 0xfa
 800d13c:	e033      	b.n	800d1a6 <tcp_rexmit_rto_prepare+0xb2>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	8b5b      	ldrh	r3, [r3, #26]
 800d158:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d15c:	b29a      	uxth	r2, r3
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	68db      	ldr	r3, [r3, #12]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fa f8c3 	bl	80072f4 <lwip_htonl>
 800d16e:	4604      	mov	r4, r0
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	891b      	ldrh	r3, [r3, #8]
 800d174:	461d      	mov	r5, r3
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	899b      	ldrh	r3, [r3, #12]
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fa f8a2 	bl	80072c8 <lwip_htons>
 800d184:	4603      	mov	r3, r0
 800d186:	b2db      	uxtb	r3, r3
 800d188:	f003 0303 	and.w	r3, r3, #3
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d001      	beq.n	800d194 <tcp_rexmit_rto_prepare+0xa0>
 800d190:	2301      	movs	r3, #1
 800d192:	e000      	b.n	800d196 <tcp_rexmit_rto_prepare+0xa2>
 800d194:	2300      	movs	r3, #0
 800d196:	442b      	add	r3, r5
 800d198:	18e2      	adds	r2, r4, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	b25b      	sxtb	r3, r3
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3710      	adds	r7, #16
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bdb0      	pop	{r4, r5, r7, pc}

0800d1b0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d1be:	2bff      	cmp	r3, #255	; 0xff
 800d1c0:	d007      	beq.n	800d1d2 <tcp_rexmit_rto_commit+0x22>
    ++pcb->nrtx;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	b2da      	uxtb	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f7ff fd28 	bl	800cc28 <tcp_output>
}
 800d1d8:	3708      	adds	r7, #8
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop

0800d1e0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f7ff ff83 	bl	800d0f4 <tcp_rexmit_rto_prepare>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d102      	bne.n	800d1fa <tcp_rexmit_rto+0x1a>
    tcp_rexmit_rto_commit(pcb);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f7ff ffdb 	bl	800d1b0 <tcp_rexmit_rto_commit>
  }
}
 800d1fa:	3708      	adds	r7, #8
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d200:	b590      	push	{r4, r7, lr}
 800d202:	b085      	sub	sp, #20
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);

  if (pcb->unacked == NULL) {
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d101      	bne.n	800d214 <tcp_rexmit+0x14>
    return ERR_VAL;
 800d210:	23fa      	movs	r3, #250	; 0xfa
 800d212:	e04b      	b.n	800d2ac <tcp_rexmit+0xac>
  }

  seg = pcb->unacked;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d218:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d21a:	68b8      	ldr	r0, [r7, #8]
 800d21c:	f7ff feb8 	bl	800cf90 <tcp_output_segment_busy>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d001      	beq.n	800d22a <tcp_rexmit+0x2a>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d226:	23fa      	movs	r3, #250	; 0xfa
 800d228:	e040      	b.n	800d2ac <tcp_rexmit+0xac>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	336c      	adds	r3, #108	; 0x6c
 800d236:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d238:	e002      	b.n	800d240 <tcp_rexmit+0x40>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	60fb      	str	r3, [r7, #12]
  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d011      	beq.n	800d26c <tcp_rexmit+0x6c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	4618      	mov	r0, r3
 800d252:	f7fa f84f 	bl	80072f4 <lwip_htonl>
 800d256:	4604      	mov	r4, r0
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	68db      	ldr	r3, [r3, #12]
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	4618      	mov	r0, r3
 800d260:	f7fa f848 	bl	80072f4 <lwip_htonl>
 800d264:	4603      	mov	r3, r0
 800d266:	1ae3      	subs	r3, r4, r3
  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 800d268:	2b00      	cmp	r3, #0
 800d26a:	dbe6      	blt.n	800d23a <tcp_rexmit+0x3a>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	68ba      	ldr	r2, [r7, #8]
 800d278:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d103      	bne.n	800d28a <tcp_rexmit+0x8a>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d290:	2bff      	cmp	r3, #255	; 0xff
 800d292:	d007      	beq.n	800d2a4 <tcp_rexmit+0xa4>
    ++pcb->nrtx;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d29a:	3301      	adds	r3, #1
 800d29c:	b2da      	uxtb	r2, r3
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	b25b      	sxtb	r3, r3
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3714      	adds	r7, #20
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd90      	pop	{r4, r7, pc}
 800d2b6:	bf00      	nop

0800d2b8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d044      	beq.n	800d352 <tcp_rexmit_fast+0x9a>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	8b5b      	ldrh	r3, [r3, #26]
 800d2cc:	f003 0304 	and.w	r3, r3, #4
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d13e      	bne.n	800d352 <tcp_rexmit_fast+0x9a>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f7ff ff93 	bl	800d200 <tcp_rexmit>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d138      	bne.n	800d352 <tcp_rexmit_fast+0x9a>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	bf28      	it	cs
 800d2f0:	4613      	movcs	r3, r2
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	0fda      	lsrs	r2, r3, #31
 800d2f6:	4413      	add	r3, r2
 800d2f8:	105b      	asrs	r3, r3, #1
 800d2fa:	b29a      	uxth	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d308:	461a      	mov	r2, r3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d30e:	005b      	lsls	r3, r3, #1
 800d310:	429a      	cmp	r2, r3
 800d312:	d206      	bcs.n	800d322 <tcp_rexmit_fast+0x6a>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d318:	005b      	lsls	r3, r3, #1
 800d31a:	b29a      	uxth	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d32c:	4619      	mov	r1, r3
 800d32e:	0049      	lsls	r1, r1, #1
 800d330:	440b      	add	r3, r1
 800d332:	b29b      	uxth	r3, r3
 800d334:	4413      	add	r3, r2
 800d336:	b29a      	uxth	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	8b5b      	ldrh	r3, [r3, #26]
 800d342:	f043 0304 	orr.w	r3, r3, #4
 800d346:	b29a      	uxth	r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2200      	movs	r2, #0
 800d350:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b086      	sub	sp, #24
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	607b      	str	r3, [r7, #4]
 800d362:	460b      	mov	r3, r1
 800d364:	817b      	strh	r3, [r7, #10]
 800d366:	4613      	mov	r3, r2
 800d368:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d36a:	897a      	ldrh	r2, [r7, #10]
 800d36c:	893b      	ldrh	r3, [r7, #8]
 800d36e:	4413      	add	r3, r2
 800d370:	b29b      	uxth	r3, r3
 800d372:	3314      	adds	r3, #20
 800d374:	b29b      	uxth	r3, r3
 800d376:	2024      	movs	r0, #36	; 0x24
 800d378:	4619      	mov	r1, r3
 800d37a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d37e:	f7fa fe11 	bl	8007fa4 <pbuf_alloc>
 800d382:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d040      	beq.n	800d40c <tcp_output_alloc_header_common+0xb4>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d390:	8c3b      	ldrh	r3, [r7, #32]
 800d392:	4618      	mov	r0, r3
 800d394:	f7f9 ff98 	bl	80072c8 <lwip_htons>
 800d398:	4603      	mov	r3, r0
 800d39a:	461a      	mov	r2, r3
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d3a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7f9 ff90 	bl	80072c8 <lwip_htons>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	687a      	ldr	r2, [r7, #4]
 800d3b4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d3b6:	68f8      	ldr	r0, [r7, #12]
 800d3b8:	f7f9 ff9c 	bl	80072f4 <lwip_htonl>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d3c2:	897b      	ldrh	r3, [r7, #10]
 800d3c4:	089b      	lsrs	r3, r3, #2
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	3305      	adds	r3, #5
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	031b      	lsls	r3, r3, #12
 800d3ce:	b29a      	uxth	r2, r3
 800d3d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7f9 ff74 	bl	80072c8 <lwip_htons>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d3e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7f9 ff6c 	bl	80072c8 <lwip_htons>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	741a      	strb	r2, [r3, #16]
 800d3fe:	2200      	movs	r2, #0
 800d400:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	2200      	movs	r2, #0
 800d406:	749a      	strb	r2, [r3, #18]
 800d408:	2200      	movs	r2, #0
 800d40a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d40c:	697b      	ldr	r3, [r7, #20]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3718      	adds	r7, #24
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop

0800d418 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d418:	b5b0      	push	{r4, r5, r7, lr}
 800d41a:	b08a      	sub	sp, #40	; 0x28
 800d41c:	af04      	add	r7, sp, #16
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	607b      	str	r3, [r7, #4]
 800d422:	460b      	mov	r3, r1
 800d424:	817b      	strh	r3, [r7, #10]
 800d426:	4613      	mov	r3, r2
 800d428:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	8ad9      	ldrh	r1, [r3, #22]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	8b1a      	ldrh	r2, [r3, #24]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d43a:	897d      	ldrh	r5, [r7, #10]
 800d43c:	893c      	ldrh	r4, [r7, #8]
 800d43e:	9100      	str	r1, [sp, #0]
 800d440:	9201      	str	r2, [sp, #4]
 800d442:	2210      	movs	r2, #16
 800d444:	9202      	str	r2, [sp, #8]
 800d446:	9303      	str	r3, [sp, #12]
 800d448:	4629      	mov	r1, r5
 800d44a:	4622      	mov	r2, r4
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f7ff ff83 	bl	800d358 <tcp_output_alloc_header_common>
 800d452:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d006      	beq.n	800d468 <tcp_output_alloc_header+0x50>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45e:	68fa      	ldr	r2, [r7, #12]
 800d460:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d462:	441a      	add	r2, r3
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d468:	697b      	ldr	r3, [r7, #20]
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3718      	adds	r7, #24
 800d46e:	46bd      	mov	sp, r7
 800d470:	bdb0      	pop	{r4, r5, r7, pc}
 800d472:	bf00      	nop

0800d474 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d474:	b480      	push	{r7}
 800d476:	b089      	sub	sp, #36	; 0x24
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	4611      	mov	r1, r2
 800d480:	461a      	mov	r2, r3
 800d482:	460b      	mov	r3, r1
 800d484:	71fb      	strb	r3, [r7, #7]
 800d486:	4613      	mov	r3, r2
 800d488:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d48a:	2300      	movs	r3, #0
 800d48c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	3314      	adds	r3, #20
 800d498:	617b      	str	r3, [r7, #20]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d49a:	3724      	adds	r7, #36	; 0x24
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d4a4:	b590      	push	{r4, r7, lr}
 800d4a6:	b08b      	sub	sp, #44	; 0x2c
 800d4a8:	af04      	add	r7, sp, #16
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
 800d4b0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);

  netif = tcp_route(pcb, src, dst);
 800d4b2:	68f8      	ldr	r0, [r7, #12]
 800d4b4:	6879      	ldr	r1, [r7, #4]
 800d4b6:	683a      	ldr	r2, [r7, #0]
 800d4b8:	f7fe fe2e 	bl	800c118 <tcp_route>
 800d4bc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d102      	bne.n	800d4ca <tcp_output_control_segment+0x26>
    err = ERR_RTE;
 800d4c4:	23fc      	movs	r3, #252	; 0xfc
 800d4c6:	75fb      	strb	r3, [r7, #23]
 800d4c8:	e01c      	b.n	800d504 <tcp_output_control_segment+0x60>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d006      	beq.n	800d4de <tcp_output_control_segment+0x3a>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	7adb      	ldrb	r3, [r3, #11]
 800d4d4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	7a9b      	ldrb	r3, [r3, #10]
 800d4da:	757b      	strb	r3, [r7, #21]
 800d4dc:	e003      	b.n	800d4e6 <tcp_output_control_segment+0x42>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d4de:	23ff      	movs	r3, #255	; 0xff
 800d4e0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d4e6:	7dbc      	ldrb	r4, [r7, #22]
 800d4e8:	7d7b      	ldrb	r3, [r7, #21]
 800d4ea:	9300      	str	r3, [sp, #0]
 800d4ec:	2306      	movs	r3, #6
 800d4ee:	9301      	str	r3, [sp, #4]
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	9302      	str	r3, [sp, #8]
 800d4f4:	68b8      	ldr	r0, [r7, #8]
 800d4f6:	6879      	ldr	r1, [r7, #4]
 800d4f8:	683a      	ldr	r2, [r7, #0]
 800d4fa:	4623      	mov	r3, r4
 800d4fc:	f7f9 fdfa 	bl	80070f4 <ip4_output_if>
 800d500:	4603      	mov	r3, r0
 800d502:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d504:	68b8      	ldr	r0, [r7, #8]
 800d506:	f7fa ff69 	bl	80083dc <pbuf_free>
  return err;
 800d50a:	7dfb      	ldrb	r3, [r7, #23]
 800d50c:	b25b      	sxtb	r3, r3
}
 800d50e:	4618      	mov	r0, r3
 800d510:	371c      	adds	r7, #28
 800d512:	46bd      	mov	sp, r7
 800d514:	bd90      	pop	{r4, r7, pc}
 800d516:	bf00      	nop

0800d518 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d518:	b5b0      	push	{r4, r5, r7, lr}
 800d51a:	b08a      	sub	sp, #40	; 0x28
 800d51c:	af04      	add	r7, sp, #16
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	607a      	str	r2, [r7, #4]
 800d524:	603b      	str	r3, [r7, #0]
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d526:	2300      	movs	r3, #0
 800d528:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d52a:	f246 0308 	movw	r3, #24584	; 0x6008
 800d52e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d530:	7dfb      	ldrb	r3, [r7, #23]
 800d532:	b29c      	uxth	r4, r3
 800d534:	68b8      	ldr	r0, [r7, #8]
 800d536:	f7f9 fedd 	bl	80072f4 <lwip_htonl>
 800d53a:	4605      	mov	r5, r0
 800d53c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d53e:	9300      	str	r3, [sp, #0]
 800d540:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d542:	9301      	str	r3, [sp, #4]
 800d544:	2314      	movs	r3, #20
 800d546:	9302      	str	r3, [sp, #8]
 800d548:	8abb      	ldrh	r3, [r7, #20]
 800d54a:	9303      	str	r3, [sp, #12]
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	4621      	mov	r1, r4
 800d550:	2200      	movs	r2, #0
 800d552:	462b      	mov	r3, r5
 800d554:	f7ff ff00 	bl	800d358 <tcp_output_alloc_header_common>
 800d558:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d100      	bne.n	800d562 <tcp_rst+0x4a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
 800d560:	e00b      	b.n	800d57a <tcp_rst+0x62>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d562:	7dfb      	ldrb	r3, [r7, #23]
 800d564:	68f8      	ldr	r0, [r7, #12]
 800d566:	6939      	ldr	r1, [r7, #16]
 800d568:	2200      	movs	r2, #0
 800d56a:	f7ff ff83 	bl	800d474 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	6939      	ldr	r1, [r7, #16]
 800d572:	683a      	ldr	r2, [r7, #0]
 800d574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d576:	f7ff ff95 	bl	800d4a4 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d57a:	3718      	adds	r7, #24
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bdb0      	pop	{r4, r5, r7, pc}

0800d580 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d580:	b590      	push	{r4, r7, lr}
 800d582:	b087      	sub	sp, #28
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d588:	2300      	movs	r3, #0
 800d58a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d58c:	2300      	movs	r3, #0
 800d58e:	75bb      	strb	r3, [r7, #22]
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d590:	7dfb      	ldrb	r3, [r7, #23]
 800d592:	f003 0301 	and.w	r3, r3, #1
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <tcp_send_empty_ack+0x1e>
 800d59a:	2304      	movs	r3, #4
 800d59c:	e000      	b.n	800d5a0 <tcp_send_empty_ack+0x20>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d5a2:	7d7b      	ldrb	r3, [r7, #21]
 800d5a4:	b29c      	uxth	r4, r3
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7f9 fea2 	bl	80072f4 <lwip_htonl>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	4621      	mov	r1, r4
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f7ff ff2e 	bl	800d418 <tcp_output_alloc_header>
 800d5bc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d108      	bne.n	800d5d6 <tcp_send_empty_ack+0x56>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	8b5b      	ldrh	r3, [r3, #26]
 800d5c8:	f043 0303 	orr.w	r3, r3, #3
 800d5cc:	b29a      	uxth	r2, r3
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d5d2:	23fe      	movs	r3, #254	; 0xfe
 800d5d4:	e022      	b.n	800d61c <tcp_send_empty_ack+0x9c>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d5d6:	7dfa      	ldrb	r2, [r7, #23]
 800d5d8:	7dbb      	ldrb	r3, [r7, #22]
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	6939      	ldr	r1, [r7, #16]
 800d5de:	f7ff ff49 	bl	800d474 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	3304      	adds	r3, #4
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	6939      	ldr	r1, [r7, #16]
 800d5ec:	f7ff ff5a 	bl	800d4a4 <tcp_output_control_segment>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d5f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d007      	beq.n	800d60c <tcp_send_empty_ack+0x8c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	8b5b      	ldrh	r3, [r3, #26]
 800d600:	f043 0303 	orr.w	r3, r3, #3
 800d604:	b29a      	uxth	r2, r3
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	835a      	strh	r2, [r3, #26]
 800d60a:	e006      	b.n	800d61a <tcp_send_empty_ack+0x9a>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	8b5b      	ldrh	r3, [r3, #26]
 800d610:	f023 0303 	bic.w	r3, r3, #3
 800d614:	b29a      	uxth	r2, r3
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d61a:	7bfb      	ldrb	r3, [r7, #15]
 800d61c:	b25b      	sxtb	r3, r3
}
 800d61e:	4618      	mov	r0, r3
 800d620:	371c      	adds	r7, #28
 800d622:	46bd      	mov	sp, r7
 800d624:	bd90      	pop	{r4, r7, pc}
 800d626:	bf00      	nop

0800d628 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d628:	b590      	push	{r4, r7, lr}
 800d62a:	b087      	sub	sp, #28
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d630:	2300      	movs	r3, #0
 800d632:	75fb      	strb	r3, [r7, #23]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d634:	7dfb      	ldrb	r3, [r7, #23]
 800d636:	b29c      	uxth	r4, r3
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d63c:	3b01      	subs	r3, #1
 800d63e:	4618      	mov	r0, r3
 800d640:	f7f9 fe58 	bl	80072f4 <lwip_htonl>
 800d644:	4603      	mov	r3, r0
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	4621      	mov	r1, r4
 800d64a:	2200      	movs	r2, #0
 800d64c:	f7ff fee4 	bl	800d418 <tcp_output_alloc_header>
 800d650:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d101      	bne.n	800d65c <tcp_keepalive+0x34>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d658:	23ff      	movs	r3, #255	; 0xff
 800d65a:	e00f      	b.n	800d67c <tcp_keepalive+0x54>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d65c:	7dfb      	ldrb	r3, [r7, #23]
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	6939      	ldr	r1, [r7, #16]
 800d662:	2200      	movs	r2, #0
 800d664:	f7ff ff06 	bl	800d474 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	3304      	adds	r3, #4
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	6939      	ldr	r1, [r7, #16]
 800d672:	f7ff ff17 	bl	800d4a4 <tcp_output_control_segment>
 800d676:	4603      	mov	r3, r0
 800d678:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d67a:	7bfb      	ldrb	r3, [r7, #15]
 800d67c:	b25b      	sxtb	r3, r3
}
 800d67e:	4618      	mov	r0, r3
 800d680:	371c      	adds	r7, #28
 800d682:	46bd      	mov	sp, r7
 800d684:	bd90      	pop	{r4, r7, pc}
 800d686:	bf00      	nop

0800d688 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d688:	b590      	push	{r4, r7, lr}
 800d68a:	b08b      	sub	sp, #44	; 0x2c
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d690:	2300      	movs	r3, #0
 800d692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d69a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d69c:	6a3b      	ldr	r3, [r7, #32]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d101      	bne.n	800d6a6 <tcp_zero_window_probe+0x1e>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	e086      	b.n	800d7b4 <tcp_zero_window_probe+0x12c>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d6ac:	2bff      	cmp	r3, #255	; 0xff
 800d6ae:	d007      	beq.n	800d6c0 <tcp_zero_window_probe+0x38>
    ++pcb->persist_probe;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	b2da      	uxtb	r2, r3
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d6c0:	6a3b      	ldr	r3, [r7, #32]
 800d6c2:	68db      	ldr	r3, [r3, #12]
 800d6c4:	899b      	ldrh	r3, [r3, #12]
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7f9 fdfd 	bl	80072c8 <lwip_htons>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	f003 0301 	and.w	r3, r3, #1
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d005      	beq.n	800d6e6 <tcp_zero_window_probe+0x5e>
 800d6da:	6a3b      	ldr	r3, [r7, #32]
 800d6dc:	891b      	ldrh	r3, [r3, #8]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d101      	bne.n	800d6e6 <tcp_zero_window_probe+0x5e>
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e000      	b.n	800d6e8 <tcp_zero_window_probe+0x60>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d6ea:	7ffb      	ldrb	r3, [r7, #31]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	bf0c      	ite	eq
 800d6f0:	2301      	moveq	r3, #1
 800d6f2:	2300      	movne	r3, #0
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6fc:	b299      	uxth	r1, r3
 800d6fe:	6a3b      	ldr	r3, [r7, #32]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	8bba      	ldrh	r2, [r7, #28]
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f7ff fe86 	bl	800d418 <tcp_output_alloc_header>
 800d70c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d101      	bne.n	800d718 <tcp_zero_window_probe+0x90>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d714:	23ff      	movs	r3, #255	; 0xff
 800d716:	e04d      	b.n	800d7b4 <tcp_zero_window_probe+0x12c>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d71e:	7ffb      	ldrb	r3, [r7, #31]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d012      	beq.n	800d74a <tcp_zero_window_probe+0xc2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	899b      	ldrh	r3, [r3, #12]
 800d728:	b29b      	uxth	r3, r3
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d730:	b29c      	uxth	r4, r3
 800d732:	2011      	movs	r0, #17
 800d734:	f7f9 fdc8 	bl	80072c8 <lwip_htons>
 800d738:	4603      	mov	r3, r0
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	4622      	mov	r2, r4
 800d73e:	4313      	orrs	r3, r2
 800d740:	b29b      	uxth	r3, r3
 800d742:	b29a      	uxth	r2, r3
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	819a      	strh	r2, [r3, #12]
 800d748:	e011      	b.n	800d76e <tcp_zero_window_probe+0xe6>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	3314      	adds	r3, #20
 800d750:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d752:	6a3b      	ldr	r3, [r7, #32]
 800d754:	6859      	ldr	r1, [r3, #4]
 800d756:	6a3b      	ldr	r3, [r7, #32]
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	891a      	ldrh	r2, [r3, #8]
 800d75c:	6a3b      	ldr	r3, [r7, #32]
 800d75e:	891b      	ldrh	r3, [r3, #8]
 800d760:	1ad3      	subs	r3, r2, r3
 800d762:	b29b      	uxth	r3, r3
 800d764:	4608      	mov	r0, r1
 800d766:	6939      	ldr	r1, [r7, #16]
 800d768:	2201      	movs	r2, #1
 800d76a:	f7fa ff5f 	bl	800862c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d76e:	6a3b      	ldr	r3, [r7, #32]
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	4618      	mov	r0, r3
 800d776:	f7f9 fdbd 	bl	80072f4 <lwip_htonl>
 800d77a:	4603      	mov	r3, r0
 800d77c:	3301      	adds	r3, #1
 800d77e:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	1ad3      	subs	r3, r2, r3
 800d788:	2b00      	cmp	r3, #0
 800d78a:	da02      	bge.n	800d792 <tcp_zero_window_probe+0x10a>
    pcb->snd_nxt = snd_nxt;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	68fa      	ldr	r2, [r7, #12]
 800d790:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	69b9      	ldr	r1, [r7, #24]
 800d79a:	2200      	movs	r2, #0
 800d79c:	f7ff fe6a 	bl	800d474 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	3304      	adds	r3, #4
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	69b9      	ldr	r1, [r7, #24]
 800d7aa:	f7ff fe7b 	bl	800d4a4 <tcp_output_control_segment>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d7b2:	7afb      	ldrb	r3, [r7, #11]
 800d7b4:	b25b      	sxtb	r3, r3
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	372c      	adds	r7, #44	; 0x2c
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd90      	pop	{r4, r7, pc}
 800d7be:	bf00      	nop

0800d7c0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d7c8:	f7fb f8b2 	bl	8008930 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d7cc:	4b09      	ldr	r3, [pc, #36]	; (800d7f4 <tcpip_tcp_timer+0x34>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d103      	bne.n	800d7dc <tcpip_tcp_timer+0x1c>
 800d7d4:	4b08      	ldr	r3, [pc, #32]	; (800d7f8 <tcpip_tcp_timer+0x38>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d005      	beq.n	800d7e8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d7dc:	20fa      	movs	r0, #250	; 0xfa
 800d7de:	4907      	ldr	r1, [pc, #28]	; (800d7fc <tcpip_tcp_timer+0x3c>)
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f000 f8d3 	bl	800d98c <sys_timeout>
 800d7e6:	e002      	b.n	800d7ee <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d7e8:	4b05      	ldr	r3, [pc, #20]	; (800d800 <tcpip_tcp_timer+0x40>)
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	601a      	str	r2, [r3, #0]
  }
}
 800d7ee:	3708      	adds	r7, #8
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	1fff0284 	.word	0x1fff0284
 800d7f8:	1fff0294 	.word	0x1fff0294
 800d7fc:	0800d7c1 	.word	0x0800d7c1
 800d800:	1ffe929c 	.word	0x1ffe929c

0800d804 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d808:	4b0a      	ldr	r3, [pc, #40]	; (800d834 <tcp_timer_needed+0x30>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d10f      	bne.n	800d830 <tcp_timer_needed+0x2c>
 800d810:	4b09      	ldr	r3, [pc, #36]	; (800d838 <tcp_timer_needed+0x34>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d103      	bne.n	800d820 <tcp_timer_needed+0x1c>
 800d818:	4b08      	ldr	r3, [pc, #32]	; (800d83c <tcp_timer_needed+0x38>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d007      	beq.n	800d830 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d820:	4b04      	ldr	r3, [pc, #16]	; (800d834 <tcp_timer_needed+0x30>)
 800d822:	2201      	movs	r2, #1
 800d824:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d826:	20fa      	movs	r0, #250	; 0xfa
 800d828:	4905      	ldr	r1, [pc, #20]	; (800d840 <tcp_timer_needed+0x3c>)
 800d82a:	2200      	movs	r2, #0
 800d82c:	f000 f8ae 	bl	800d98c <sys_timeout>
  }
}
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	1ffe929c 	.word	0x1ffe929c
 800d838:	1fff0284 	.word	0x1fff0284
 800d83c:	1fff0294 	.word	0x1fff0294
 800d840:	0800d7c1 	.word	0x0800d7c1

0800d844 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b086      	sub	sp, #24
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d850:	2004      	movs	r0, #4
 800d852:	f7fa f883 	bl	800795c <memp_malloc>
 800d856:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d100      	bne.n	800d860 <sys_timeout_abs+0x1c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
 800d85e:	e041      	b.n	800d8e4 <sys_timeout_abs+0xa0>
  }

  timeout->next = NULL;
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	2200      	movs	r2, #0
 800d864:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	68ba      	ldr	r2, [r7, #8]
 800d86a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	68fa      	ldr	r2, [r7, #12]
 800d876:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d878:	4b1c      	ldr	r3, [pc, #112]	; (800d8ec <sys_timeout_abs+0xa8>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d103      	bne.n	800d888 <sys_timeout_abs+0x44>
    next_timeout = timeout;
 800d880:	4a1a      	ldr	r2, [pc, #104]	; (800d8ec <sys_timeout_abs+0xa8>)
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	6013      	str	r3, [r2, #0]
    return;
 800d886:	e02d      	b.n	800d8e4 <sys_timeout_abs+0xa0>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	685a      	ldr	r2, [r3, #4]
 800d88c:	4b17      	ldr	r3, [pc, #92]	; (800d8ec <sys_timeout_abs+0xa8>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	1ad3      	subs	r3, r2, r3
 800d894:	2b00      	cmp	r3, #0
 800d896:	da07      	bge.n	800d8a8 <sys_timeout_abs+0x64>
    timeout->next = next_timeout;
 800d898:	4b14      	ldr	r3, [pc, #80]	; (800d8ec <sys_timeout_abs+0xa8>)
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d8a0:	4a12      	ldr	r2, [pc, #72]	; (800d8ec <sys_timeout_abs+0xa8>)
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	6013      	str	r3, [r2, #0]
 800d8a6:	e01d      	b.n	800d8e4 <sys_timeout_abs+0xa0>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d8a8:	4b10      	ldr	r3, [pc, #64]	; (800d8ec <sys_timeout_abs+0xa8>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	617b      	str	r3, [r7, #20]
 800d8ae:	e016      	b.n	800d8de <sys_timeout_abs+0x9a>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d007      	beq.n	800d8c8 <sys_timeout_abs+0x84>
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	685a      	ldr	r2, [r3, #4]
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	1ad3      	subs	r3, r2, r3
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	da07      	bge.n	800d8d8 <sys_timeout_abs+0x94>
        timeout->next = t->next;
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	693a      	ldr	r2, [r7, #16]
 800d8d4:	601a      	str	r2, [r3, #0]
        break;
 800d8d6:	e005      	b.n	800d8e4 <sys_timeout_abs+0xa0>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	617b      	str	r3, [r7, #20]
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d1e5      	bne.n	800d8b0 <sys_timeout_abs+0x6c>
        t->next = timeout;
        break;
      }
    }
  }
}
 800d8e4:	3718      	adds	r7, #24
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	1ffe9294 	.word	0x1ffe9294

0800d8f0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b086      	sub	sp, #24
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	4798      	blx	r3

  now = sys_now();
 800d902:	f7f8 f9f3 	bl	8005cec <sys_now>
 800d906:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	4b0d      	ldr	r3, [pc, #52]	; (800d944 <lwip_cyclic_timer+0x54>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4413      	add	r3, r2
 800d912:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d914:	68fa      	ldr	r2, [r7, #12]
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	1ad3      	subs	r3, r2, r3
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	da09      	bge.n	800d932 <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	4413      	add	r3, r2
 800d926:	4618      	mov	r0, r3
 800d928:	4907      	ldr	r1, [pc, #28]	; (800d948 <lwip_cyclic_timer+0x58>)
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	f7ff ff8a 	bl	800d844 <sys_timeout_abs>
 800d930:	e004      	b.n	800d93c <lwip_cyclic_timer+0x4c>
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d932:	68f8      	ldr	r0, [r7, #12]
 800d934:	4904      	ldr	r1, [pc, #16]	; (800d948 <lwip_cyclic_timer+0x58>)
 800d936:	687a      	ldr	r2, [r7, #4]
 800d938:	f7ff ff84 	bl	800d844 <sys_timeout_abs>
#endif
  }
}
 800d93c:	3718      	adds	r7, #24
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
 800d942:	bf00      	nop
 800d944:	1ffe9298 	.word	0x1ffe9298
 800d948:	0800d8f1 	.word	0x0800d8f1

0800d94c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d952:	2301      	movs	r3, #1
 800d954:	607b      	str	r3, [r7, #4]
 800d956:	e00f      	b.n	800d978 <sys_timeouts_init+0x2c>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d958:	4a0a      	ldr	r2, [pc, #40]	; (800d984 <sys_timeouts_init+0x38>)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	00db      	lsls	r3, r3, #3
 800d964:	4a07      	ldr	r2, [pc, #28]	; (800d984 <sys_timeouts_init+0x38>)
 800d966:	4413      	add	r3, r2
 800d968:	4608      	mov	r0, r1
 800d96a:	4907      	ldr	r1, [pc, #28]	; (800d988 <sys_timeouts_init+0x3c>)
 800d96c:	461a      	mov	r2, r3
 800d96e:	f000 f80d 	bl	800d98c <sys_timeout>
/** Initialize this module */
void sys_timeouts_init(void)
{
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	3301      	adds	r3, #1
 800d976:	607b      	str	r3, [r7, #4]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d9ec      	bls.n	800d958 <sys_timeouts_init+0xc>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
  }
}
 800d97e:	3708      	adds	r7, #8
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	080143a0 	.word	0x080143a0
 800d988:	0800d8f1 	.word	0x0800d8f1

0800d98c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b086      	sub	sp, #24
 800d990:	af00      	add	r7, sp, #0
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	607a      	str	r2, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d998:	f7f8 f9a8 	bl	8005cec <sys_now>
 800d99c:	4602      	mov	r2, r0
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d9a4:	6978      	ldr	r0, [r7, #20]
 800d9a6:	68b9      	ldr	r1, [r7, #8]
 800d9a8:	687a      	ldr	r2, [r7, #4]
 800d9aa:	f7ff ff4b 	bl	800d844 <sys_timeout_abs>
#endif
}
 800d9ae:	3718      	adds	r7, #24
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d9ba:	f7f8 f997 	bl	8005cec <sys_now>
 800d9be:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d9c0:	4b18      	ldr	r3, [pc, #96]	; (800da24 <sys_check_timeouts+0x70>)
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d001      	beq.n	800d9ce <sys_check_timeouts+0x1a>
 800d9ca:	f7fa fa95 	bl	8007ef8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d9ce:	4b16      	ldr	r3, [pc, #88]	; (800da28 <sys_check_timeouts+0x74>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d100      	bne.n	800d9dc <sys_check_timeouts+0x28>
      return;
 800d9da:	e01f      	b.n	800da1c <sys_check_timeouts+0x68>
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	68fa      	ldr	r2, [r7, #12]
 800d9e2:	1ad3      	subs	r3, r2, r3
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	da00      	bge.n	800d9ea <sys_check_timeouts+0x36>
      return;
 800d9e8:	e018      	b.n	800da1c <sys_check_timeouts+0x68>
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	4a0e      	ldr	r2, [pc, #56]	; (800da28 <sys_check_timeouts+0x74>)
 800d9f0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	689b      	ldr	r3, [r3, #8]
 800d9f6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	4a0a      	ldr	r2, [pc, #40]	; (800da2c <sys_check_timeouts+0x78>)
 800da04:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800da06:	2004      	movs	r0, #4
 800da08:	68b9      	ldr	r1, [r7, #8]
 800da0a:	f7f9 ffd7 	bl	80079bc <memp_free>
    if (handler != NULL) {
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d002      	beq.n	800da1a <sys_check_timeouts+0x66>
      handler(arg);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6838      	ldr	r0, [r7, #0]
 800da18:	4798      	blx	r3
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
 800da1a:	e7d1      	b.n	800d9c0 <sys_check_timeouts+0xc>
}
 800da1c:	3710      	adds	r7, #16
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	1fff027c 	.word	0x1fff027c
 800da28:	1ffe9294 	.word	0x1ffe9294
 800da2c:	1ffe9298 	.word	0x1ffe9298

0800da30 <ETH_LWIP_Init>:
  }
  return status;
}
#else
ETH_LWIP_STATUS_t ETH_LWIP_Init(ETH_LWIP_t* handle)
{
 800da30:	b590      	push	{r4, r7, lr}
 800da32:	b08b      	sub	sp, #44	; 0x2c
 800da34:	af04      	add	r7, sp, #16
 800da36:	6078      	str	r0, [r7, #4]
  ETH_LWIP_STATUS_t status = ETH_LWIP_STATUS_SUCCESS;
 800da38:	2300      	movs	r3, #0
 800da3a:	75fb      	strb	r3, [r7, #23]

  ip_addr_t ipaddr;
  ip_addr_t netmask;
  ip_addr_t gw;

  if (handle->initialized == false)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	7a1b      	ldrb	r3, [r3, #8]
 800da40:	f083 0301 	eor.w	r3, r3, #1
 800da44:	b2db      	uxtb	r3, r3
 800da46:	2b00      	cmp	r3, #0
 800da48:	d029      	beq.n	800da9e <ETH_LWIP_Init+0x6e>
#if ((LWIP_DHCP == 1) || (LWIP_AUTOIP == 1))
    ipaddr.addr = 0;
    netmask.addr = 0;
    gw.addr = 0;
#else
    IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 800da4a:	4b17      	ldr	r3, [pc, #92]	; (800daa8 <ETH_LWIP_Init+0x78>)
 800da4c:	613b      	str	r3, [r7, #16]
    IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 800da4e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800da52:	60fb      	str	r3, [r7, #12]
    IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800da54:	4b15      	ldr	r3, [pc, #84]	; (800daac <ETH_LWIP_Init+0x7c>)
 800da56:	60bb      	str	r3, [r7, #8]
#endif
    /*Initialize SYSTIMER APP*/
    status = (ETH_LWIP_STATUS_t)SYSTIMER_Init(&ETH_SYSTIMER_NAME);
 800da58:	4815      	ldr	r0, [pc, #84]	; (800dab0 <ETH_LWIP_Init+0x80>)
 800da5a:	f7f7 fbef 	bl	800523c <SYSTIMER_Init>
 800da5e:	4603      	mov	r3, r0
 800da60:	75fb      	strb	r3, [r7, #23]

    lwip_init();
 800da62:	f7f9 fc61 	bl	8007328 <lwip_init>

    /* Adds network interface to the netif_list */
    (void)netif_add(&xnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800da66:	f107 0110 	add.w	r1, r7, #16
 800da6a:	f107 020c 	add.w	r2, r7, #12
 800da6e:	f107 0408 	add.w	r4, r7, #8
 800da72:	2300      	movs	r3, #0
 800da74:	9300      	str	r3, [sp, #0]
 800da76:	4b0f      	ldr	r3, [pc, #60]	; (800dab4 <ETH_LWIP_Init+0x84>)
 800da78:	9301      	str	r3, [sp, #4]
 800da7a:	4b0f      	ldr	r3, [pc, #60]	; (800dab8 <ETH_LWIP_Init+0x88>)
 800da7c:	9302      	str	r3, [sp, #8]
 800da7e:	480f      	ldr	r0, [pc, #60]	; (800dabc <ETH_LWIP_Init+0x8c>)
 800da80:	4623      	mov	r3, r4
 800da82:	f7f9 ffbd 	bl	8007a00 <netif_add>

    /*  Registers the default network interface.*/
    netif_set_default(&xnetif);
 800da86:	480d      	ldr	r0, [pc, #52]	; (800dabc <ETH_LWIP_Init+0x8c>)
 800da88:	f7fa f922 	bl	8007cd0 <netif_set_default>
#if LWIP_NETIF_STATUS_CALLBACK == 1
    /* Initialize interface status change callback */
    netif_set_status_callback(&xnetif, ETH_NETIF_STATUS_CB_FUNCTION);
#endif

    handle->initialized = true;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	721a      	strb	r2, [r3, #8]
    handle->eth_mac = &eth_mac;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4a0a      	ldr	r2, [pc, #40]	; (800dac0 <ETH_LWIP_Init+0x90>)
 800da96:	601a      	str	r2, [r3, #0]
    handle->xnetif = &xnetif;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	4a08      	ldr	r2, [pc, #32]	; (800dabc <ETH_LWIP_Init+0x8c>)
 800da9c:	605a      	str	r2, [r3, #4]
  }
  return status;
 800da9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	371c      	adds	r7, #28
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd90      	pop	{r4, r7, pc}
 800daa8:	2f01a8c0 	.word	0x2f01a8c0
 800daac:	0101a8c0 	.word	0x0101a8c0
 800dab0:	1ffe9134 	.word	0x1ffe9134
 800dab4:	08005bdd 	.word	0x08005bdd
 800dab8:	08005d21 	.word	0x08005d21
 800dabc:	1ffe8830 	.word	0x1ffe8830
 800dac0:	1ffe8800 	.word	0x1ffe8800

0800dac4 <XMC_ETH_PHY_IsDeviceIdValid>:
 * API IMPLEMENTATION
 *******************************************************************************/

 /* Check if the device identifier is valid */
static int32_t XMC_ETH_PHY_IsDeviceIdValid(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	460b      	mov	r3, r1
 800dace:	70fb      	strb	r3, [r7, #3]
  uint16_t phy_id1;
  uint16_t phy_id2;
  XMC_ETH_PHY_STATUS_t status;

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
 800dad0:	78fa      	ldrb	r2, [r7, #3]
 800dad2:	f107 030c 	add.w	r3, r7, #12
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	4611      	mov	r1, r2
 800dada:	2202      	movs	r2, #2
 800dadc:	f7f6 ff8c 	bl	80049f8 <XMC_ETH_MAC_ReadPhy>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d11b      	bne.n	800db1e <XMC_ETH_PHY_IsDeviceIdValid+0x5a>
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
 800dae6:	78fa      	ldrb	r2, [r7, #3]
 800dae8:	f107 030a 	add.w	r3, r7, #10
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	4611      	mov	r1, r2
 800daf0:	2203      	movs	r2, #3
 800daf2:	f7f6 ff81 	bl	80049f8 <XMC_ETH_MAC_ReadPhy>
 800daf6:	4603      	mov	r3, r0
  uint16_t phy_id1;
  uint16_t phy_id2;
  XMC_ETH_PHY_STATUS_t status;

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d110      	bne.n	800db1e <XMC_ETH_PHY_IsDeviceIdValid+0x5a>
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
  {
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 800dafc:	89bb      	ldrh	r3, [r7, #12]
 800dafe:	2b22      	cmp	r3, #34	; 0x22
 800db00:	d10a      	bne.n	800db18 <XMC_ETH_PHY_IsDeviceIdValid+0x54>
 800db02:	897b      	ldrh	r3, [r7, #10]
 800db04:	461a      	mov	r2, r3
 800db06:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800db0a:	4013      	ands	r3, r2
 800db0c:	f5b3 5fab 	cmp.w	r3, #5472	; 0x1560
 800db10:	d102      	bne.n	800db18 <XMC_ETH_PHY_IsDeviceIdValid+0x54>
    {
      status = XMC_ETH_PHY_STATUS_OK;
 800db12:	2300      	movs	r3, #0
 800db14:	73fb      	strb	r3, [r7, #15]

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
  {
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 800db16:	e004      	b.n	800db22 <XMC_ETH_PHY_IsDeviceIdValid+0x5e>
    {
      status = XMC_ETH_PHY_STATUS_OK;
    }
    else
    {
      status = XMC_ETH_PHY_STATUS_ERROR_DEVICE_ID;
 800db18:	2303      	movs	r3, #3
 800db1a:	73fb      	strb	r3, [r7, #15]

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
  {
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 800db1c:	e001      	b.n	800db22 <XMC_ETH_PHY_IsDeviceIdValid+0x5e>
      status = XMC_ETH_PHY_STATUS_ERROR_DEVICE_ID;
    }
  }
  else
  {
    status = XMC_ETH_PHY_STATUS_ERROR_TIMEOUT;
 800db1e:	2304      	movs	r3, #4
 800db20:	73fb      	strb	r3, [r7, #15]
  }

  return (int32_t)status;
 800db22:	7bfb      	ldrb	r3, [r7, #15]
}
 800db24:	4618      	mov	r0, r3
 800db26:	3710      	adds	r7, #16
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <XMC_ETH_PHY_Init>:

/* PHY initialize */
int32_t XMC_ETH_PHY_Init(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr, const XMC_ETH_PHY_CONFIG_t *const config)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b088      	sub	sp, #32
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	460b      	mov	r3, r1
 800db36:	607a      	str	r2, [r7, #4]
 800db38:	72fb      	strb	r3, [r7, #11]
  uint32_t retries = 0xffffffffUL;
 800db3a:	f04f 33ff 	mov.w	r3, #4294967295
 800db3e:	61fb      	str	r3, [r7, #28]
  int32_t status;
  uint16_t reg_bmcr;

  while (((status = XMC_ETH_PHY_IsDeviceIdValid(eth_mac, phy_addr)) != XMC_ETH_PHY_STATUS_OK) && --retries);
 800db40:	7afb      	ldrb	r3, [r7, #11]
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	4619      	mov	r1, r3
 800db46:	f7ff ffbd 	bl	800dac4 <XMC_ETH_PHY_IsDeviceIdValid>
 800db4a:	61b8      	str	r0, [r7, #24]
 800db4c:	69bb      	ldr	r3, [r7, #24]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d005      	beq.n	800db5e <XMC_ETH_PHY_Init+0x32>
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	3b01      	subs	r3, #1
 800db56:	61fb      	str	r3, [r7, #28]
 800db58:	69fb      	ldr	r3, [r7, #28]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d1f0      	bne.n	800db40 <XMC_ETH_PHY_Init+0x14>

  if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d135      	bne.n	800dbd0 <XMC_ETH_PHY_Init+0xa4>
  {
    status = XMC_ETH_PHY_Reset(eth_mac, phy_addr);
 800db64:	7afb      	ldrb	r3, [r7, #11]
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	4619      	mov	r1, r3
 800db6a:	f000 f837 	bl	800dbdc <XMC_ETH_PHY_Reset>
 800db6e:	61b8      	str	r0, [r7, #24]
    
    if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d12c      	bne.n	800dbd0 <XMC_ETH_PHY_Init+0xa4>
    {
      reg_bmcr = 0U;
 800db76:	2300      	movs	r3, #0
 800db78:	82fb      	strh	r3, [r7, #22]
      if (config->speed == XMC_ETH_LINK_SPEED_100M)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	885b      	ldrh	r3, [r3, #2]
 800db7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db82:	d103      	bne.n	800db8c <XMC_ETH_PHY_Init+0x60>
      {
        reg_bmcr |= BMCR_SPEED_SEL;
 800db84:	8afb      	ldrh	r3, [r7, #22]
 800db86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800db8a:	82fb      	strh	r3, [r7, #22]
      }

      if (config->duplex == XMC_ETH_LINK_DUPLEX_FULL)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	889b      	ldrh	r3, [r3, #4]
 800db90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db94:	d103      	bne.n	800db9e <XMC_ETH_PHY_Init+0x72>
      {
        reg_bmcr |= BMCR_DUPLEX;
 800db96:	8afb      	ldrh	r3, [r7, #22]
 800db98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db9c:	82fb      	strh	r3, [r7, #22]
      }

      if (config->enable_auto_negotiate == true)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	799b      	ldrb	r3, [r3, #6]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d003      	beq.n	800dbae <XMC_ETH_PHY_Init+0x82>
      {
        reg_bmcr |= BMCR_ANEG_EN;
 800dba6:	8afb      	ldrh	r3, [r7, #22]
 800dba8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dbac:	82fb      	strh	r3, [r7, #22]
      }

      if (config->enable_loop_back == true)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	79db      	ldrb	r3, [r3, #7]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d003      	beq.n	800dbbe <XMC_ETH_PHY_Init+0x92>
      {
        reg_bmcr |= BMCR_LOOPBACK;
 800dbb6:	8afb      	ldrh	r3, [r7, #22]
 800dbb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dbbc:	82fb      	strh	r3, [r7, #22]
      }

      status = (int32_t)XMC_ETH_MAC_WritePhy(eth_mac, phy_addr, REG_BMCR, reg_bmcr);
 800dbbe:	7afa      	ldrb	r2, [r7, #11]
 800dbc0:	8afb      	ldrh	r3, [r7, #22]
 800dbc2:	68f8      	ldr	r0, [r7, #12]
 800dbc4:	4611      	mov	r1, r2
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f7f6 ff50 	bl	8004a6c <XMC_ETH_MAC_WritePhy>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	61bb      	str	r3, [r7, #24]
    }
  }

  return status;
 800dbd0:	69bb      	ldr	r3, [r7, #24]
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3720      	adds	r7, #32
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop

0800dbdc <XMC_ETH_PHY_Reset>:

/* Reset */
int32_t XMC_ETH_PHY_Reset(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	70fb      	strb	r3, [r7, #3]
  int32_t status;
  uint16_t reg_bmcr;

  /* Reset PHY*/
  status = (int32_t)XMC_ETH_MAC_WritePhy(eth_mac, phy_addr, REG_BMCR, BMCR_RESET);
 800dbe8:	78fb      	ldrb	r3, [r7, #3]
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	4619      	mov	r1, r3
 800dbee:	2200      	movs	r2, #0
 800dbf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbf4:	f7f6 ff3a 	bl	8004a6c <XMC_ETH_MAC_WritePhy>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	60fb      	str	r3, [r7, #12]
  if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d10e      	bne.n	800dc20 <XMC_ETH_PHY_Reset+0x44>
  {      
    /* Wait for the reset to complete */
    do 
    {
      status = XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMCR, &reg_bmcr);
 800dc02:	78fa      	ldrb	r2, [r7, #3]
 800dc04:	f107 030a 	add.w	r3, r7, #10
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	4611      	mov	r1, r2
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f7f6 fef3 	bl	80049f8 <XMC_ETH_MAC_ReadPhy>
 800dc12:	4603      	mov	r3, r0
 800dc14:	60fb      	str	r3, [r7, #12]
    } while ((reg_bmcr & BMCR_RESET) != 0);
 800dc16:	897b      	ldrh	r3, [r7, #10]
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	b21b      	sxth	r3, r3
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	dbf0      	blt.n	800dc02 <XMC_ETH_PHY_Reset+0x26>
  }
    
  return status;
 800dc20:	68fb      	ldr	r3, [r7, #12]
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop

0800dc2c <XMC_ETH_PHY_GetLinkStatus>:
  return status;
}

/* Get link status */
XMC_ETH_LINK_STATUS_t XMC_ETH_PHY_GetLinkStatus(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	460b      	mov	r3, r1
 800dc36:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMSR, &val);
 800dc38:	78fa      	ldrb	r2, [r7, #3]
 800dc3a:	f107 030e 	add.w	r3, r7, #14
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	4611      	mov	r1, r2
 800dc42:	2201      	movs	r2, #1
 800dc44:	f7f6 fed8 	bl	80049f8 <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_STATUS_t)((val & BMSR_LINK_STAT) ? XMC_ETH_LINK_STATUS_UP : XMC_ETH_LINK_STATUS_DOWN);
 800dc48:	89fb      	ldrh	r3, [r7, #14]
 800dc4a:	f003 0304 	and.w	r3, r3, #4
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d001      	beq.n	800dc56 <XMC_ETH_PHY_GetLinkStatus+0x2a>
 800dc52:	2301      	movs	r3, #1
 800dc54:	e000      	b.n	800dc58 <XMC_ETH_PHY_GetLinkStatus+0x2c>
 800dc56:	2300      	movs	r3, #0
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3710      	adds	r7, #16
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <XMC_ETH_PHY_GetLinkSpeed>:

/* Get link speed */
XMC_ETH_LINK_SPEED_t XMC_ETH_PHY_GetLinkSpeed(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	460b      	mov	r3, r1
 800dc6a:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYCTRL1, &val);
 800dc6c:	78fa      	ldrb	r2, [r7, #3]
 800dc6e:	f107 030e 	add.w	r3, r7, #14
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	4611      	mov	r1, r2
 800dc76:	221e      	movs	r2, #30
 800dc78:	f7f6 febe 	bl	80049f8 <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_SPEED_t)(((val & PHYCTRL1_OPMODE_SPEED) - 1U) ? XMC_ETH_LINK_SPEED_100M : XMC_ETH_LINK_SPEED_10M);
 800dc7c:	89fb      	ldrh	r3, [r7, #14]
 800dc7e:	f003 0303 	and.w	r3, r3, #3
 800dc82:	2b01      	cmp	r3, #1
 800dc84:	d002      	beq.n	800dc8c <XMC_ETH_PHY_GetLinkSpeed+0x2c>
 800dc86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dc8a:	e000      	b.n	800dc8e <XMC_ETH_PHY_GetLinkSpeed+0x2e>
 800dc8c:	2300      	movs	r3, #0
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop

0800dc98 <XMC_ETH_PHY_GetLinkDuplex>:

/* Get link duplex settings */
XMC_ETH_LINK_DUPLEX_t XMC_ETH_PHY_GetLinkDuplex(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	460b      	mov	r3, r1
 800dca2:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYCTRL1, &val);
 800dca4:	78fa      	ldrb	r2, [r7, #3]
 800dca6:	f107 030e 	add.w	r3, r7, #14
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	4611      	mov	r1, r2
 800dcae:	221e      	movs	r2, #30
 800dcb0:	f7f6 fea2 	bl	80049f8 <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_DUPLEX_t)((val & PHYCTRL1_OPMODE_DUPLEX) ? XMC_ETH_LINK_DUPLEX_FULL : XMC_ETH_LINK_DUPLEX_HALF);
 800dcb4:	89fb      	ldrh	r3, [r7, #14]
 800dcb6:	f003 0304 	and.w	r3, r3, #4
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d002      	beq.n	800dcc4 <XMC_ETH_PHY_GetLinkDuplex+0x2c>
 800dcbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dcc2:	e000      	b.n	800dcc6 <XMC_ETH_PHY_GetLinkDuplex+0x2e>
 800dcc4:	2300      	movs	r3, #0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop

0800dcd0 <XMC_ETH_PHY_IsAutonegotiationCompleted>:

bool XMC_ETH_PHY_IsAutonegotiationCompleted(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	460b      	mov	r3, r1
 800dcda:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMSR, &val);
 800dcdc:	78fa      	ldrb	r2, [r7, #3]
 800dcde:	f107 030e 	add.w	r3, r7, #14
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	4611      	mov	r1, r2
 800dce6:	2201      	movs	r2, #1
 800dce8:	f7f6 fe86 	bl	80049f8 <XMC_ETH_MAC_ReadPhy>
  return ((val & BMSR_ANEG_COMPL) == BMSR_ANEG_COMPL);
 800dcec:	89fb      	ldrh	r3, [r7, #14]
 800dcee:	f003 0320 	and.w	r3, r3, #32
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	bf14      	ite	ne
 800dcf6:	2301      	movne	r3, #1
 800dcf8:	2300      	moveq	r3, #0
 800dcfa:	b2db      	uxtb	r3, r3
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3710      	adds	r7, #16
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6819      	ldr	r1, [r3, #0]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	7c1a      	ldrb	r2, [r3, #16]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	3304      	adds	r3, #4
 800dd18:	4608      	mov	r0, r1
 800dd1a:	4611      	mov	r1, r2
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	f7f5 ff3d 	bl	8003b9c <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6819      	ldr	r1, [r3, #0]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	7c1a      	ldrb	r2, [r3, #16]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	7c5b      	ldrb	r3, [r3, #17]
 800dd2e:	4608      	mov	r0, r1
 800dd30:	4611      	mov	r1, r2
 800dd32:	461a      	mov	r2, r3
 800dd34:	f7f6 ffce 	bl	8004cd4 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop

0800dd44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f003 0307 	and.w	r3, r3, #7
 800dd52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dd54:	4b0c      	ldr	r3, [pc, #48]	; (800dd88 <__NVIC_SetPriorityGrouping+0x44>)
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dd5a:	68ba      	ldr	r2, [r7, #8]
 800dd5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800dd60:	4013      	ands	r3, r2
 800dd62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800dd6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800dd70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd74:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800dd76:	4a04      	ldr	r2, [pc, #16]	; (800dd88 <__NVIC_SetPriorityGrouping+0x44>)
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	60d3      	str	r3, [r2, #12]
}
 800dd7c:	3714      	adds	r7, #20
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
 800dd86:	bf00      	nop
 800dd88:	e000ed00 	.word	0xe000ed00

0800dd8c <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800dd92:	2001      	movs	r0, #1
 800dd94:	f7ff ffd6 	bl	800dd44 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800dd98:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 800dd9a:	4b21      	ldr	r3, [pc, #132]	; (800de20 <SystemCoreSetup+0x94>)
 800dd9c:	4a21      	ldr	r2, [pc, #132]	; (800de24 <SystemCoreSetup+0x98>)
 800dd9e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800dda0:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800dda4:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800dda6:	4a1e      	ldr	r2, [pc, #120]	; (800de20 <SystemCoreSetup+0x94>)
 800dda8:	4b1d      	ldr	r3, [pc, #116]	; (800de20 <SystemCoreSetup+0x94>)
 800ddaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ddb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800ddb6:	4b1c      	ldr	r3, [pc, #112]	; (800de28 <SystemCoreSetup+0x9c>)
 800ddb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddbc:	3314      	adds	r3, #20
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f023 030f 	bic.w	r3, r3, #15
 800ddc8:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f043 0304 	orr.w	r3, r3, #4
 800ddd0:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800ddd2:	4b15      	ldr	r3, [pc, #84]	; (800de28 <SystemCoreSetup+0x9c>)
 800ddd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddd8:	3314      	adds	r3, #20
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 800ddde:	4a10      	ldr	r2, [pc, #64]	; (800de20 <SystemCoreSetup+0x94>)
 800dde0:	4b0f      	ldr	r3, [pc, #60]	; (800de20 <SystemCoreSetup+0x94>)
 800dde2:	695b      	ldr	r3, [r3, #20]
 800dde4:	f023 0310 	bic.w	r3, r3, #16
 800dde8:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 800ddea:	4a0d      	ldr	r2, [pc, #52]	; (800de20 <SystemCoreSetup+0x94>)
 800ddec:	4b0c      	ldr	r3, [pc, #48]	; (800de20 <SystemCoreSetup+0x94>)
 800ddee:	695b      	ldr	r3, [r3, #20]
 800ddf0:	f023 0308 	bic.w	r3, r3, #8
 800ddf4:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800ddf6:	4a0a      	ldr	r2, [pc, #40]	; (800de20 <SystemCoreSetup+0x94>)
 800ddf8:	4b09      	ldr	r3, [pc, #36]	; (800de20 <SystemCoreSetup+0x94>)
 800ddfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de00:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 800de02:	4a07      	ldr	r2, [pc, #28]	; (800de20 <SystemCoreSetup+0x94>)
 800de04:	4b06      	ldr	r3, [pc, #24]	; (800de20 <SystemCoreSetup+0x94>)
 800de06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800de0c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 800de0e:	4a04      	ldr	r2, [pc, #16]	; (800de20 <SystemCoreSetup+0x94>)
 800de10:	4b03      	ldr	r3, [pc, #12]	; (800de20 <SystemCoreSetup+0x94>)
 800de12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800de18:	6253      	str	r3, [r2, #36]	; 0x24
}
 800de1a:	3708      	adds	r7, #8
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	e000ed00 	.word	0xe000ed00
 800de24:	08000000 	.word	0x08000000
 800de28:	58001000 	.word	0x58001000

0800de2c <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b085      	sub	sp, #20
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 800de34:	2300      	movs	r3, #0
 800de36:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2201      	movs	r2, #1
 800de3c:	701a      	strb	r2, [r3, #0]

  return (status);
 800de3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de40:	4618      	mov	r0, r3
 800de42:	3714      	adds	r7, #20
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 800de4c:	b480      	push	{r7}
 800de4e:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 800de50:	4b02      	ldr	r3, [pc, #8]	; (800de5c <OSCHP_GetFrequency+0x10>)
}
 800de52:	4618      	mov	r0, r3
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr
 800de5c:	00b71b00 	.word	0x00b71b00

0800de60 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 800de60:	b5b0      	push	{r4, r5, r7, lr}
 800de62:	b086      	sub	sp, #24
 800de64:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 800de66:	4b13      	ldr	r3, [pc, #76]	; (800deb4 <SystemCoreClockSetup+0x54>)
 800de68:	1d3c      	adds	r4, r7, #4
 800de6a:	461d      	mov	r5, r3
 800de6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de70:	682b      	ldr	r3, [r5, #0]
 800de72:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 800de74:	1d3b      	adds	r3, r7, #4
 800de76:	4618      	mov	r0, r3
 800de78:	f7f5 ff7e 	bl	8003d78 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 800de7c:	2000      	movs	r0, #0
 800de7e:	f7f6 f86f 	bl	8003f60 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800de82:	2000      	movs	r0, #0
 800de84:	f7f6 f824 	bl	8003ed0 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 800de88:	2004      	movs	r0, #4
 800de8a:	f7f6 f8f5 	bl	8004078 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 800de8e:	f7f6 f95b 	bl	8004148 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800de92:	2001      	movs	r0, #1
 800de94:	2120      	movs	r1, #32
 800de96:	f7f6 f967 	bl	8004168 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 800de9a:	2000      	movs	r0, #0
 800de9c:	f7f6 f82c 	bl	8003ef8 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 800dea0:	2001      	movs	r0, #1
 800dea2:	f7f6 f911 	bl	80040c8 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800dea6:	2001      	movs	r0, #1
 800dea8:	f7f6 f8fa 	bl	80040a0 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 800deac:	3718      	adds	r7, #24
 800deae:	46bd      	mov	sp, r7
 800deb0:	bdb0      	pop	{r4, r5, r7, pc}
 800deb2:	bf00      	nop
 800deb4:	080143d8 	.word	0x080143d8

0800deb8 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800debe:	2300      	movs	r3, #0
 800dec0:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 800dec2:	4811      	ldr	r0, [pc, #68]	; (800df08 <DAVE_Init+0x50>)
 800dec4:	f7ff ffb2 	bl	800de2c <CLOCK_XMC4_Init>
 800dec8:	4603      	mov	r3, r0
 800deca:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 800decc:	79fb      	ldrb	r3, [r7, #7]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d104      	bne.n	800dedc <DAVE_Init+0x24>
  {
	 /**  Initialization of ETH_LWIP APP instance ETH_LWIP_0 */
	 init_status = (DAVE_STATUS_t)ETH_LWIP_Init(&ETH_LWIP_0); 
 800ded2:	480e      	ldr	r0, [pc, #56]	; (800df0c <DAVE_Init+0x54>)
 800ded4:	f7ff fdac 	bl	800da30 <ETH_LWIP_Init>
 800ded8:	4603      	mov	r3, r0
 800deda:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800dedc:	79fb      	ldrb	r3, [r7, #7]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d104      	bne.n	800deec <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED2); 
 800dee2:	480b      	ldr	r0, [pc, #44]	; (800df10 <DAVE_Init+0x58>)
 800dee4:	f7ff ff0e 	bl	800dd04 <DIGITAL_IO_Init>
 800dee8:	4603      	mov	r3, r0
 800deea:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800deec:	79fb      	ldrb	r3, [r7, #7]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d104      	bne.n	800defc <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance BUTTON1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BUTTON1); 
 800def2:	4808      	ldr	r0, [pc, #32]	; (800df14 <DAVE_Init+0x5c>)
 800def4:	f7ff ff06 	bl	800dd04 <DIGITAL_IO_Init>
 800def8:	4603      	mov	r3, r0
 800defa:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 800defc:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800defe:	4618      	mov	r0, r3
 800df00:	3708      	adds	r7, #8
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	1ffe92ac 	.word	0x1ffe92ac
 800df0c:	1ffe92a0 	.word	0x1ffe92a0
 800df10:	080143b0 	.word	0x080143b0
 800df14:	080143c4 	.word	0x080143c4

0800df18 <SCPI_Write>:
#include "scpi/scpi.h"
#include "scpi-def.h"

extern void initialise_monitor_handles(void);

size_t SCPI_Write(scpi_t * context, const char * data, size_t len) {
 800df18:	b580      	push	{r7, lr}
 800df1a:	b084      	sub	sp, #16
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	607a      	str	r2, [r7, #4]
	(void) context;

	tcp_write(context->user_context, data, len, 1);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	4610      	mov	r0, r2
 800df2e:	68b9      	ldr	r1, [r7, #8]
 800df30:	461a      	mov	r2, r3
 800df32:	2301      	movs	r3, #1
 800df34:	f7fe fa1a 	bl	800c36c <tcp_write>
	return len;
 800df38:	687b      	ldr	r3, [r7, #4]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop

0800df44 <SCPI_Flush>:

scpi_result_t SCPI_Flush(scpi_t * context) {
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
	(void) context;

	tcp_output(context->user_context);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df50:	4618      	mov	r0, r3
 800df52:	f7fe fe69 	bl	800cc28 <tcp_output>

	return SCPI_RES_OK;
 800df56:	2301      	movs	r3, #1
 800df58:	b25b      	sxtb	r3, r3
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3708      	adds	r7, #8
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop

0800df64 <SCPI_Error>:

int SCPI_Error(scpi_t * context, int_fast16_t err) {
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
	(void) context;

	printf("ERROR!\r\n");
 800df6e:	4804      	ldr	r0, [pc, #16]	; (800df80 <SCPI_Error+0x1c>)
 800df70:	f001 fa9a 	bl	800f4a8 <puts>

	return 0;
 800df74:	2300      	movs	r3, #0
}
 800df76:	4618      	mov	r0, r3
 800df78:	3708      	adds	r7, #8
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	080143ec 	.word	0x080143ec

0800df84 <SCPI_Control>:

scpi_result_t SCPI_Control(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	460b      	mov	r3, r1
 800df8e:	70fb      	strb	r3, [r7, #3]
 800df90:	4613      	mov	r3, r2
 800df92:	803b      	strh	r3, [r7, #0]
	(void) context;

	return SCPI_RES_OK;
 800df94:	2301      	movs	r3, #1
 800df96:	b25b      	sxtb	r3, r3
}
 800df98:	4618      	mov	r0, r3
 800df9a:	370c      	adds	r7, #12
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <SCPI_Reset>:

scpi_result_t SCPI_Reset(scpi_t * context) {
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
	(void) context;

	printf("** RESET COMMAND\r\n");
 800dfac:	4804      	ldr	r0, [pc, #16]	; (800dfc0 <SCPI_Reset+0x1c>)
 800dfae:	f001 fa7b 	bl	800f4a8 <puts>

	// todo: Implement instrument settings reset.

	return SCPI_RES_OK;
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	b25b      	sxtb	r3, r3
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3708      	adds	r7, #8
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	bf00      	nop
 800dfc0:	080143f4 	.word	0x080143f4

0800dfc4 <client_recv>:

static err_t client_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 800dfc4:	b590      	push	{r4, r7, lr}
 800dfc6:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 800dfca:	af00      	add	r7, sp, #0
 800dfcc:	f107 040c 	add.w	r4, r7, #12
 800dfd0:	6020      	str	r0, [r4, #0]
 800dfd2:	f107 0008 	add.w	r0, r7, #8
 800dfd6:	6001      	str	r1, [r0, #0]
 800dfd8:	1d39      	adds	r1, r7, #4
 800dfda:	600a      	str	r2, [r1, #0]
 800dfdc:	461a      	mov	r2, r3
 800dfde:	1cfb      	adds	r3, r7, #3
 800dfe0:	701a      	strb	r2, [r3, #0]
	char buffer[1024] = {0};
 800dfe2:	f107 0310 	add.w	r3, r7, #16
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfec:	4610      	mov	r0, r2
 800dfee:	2100      	movs	r1, #0
 800dff0:	461a      	mov	r2, r3
 800dff2:	f001 f9c9 	bl	800f388 <memset>

	// if pbuf isnt NULL, we have received data.
	if (p != NULL) {
 800dff6:	1d3b      	adds	r3, r7, #4
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d024      	beq.n	800e048 <client_recv+0x84>
		pbuf_copy_partial(p, buffer, p->len, 0);
 800dffe:	1d3b      	adds	r3, r7, #4
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	895a      	ldrh	r2, [r3, #10]
 800e004:	1d3b      	adds	r3, r7, #4
 800e006:	f107 0110 	add.w	r1, r7, #16
 800e00a:	6818      	ldr	r0, [r3, #0]
 800e00c:	2300      	movs	r3, #0
 800e00e:	f7fa fb0d 	bl	800862c <pbuf_copy_partial>

		tcp_recved(pcb, p->tot_len);
 800e012:	1d3b      	adds	r3, r7, #4
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	891a      	ldrh	r2, [r3, #8]
 800e018:	f107 0308 	add.w	r3, r7, #8
 800e01c:	6818      	ldr	r0, [r3, #0]
 800e01e:	4611      	mov	r1, r2
 800e020:	f7fb f85c 	bl	80090dc <tcp_recved>

		SCPI_Input(&scpi_context, buffer, strlen(buffer));
 800e024:	f107 0310 	add.w	r3, r7, #16
 800e028:	4618      	mov	r0, r3
 800e02a:	f001 fa65 	bl	800f4f8 <strlen>
 800e02e:	4603      	mov	r3, r0
 800e030:	461a      	mov	r2, r3
 800e032:	f107 0310 	add.w	r3, r7, #16
 800e036:	4816      	ldr	r0, [pc, #88]	; (800e090 <client_recv+0xcc>)
 800e038:	4619      	mov	r1, r3
 800e03a:	f7f4 fa9f 	bl	800257c <SCPI_Input>

		pbuf_free(p);
 800e03e:	1d3b      	adds	r3, r7, #4
 800e040:	6818      	ldr	r0, [r3, #0]
 800e042:	f7fa f9cb 	bl	80083dc <pbuf_free>
 800e046:	e01b      	b.n	800e080 <client_recv+0xbc>
	}
	// if pbuf is NULL, then the remote host closed the connection
	else if (err == ERR_OK) {
 800e048:	1cfb      	adds	r3, r7, #3
 800e04a:	f993 3000 	ldrsb.w	r3, [r3]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d116      	bne.n	800e080 <client_recv+0xbc>
		tcp_arg(pcb, NULL);
 800e052:	f107 0308 	add.w	r3, r7, #8
 800e056:	6818      	ldr	r0, [r3, #0]
 800e058:	2100      	movs	r1, #0
 800e05a:	f7fb fe05 	bl	8009c68 <tcp_arg>
		tcp_sent(pcb, NULL);
 800e05e:	f107 0308 	add.w	r3, r7, #8
 800e062:	6818      	ldr	r0, [r3, #0]
 800e064:	2100      	movs	r1, #0
 800e066:	f7fb fe21 	bl	8009cac <tcp_sent>
		tcp_recv(pcb, NULL);
 800e06a:	f107 0308 	add.w	r3, r7, #8
 800e06e:	6818      	ldr	r0, [r3, #0]
 800e070:	2100      	movs	r1, #0
 800e072:	f7fb fe09 	bl	8009c88 <tcp_recv>
		tcp_close(pcb);
 800e076:	f107 0308 	add.w	r3, r7, #8
 800e07a:	6818      	ldr	r0, [r3, #0]
 800e07c:	f7fa fdde 	bl	8008c3c <tcp_close>
	}

	return ERR_OK;
 800e080:	2300      	movs	r3, #0
 800e082:	b25b      	sxtb	r3, r3
}
 800e084:	4618      	mov	r0, r3
 800e086:	f207 4714 	addw	r7, r7, #1044	; 0x414
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd90      	pop	{r4, r7, pc}
 800e08e:	bf00      	nop
 800e090:	1fff029c 	.word	0x1fff029c

0800e094 <client_accept>:

static err_t client_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	60b9      	str	r1, [r7, #8]
 800e09e:	4613      	mov	r3, r2
 800e0a0:	71fb      	strb	r3, [r7, #7]
	tcp_recv(newpcb, client_recv);
 800e0a2:	68b8      	ldr	r0, [r7, #8]
 800e0a4:	4907      	ldr	r1, [pc, #28]	; (800e0c4 <client_accept+0x30>)
 800e0a6:	f7fb fdef 	bl	8009c88 <tcp_recv>

	printf("** NEW CONNECTION\r\n");
 800e0aa:	4807      	ldr	r0, [pc, #28]	; (800e0c8 <client_accept+0x34>)
 800e0ac:	f001 f9fc 	bl	800f4a8 <puts>

	scpi_context.user_context = newpcb;
 800e0b0:	4a06      	ldr	r2, [pc, #24]	; (800e0cc <client_accept+0x38>)
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	6613      	str	r3, [r2, #96]	; 0x60

	return ERR_OK;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	b25b      	sxtb	r3, r3
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	0800dfc5 	.word	0x0800dfc5
 800e0c8:	08014408 	.word	0x08014408
 800e0cc:	1fff029c 	.word	0x1fff029c

0800e0d0 <main>:
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

int main(void)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b08a      	sub	sp, #40	; 0x28
 800e0d4:	af08      	add	r7, sp, #32
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 800e0d6:	f7ff feef 	bl	800deb8 <DAVE_Init>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	71fb      	strb	r3, [r7, #7]
  initialise_monitor_handles();
 800e0de:	f005 fd05 	bl	8013aec <initialise_monitor_handles>

  printf("STARTUP\r\n");
 800e0e2:	481c      	ldr	r0, [pc, #112]	; (800e154 <main+0x84>)
 800e0e4:	f001 f9e0 	bl	800f4a8 <puts>


  if (status != DAVE_STATUS_SUCCESS)
 800e0e8:	79fb      	ldrb	r3, [r7, #7]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d003      	beq.n	800e0f6 <main+0x26>
  {
    /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
    XMC_DEBUG("DAVE APPs initialization failed\n");
 800e0ee:	481a      	ldr	r0, [pc, #104]	; (800e158 <main+0x88>)
 800e0f0:	f001 f9da 	bl	800f4a8 <puts>

    while(1U)
    {

    }
 800e0f4:	e7fe      	b.n	800e0f4 <main+0x24>
  }

  struct tcp_pcb *pcb;
  pcb = tcp_new();
 800e0f6:	f7fb fdaf 	bl	8009c58 <tcp_new>
 800e0fa:	6038      	str	r0, [r7, #0]
  tcp_bind(pcb, IP_ADDR_ANY, 5025);
 800e0fc:	6838      	ldr	r0, [r7, #0]
 800e0fe:	4917      	ldr	r1, [pc, #92]	; (800e15c <main+0x8c>)
 800e100:	f241 32a1 	movw	r2, #5025	; 0x13a1
 800e104:	f7fa fe6a 	bl	8008ddc <tcp_bind>
  pcb = tcp_listen(pcb);
 800e108:	6838      	ldr	r0, [r7, #0]
 800e10a:	21ff      	movs	r1, #255	; 0xff
 800e10c:	f7fa fef6 	bl	8008efc <tcp_listen_with_backlog>
 800e110:	6038      	str	r0, [r7, #0]
  tcp_accept(pcb, client_accept);
 800e112:	6838      	ldr	r0, [r7, #0]
 800e114:	4912      	ldr	r1, [pc, #72]	; (800e160 <main+0x90>)
 800e116:	f7fb fddb 	bl	8009cd0 <tcp_accept>

  scpi_context.user_context = pcb;
 800e11a:	4a12      	ldr	r2, [pc, #72]	; (800e164 <main+0x94>)
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	6613      	str	r3, [r2, #96]	; 0x60

  SCPI_Init(&scpi_context,
 800e120:	4b11      	ldr	r3, [pc, #68]	; (800e168 <main+0x98>)
 800e122:	9300      	str	r3, [sp, #0]
 800e124:	4b11      	ldr	r3, [pc, #68]	; (800e16c <main+0x9c>)
 800e126:	9301      	str	r3, [sp, #4]
 800e128:	2300      	movs	r3, #0
 800e12a:	9302      	str	r3, [sp, #8]
 800e12c:	4b10      	ldr	r3, [pc, #64]	; (800e170 <main+0xa0>)
 800e12e:	9303      	str	r3, [sp, #12]
 800e130:	4b10      	ldr	r3, [pc, #64]	; (800e174 <main+0xa4>)
 800e132:	9304      	str	r3, [sp, #16]
 800e134:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e138:	9305      	str	r3, [sp, #20]
 800e13a:	4b0f      	ldr	r3, [pc, #60]	; (800e178 <main+0xa8>)
 800e13c:	9306      	str	r3, [sp, #24]
 800e13e:	2311      	movs	r3, #17
 800e140:	9307      	str	r3, [sp, #28]
 800e142:	4808      	ldr	r0, [pc, #32]	; (800e164 <main+0x94>)
 800e144:	490d      	ldr	r1, [pc, #52]	; (800e17c <main+0xac>)
 800e146:	4a0e      	ldr	r2, [pc, #56]	; (800e180 <main+0xb0>)
 800e148:	4b0e      	ldr	r3, [pc, #56]	; (800e184 <main+0xb4>)
 800e14a:	f7f4 f9df 	bl	800250c <SCPI_Init>


  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	  sys_check_timeouts();
 800e14e:	f7ff fc31 	bl	800d9b4 <sys_check_timeouts>
  }
 800e152:	e7fc      	b.n	800e14e <main+0x7e>
 800e154:	0801441c 	.word	0x0801441c
 800e158:	08014428 	.word	0x08014428
 800e15c:	080142f4 	.word	0x080142f4
 800e160:	0800e095 	.word	0x0800e095
 800e164:	1fff029c 	.word	0x1fff029c
 800e168:	08014448 	.word	0x08014448
 800e16c:	08014458 	.word	0x08014458
 800e170:	08014464 	.word	0x08014464
 800e174:	1fff0334 	.word	0x1fff0334
 800e178:	1fff0434 	.word	0x1fff0434
 800e17c:	080145c8 	.word	0x080145c8
 800e180:	1ffe886c 	.word	0x1ffe886c
 800e184:	080140c0 	.word	0x080140c0

0800e188 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	460b      	mov	r3, r1
 800e192:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800e194:	78fb      	ldrb	r3, [r7, #3]
 800e196:	2201      	movs	r2, #1
 800e198:	409a      	lsls	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	605a      	str	r2, [r3, #4]
}
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800e1b4:	78fb      	ldrb	r3, [r7, #3]
 800e1b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e1ba:	409a      	lsls	r2, r3
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	605a      	str	r2, [r3, #4]
}
 800e1c0:	370c      	adds	r7, #12
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop

0800e1cc <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b083      	sub	sp, #12
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1dc:	78fb      	ldrb	r3, [r7, #3]
 800e1de:	fa22 f303 	lsr.w	r3, r2, r3
 800e1e2:	f003 0301 	and.w	r3, r3, #1
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	370c      	adds	r7, #12
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr
 800e1f2:	bf00      	nop

0800e1f4 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	7c1b      	ldrb	r3, [r3, #16]
 800e204:	4610      	mov	r0, r2
 800e206:	4619      	mov	r1, r3
 800e208:	f7ff ffbe 	bl	800e188 <XMC_GPIO_SetOutputHigh>
}
 800e20c:	3708      	adds	r7, #8
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop

0800e214 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681a      	ldr	r2, [r3, #0]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	7c1b      	ldrb	r3, [r3, #16]
 800e224:	4610      	mov	r0, r2
 800e226:	4619      	mov	r1, r3
 800e228:	f7ff ffbe 	bl	800e1a8 <XMC_GPIO_SetOutputLow>
}
 800e22c:	3708      	adds	r7, #8
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
 800e232:	bf00      	nop

0800e234 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	7c1b      	ldrb	r3, [r3, #16]
 800e244:	4610      	mov	r0, r2
 800e246:	4619      	mov	r1, r3
 800e248:	f7ff ffc0 	bl	800e1cc <XMC_GPIO_GetInput>
 800e24c:	4603      	mov	r3, r0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3708      	adds	r7, #8
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop

0800e258 <IO_Btn>:
#include <string.h>
#include "scpi/scpi.h"
#include "scpi-def.h"
#include "DAVE.h"

static scpi_result_t IO_Btn(scpi_t * context) {
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
	printf("## IO_BTN\r\n");
 800e260:	480c      	ldr	r0, [pc, #48]	; (800e294 <IO_Btn+0x3c>)
 800e262:	f001 f921 	bl	800f4a8 <puts>

	uint32_t buttonState = 0;
 800e266:	2300      	movs	r3, #0
 800e268:	60fb      	str	r3, [r7, #12]

	buttonState = DIGITAL_IO_GetInput(&BUTTON1);
 800e26a:	480b      	ldr	r0, [pc, #44]	; (800e298 <IO_Btn+0x40>)
 800e26c:	f7ff ffe2 	bl	800e234 <DIGITAL_IO_GetInput>
 800e270:	60f8      	str	r0, [r7, #12]

	SCPI_ResultBool(context, buttonState != 1);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2b01      	cmp	r3, #1
 800e276:	bf14      	ite	ne
 800e278:	2301      	movne	r3, #1
 800e27a:	2300      	moveq	r3, #0
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	4619      	mov	r1, r3
 800e282:	f7f4 fbdd 	bl	8002a40 <SCPI_ResultBool>

	return SCPI_RES_OK;
 800e286:	2301      	movs	r3, #1
 800e288:	b25b      	sxtb	r3, r3
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3710      	adds	r7, #16
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop
 800e294:	0801446c 	.word	0x0801446c
 800e298:	080143c4 	.word	0x080143c4

0800e29c <IO_Led>:

static scpi_result_t IO_Led(scpi_t * context) {
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
	scpi_bool_t param1;

	printf("## IO_LED\r\n");
 800e2a4:	4812      	ldr	r0, [pc, #72]	; (800e2f0 <IO_Led+0x54>)
 800e2a6:	f001 f8ff 	bl	800f4a8 <puts>

	// parse the bool
	if (SCPI_ParamBool(context, &param1, TRUE)) {
 800e2aa:	f107 030f 	add.w	r3, r7, #15
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	f7f4 fde2 	bl	8002e7c <SCPI_ParamBool>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d010      	beq.n	800e2e0 <IO_Led+0x44>
		if (param1) {
 800e2be:	7bfb      	ldrb	r3, [r7, #15]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d006      	beq.n	800e2d2 <IO_Led+0x36>
			printf(" - LED ON\r\n");
 800e2c4:	480b      	ldr	r0, [pc, #44]	; (800e2f4 <IO_Led+0x58>)
 800e2c6:	f001 f8ef 	bl	800f4a8 <puts>
			DIGITAL_IO_SetOutputHigh(&LED2);
 800e2ca:	480b      	ldr	r0, [pc, #44]	; (800e2f8 <IO_Led+0x5c>)
 800e2cc:	f7ff ff92 	bl	800e1f4 <DIGITAL_IO_SetOutputHigh>
 800e2d0:	e008      	b.n	800e2e4 <IO_Led+0x48>
		} else {
			printf(" - LED OFF\r\n");
 800e2d2:	480a      	ldr	r0, [pc, #40]	; (800e2fc <IO_Led+0x60>)
 800e2d4:	f001 f8e8 	bl	800f4a8 <puts>
			DIGITAL_IO_SetOutputLow(&LED2);
 800e2d8:	4807      	ldr	r0, [pc, #28]	; (800e2f8 <IO_Led+0x5c>)
 800e2da:	f7ff ff9b 	bl	800e214 <DIGITAL_IO_SetOutputLow>
 800e2de:	e001      	b.n	800e2e4 <IO_Led+0x48>
		}
	} else {
		return SCPI_RES_ERR;
 800e2e0:	23ff      	movs	r3, #255	; 0xff
 800e2e2:	e000      	b.n	800e2e6 <IO_Led+0x4a>
	}

	return SCPI_RES_OK;
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	b25b      	sxtb	r3, r3
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3710      	adds	r7, #16
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	08014478 	.word	0x08014478
 800e2f4:	08014484 	.word	0x08014484
 800e2f8:	080143b0 	.word	0x080143b0
 800e2fc:	08014490 	.word	0x08014490

0800e300 <My_CoreTstQ>:
 * Result should be 0 if everything is ok
 * Result should be 1 if something goes wrong
 *
 * Return SCPI_RES_OK
 */
static scpi_result_t My_CoreTstQ(scpi_t * context) {
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]

    SCPI_ResultInt32(context, 0);
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	2100      	movs	r1, #0
 800e30c:	f7f4 fa68 	bl	80027e0 <SCPI_ResultInt32>

    return SCPI_RES_OK;
 800e310:	2301      	movs	r3, #1
 800e312:	b25b      	sxtb	r3, r3
}
 800e314:	4618      	mov	r0, r3
 800e316:	3708      	adds	r7, #8
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <__fpclassifyd>:
 800e31c:	b410      	push	{r4}
 800e31e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800e322:	460b      	mov	r3, r1
 800e324:	d008      	beq.n	800e338 <__fpclassifyd+0x1c>
 800e326:	4a11      	ldr	r2, [pc, #68]	; (800e36c <__fpclassifyd+0x50>)
 800e328:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e32c:	4291      	cmp	r1, r2
 800e32e:	d808      	bhi.n	800e342 <__fpclassifyd+0x26>
 800e330:	2004      	movs	r0, #4
 800e332:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e336:	4770      	bx	lr
 800e338:	b918      	cbnz	r0, 800e342 <__fpclassifyd+0x26>
 800e33a:	2002      	movs	r0, #2
 800e33c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e340:	4770      	bx	lr
 800e342:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800e346:	4a09      	ldr	r2, [pc, #36]	; (800e36c <__fpclassifyd+0x50>)
 800e348:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d9ef      	bls.n	800e330 <__fpclassifyd+0x14>
 800e350:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e354:	d201      	bcs.n	800e35a <__fpclassifyd+0x3e>
 800e356:	2003      	movs	r0, #3
 800e358:	e7eb      	b.n	800e332 <__fpclassifyd+0x16>
 800e35a:	4b05      	ldr	r3, [pc, #20]	; (800e370 <__fpclassifyd+0x54>)
 800e35c:	429c      	cmp	r4, r3
 800e35e:	d001      	beq.n	800e364 <__fpclassifyd+0x48>
 800e360:	2000      	movs	r0, #0
 800e362:	e7e6      	b.n	800e332 <__fpclassifyd+0x16>
 800e364:	fab0 f080 	clz	r0, r0
 800e368:	0940      	lsrs	r0, r0, #5
 800e36a:	e7e2      	b.n	800e332 <__fpclassifyd+0x16>
 800e36c:	7fdfffff 	.word	0x7fdfffff
 800e370:	7ff00000 	.word	0x7ff00000

0800e374 <__aeabi_drsub>:
 800e374:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800e378:	e002      	b.n	800e380 <__adddf3>
 800e37a:	bf00      	nop

0800e37c <__aeabi_dsub>:
 800e37c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800e380 <__adddf3>:
 800e380:	b530      	push	{r4, r5, lr}
 800e382:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800e386:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800e38a:	ea94 0f05 	teq	r4, r5
 800e38e:	bf08      	it	eq
 800e390:	ea90 0f02 	teqeq	r0, r2
 800e394:	bf1f      	itttt	ne
 800e396:	ea54 0c00 	orrsne.w	ip, r4, r0
 800e39a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800e39e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800e3a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800e3a6:	f000 80e2 	beq.w	800e56e <__adddf3+0x1ee>
 800e3aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800e3ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800e3b2:	bfb8      	it	lt
 800e3b4:	426d      	neglt	r5, r5
 800e3b6:	dd0c      	ble.n	800e3d2 <__adddf3+0x52>
 800e3b8:	442c      	add	r4, r5
 800e3ba:	ea80 0202 	eor.w	r2, r0, r2
 800e3be:	ea81 0303 	eor.w	r3, r1, r3
 800e3c2:	ea82 0000 	eor.w	r0, r2, r0
 800e3c6:	ea83 0101 	eor.w	r1, r3, r1
 800e3ca:	ea80 0202 	eor.w	r2, r0, r2
 800e3ce:	ea81 0303 	eor.w	r3, r1, r3
 800e3d2:	2d36      	cmp	r5, #54	; 0x36
 800e3d4:	bf88      	it	hi
 800e3d6:	bd30      	pophi	{r4, r5, pc}
 800e3d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800e3dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800e3e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800e3e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800e3e8:	d002      	beq.n	800e3f0 <__adddf3+0x70>
 800e3ea:	4240      	negs	r0, r0
 800e3ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e3f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800e3f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e3f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800e3fc:	d002      	beq.n	800e404 <__adddf3+0x84>
 800e3fe:	4252      	negs	r2, r2
 800e400:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800e404:	ea94 0f05 	teq	r4, r5
 800e408:	f000 80a7 	beq.w	800e55a <__adddf3+0x1da>
 800e40c:	f1a4 0401 	sub.w	r4, r4, #1
 800e410:	f1d5 0e20 	rsbs	lr, r5, #32
 800e414:	db0d      	blt.n	800e432 <__adddf3+0xb2>
 800e416:	fa02 fc0e 	lsl.w	ip, r2, lr
 800e41a:	fa22 f205 	lsr.w	r2, r2, r5
 800e41e:	1880      	adds	r0, r0, r2
 800e420:	f141 0100 	adc.w	r1, r1, #0
 800e424:	fa03 f20e 	lsl.w	r2, r3, lr
 800e428:	1880      	adds	r0, r0, r2
 800e42a:	fa43 f305 	asr.w	r3, r3, r5
 800e42e:	4159      	adcs	r1, r3
 800e430:	e00e      	b.n	800e450 <__adddf3+0xd0>
 800e432:	f1a5 0520 	sub.w	r5, r5, #32
 800e436:	f10e 0e20 	add.w	lr, lr, #32
 800e43a:	2a01      	cmp	r2, #1
 800e43c:	fa03 fc0e 	lsl.w	ip, r3, lr
 800e440:	bf28      	it	cs
 800e442:	f04c 0c02 	orrcs.w	ip, ip, #2
 800e446:	fa43 f305 	asr.w	r3, r3, r5
 800e44a:	18c0      	adds	r0, r0, r3
 800e44c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800e450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e454:	d507      	bpl.n	800e466 <__adddf3+0xe6>
 800e456:	f04f 0e00 	mov.w	lr, #0
 800e45a:	f1dc 0c00 	rsbs	ip, ip, #0
 800e45e:	eb7e 0000 	sbcs.w	r0, lr, r0
 800e462:	eb6e 0101 	sbc.w	r1, lr, r1
 800e466:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e46a:	d31b      	bcc.n	800e4a4 <__adddf3+0x124>
 800e46c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800e470:	d30c      	bcc.n	800e48c <__adddf3+0x10c>
 800e472:	0849      	lsrs	r1, r1, #1
 800e474:	ea5f 0030 	movs.w	r0, r0, rrx
 800e478:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800e47c:	f104 0401 	add.w	r4, r4, #1
 800e480:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800e484:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800e488:	f080 809a 	bcs.w	800e5c0 <__adddf3+0x240>
 800e48c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800e490:	bf08      	it	eq
 800e492:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800e496:	f150 0000 	adcs.w	r0, r0, #0
 800e49a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e49e:	ea41 0105 	orr.w	r1, r1, r5
 800e4a2:	bd30      	pop	{r4, r5, pc}
 800e4a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800e4a8:	4140      	adcs	r0, r0
 800e4aa:	eb41 0101 	adc.w	r1, r1, r1
 800e4ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e4b2:	f1a4 0401 	sub.w	r4, r4, #1
 800e4b6:	d1e9      	bne.n	800e48c <__adddf3+0x10c>
 800e4b8:	f091 0f00 	teq	r1, #0
 800e4bc:	bf04      	itt	eq
 800e4be:	4601      	moveq	r1, r0
 800e4c0:	2000      	moveq	r0, #0
 800e4c2:	fab1 f381 	clz	r3, r1
 800e4c6:	bf08      	it	eq
 800e4c8:	3320      	addeq	r3, #32
 800e4ca:	f1a3 030b 	sub.w	r3, r3, #11
 800e4ce:	f1b3 0220 	subs.w	r2, r3, #32
 800e4d2:	da0c      	bge.n	800e4ee <__adddf3+0x16e>
 800e4d4:	320c      	adds	r2, #12
 800e4d6:	dd08      	ble.n	800e4ea <__adddf3+0x16a>
 800e4d8:	f102 0c14 	add.w	ip, r2, #20
 800e4dc:	f1c2 020c 	rsb	r2, r2, #12
 800e4e0:	fa01 f00c 	lsl.w	r0, r1, ip
 800e4e4:	fa21 f102 	lsr.w	r1, r1, r2
 800e4e8:	e00c      	b.n	800e504 <__adddf3+0x184>
 800e4ea:	f102 0214 	add.w	r2, r2, #20
 800e4ee:	bfd8      	it	le
 800e4f0:	f1c2 0c20 	rsble	ip, r2, #32
 800e4f4:	fa01 f102 	lsl.w	r1, r1, r2
 800e4f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 800e4fc:	bfdc      	itt	le
 800e4fe:	ea41 010c 	orrle.w	r1, r1, ip
 800e502:	4090      	lslle	r0, r2
 800e504:	1ae4      	subs	r4, r4, r3
 800e506:	bfa2      	ittt	ge
 800e508:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800e50c:	4329      	orrge	r1, r5
 800e50e:	bd30      	popge	{r4, r5, pc}
 800e510:	ea6f 0404 	mvn.w	r4, r4
 800e514:	3c1f      	subs	r4, #31
 800e516:	da1c      	bge.n	800e552 <__adddf3+0x1d2>
 800e518:	340c      	adds	r4, #12
 800e51a:	dc0e      	bgt.n	800e53a <__adddf3+0x1ba>
 800e51c:	f104 0414 	add.w	r4, r4, #20
 800e520:	f1c4 0220 	rsb	r2, r4, #32
 800e524:	fa20 f004 	lsr.w	r0, r0, r4
 800e528:	fa01 f302 	lsl.w	r3, r1, r2
 800e52c:	ea40 0003 	orr.w	r0, r0, r3
 800e530:	fa21 f304 	lsr.w	r3, r1, r4
 800e534:	ea45 0103 	orr.w	r1, r5, r3
 800e538:	bd30      	pop	{r4, r5, pc}
 800e53a:	f1c4 040c 	rsb	r4, r4, #12
 800e53e:	f1c4 0220 	rsb	r2, r4, #32
 800e542:	fa20 f002 	lsr.w	r0, r0, r2
 800e546:	fa01 f304 	lsl.w	r3, r1, r4
 800e54a:	ea40 0003 	orr.w	r0, r0, r3
 800e54e:	4629      	mov	r1, r5
 800e550:	bd30      	pop	{r4, r5, pc}
 800e552:	fa21 f004 	lsr.w	r0, r1, r4
 800e556:	4629      	mov	r1, r5
 800e558:	bd30      	pop	{r4, r5, pc}
 800e55a:	f094 0f00 	teq	r4, #0
 800e55e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800e562:	bf06      	itte	eq
 800e564:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800e568:	3401      	addeq	r4, #1
 800e56a:	3d01      	subne	r5, #1
 800e56c:	e74e      	b.n	800e40c <__adddf3+0x8c>
 800e56e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800e572:	bf18      	it	ne
 800e574:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800e578:	d029      	beq.n	800e5ce <__adddf3+0x24e>
 800e57a:	ea94 0f05 	teq	r4, r5
 800e57e:	bf08      	it	eq
 800e580:	ea90 0f02 	teqeq	r0, r2
 800e584:	d005      	beq.n	800e592 <__adddf3+0x212>
 800e586:	ea54 0c00 	orrs.w	ip, r4, r0
 800e58a:	bf04      	itt	eq
 800e58c:	4619      	moveq	r1, r3
 800e58e:	4610      	moveq	r0, r2
 800e590:	bd30      	pop	{r4, r5, pc}
 800e592:	ea91 0f03 	teq	r1, r3
 800e596:	bf1e      	ittt	ne
 800e598:	2100      	movne	r1, #0
 800e59a:	2000      	movne	r0, #0
 800e59c:	bd30      	popne	{r4, r5, pc}
 800e59e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800e5a2:	d105      	bne.n	800e5b0 <__adddf3+0x230>
 800e5a4:	0040      	lsls	r0, r0, #1
 800e5a6:	4149      	adcs	r1, r1
 800e5a8:	bf28      	it	cs
 800e5aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800e5ae:	bd30      	pop	{r4, r5, pc}
 800e5b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800e5b4:	bf3c      	itt	cc
 800e5b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800e5ba:	bd30      	popcc	{r4, r5, pc}
 800e5bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e5c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800e5c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e5c8:	f04f 0000 	mov.w	r0, #0
 800e5cc:	bd30      	pop	{r4, r5, pc}
 800e5ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800e5d2:	bf1a      	itte	ne
 800e5d4:	4619      	movne	r1, r3
 800e5d6:	4610      	movne	r0, r2
 800e5d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800e5dc:	bf1c      	itt	ne
 800e5de:	460b      	movne	r3, r1
 800e5e0:	4602      	movne	r2, r0
 800e5e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800e5e6:	bf06      	itte	eq
 800e5e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800e5ec:	ea91 0f03 	teqeq	r1, r3
 800e5f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800e5f4:	bd30      	pop	{r4, r5, pc}
 800e5f6:	bf00      	nop

0800e5f8 <__aeabi_ui2d>:
 800e5f8:	f090 0f00 	teq	r0, #0
 800e5fc:	bf04      	itt	eq
 800e5fe:	2100      	moveq	r1, #0
 800e600:	4770      	bxeq	lr
 800e602:	b530      	push	{r4, r5, lr}
 800e604:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e608:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e60c:	f04f 0500 	mov.w	r5, #0
 800e610:	f04f 0100 	mov.w	r1, #0
 800e614:	e750      	b.n	800e4b8 <__adddf3+0x138>
 800e616:	bf00      	nop

0800e618 <__aeabi_i2d>:
 800e618:	f090 0f00 	teq	r0, #0
 800e61c:	bf04      	itt	eq
 800e61e:	2100      	moveq	r1, #0
 800e620:	4770      	bxeq	lr
 800e622:	b530      	push	{r4, r5, lr}
 800e624:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e628:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e62c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800e630:	bf48      	it	mi
 800e632:	4240      	negmi	r0, r0
 800e634:	f04f 0100 	mov.w	r1, #0
 800e638:	e73e      	b.n	800e4b8 <__adddf3+0x138>
 800e63a:	bf00      	nop

0800e63c <__aeabi_f2d>:
 800e63c:	0042      	lsls	r2, r0, #1
 800e63e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800e642:	ea4f 0131 	mov.w	r1, r1, rrx
 800e646:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800e64a:	bf1f      	itttt	ne
 800e64c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800e650:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800e654:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800e658:	4770      	bxne	lr
 800e65a:	f092 0f00 	teq	r2, #0
 800e65e:	bf14      	ite	ne
 800e660:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800e664:	4770      	bxeq	lr
 800e666:	b530      	push	{r4, r5, lr}
 800e668:	f44f 7460 	mov.w	r4, #896	; 0x380
 800e66c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e674:	e720      	b.n	800e4b8 <__adddf3+0x138>
 800e676:	bf00      	nop

0800e678 <__aeabi_ul2d>:
 800e678:	ea50 0201 	orrs.w	r2, r0, r1
 800e67c:	bf08      	it	eq
 800e67e:	4770      	bxeq	lr
 800e680:	b530      	push	{r4, r5, lr}
 800e682:	f04f 0500 	mov.w	r5, #0
 800e686:	e00a      	b.n	800e69e <__aeabi_l2d+0x16>

0800e688 <__aeabi_l2d>:
 800e688:	ea50 0201 	orrs.w	r2, r0, r1
 800e68c:	bf08      	it	eq
 800e68e:	4770      	bxeq	lr
 800e690:	b530      	push	{r4, r5, lr}
 800e692:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800e696:	d502      	bpl.n	800e69e <__aeabi_l2d+0x16>
 800e698:	4240      	negs	r0, r0
 800e69a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e69e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e6a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e6a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800e6aa:	f43f aedc 	beq.w	800e466 <__adddf3+0xe6>
 800e6ae:	f04f 0203 	mov.w	r2, #3
 800e6b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e6b6:	bf18      	it	ne
 800e6b8:	3203      	addne	r2, #3
 800e6ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e6be:	bf18      	it	ne
 800e6c0:	3203      	addne	r2, #3
 800e6c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800e6c6:	f1c2 0320 	rsb	r3, r2, #32
 800e6ca:	fa00 fc03 	lsl.w	ip, r0, r3
 800e6ce:	fa20 f002 	lsr.w	r0, r0, r2
 800e6d2:	fa01 fe03 	lsl.w	lr, r1, r3
 800e6d6:	ea40 000e 	orr.w	r0, r0, lr
 800e6da:	fa21 f102 	lsr.w	r1, r1, r2
 800e6de:	4414      	add	r4, r2
 800e6e0:	e6c1      	b.n	800e466 <__adddf3+0xe6>
 800e6e2:	bf00      	nop

0800e6e4 <__aeabi_dmul>:
 800e6e4:	b570      	push	{r4, r5, r6, lr}
 800e6e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800e6ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800e6ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800e6f2:	bf1d      	ittte	ne
 800e6f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800e6f8:	ea94 0f0c 	teqne	r4, ip
 800e6fc:	ea95 0f0c 	teqne	r5, ip
 800e700:	f000 f8de 	bleq	800e8c0 <__aeabi_dmul+0x1dc>
 800e704:	442c      	add	r4, r5
 800e706:	ea81 0603 	eor.w	r6, r1, r3
 800e70a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800e70e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800e712:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800e716:	bf18      	it	ne
 800e718:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800e71c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e720:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e724:	d038      	beq.n	800e798 <__aeabi_dmul+0xb4>
 800e726:	fba0 ce02 	umull	ip, lr, r0, r2
 800e72a:	f04f 0500 	mov.w	r5, #0
 800e72e:	fbe1 e502 	umlal	lr, r5, r1, r2
 800e732:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800e736:	fbe0 e503 	umlal	lr, r5, r0, r3
 800e73a:	f04f 0600 	mov.w	r6, #0
 800e73e:	fbe1 5603 	umlal	r5, r6, r1, r3
 800e742:	f09c 0f00 	teq	ip, #0
 800e746:	bf18      	it	ne
 800e748:	f04e 0e01 	orrne.w	lr, lr, #1
 800e74c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800e750:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800e754:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800e758:	d204      	bcs.n	800e764 <__aeabi_dmul+0x80>
 800e75a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800e75e:	416d      	adcs	r5, r5
 800e760:	eb46 0606 	adc.w	r6, r6, r6
 800e764:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800e768:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800e76c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800e770:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800e774:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800e778:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800e77c:	bf88      	it	hi
 800e77e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800e782:	d81e      	bhi.n	800e7c2 <__aeabi_dmul+0xde>
 800e784:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800e788:	bf08      	it	eq
 800e78a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800e78e:	f150 0000 	adcs.w	r0, r0, #0
 800e792:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e796:	bd70      	pop	{r4, r5, r6, pc}
 800e798:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800e79c:	ea46 0101 	orr.w	r1, r6, r1
 800e7a0:	ea40 0002 	orr.w	r0, r0, r2
 800e7a4:	ea81 0103 	eor.w	r1, r1, r3
 800e7a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800e7ac:	bfc2      	ittt	gt
 800e7ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 800e7b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800e7b6:	bd70      	popgt	{r4, r5, r6, pc}
 800e7b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e7bc:	f04f 0e00 	mov.w	lr, #0
 800e7c0:	3c01      	subs	r4, #1
 800e7c2:	f300 80ab 	bgt.w	800e91c <__aeabi_dmul+0x238>
 800e7c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800e7ca:	bfde      	ittt	le
 800e7cc:	2000      	movle	r0, #0
 800e7ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800e7d2:	bd70      	pople	{r4, r5, r6, pc}
 800e7d4:	f1c4 0400 	rsb	r4, r4, #0
 800e7d8:	3c20      	subs	r4, #32
 800e7da:	da35      	bge.n	800e848 <__aeabi_dmul+0x164>
 800e7dc:	340c      	adds	r4, #12
 800e7de:	dc1b      	bgt.n	800e818 <__aeabi_dmul+0x134>
 800e7e0:	f104 0414 	add.w	r4, r4, #20
 800e7e4:	f1c4 0520 	rsb	r5, r4, #32
 800e7e8:	fa00 f305 	lsl.w	r3, r0, r5
 800e7ec:	fa20 f004 	lsr.w	r0, r0, r4
 800e7f0:	fa01 f205 	lsl.w	r2, r1, r5
 800e7f4:	ea40 0002 	orr.w	r0, r0, r2
 800e7f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800e7fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e800:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800e804:	fa21 f604 	lsr.w	r6, r1, r4
 800e808:	eb42 0106 	adc.w	r1, r2, r6
 800e80c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800e810:	bf08      	it	eq
 800e812:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800e816:	bd70      	pop	{r4, r5, r6, pc}
 800e818:	f1c4 040c 	rsb	r4, r4, #12
 800e81c:	f1c4 0520 	rsb	r5, r4, #32
 800e820:	fa00 f304 	lsl.w	r3, r0, r4
 800e824:	fa20 f005 	lsr.w	r0, r0, r5
 800e828:	fa01 f204 	lsl.w	r2, r1, r4
 800e82c:	ea40 0002 	orr.w	r0, r0, r2
 800e830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800e838:	f141 0100 	adc.w	r1, r1, #0
 800e83c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800e840:	bf08      	it	eq
 800e842:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800e846:	bd70      	pop	{r4, r5, r6, pc}
 800e848:	f1c4 0520 	rsb	r5, r4, #32
 800e84c:	fa00 f205 	lsl.w	r2, r0, r5
 800e850:	ea4e 0e02 	orr.w	lr, lr, r2
 800e854:	fa20 f304 	lsr.w	r3, r0, r4
 800e858:	fa01 f205 	lsl.w	r2, r1, r5
 800e85c:	ea43 0302 	orr.w	r3, r3, r2
 800e860:	fa21 f004 	lsr.w	r0, r1, r4
 800e864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e868:	fa21 f204 	lsr.w	r2, r1, r4
 800e86c:	ea20 0002 	bic.w	r0, r0, r2
 800e870:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800e874:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800e878:	bf08      	it	eq
 800e87a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800e87e:	bd70      	pop	{r4, r5, r6, pc}
 800e880:	f094 0f00 	teq	r4, #0
 800e884:	d10f      	bne.n	800e8a6 <__aeabi_dmul+0x1c2>
 800e886:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800e88a:	0040      	lsls	r0, r0, #1
 800e88c:	eb41 0101 	adc.w	r1, r1, r1
 800e890:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e894:	bf08      	it	eq
 800e896:	3c01      	subeq	r4, #1
 800e898:	d0f7      	beq.n	800e88a <__aeabi_dmul+0x1a6>
 800e89a:	ea41 0106 	orr.w	r1, r1, r6
 800e89e:	f095 0f00 	teq	r5, #0
 800e8a2:	bf18      	it	ne
 800e8a4:	4770      	bxne	lr
 800e8a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800e8aa:	0052      	lsls	r2, r2, #1
 800e8ac:	eb43 0303 	adc.w	r3, r3, r3
 800e8b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800e8b4:	bf08      	it	eq
 800e8b6:	3d01      	subeq	r5, #1
 800e8b8:	d0f7      	beq.n	800e8aa <__aeabi_dmul+0x1c6>
 800e8ba:	ea43 0306 	orr.w	r3, r3, r6
 800e8be:	4770      	bx	lr
 800e8c0:	ea94 0f0c 	teq	r4, ip
 800e8c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800e8c8:	bf18      	it	ne
 800e8ca:	ea95 0f0c 	teqne	r5, ip
 800e8ce:	d00c      	beq.n	800e8ea <__aeabi_dmul+0x206>
 800e8d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800e8d4:	bf18      	it	ne
 800e8d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800e8da:	d1d1      	bne.n	800e880 <__aeabi_dmul+0x19c>
 800e8dc:	ea81 0103 	eor.w	r1, r1, r3
 800e8e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e8e4:	f04f 0000 	mov.w	r0, #0
 800e8e8:	bd70      	pop	{r4, r5, r6, pc}
 800e8ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800e8ee:	bf06      	itte	eq
 800e8f0:	4610      	moveq	r0, r2
 800e8f2:	4619      	moveq	r1, r3
 800e8f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800e8f8:	d019      	beq.n	800e92e <__aeabi_dmul+0x24a>
 800e8fa:	ea94 0f0c 	teq	r4, ip
 800e8fe:	d102      	bne.n	800e906 <__aeabi_dmul+0x222>
 800e900:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800e904:	d113      	bne.n	800e92e <__aeabi_dmul+0x24a>
 800e906:	ea95 0f0c 	teq	r5, ip
 800e90a:	d105      	bne.n	800e918 <__aeabi_dmul+0x234>
 800e90c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800e910:	bf1c      	itt	ne
 800e912:	4610      	movne	r0, r2
 800e914:	4619      	movne	r1, r3
 800e916:	d10a      	bne.n	800e92e <__aeabi_dmul+0x24a>
 800e918:	ea81 0103 	eor.w	r1, r1, r3
 800e91c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e920:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800e924:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e928:	f04f 0000 	mov.w	r0, #0
 800e92c:	bd70      	pop	{r4, r5, r6, pc}
 800e92e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800e932:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800e936:	bd70      	pop	{r4, r5, r6, pc}

0800e938 <__aeabi_ddiv>:
 800e938:	b570      	push	{r4, r5, r6, lr}
 800e93a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800e93e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800e942:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800e946:	bf1d      	ittte	ne
 800e948:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800e94c:	ea94 0f0c 	teqne	r4, ip
 800e950:	ea95 0f0c 	teqne	r5, ip
 800e954:	f000 f8a7 	bleq	800eaa6 <__aeabi_ddiv+0x16e>
 800e958:	eba4 0405 	sub.w	r4, r4, r5
 800e95c:	ea81 0e03 	eor.w	lr, r1, r3
 800e960:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800e964:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800e968:	f000 8088 	beq.w	800ea7c <__aeabi_ddiv+0x144>
 800e96c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e970:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800e974:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800e978:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800e97c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800e980:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800e984:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800e988:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800e98c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800e990:	429d      	cmp	r5, r3
 800e992:	bf08      	it	eq
 800e994:	4296      	cmpeq	r6, r2
 800e996:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800e99a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800e99e:	d202      	bcs.n	800e9a6 <__aeabi_ddiv+0x6e>
 800e9a0:	085b      	lsrs	r3, r3, #1
 800e9a2:	ea4f 0232 	mov.w	r2, r2, rrx
 800e9a6:	1ab6      	subs	r6, r6, r2
 800e9a8:	eb65 0503 	sbc.w	r5, r5, r3
 800e9ac:	085b      	lsrs	r3, r3, #1
 800e9ae:	ea4f 0232 	mov.w	r2, r2, rrx
 800e9b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e9b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800e9ba:	ebb6 0e02 	subs.w	lr, r6, r2
 800e9be:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e9c2:	bf22      	ittt	cs
 800e9c4:	1ab6      	subcs	r6, r6, r2
 800e9c6:	4675      	movcs	r5, lr
 800e9c8:	ea40 000c 	orrcs.w	r0, r0, ip
 800e9cc:	085b      	lsrs	r3, r3, #1
 800e9ce:	ea4f 0232 	mov.w	r2, r2, rrx
 800e9d2:	ebb6 0e02 	subs.w	lr, r6, r2
 800e9d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e9da:	bf22      	ittt	cs
 800e9dc:	1ab6      	subcs	r6, r6, r2
 800e9de:	4675      	movcs	r5, lr
 800e9e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800e9e4:	085b      	lsrs	r3, r3, #1
 800e9e6:	ea4f 0232 	mov.w	r2, r2, rrx
 800e9ea:	ebb6 0e02 	subs.w	lr, r6, r2
 800e9ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e9f2:	bf22      	ittt	cs
 800e9f4:	1ab6      	subcs	r6, r6, r2
 800e9f6:	4675      	movcs	r5, lr
 800e9f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800e9fc:	085b      	lsrs	r3, r3, #1
 800e9fe:	ea4f 0232 	mov.w	r2, r2, rrx
 800ea02:	ebb6 0e02 	subs.w	lr, r6, r2
 800ea06:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ea0a:	bf22      	ittt	cs
 800ea0c:	1ab6      	subcs	r6, r6, r2
 800ea0e:	4675      	movcs	r5, lr
 800ea10:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800ea14:	ea55 0e06 	orrs.w	lr, r5, r6
 800ea18:	d018      	beq.n	800ea4c <__aeabi_ddiv+0x114>
 800ea1a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800ea1e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800ea22:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800ea26:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800ea2a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800ea2e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800ea32:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800ea36:	d1c0      	bne.n	800e9ba <__aeabi_ddiv+0x82>
 800ea38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800ea3c:	d10b      	bne.n	800ea56 <__aeabi_ddiv+0x11e>
 800ea3e:	ea41 0100 	orr.w	r1, r1, r0
 800ea42:	f04f 0000 	mov.w	r0, #0
 800ea46:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800ea4a:	e7b6      	b.n	800e9ba <__aeabi_ddiv+0x82>
 800ea4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800ea50:	bf04      	itt	eq
 800ea52:	4301      	orreq	r1, r0
 800ea54:	2000      	moveq	r0, #0
 800ea56:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800ea5a:	bf88      	it	hi
 800ea5c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800ea60:	f63f aeaf 	bhi.w	800e7c2 <__aeabi_dmul+0xde>
 800ea64:	ebb5 0c03 	subs.w	ip, r5, r3
 800ea68:	bf04      	itt	eq
 800ea6a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800ea6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800ea72:	f150 0000 	adcs.w	r0, r0, #0
 800ea76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800ea7a:	bd70      	pop	{r4, r5, r6, pc}
 800ea7c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800ea80:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800ea84:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800ea88:	bfc2      	ittt	gt
 800ea8a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800ea8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800ea92:	bd70      	popgt	{r4, r5, r6, pc}
 800ea94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ea98:	f04f 0e00 	mov.w	lr, #0
 800ea9c:	3c01      	subs	r4, #1
 800ea9e:	e690      	b.n	800e7c2 <__aeabi_dmul+0xde>
 800eaa0:	ea45 0e06 	orr.w	lr, r5, r6
 800eaa4:	e68d      	b.n	800e7c2 <__aeabi_dmul+0xde>
 800eaa6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800eaaa:	ea94 0f0c 	teq	r4, ip
 800eaae:	bf08      	it	eq
 800eab0:	ea95 0f0c 	teqeq	r5, ip
 800eab4:	f43f af3b 	beq.w	800e92e <__aeabi_dmul+0x24a>
 800eab8:	ea94 0f0c 	teq	r4, ip
 800eabc:	d10a      	bne.n	800ead4 <__aeabi_ddiv+0x19c>
 800eabe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800eac2:	f47f af34 	bne.w	800e92e <__aeabi_dmul+0x24a>
 800eac6:	ea95 0f0c 	teq	r5, ip
 800eaca:	f47f af25 	bne.w	800e918 <__aeabi_dmul+0x234>
 800eace:	4610      	mov	r0, r2
 800ead0:	4619      	mov	r1, r3
 800ead2:	e72c      	b.n	800e92e <__aeabi_dmul+0x24a>
 800ead4:	ea95 0f0c 	teq	r5, ip
 800ead8:	d106      	bne.n	800eae8 <__aeabi_ddiv+0x1b0>
 800eada:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800eade:	f43f aefd 	beq.w	800e8dc <__aeabi_dmul+0x1f8>
 800eae2:	4610      	mov	r0, r2
 800eae4:	4619      	mov	r1, r3
 800eae6:	e722      	b.n	800e92e <__aeabi_dmul+0x24a>
 800eae8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800eaec:	bf18      	it	ne
 800eaee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800eaf2:	f47f aec5 	bne.w	800e880 <__aeabi_dmul+0x19c>
 800eaf6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800eafa:	f47f af0d 	bne.w	800e918 <__aeabi_dmul+0x234>
 800eafe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800eb02:	f47f aeeb 	bne.w	800e8dc <__aeabi_dmul+0x1f8>
 800eb06:	e712      	b.n	800e92e <__aeabi_dmul+0x24a>

0800eb08 <__gedf2>:
 800eb08:	f04f 3cff 	mov.w	ip, #4294967295
 800eb0c:	e006      	b.n	800eb1c <__cmpdf2+0x4>
 800eb0e:	bf00      	nop

0800eb10 <__ledf2>:
 800eb10:	f04f 0c01 	mov.w	ip, #1
 800eb14:	e002      	b.n	800eb1c <__cmpdf2+0x4>
 800eb16:	bf00      	nop

0800eb18 <__cmpdf2>:
 800eb18:	f04f 0c01 	mov.w	ip, #1
 800eb1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 800eb20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800eb24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800eb28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800eb2c:	bf18      	it	ne
 800eb2e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800eb32:	d01b      	beq.n	800eb6c <__cmpdf2+0x54>
 800eb34:	b001      	add	sp, #4
 800eb36:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800eb3a:	bf0c      	ite	eq
 800eb3c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800eb40:	ea91 0f03 	teqne	r1, r3
 800eb44:	bf02      	ittt	eq
 800eb46:	ea90 0f02 	teqeq	r0, r2
 800eb4a:	2000      	moveq	r0, #0
 800eb4c:	4770      	bxeq	lr
 800eb4e:	f110 0f00 	cmn.w	r0, #0
 800eb52:	ea91 0f03 	teq	r1, r3
 800eb56:	bf58      	it	pl
 800eb58:	4299      	cmppl	r1, r3
 800eb5a:	bf08      	it	eq
 800eb5c:	4290      	cmpeq	r0, r2
 800eb5e:	bf2c      	ite	cs
 800eb60:	17d8      	asrcs	r0, r3, #31
 800eb62:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800eb66:	f040 0001 	orr.w	r0, r0, #1
 800eb6a:	4770      	bx	lr
 800eb6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800eb70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800eb74:	d102      	bne.n	800eb7c <__cmpdf2+0x64>
 800eb76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800eb7a:	d107      	bne.n	800eb8c <__cmpdf2+0x74>
 800eb7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800eb80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800eb84:	d1d6      	bne.n	800eb34 <__cmpdf2+0x1c>
 800eb86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800eb8a:	d0d3      	beq.n	800eb34 <__cmpdf2+0x1c>
 800eb8c:	f85d 0b04 	ldr.w	r0, [sp], #4
 800eb90:	4770      	bx	lr
 800eb92:	bf00      	nop

0800eb94 <__aeabi_cdrcmple>:
 800eb94:	4684      	mov	ip, r0
 800eb96:	4610      	mov	r0, r2
 800eb98:	4662      	mov	r2, ip
 800eb9a:	468c      	mov	ip, r1
 800eb9c:	4619      	mov	r1, r3
 800eb9e:	4663      	mov	r3, ip
 800eba0:	e000      	b.n	800eba4 <__aeabi_cdcmpeq>
 800eba2:	bf00      	nop

0800eba4 <__aeabi_cdcmpeq>:
 800eba4:	b501      	push	{r0, lr}
 800eba6:	f7ff ffb7 	bl	800eb18 <__cmpdf2>
 800ebaa:	2800      	cmp	r0, #0
 800ebac:	bf48      	it	mi
 800ebae:	f110 0f00 	cmnmi.w	r0, #0
 800ebb2:	bd01      	pop	{r0, pc}

0800ebb4 <__aeabi_dcmpeq>:
 800ebb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ebb8:	f7ff fff4 	bl	800eba4 <__aeabi_cdcmpeq>
 800ebbc:	bf0c      	ite	eq
 800ebbe:	2001      	moveq	r0, #1
 800ebc0:	2000      	movne	r0, #0
 800ebc2:	f85d fb08 	ldr.w	pc, [sp], #8
 800ebc6:	bf00      	nop

0800ebc8 <__aeabi_dcmplt>:
 800ebc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ebcc:	f7ff ffea 	bl	800eba4 <__aeabi_cdcmpeq>
 800ebd0:	bf34      	ite	cc
 800ebd2:	2001      	movcc	r0, #1
 800ebd4:	2000      	movcs	r0, #0
 800ebd6:	f85d fb08 	ldr.w	pc, [sp], #8
 800ebda:	bf00      	nop

0800ebdc <__aeabi_dcmple>:
 800ebdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ebe0:	f7ff ffe0 	bl	800eba4 <__aeabi_cdcmpeq>
 800ebe4:	bf94      	ite	ls
 800ebe6:	2001      	movls	r0, #1
 800ebe8:	2000      	movhi	r0, #0
 800ebea:	f85d fb08 	ldr.w	pc, [sp], #8
 800ebee:	bf00      	nop

0800ebf0 <__aeabi_dcmpge>:
 800ebf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ebf4:	f7ff ffce 	bl	800eb94 <__aeabi_cdrcmple>
 800ebf8:	bf94      	ite	ls
 800ebfa:	2001      	movls	r0, #1
 800ebfc:	2000      	movhi	r0, #0
 800ebfe:	f85d fb08 	ldr.w	pc, [sp], #8
 800ec02:	bf00      	nop

0800ec04 <__aeabi_dcmpgt>:
 800ec04:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ec08:	f7ff ffc4 	bl	800eb94 <__aeabi_cdrcmple>
 800ec0c:	bf34      	ite	cc
 800ec0e:	2001      	movcc	r0, #1
 800ec10:	2000      	movcs	r0, #0
 800ec12:	f85d fb08 	ldr.w	pc, [sp], #8
 800ec16:	bf00      	nop

0800ec18 <__aeabi_d2iz>:
 800ec18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ec1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800ec20:	d215      	bcs.n	800ec4e <__aeabi_d2iz+0x36>
 800ec22:	d511      	bpl.n	800ec48 <__aeabi_d2iz+0x30>
 800ec24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800ec28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800ec2c:	d912      	bls.n	800ec54 <__aeabi_d2iz+0x3c>
 800ec2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800ec32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ec36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800ec3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800ec3e:	fa23 f002 	lsr.w	r0, r3, r2
 800ec42:	bf18      	it	ne
 800ec44:	4240      	negne	r0, r0
 800ec46:	4770      	bx	lr
 800ec48:	f04f 0000 	mov.w	r0, #0
 800ec4c:	4770      	bx	lr
 800ec4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800ec52:	d105      	bne.n	800ec60 <__aeabi_d2iz+0x48>
 800ec54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800ec58:	bf08      	it	eq
 800ec5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800ec5e:	4770      	bx	lr
 800ec60:	f04f 0000 	mov.w	r0, #0
 800ec64:	4770      	bx	lr
 800ec66:	bf00      	nop

0800ec68 <__aeabi_uldivmod>:
 800ec68:	b94b      	cbnz	r3, 800ec7e <__aeabi_uldivmod+0x16>
 800ec6a:	b942      	cbnz	r2, 800ec7e <__aeabi_uldivmod+0x16>
 800ec6c:	2900      	cmp	r1, #0
 800ec6e:	bf08      	it	eq
 800ec70:	2800      	cmpeq	r0, #0
 800ec72:	d002      	beq.n	800ec7a <__aeabi_uldivmod+0x12>
 800ec74:	f04f 31ff 	mov.w	r1, #4294967295
 800ec78:	4608      	mov	r0, r1
 800ec7a:	f000 b83b 	b.w	800ecf4 <__aeabi_idiv0>
 800ec7e:	b082      	sub	sp, #8
 800ec80:	46ec      	mov	ip, sp
 800ec82:	e92d 5000 	stmdb	sp!, {ip, lr}
 800ec86:	f000 f81d 	bl	800ecc4 <__gnu_uldivmod_helper>
 800ec8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ec8e:	b002      	add	sp, #8
 800ec90:	bc0c      	pop	{r2, r3}
 800ec92:	4770      	bx	lr

0800ec94 <__gnu_ldivmod_helper>:
 800ec94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec98:	9c06      	ldr	r4, [sp, #24]
 800ec9a:	4615      	mov	r5, r2
 800ec9c:	4606      	mov	r6, r0
 800ec9e:	460f      	mov	r7, r1
 800eca0:	4698      	mov	r8, r3
 800eca2:	f000 f829 	bl	800ecf8 <__divdi3>
 800eca6:	fb05 f301 	mul.w	r3, r5, r1
 800ecaa:	fb00 3808 	mla	r8, r0, r8, r3
 800ecae:	fba5 2300 	umull	r2, r3, r5, r0
 800ecb2:	1ab2      	subs	r2, r6, r2
 800ecb4:	4443      	add	r3, r8
 800ecb6:	eb67 0303 	sbc.w	r3, r7, r3
 800ecba:	e9c4 2300 	strd	r2, r3, [r4]
 800ecbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecc2:	bf00      	nop

0800ecc4 <__gnu_uldivmod_helper>:
 800ecc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc8:	9c06      	ldr	r4, [sp, #24]
 800ecca:	4690      	mov	r8, r2
 800eccc:	4606      	mov	r6, r0
 800ecce:	460f      	mov	r7, r1
 800ecd0:	461d      	mov	r5, r3
 800ecd2:	f000 f95f 	bl	800ef94 <__udivdi3>
 800ecd6:	fb00 f505 	mul.w	r5, r0, r5
 800ecda:	fba0 2308 	umull	r2, r3, r0, r8
 800ecde:	fb08 5501 	mla	r5, r8, r1, r5
 800ece2:	1ab2      	subs	r2, r6, r2
 800ece4:	442b      	add	r3, r5
 800ece6:	eb67 0303 	sbc.w	r3, r7, r3
 800ecea:	e9c4 2300 	strd	r2, r3, [r4]
 800ecee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecf2:	bf00      	nop

0800ecf4 <__aeabi_idiv0>:
 800ecf4:	4770      	bx	lr
 800ecf6:	bf00      	nop

0800ecf8 <__divdi3>:
 800ecf8:	2900      	cmp	r1, #0
 800ecfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecfe:	f2c0 80a6 	blt.w	800ee4e <__divdi3+0x156>
 800ed02:	2600      	movs	r6, #0
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f2c0 809c 	blt.w	800ee42 <__divdi3+0x14a>
 800ed0a:	4688      	mov	r8, r1
 800ed0c:	4694      	mov	ip, r2
 800ed0e:	469e      	mov	lr, r3
 800ed10:	4615      	mov	r5, r2
 800ed12:	4604      	mov	r4, r0
 800ed14:	460f      	mov	r7, r1
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d13d      	bne.n	800ed96 <__divdi3+0x9e>
 800ed1a:	428a      	cmp	r2, r1
 800ed1c:	d959      	bls.n	800edd2 <__divdi3+0xda>
 800ed1e:	fab2 f382 	clz	r3, r2
 800ed22:	b13b      	cbz	r3, 800ed34 <__divdi3+0x3c>
 800ed24:	f1c3 0220 	rsb	r2, r3, #32
 800ed28:	409f      	lsls	r7, r3
 800ed2a:	fa20 f202 	lsr.w	r2, r0, r2
 800ed2e:	409d      	lsls	r5, r3
 800ed30:	4317      	orrs	r7, r2
 800ed32:	409c      	lsls	r4, r3
 800ed34:	0c29      	lsrs	r1, r5, #16
 800ed36:	0c22      	lsrs	r2, r4, #16
 800ed38:	fbb7 fef1 	udiv	lr, r7, r1
 800ed3c:	b2a8      	uxth	r0, r5
 800ed3e:	fb01 771e 	mls	r7, r1, lr, r7
 800ed42:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800ed46:	fb00 f30e 	mul.w	r3, r0, lr
 800ed4a:	42bb      	cmp	r3, r7
 800ed4c:	d90a      	bls.n	800ed64 <__divdi3+0x6c>
 800ed4e:	197f      	adds	r7, r7, r5
 800ed50:	f10e 32ff 	add.w	r2, lr, #4294967295
 800ed54:	f080 8105 	bcs.w	800ef62 <__divdi3+0x26a>
 800ed58:	42bb      	cmp	r3, r7
 800ed5a:	f240 8102 	bls.w	800ef62 <__divdi3+0x26a>
 800ed5e:	f1ae 0e02 	sub.w	lr, lr, #2
 800ed62:	442f      	add	r7, r5
 800ed64:	1aff      	subs	r7, r7, r3
 800ed66:	b2a4      	uxth	r4, r4
 800ed68:	fbb7 f3f1 	udiv	r3, r7, r1
 800ed6c:	fb01 7713 	mls	r7, r1, r3, r7
 800ed70:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800ed74:	fb00 f003 	mul.w	r0, r0, r3
 800ed78:	42b8      	cmp	r0, r7
 800ed7a:	d908      	bls.n	800ed8e <__divdi3+0x96>
 800ed7c:	197f      	adds	r7, r7, r5
 800ed7e:	f103 32ff 	add.w	r2, r3, #4294967295
 800ed82:	f080 80f0 	bcs.w	800ef66 <__divdi3+0x26e>
 800ed86:	42b8      	cmp	r0, r7
 800ed88:	f240 80ed 	bls.w	800ef66 <__divdi3+0x26e>
 800ed8c:	3b02      	subs	r3, #2
 800ed8e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800ed92:	2200      	movs	r2, #0
 800ed94:	e003      	b.n	800ed9e <__divdi3+0xa6>
 800ed96:	428b      	cmp	r3, r1
 800ed98:	d90f      	bls.n	800edba <__divdi3+0xc2>
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	4613      	mov	r3, r2
 800ed9e:	1c34      	adds	r4, r6, #0
 800eda0:	bf18      	it	ne
 800eda2:	2401      	movne	r4, #1
 800eda4:	4260      	negs	r0, r4
 800eda6:	f04f 0500 	mov.w	r5, #0
 800edaa:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 800edae:	4058      	eors	r0, r3
 800edb0:	4051      	eors	r1, r2
 800edb2:	1900      	adds	r0, r0, r4
 800edb4:	4169      	adcs	r1, r5
 800edb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edba:	fab3 f283 	clz	r2, r3
 800edbe:	2a00      	cmp	r2, #0
 800edc0:	f040 8086 	bne.w	800eed0 <__divdi3+0x1d8>
 800edc4:	428b      	cmp	r3, r1
 800edc6:	d302      	bcc.n	800edce <__divdi3+0xd6>
 800edc8:	4584      	cmp	ip, r0
 800edca:	f200 80db 	bhi.w	800ef84 <__divdi3+0x28c>
 800edce:	2301      	movs	r3, #1
 800edd0:	e7e5      	b.n	800ed9e <__divdi3+0xa6>
 800edd2:	b912      	cbnz	r2, 800edda <__divdi3+0xe2>
 800edd4:	2301      	movs	r3, #1
 800edd6:	fbb3 f5f2 	udiv	r5, r3, r2
 800edda:	fab5 f085 	clz	r0, r5
 800edde:	2800      	cmp	r0, #0
 800ede0:	d13b      	bne.n	800ee5a <__divdi3+0x162>
 800ede2:	1b78      	subs	r0, r7, r5
 800ede4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800ede8:	fa1f fc85 	uxth.w	ip, r5
 800edec:	2201      	movs	r2, #1
 800edee:	fbb0 f8fe 	udiv	r8, r0, lr
 800edf2:	0c21      	lsrs	r1, r4, #16
 800edf4:	fb0e 0718 	mls	r7, lr, r8, r0
 800edf8:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 800edfc:	fb0c f308 	mul.w	r3, ip, r8
 800ee00:	42bb      	cmp	r3, r7
 800ee02:	d907      	bls.n	800ee14 <__divdi3+0x11c>
 800ee04:	197f      	adds	r7, r7, r5
 800ee06:	f108 31ff 	add.w	r1, r8, #4294967295
 800ee0a:	d202      	bcs.n	800ee12 <__divdi3+0x11a>
 800ee0c:	42bb      	cmp	r3, r7
 800ee0e:	f200 80bd 	bhi.w	800ef8c <__divdi3+0x294>
 800ee12:	4688      	mov	r8, r1
 800ee14:	1aff      	subs	r7, r7, r3
 800ee16:	b2a4      	uxth	r4, r4
 800ee18:	fbb7 f3fe 	udiv	r3, r7, lr
 800ee1c:	fb0e 7713 	mls	r7, lr, r3, r7
 800ee20:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800ee24:	fb0c fc03 	mul.w	ip, ip, r3
 800ee28:	45bc      	cmp	ip, r7
 800ee2a:	d907      	bls.n	800ee3c <__divdi3+0x144>
 800ee2c:	197f      	adds	r7, r7, r5
 800ee2e:	f103 31ff 	add.w	r1, r3, #4294967295
 800ee32:	d202      	bcs.n	800ee3a <__divdi3+0x142>
 800ee34:	45bc      	cmp	ip, r7
 800ee36:	f200 80a7 	bhi.w	800ef88 <__divdi3+0x290>
 800ee3a:	460b      	mov	r3, r1
 800ee3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800ee40:	e7ad      	b.n	800ed9e <__divdi3+0xa6>
 800ee42:	4252      	negs	r2, r2
 800ee44:	ea6f 0606 	mvn.w	r6, r6
 800ee48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800ee4c:	e75d      	b.n	800ed0a <__divdi3+0x12>
 800ee4e:	4240      	negs	r0, r0
 800ee50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800ee54:	f04f 36ff 	mov.w	r6, #4294967295
 800ee58:	e754      	b.n	800ed04 <__divdi3+0xc>
 800ee5a:	f1c0 0220 	rsb	r2, r0, #32
 800ee5e:	fa24 f102 	lsr.w	r1, r4, r2
 800ee62:	fa07 f300 	lsl.w	r3, r7, r0
 800ee66:	4085      	lsls	r5, r0
 800ee68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800ee6c:	40d7      	lsrs	r7, r2
 800ee6e:	4319      	orrs	r1, r3
 800ee70:	fbb7 f2fe 	udiv	r2, r7, lr
 800ee74:	0c0b      	lsrs	r3, r1, #16
 800ee76:	fb0e 7712 	mls	r7, lr, r2, r7
 800ee7a:	fa1f fc85 	uxth.w	ip, r5
 800ee7e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ee82:	fb0c f702 	mul.w	r7, ip, r2
 800ee86:	429f      	cmp	r7, r3
 800ee88:	fa04 f400 	lsl.w	r4, r4, r0
 800ee8c:	d907      	bls.n	800ee9e <__divdi3+0x1a6>
 800ee8e:	195b      	adds	r3, r3, r5
 800ee90:	f102 30ff 	add.w	r0, r2, #4294967295
 800ee94:	d274      	bcs.n	800ef80 <__divdi3+0x288>
 800ee96:	429f      	cmp	r7, r3
 800ee98:	d972      	bls.n	800ef80 <__divdi3+0x288>
 800ee9a:	3a02      	subs	r2, #2
 800ee9c:	442b      	add	r3, r5
 800ee9e:	1bdf      	subs	r7, r3, r7
 800eea0:	b289      	uxth	r1, r1
 800eea2:	fbb7 f8fe 	udiv	r8, r7, lr
 800eea6:	fb0e 7318 	mls	r3, lr, r8, r7
 800eeaa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800eeae:	fb0c f708 	mul.w	r7, ip, r8
 800eeb2:	429f      	cmp	r7, r3
 800eeb4:	d908      	bls.n	800eec8 <__divdi3+0x1d0>
 800eeb6:	195b      	adds	r3, r3, r5
 800eeb8:	f108 31ff 	add.w	r1, r8, #4294967295
 800eebc:	d25c      	bcs.n	800ef78 <__divdi3+0x280>
 800eebe:	429f      	cmp	r7, r3
 800eec0:	d95a      	bls.n	800ef78 <__divdi3+0x280>
 800eec2:	f1a8 0802 	sub.w	r8, r8, #2
 800eec6:	442b      	add	r3, r5
 800eec8:	1bd8      	subs	r0, r3, r7
 800eeca:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 800eece:	e78e      	b.n	800edee <__divdi3+0xf6>
 800eed0:	f1c2 0320 	rsb	r3, r2, #32
 800eed4:	fa2c f103 	lsr.w	r1, ip, r3
 800eed8:	fa0e fe02 	lsl.w	lr, lr, r2
 800eedc:	fa20 f703 	lsr.w	r7, r0, r3
 800eee0:	ea41 0e0e 	orr.w	lr, r1, lr
 800eee4:	fa08 f002 	lsl.w	r0, r8, r2
 800eee8:	fa28 f103 	lsr.w	r1, r8, r3
 800eeec:	ea4f 451e 	mov.w	r5, lr, lsr #16
 800eef0:	4338      	orrs	r0, r7
 800eef2:	fbb1 f8f5 	udiv	r8, r1, r5
 800eef6:	0c03      	lsrs	r3, r0, #16
 800eef8:	fb05 1118 	mls	r1, r5, r8, r1
 800eefc:	fa1f f78e 	uxth.w	r7, lr
 800ef00:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800ef04:	fb07 f308 	mul.w	r3, r7, r8
 800ef08:	428b      	cmp	r3, r1
 800ef0a:	fa0c fc02 	lsl.w	ip, ip, r2
 800ef0e:	d909      	bls.n	800ef24 <__divdi3+0x22c>
 800ef10:	eb11 010e 	adds.w	r1, r1, lr
 800ef14:	f108 39ff 	add.w	r9, r8, #4294967295
 800ef18:	d230      	bcs.n	800ef7c <__divdi3+0x284>
 800ef1a:	428b      	cmp	r3, r1
 800ef1c:	d92e      	bls.n	800ef7c <__divdi3+0x284>
 800ef1e:	f1a8 0802 	sub.w	r8, r8, #2
 800ef22:	4471      	add	r1, lr
 800ef24:	1ac9      	subs	r1, r1, r3
 800ef26:	b280      	uxth	r0, r0
 800ef28:	fbb1 f3f5 	udiv	r3, r1, r5
 800ef2c:	fb05 1113 	mls	r1, r5, r3, r1
 800ef30:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800ef34:	fb07 f703 	mul.w	r7, r7, r3
 800ef38:	428f      	cmp	r7, r1
 800ef3a:	d908      	bls.n	800ef4e <__divdi3+0x256>
 800ef3c:	eb11 010e 	adds.w	r1, r1, lr
 800ef40:	f103 30ff 	add.w	r0, r3, #4294967295
 800ef44:	d216      	bcs.n	800ef74 <__divdi3+0x27c>
 800ef46:	428f      	cmp	r7, r1
 800ef48:	d914      	bls.n	800ef74 <__divdi3+0x27c>
 800ef4a:	3b02      	subs	r3, #2
 800ef4c:	4471      	add	r1, lr
 800ef4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800ef52:	1bc9      	subs	r1, r1, r7
 800ef54:	fba3 890c 	umull	r8, r9, r3, ip
 800ef58:	4549      	cmp	r1, r9
 800ef5a:	d309      	bcc.n	800ef70 <__divdi3+0x278>
 800ef5c:	d005      	beq.n	800ef6a <__divdi3+0x272>
 800ef5e:	2200      	movs	r2, #0
 800ef60:	e71d      	b.n	800ed9e <__divdi3+0xa6>
 800ef62:	4696      	mov	lr, r2
 800ef64:	e6fe      	b.n	800ed64 <__divdi3+0x6c>
 800ef66:	4613      	mov	r3, r2
 800ef68:	e711      	b.n	800ed8e <__divdi3+0x96>
 800ef6a:	4094      	lsls	r4, r2
 800ef6c:	4544      	cmp	r4, r8
 800ef6e:	d2f6      	bcs.n	800ef5e <__divdi3+0x266>
 800ef70:	3b01      	subs	r3, #1
 800ef72:	e7f4      	b.n	800ef5e <__divdi3+0x266>
 800ef74:	4603      	mov	r3, r0
 800ef76:	e7ea      	b.n	800ef4e <__divdi3+0x256>
 800ef78:	4688      	mov	r8, r1
 800ef7a:	e7a5      	b.n	800eec8 <__divdi3+0x1d0>
 800ef7c:	46c8      	mov	r8, r9
 800ef7e:	e7d1      	b.n	800ef24 <__divdi3+0x22c>
 800ef80:	4602      	mov	r2, r0
 800ef82:	e78c      	b.n	800ee9e <__divdi3+0x1a6>
 800ef84:	4613      	mov	r3, r2
 800ef86:	e70a      	b.n	800ed9e <__divdi3+0xa6>
 800ef88:	3b02      	subs	r3, #2
 800ef8a:	e757      	b.n	800ee3c <__divdi3+0x144>
 800ef8c:	f1a8 0802 	sub.w	r8, r8, #2
 800ef90:	442f      	add	r7, r5
 800ef92:	e73f      	b.n	800ee14 <__divdi3+0x11c>

0800ef94 <__udivdi3>:
 800ef94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d144      	bne.n	800f026 <__udivdi3+0x92>
 800ef9c:	428a      	cmp	r2, r1
 800ef9e:	4615      	mov	r5, r2
 800efa0:	4604      	mov	r4, r0
 800efa2:	d94f      	bls.n	800f044 <__udivdi3+0xb0>
 800efa4:	fab2 f782 	clz	r7, r2
 800efa8:	460e      	mov	r6, r1
 800efaa:	b14f      	cbz	r7, 800efc0 <__udivdi3+0x2c>
 800efac:	f1c7 0320 	rsb	r3, r7, #32
 800efb0:	40b9      	lsls	r1, r7
 800efb2:	fa20 f603 	lsr.w	r6, r0, r3
 800efb6:	fa02 f507 	lsl.w	r5, r2, r7
 800efba:	430e      	orrs	r6, r1
 800efbc:	fa00 f407 	lsl.w	r4, r0, r7
 800efc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800efc4:	0c23      	lsrs	r3, r4, #16
 800efc6:	fbb6 f0fe 	udiv	r0, r6, lr
 800efca:	b2af      	uxth	r7, r5
 800efcc:	fb0e 6110 	mls	r1, lr, r0, r6
 800efd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800efd4:	fb07 f100 	mul.w	r1, r7, r0
 800efd8:	4299      	cmp	r1, r3
 800efda:	d909      	bls.n	800eff0 <__udivdi3+0x5c>
 800efdc:	195b      	adds	r3, r3, r5
 800efde:	f100 32ff 	add.w	r2, r0, #4294967295
 800efe2:	f080 80ec 	bcs.w	800f1be <__udivdi3+0x22a>
 800efe6:	4299      	cmp	r1, r3
 800efe8:	f240 80e9 	bls.w	800f1be <__udivdi3+0x22a>
 800efec:	3802      	subs	r0, #2
 800efee:	442b      	add	r3, r5
 800eff0:	1a5a      	subs	r2, r3, r1
 800eff2:	b2a4      	uxth	r4, r4
 800eff4:	fbb2 f3fe 	udiv	r3, r2, lr
 800eff8:	fb0e 2213 	mls	r2, lr, r3, r2
 800effc:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800f000:	fb07 f703 	mul.w	r7, r7, r3
 800f004:	4297      	cmp	r7, r2
 800f006:	d908      	bls.n	800f01a <__udivdi3+0x86>
 800f008:	1952      	adds	r2, r2, r5
 800f00a:	f103 31ff 	add.w	r1, r3, #4294967295
 800f00e:	f080 80d8 	bcs.w	800f1c2 <__udivdi3+0x22e>
 800f012:	4297      	cmp	r7, r2
 800f014:	f240 80d5 	bls.w	800f1c2 <__udivdi3+0x22e>
 800f018:	3b02      	subs	r3, #2
 800f01a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800f01e:	2600      	movs	r6, #0
 800f020:	4631      	mov	r1, r6
 800f022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f026:	428b      	cmp	r3, r1
 800f028:	d847      	bhi.n	800f0ba <__udivdi3+0x126>
 800f02a:	fab3 f683 	clz	r6, r3
 800f02e:	2e00      	cmp	r6, #0
 800f030:	d148      	bne.n	800f0c4 <__udivdi3+0x130>
 800f032:	428b      	cmp	r3, r1
 800f034:	d302      	bcc.n	800f03c <__udivdi3+0xa8>
 800f036:	4282      	cmp	r2, r0
 800f038:	f200 80cd 	bhi.w	800f1d6 <__udivdi3+0x242>
 800f03c:	2001      	movs	r0, #1
 800f03e:	4631      	mov	r1, r6
 800f040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f044:	b912      	cbnz	r2, 800f04c <__udivdi3+0xb8>
 800f046:	2501      	movs	r5, #1
 800f048:	fbb5 f5f2 	udiv	r5, r5, r2
 800f04c:	fab5 f885 	clz	r8, r5
 800f050:	f1b8 0f00 	cmp.w	r8, #0
 800f054:	d177      	bne.n	800f146 <__udivdi3+0x1b2>
 800f056:	1b4a      	subs	r2, r1, r5
 800f058:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800f05c:	b2af      	uxth	r7, r5
 800f05e:	2601      	movs	r6, #1
 800f060:	fbb2 f0fe 	udiv	r0, r2, lr
 800f064:	0c23      	lsrs	r3, r4, #16
 800f066:	fb0e 2110 	mls	r1, lr, r0, r2
 800f06a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800f06e:	fb07 f300 	mul.w	r3, r7, r0
 800f072:	428b      	cmp	r3, r1
 800f074:	d907      	bls.n	800f086 <__udivdi3+0xf2>
 800f076:	1949      	adds	r1, r1, r5
 800f078:	f100 32ff 	add.w	r2, r0, #4294967295
 800f07c:	d202      	bcs.n	800f084 <__udivdi3+0xf0>
 800f07e:	428b      	cmp	r3, r1
 800f080:	f200 80ba 	bhi.w	800f1f8 <__udivdi3+0x264>
 800f084:	4610      	mov	r0, r2
 800f086:	1ac9      	subs	r1, r1, r3
 800f088:	b2a4      	uxth	r4, r4
 800f08a:	fbb1 f3fe 	udiv	r3, r1, lr
 800f08e:	fb0e 1113 	mls	r1, lr, r3, r1
 800f092:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800f096:	fb07 f703 	mul.w	r7, r7, r3
 800f09a:	42a7      	cmp	r7, r4
 800f09c:	d908      	bls.n	800f0b0 <__udivdi3+0x11c>
 800f09e:	1964      	adds	r4, r4, r5
 800f0a0:	f103 32ff 	add.w	r2, r3, #4294967295
 800f0a4:	f080 808f 	bcs.w	800f1c6 <__udivdi3+0x232>
 800f0a8:	42a7      	cmp	r7, r4
 800f0aa:	f240 808c 	bls.w	800f1c6 <__udivdi3+0x232>
 800f0ae:	3b02      	subs	r3, #2
 800f0b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800f0b4:	4631      	mov	r1, r6
 800f0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ba:	2600      	movs	r6, #0
 800f0bc:	4630      	mov	r0, r6
 800f0be:	4631      	mov	r1, r6
 800f0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0c4:	f1c6 0420 	rsb	r4, r6, #32
 800f0c8:	fa22 f504 	lsr.w	r5, r2, r4
 800f0cc:	40b3      	lsls	r3, r6
 800f0ce:	432b      	orrs	r3, r5
 800f0d0:	fa20 fc04 	lsr.w	ip, r0, r4
 800f0d4:	fa01 f706 	lsl.w	r7, r1, r6
 800f0d8:	fa21 f504 	lsr.w	r5, r1, r4
 800f0dc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f0e0:	ea4c 0707 	orr.w	r7, ip, r7
 800f0e4:	fbb5 f8fe 	udiv	r8, r5, lr
 800f0e8:	0c39      	lsrs	r1, r7, #16
 800f0ea:	fb0e 5518 	mls	r5, lr, r8, r5
 800f0ee:	fa1f fc83 	uxth.w	ip, r3
 800f0f2:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800f0f6:	fb0c f108 	mul.w	r1, ip, r8
 800f0fa:	42a9      	cmp	r1, r5
 800f0fc:	fa02 f206 	lsl.w	r2, r2, r6
 800f100:	d904      	bls.n	800f10c <__udivdi3+0x178>
 800f102:	18ed      	adds	r5, r5, r3
 800f104:	f108 34ff 	add.w	r4, r8, #4294967295
 800f108:	d367      	bcc.n	800f1da <__udivdi3+0x246>
 800f10a:	46a0      	mov	r8, r4
 800f10c:	1a6d      	subs	r5, r5, r1
 800f10e:	b2bf      	uxth	r7, r7
 800f110:	fbb5 f4fe 	udiv	r4, r5, lr
 800f114:	fb0e 5514 	mls	r5, lr, r4, r5
 800f118:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800f11c:	fb0c fc04 	mul.w	ip, ip, r4
 800f120:	458c      	cmp	ip, r1
 800f122:	d904      	bls.n	800f12e <__udivdi3+0x19a>
 800f124:	18c9      	adds	r1, r1, r3
 800f126:	f104 35ff 	add.w	r5, r4, #4294967295
 800f12a:	d35c      	bcc.n	800f1e6 <__udivdi3+0x252>
 800f12c:	462c      	mov	r4, r5
 800f12e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800f132:	ebcc 0101 	rsb	r1, ip, r1
 800f136:	fba4 2302 	umull	r2, r3, r4, r2
 800f13a:	4299      	cmp	r1, r3
 800f13c:	d348      	bcc.n	800f1d0 <__udivdi3+0x23c>
 800f13e:	d044      	beq.n	800f1ca <__udivdi3+0x236>
 800f140:	4620      	mov	r0, r4
 800f142:	2600      	movs	r6, #0
 800f144:	e76c      	b.n	800f020 <__udivdi3+0x8c>
 800f146:	f1c8 0420 	rsb	r4, r8, #32
 800f14a:	fa01 f308 	lsl.w	r3, r1, r8
 800f14e:	fa05 f508 	lsl.w	r5, r5, r8
 800f152:	fa20 f704 	lsr.w	r7, r0, r4
 800f156:	40e1      	lsrs	r1, r4
 800f158:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800f15c:	431f      	orrs	r7, r3
 800f15e:	fbb1 f6fe 	udiv	r6, r1, lr
 800f162:	0c3a      	lsrs	r2, r7, #16
 800f164:	fb0e 1116 	mls	r1, lr, r6, r1
 800f168:	fa1f fc85 	uxth.w	ip, r5
 800f16c:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 800f170:	fb0c f206 	mul.w	r2, ip, r6
 800f174:	429a      	cmp	r2, r3
 800f176:	fa00 f408 	lsl.w	r4, r0, r8
 800f17a:	d907      	bls.n	800f18c <__udivdi3+0x1f8>
 800f17c:	195b      	adds	r3, r3, r5
 800f17e:	f106 31ff 	add.w	r1, r6, #4294967295
 800f182:	d237      	bcs.n	800f1f4 <__udivdi3+0x260>
 800f184:	429a      	cmp	r2, r3
 800f186:	d935      	bls.n	800f1f4 <__udivdi3+0x260>
 800f188:	3e02      	subs	r6, #2
 800f18a:	442b      	add	r3, r5
 800f18c:	1a9b      	subs	r3, r3, r2
 800f18e:	b2bf      	uxth	r7, r7
 800f190:	fbb3 f0fe 	udiv	r0, r3, lr
 800f194:	fb0e 3310 	mls	r3, lr, r0, r3
 800f198:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800f19c:	fb0c f100 	mul.w	r1, ip, r0
 800f1a0:	4299      	cmp	r1, r3
 800f1a2:	d907      	bls.n	800f1b4 <__udivdi3+0x220>
 800f1a4:	195b      	adds	r3, r3, r5
 800f1a6:	f100 32ff 	add.w	r2, r0, #4294967295
 800f1aa:	d221      	bcs.n	800f1f0 <__udivdi3+0x25c>
 800f1ac:	4299      	cmp	r1, r3
 800f1ae:	d91f      	bls.n	800f1f0 <__udivdi3+0x25c>
 800f1b0:	3802      	subs	r0, #2
 800f1b2:	442b      	add	r3, r5
 800f1b4:	1a5a      	subs	r2, r3, r1
 800f1b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800f1ba:	4667      	mov	r7, ip
 800f1bc:	e750      	b.n	800f060 <__udivdi3+0xcc>
 800f1be:	4610      	mov	r0, r2
 800f1c0:	e716      	b.n	800eff0 <__udivdi3+0x5c>
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	e729      	b.n	800f01a <__udivdi3+0x86>
 800f1c6:	4613      	mov	r3, r2
 800f1c8:	e772      	b.n	800f0b0 <__udivdi3+0x11c>
 800f1ca:	40b0      	lsls	r0, r6
 800f1cc:	4290      	cmp	r0, r2
 800f1ce:	d2b7      	bcs.n	800f140 <__udivdi3+0x1ac>
 800f1d0:	1e60      	subs	r0, r4, #1
 800f1d2:	2600      	movs	r6, #0
 800f1d4:	e724      	b.n	800f020 <__udivdi3+0x8c>
 800f1d6:	4630      	mov	r0, r6
 800f1d8:	e722      	b.n	800f020 <__udivdi3+0x8c>
 800f1da:	42a9      	cmp	r1, r5
 800f1dc:	d995      	bls.n	800f10a <__udivdi3+0x176>
 800f1de:	f1a8 0802 	sub.w	r8, r8, #2
 800f1e2:	441d      	add	r5, r3
 800f1e4:	e792      	b.n	800f10c <__udivdi3+0x178>
 800f1e6:	458c      	cmp	ip, r1
 800f1e8:	d9a0      	bls.n	800f12c <__udivdi3+0x198>
 800f1ea:	3c02      	subs	r4, #2
 800f1ec:	4419      	add	r1, r3
 800f1ee:	e79e      	b.n	800f12e <__udivdi3+0x19a>
 800f1f0:	4610      	mov	r0, r2
 800f1f2:	e7df      	b.n	800f1b4 <__udivdi3+0x220>
 800f1f4:	460e      	mov	r6, r1
 800f1f6:	e7c9      	b.n	800f18c <__udivdi3+0x1f8>
 800f1f8:	3802      	subs	r0, #2
 800f1fa:	4429      	add	r1, r5
 800f1fc:	e743      	b.n	800f086 <__udivdi3+0xf2>
 800f1fe:	bf00      	nop

0800f200 <__errno>:
 800f200:	4b01      	ldr	r3, [pc, #4]	; (800f208 <__errno+0x8>)
 800f202:	6818      	ldr	r0, [r3, #0]
 800f204:	4770      	bx	lr
 800f206:	bf00      	nop
 800f208:	1ffe8cb0 	.word	0x1ffe8cb0

0800f20c <__libc_init_array>:
 800f20c:	b570      	push	{r4, r5, r6, lr}
 800f20e:	4e0f      	ldr	r6, [pc, #60]	; (800f24c <__libc_init_array+0x40>)
 800f210:	4d0f      	ldr	r5, [pc, #60]	; (800f250 <__libc_init_array+0x44>)
 800f212:	1b76      	subs	r6, r6, r5
 800f214:	10b6      	asrs	r6, r6, #2
 800f216:	bf18      	it	ne
 800f218:	2400      	movne	r4, #0
 800f21a:	d005      	beq.n	800f228 <__libc_init_array+0x1c>
 800f21c:	3401      	adds	r4, #1
 800f21e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f222:	4798      	blx	r3
 800f224:	42a6      	cmp	r6, r4
 800f226:	d1f9      	bne.n	800f21c <__libc_init_array+0x10>
 800f228:	4e0a      	ldr	r6, [pc, #40]	; (800f254 <__libc_init_array+0x48>)
 800f22a:	4d0b      	ldr	r5, [pc, #44]	; (800f258 <__libc_init_array+0x4c>)
 800f22c:	1b76      	subs	r6, r6, r5
 800f22e:	f7f5 fda7 	bl	8004d80 <_init>
 800f232:	10b6      	asrs	r6, r6, #2
 800f234:	bf18      	it	ne
 800f236:	2400      	movne	r4, #0
 800f238:	d006      	beq.n	800f248 <__libc_init_array+0x3c>
 800f23a:	3401      	adds	r4, #1
 800f23c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f240:	4798      	blx	r3
 800f242:	42a6      	cmp	r6, r4
 800f244:	d1f9      	bne.n	800f23a <__libc_init_array+0x2e>
 800f246:	bd70      	pop	{r4, r5, r6, pc}
 800f248:	bd70      	pop	{r4, r5, r6, pc}
 800f24a:	bf00      	nop
 800f24c:	1ffe9124 	.word	0x1ffe9124
 800f250:	1ffe9124 	.word	0x1ffe9124
 800f254:	1ffe9124 	.word	0x1ffe9124
 800f258:	1ffe9124 	.word	0x1ffe9124

0800f25c <memcmp>:
 800f25c:	2a03      	cmp	r2, #3
 800f25e:	b470      	push	{r4, r5, r6}
 800f260:	d926      	bls.n	800f2b0 <memcmp+0x54>
 800f262:	ea40 0301 	orr.w	r3, r0, r1
 800f266:	079b      	lsls	r3, r3, #30
 800f268:	d011      	beq.n	800f28e <memcmp+0x32>
 800f26a:	7804      	ldrb	r4, [r0, #0]
 800f26c:	780d      	ldrb	r5, [r1, #0]
 800f26e:	42ac      	cmp	r4, r5
 800f270:	d122      	bne.n	800f2b8 <memcmp+0x5c>
 800f272:	4402      	add	r2, r0
 800f274:	1c43      	adds	r3, r0, #1
 800f276:	e005      	b.n	800f284 <memcmp+0x28>
 800f278:	f813 4b01 	ldrb.w	r4, [r3], #1
 800f27c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800f280:	42ac      	cmp	r4, r5
 800f282:	d119      	bne.n	800f2b8 <memcmp+0x5c>
 800f284:	4293      	cmp	r3, r2
 800f286:	d1f7      	bne.n	800f278 <memcmp+0x1c>
 800f288:	2000      	movs	r0, #0
 800f28a:	bc70      	pop	{r4, r5, r6}
 800f28c:	4770      	bx	lr
 800f28e:	460c      	mov	r4, r1
 800f290:	4603      	mov	r3, r0
 800f292:	681e      	ldr	r6, [r3, #0]
 800f294:	6825      	ldr	r5, [r4, #0]
 800f296:	42ae      	cmp	r6, r5
 800f298:	4618      	mov	r0, r3
 800f29a:	4621      	mov	r1, r4
 800f29c:	f103 0304 	add.w	r3, r3, #4
 800f2a0:	f104 0404 	add.w	r4, r4, #4
 800f2a4:	d104      	bne.n	800f2b0 <memcmp+0x54>
 800f2a6:	3a04      	subs	r2, #4
 800f2a8:	2a03      	cmp	r2, #3
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	4621      	mov	r1, r4
 800f2ae:	d8f0      	bhi.n	800f292 <memcmp+0x36>
 800f2b0:	2a00      	cmp	r2, #0
 800f2b2:	d1da      	bne.n	800f26a <memcmp+0xe>
 800f2b4:	4610      	mov	r0, r2
 800f2b6:	e7e8      	b.n	800f28a <memcmp+0x2e>
 800f2b8:	1b60      	subs	r0, r4, r5
 800f2ba:	bc70      	pop	{r4, r5, r6}
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop

0800f2c0 <memmove>:
 800f2c0:	4288      	cmp	r0, r1
 800f2c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2c4:	d90d      	bls.n	800f2e2 <memmove+0x22>
 800f2c6:	188b      	adds	r3, r1, r2
 800f2c8:	4298      	cmp	r0, r3
 800f2ca:	d20a      	bcs.n	800f2e2 <memmove+0x22>
 800f2cc:	1881      	adds	r1, r0, r2
 800f2ce:	2a00      	cmp	r2, #0
 800f2d0:	d054      	beq.n	800f37c <memmove+0xbc>
 800f2d2:	1a9a      	subs	r2, r3, r2
 800f2d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d1f9      	bne.n	800f2d4 <memmove+0x14>
 800f2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2e2:	2a0f      	cmp	r2, #15
 800f2e4:	d948      	bls.n	800f378 <memmove+0xb8>
 800f2e6:	ea40 0301 	orr.w	r3, r0, r1
 800f2ea:	079b      	lsls	r3, r3, #30
 800f2ec:	d147      	bne.n	800f37e <memmove+0xbe>
 800f2ee:	f100 0410 	add.w	r4, r0, #16
 800f2f2:	f101 0310 	add.w	r3, r1, #16
 800f2f6:	4615      	mov	r5, r2
 800f2f8:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800f2fc:	f844 6c10 	str.w	r6, [r4, #-16]
 800f300:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800f304:	f844 6c0c 	str.w	r6, [r4, #-12]
 800f308:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800f30c:	f844 6c08 	str.w	r6, [r4, #-8]
 800f310:	3d10      	subs	r5, #16
 800f312:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800f316:	f844 6c04 	str.w	r6, [r4, #-4]
 800f31a:	2d0f      	cmp	r5, #15
 800f31c:	f103 0310 	add.w	r3, r3, #16
 800f320:	f104 0410 	add.w	r4, r4, #16
 800f324:	d8e8      	bhi.n	800f2f8 <memmove+0x38>
 800f326:	f1a2 0310 	sub.w	r3, r2, #16
 800f32a:	f023 030f 	bic.w	r3, r3, #15
 800f32e:	f002 0e0f 	and.w	lr, r2, #15
 800f332:	3310      	adds	r3, #16
 800f334:	f1be 0f03 	cmp.w	lr, #3
 800f338:	4419      	add	r1, r3
 800f33a:	4403      	add	r3, r0
 800f33c:	d921      	bls.n	800f382 <memmove+0xc2>
 800f33e:	1f1e      	subs	r6, r3, #4
 800f340:	460d      	mov	r5, r1
 800f342:	4674      	mov	r4, lr
 800f344:	3c04      	subs	r4, #4
 800f346:	f855 7b04 	ldr.w	r7, [r5], #4
 800f34a:	f846 7f04 	str.w	r7, [r6, #4]!
 800f34e:	2c03      	cmp	r4, #3
 800f350:	d8f8      	bhi.n	800f344 <memmove+0x84>
 800f352:	f1ae 0404 	sub.w	r4, lr, #4
 800f356:	f024 0403 	bic.w	r4, r4, #3
 800f35a:	3404      	adds	r4, #4
 800f35c:	4423      	add	r3, r4
 800f35e:	4421      	add	r1, r4
 800f360:	f002 0203 	and.w	r2, r2, #3
 800f364:	b152      	cbz	r2, 800f37c <memmove+0xbc>
 800f366:	3b01      	subs	r3, #1
 800f368:	440a      	add	r2, r1
 800f36a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f36e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f372:	4291      	cmp	r1, r2
 800f374:	d1f9      	bne.n	800f36a <memmove+0xaa>
 800f376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f378:	4603      	mov	r3, r0
 800f37a:	e7f3      	b.n	800f364 <memmove+0xa4>
 800f37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f37e:	4603      	mov	r3, r0
 800f380:	e7f1      	b.n	800f366 <memmove+0xa6>
 800f382:	4672      	mov	r2, lr
 800f384:	e7ee      	b.n	800f364 <memmove+0xa4>
 800f386:	bf00      	nop

0800f388 <memset>:
 800f388:	b470      	push	{r4, r5, r6}
 800f38a:	0784      	lsls	r4, r0, #30
 800f38c:	d046      	beq.n	800f41c <memset+0x94>
 800f38e:	1e54      	subs	r4, r2, #1
 800f390:	2a00      	cmp	r2, #0
 800f392:	d041      	beq.n	800f418 <memset+0x90>
 800f394:	b2cd      	uxtb	r5, r1
 800f396:	4603      	mov	r3, r0
 800f398:	e002      	b.n	800f3a0 <memset+0x18>
 800f39a:	1e62      	subs	r2, r4, #1
 800f39c:	b3e4      	cbz	r4, 800f418 <memset+0x90>
 800f39e:	4614      	mov	r4, r2
 800f3a0:	f803 5b01 	strb.w	r5, [r3], #1
 800f3a4:	079a      	lsls	r2, r3, #30
 800f3a6:	d1f8      	bne.n	800f39a <memset+0x12>
 800f3a8:	2c03      	cmp	r4, #3
 800f3aa:	d92e      	bls.n	800f40a <memset+0x82>
 800f3ac:	b2cd      	uxtb	r5, r1
 800f3ae:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800f3b2:	2c0f      	cmp	r4, #15
 800f3b4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800f3b8:	d919      	bls.n	800f3ee <memset+0x66>
 800f3ba:	f103 0210 	add.w	r2, r3, #16
 800f3be:	4626      	mov	r6, r4
 800f3c0:	3e10      	subs	r6, #16
 800f3c2:	2e0f      	cmp	r6, #15
 800f3c4:	f842 5c10 	str.w	r5, [r2, #-16]
 800f3c8:	f842 5c0c 	str.w	r5, [r2, #-12]
 800f3cc:	f842 5c08 	str.w	r5, [r2, #-8]
 800f3d0:	f842 5c04 	str.w	r5, [r2, #-4]
 800f3d4:	f102 0210 	add.w	r2, r2, #16
 800f3d8:	d8f2      	bhi.n	800f3c0 <memset+0x38>
 800f3da:	f1a4 0210 	sub.w	r2, r4, #16
 800f3de:	f022 020f 	bic.w	r2, r2, #15
 800f3e2:	f004 040f 	and.w	r4, r4, #15
 800f3e6:	3210      	adds	r2, #16
 800f3e8:	2c03      	cmp	r4, #3
 800f3ea:	4413      	add	r3, r2
 800f3ec:	d90d      	bls.n	800f40a <memset+0x82>
 800f3ee:	461e      	mov	r6, r3
 800f3f0:	4622      	mov	r2, r4
 800f3f2:	3a04      	subs	r2, #4
 800f3f4:	2a03      	cmp	r2, #3
 800f3f6:	f846 5b04 	str.w	r5, [r6], #4
 800f3fa:	d8fa      	bhi.n	800f3f2 <memset+0x6a>
 800f3fc:	1f22      	subs	r2, r4, #4
 800f3fe:	f022 0203 	bic.w	r2, r2, #3
 800f402:	3204      	adds	r2, #4
 800f404:	4413      	add	r3, r2
 800f406:	f004 0403 	and.w	r4, r4, #3
 800f40a:	b12c      	cbz	r4, 800f418 <memset+0x90>
 800f40c:	b2c9      	uxtb	r1, r1
 800f40e:	441c      	add	r4, r3
 800f410:	f803 1b01 	strb.w	r1, [r3], #1
 800f414:	42a3      	cmp	r3, r4
 800f416:	d1fb      	bne.n	800f410 <memset+0x88>
 800f418:	bc70      	pop	{r4, r5, r6}
 800f41a:	4770      	bx	lr
 800f41c:	4614      	mov	r4, r2
 800f41e:	4603      	mov	r3, r0
 800f420:	e7c2      	b.n	800f3a8 <memset+0x20>
 800f422:	bf00      	nop

0800f424 <printf>:
 800f424:	b40f      	push	{r0, r1, r2, r3}
 800f426:	b500      	push	{lr}
 800f428:	4907      	ldr	r1, [pc, #28]	; (800f448 <printf+0x24>)
 800f42a:	b083      	sub	sp, #12
 800f42c:	ab04      	add	r3, sp, #16
 800f42e:	6808      	ldr	r0, [r1, #0]
 800f430:	f853 2b04 	ldr.w	r2, [r3], #4
 800f434:	6881      	ldr	r1, [r0, #8]
 800f436:	9301      	str	r3, [sp, #4]
 800f438:	f000 f9c6 	bl	800f7c8 <_vfprintf_r>
 800f43c:	b003      	add	sp, #12
 800f43e:	f85d eb04 	ldr.w	lr, [sp], #4
 800f442:	b004      	add	sp, #16
 800f444:	4770      	bx	lr
 800f446:	bf00      	nop
 800f448:	1ffe8cb0 	.word	0x1ffe8cb0

0800f44c <_puts_r>:
 800f44c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f44e:	4604      	mov	r4, r0
 800f450:	b089      	sub	sp, #36	; 0x24
 800f452:	4608      	mov	r0, r1
 800f454:	460d      	mov	r5, r1
 800f456:	f000 f84f 	bl	800f4f8 <strlen>
 800f45a:	68a3      	ldr	r3, [r4, #8]
 800f45c:	4f11      	ldr	r7, [pc, #68]	; (800f4a4 <_puts_r+0x58>)
 800f45e:	899a      	ldrh	r2, [r3, #12]
 800f460:	9504      	str	r5, [sp, #16]
 800f462:	2102      	movs	r1, #2
 800f464:	f100 0e01 	add.w	lr, r0, #1
 800f468:	2601      	movs	r6, #1
 800f46a:	ad04      	add	r5, sp, #16
 800f46c:	9102      	str	r1, [sp, #8]
 800f46e:	0491      	lsls	r1, r2, #18
 800f470:	9005      	str	r0, [sp, #20]
 800f472:	f8cd e00c 	str.w	lr, [sp, #12]
 800f476:	9706      	str	r7, [sp, #24]
 800f478:	9607      	str	r6, [sp, #28]
 800f47a:	9501      	str	r5, [sp, #4]
 800f47c:	d406      	bmi.n	800f48c <_puts_r+0x40>
 800f47e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800f480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f484:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800f488:	819a      	strh	r2, [r3, #12]
 800f48a:	6659      	str	r1, [r3, #100]	; 0x64
 800f48c:	4620      	mov	r0, r4
 800f48e:	4619      	mov	r1, r3
 800f490:	aa01      	add	r2, sp, #4
 800f492:	f002 fe97 	bl	80121c4 <__sfvwrite_r>
 800f496:	2800      	cmp	r0, #0
 800f498:	bf14      	ite	ne
 800f49a:	f04f 30ff 	movne.w	r0, #4294967295
 800f49e:	200a      	moveq	r0, #10
 800f4a0:	b009      	add	sp, #36	; 0x24
 800f4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4a4:	080147e4 	.word	0x080147e4

0800f4a8 <puts>:
 800f4a8:	4b02      	ldr	r3, [pc, #8]	; (800f4b4 <puts+0xc>)
 800f4aa:	4601      	mov	r1, r0
 800f4ac:	6818      	ldr	r0, [r3, #0]
 800f4ae:	f7ff bfcd 	b.w	800f44c <_puts_r>
 800f4b2:	bf00      	nop
 800f4b4:	1ffe8cb0 	.word	0x1ffe8cb0

0800f4b8 <rand>:
 800f4b8:	b410      	push	{r4}
 800f4ba:	4b0c      	ldr	r3, [pc, #48]	; (800f4ec <rand+0x34>)
 800f4bc:	4c0c      	ldr	r4, [pc, #48]	; (800f4f0 <rand+0x38>)
 800f4be:	6819      	ldr	r1, [r3, #0]
 800f4c0:	4a0c      	ldr	r2, [pc, #48]	; (800f4f4 <rand+0x3c>)
 800f4c2:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
 800f4c6:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
 800f4ca:	fb04 f403 	mul.w	r4, r4, r3
 800f4ce:	fb02 4000 	mla	r0, r2, r0, r4
 800f4d2:	fba3 2302 	umull	r2, r3, r3, r2
 800f4d6:	4403      	add	r3, r0
 800f4d8:	3201      	adds	r2, #1
 800f4da:	f143 0300 	adc.w	r3, r3, #0
 800f4de:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 800f4e2:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800f4e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4ea:	4770      	bx	lr
 800f4ec:	1ffe8cb0 	.word	0x1ffe8cb0
 800f4f0:	5851f42d 	.word	0x5851f42d
 800f4f4:	4c957f2d 	.word	0x4c957f2d

0800f4f8 <strlen>:
 800f4f8:	f020 0103 	bic.w	r1, r0, #3
 800f4fc:	f010 0003 	ands.w	r0, r0, #3
 800f500:	f1c0 0000 	rsb	r0, r0, #0
 800f504:	f851 3b04 	ldr.w	r3, [r1], #4
 800f508:	f100 0c04 	add.w	ip, r0, #4
 800f50c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800f510:	f06f 0200 	mvn.w	r2, #0
 800f514:	bf1c      	itt	ne
 800f516:	fa22 f20c 	lsrne.w	r2, r2, ip
 800f51a:	4313      	orrne	r3, r2
 800f51c:	f04f 0c01 	mov.w	ip, #1
 800f520:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800f524:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800f528:	eba3 020c 	sub.w	r2, r3, ip
 800f52c:	ea22 0203 	bic.w	r2, r2, r3
 800f530:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800f534:	bf04      	itt	eq
 800f536:	f851 3b04 	ldreq.w	r3, [r1], #4
 800f53a:	3004      	addeq	r0, #4
 800f53c:	d0f4      	beq.n	800f528 <strlen+0x30>
 800f53e:	f1c2 0100 	rsb	r1, r2, #0
 800f542:	ea02 0201 	and.w	r2, r2, r1
 800f546:	fab2 f282 	clz	r2, r2
 800f54a:	f1c2 021f 	rsb	r2, r2, #31
 800f54e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800f552:	4770      	bx	lr

0800f554 <_strtol_r>:
 800f554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f558:	4c44      	ldr	r4, [pc, #272]	; (800f66c <_strtol_r+0x118>)
 800f55a:	4683      	mov	fp, r0
 800f55c:	460e      	mov	r6, r1
 800f55e:	f8d4 e000 	ldr.w	lr, [r4]
 800f562:	e000      	b.n	800f566 <_strtol_r+0x12>
 800f564:	4626      	mov	r6, r4
 800f566:	4634      	mov	r4, r6
 800f568:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f56c:	eb0e 0005 	add.w	r0, lr, r5
 800f570:	7840      	ldrb	r0, [r0, #1]
 800f572:	f000 0008 	and.w	r0, r0, #8
 800f576:	f000 08ff 	and.w	r8, r0, #255	; 0xff
 800f57a:	2800      	cmp	r0, #0
 800f57c:	d1f2      	bne.n	800f564 <_strtol_r+0x10>
 800f57e:	2d2d      	cmp	r5, #45	; 0x2d
 800f580:	d04b      	beq.n	800f61a <_strtol_r+0xc6>
 800f582:	2d2b      	cmp	r5, #43	; 0x2b
 800f584:	bf04      	itt	eq
 800f586:	7875      	ldrbeq	r5, [r6, #1]
 800f588:	1cb4      	addeq	r4, r6, #2
 800f58a:	b11b      	cbz	r3, 800f594 <_strtol_r+0x40>
 800f58c:	2b10      	cmp	r3, #16
 800f58e:	d060      	beq.n	800f652 <_strtol_r+0xfe>
 800f590:	469a      	mov	sl, r3
 800f592:	e003      	b.n	800f59c <_strtol_r+0x48>
 800f594:	2d30      	cmp	r5, #48	; 0x30
 800f596:	d054      	beq.n	800f642 <_strtol_r+0xee>
 800f598:	230a      	movs	r3, #10
 800f59a:	469a      	mov	sl, r3
 800f59c:	f1b8 0f00 	cmp.w	r8, #0
 800f5a0:	bf14      	ite	ne
 800f5a2:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 800f5a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800f5aa:	2700      	movs	r7, #0
 800f5ac:	fbb0 f9fa 	udiv	r9, r0, sl
 800f5b0:	46bc      	mov	ip, r7
 800f5b2:	fb0a 0019 	mls	r0, sl, r9, r0
 800f5b6:	e00c      	b.n	800f5d2 <_strtol_r+0x7e>
 800f5b8:	3d30      	subs	r5, #48	; 0x30
 800f5ba:	42ab      	cmp	r3, r5
 800f5bc:	dd19      	ble.n	800f5f2 <_strtol_r+0x9e>
 800f5be:	1c7e      	adds	r6, r7, #1
 800f5c0:	d005      	beq.n	800f5ce <_strtol_r+0x7a>
 800f5c2:	45cc      	cmp	ip, r9
 800f5c4:	d824      	bhi.n	800f610 <_strtol_r+0xbc>
 800f5c6:	d021      	beq.n	800f60c <_strtol_r+0xb8>
 800f5c8:	fb0a 5c0c 	mla	ip, sl, ip, r5
 800f5cc:	2701      	movs	r7, #1
 800f5ce:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f5d2:	eb0e 0605 	add.w	r6, lr, r5
 800f5d6:	7876      	ldrb	r6, [r6, #1]
 800f5d8:	f016 0f04 	tst.w	r6, #4
 800f5dc:	d1ec      	bne.n	800f5b8 <_strtol_r+0x64>
 800f5de:	f016 0603 	ands.w	r6, r6, #3
 800f5e2:	d006      	beq.n	800f5f2 <_strtol_r+0x9e>
 800f5e4:	2e01      	cmp	r6, #1
 800f5e6:	bf0c      	ite	eq
 800f5e8:	2637      	moveq	r6, #55	; 0x37
 800f5ea:	2657      	movne	r6, #87	; 0x57
 800f5ec:	1bad      	subs	r5, r5, r6
 800f5ee:	42ab      	cmp	r3, r5
 800f5f0:	dce5      	bgt.n	800f5be <_strtol_r+0x6a>
 800f5f2:	1c7b      	adds	r3, r7, #1
 800f5f4:	d016      	beq.n	800f624 <_strtol_r+0xd0>
 800f5f6:	f1c8 0000 	rsb	r0, r8, #0
 800f5fa:	ea8c 0000 	eor.w	r0, ip, r0
 800f5fe:	4440      	add	r0, r8
 800f600:	b14a      	cbz	r2, 800f616 <_strtol_r+0xc2>
 800f602:	b107      	cbz	r7, 800f606 <_strtol_r+0xb2>
 800f604:	1e61      	subs	r1, r4, #1
 800f606:	6011      	str	r1, [r2, #0]
 800f608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f60c:	4285      	cmp	r5, r0
 800f60e:	dddb      	ble.n	800f5c8 <_strtol_r+0x74>
 800f610:	f04f 37ff 	mov.w	r7, #4294967295
 800f614:	e7db      	b.n	800f5ce <_strtol_r+0x7a>
 800f616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61a:	1cb4      	adds	r4, r6, #2
 800f61c:	7875      	ldrb	r5, [r6, #1]
 800f61e:	f04f 0801 	mov.w	r8, #1
 800f622:	e7b2      	b.n	800f58a <_strtol_r+0x36>
 800f624:	f1b8 0f00 	cmp.w	r8, #0
 800f628:	f04f 0322 	mov.w	r3, #34	; 0x22
 800f62c:	bf14      	ite	ne
 800f62e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 800f632:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800f636:	f8cb 3000 	str.w	r3, [fp]
 800f63a:	2a00      	cmp	r2, #0
 800f63c:	d1e2      	bne.n	800f604 <_strtol_r+0xb0>
 800f63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f642:	7823      	ldrb	r3, [r4, #0]
 800f644:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f648:	2b58      	cmp	r3, #88	; 0x58
 800f64a:	d009      	beq.n	800f660 <_strtol_r+0x10c>
 800f64c:	2308      	movs	r3, #8
 800f64e:	469a      	mov	sl, r3
 800f650:	e7a4      	b.n	800f59c <_strtol_r+0x48>
 800f652:	2d30      	cmp	r5, #48	; 0x30
 800f654:	d19c      	bne.n	800f590 <_strtol_r+0x3c>
 800f656:	7820      	ldrb	r0, [r4, #0]
 800f658:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f65c:	2858      	cmp	r0, #88	; 0x58
 800f65e:	d197      	bne.n	800f590 <_strtol_r+0x3c>
 800f660:	f04f 0a10 	mov.w	sl, #16
 800f664:	7865      	ldrb	r5, [r4, #1]
 800f666:	4653      	mov	r3, sl
 800f668:	3402      	adds	r4, #2
 800f66a:	e797      	b.n	800f59c <_strtol_r+0x48>
 800f66c:	1ffe8880 	.word	0x1ffe8880

0800f670 <strtol>:
 800f670:	b430      	push	{r4, r5}
 800f672:	4c04      	ldr	r4, [pc, #16]	; (800f684 <strtol+0x14>)
 800f674:	460d      	mov	r5, r1
 800f676:	4613      	mov	r3, r2
 800f678:	4601      	mov	r1, r0
 800f67a:	462a      	mov	r2, r5
 800f67c:	6820      	ldr	r0, [r4, #0]
 800f67e:	bc30      	pop	{r4, r5}
 800f680:	f7ff bf68 	b.w	800f554 <_strtol_r>
 800f684:	1ffe8cb0 	.word	0x1ffe8cb0

0800f688 <_strtoul_r>:
 800f688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f68c:	4c46      	ldr	r4, [pc, #280]	; (800f7a8 <_strtoul_r+0x120>)
 800f68e:	460f      	mov	r7, r1
 800f690:	f8d4 e000 	ldr.w	lr, [r4]
 800f694:	e000      	b.n	800f698 <_strtoul_r+0x10>
 800f696:	4627      	mov	r7, r4
 800f698:	463c      	mov	r4, r7
 800f69a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f69e:	eb0e 0605 	add.w	r6, lr, r5
 800f6a2:	7876      	ldrb	r6, [r6, #1]
 800f6a4:	f006 0608 	and.w	r6, r6, #8
 800f6a8:	f006 08ff 	and.w	r8, r6, #255	; 0xff
 800f6ac:	2e00      	cmp	r6, #0
 800f6ae:	d1f2      	bne.n	800f696 <_strtoul_r+0xe>
 800f6b0:	2d2d      	cmp	r5, #45	; 0x2d
 800f6b2:	d051      	beq.n	800f758 <_strtoul_r+0xd0>
 800f6b4:	2d2b      	cmp	r5, #43	; 0x2b
 800f6b6:	bf04      	itt	eq
 800f6b8:	787d      	ldrbeq	r5, [r7, #1]
 800f6ba:	1cbc      	addeq	r4, r7, #2
 800f6bc:	b15b      	cbz	r3, 800f6d6 <_strtoul_r+0x4e>
 800f6be:	2b10      	cmp	r3, #16
 800f6c0:	d05b      	beq.n	800f77a <_strtoul_r+0xf2>
 800f6c2:	f04f 39ff 	mov.w	r9, #4294967295
 800f6c6:	fbb9 f9f3 	udiv	r9, r9, r3
 800f6ca:	fb03 fb09 	mul.w	fp, r3, r9
 800f6ce:	ea6f 0b0b 	mvn.w	fp, fp
 800f6d2:	469a      	mov	sl, r3
 800f6d4:	e007      	b.n	800f6e6 <_strtoul_r+0x5e>
 800f6d6:	2d30      	cmp	r5, #48	; 0x30
 800f6d8:	d043      	beq.n	800f762 <_strtoul_r+0xda>
 800f6da:	230a      	movs	r3, #10
 800f6dc:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800f7ac <_strtoul_r+0x124>
 800f6e0:	469a      	mov	sl, r3
 800f6e2:	f04f 0b05 	mov.w	fp, #5
 800f6e6:	2700      	movs	r7, #0
 800f6e8:	46bc      	mov	ip, r7
 800f6ea:	e00c      	b.n	800f706 <_strtoul_r+0x7e>
 800f6ec:	3d30      	subs	r5, #48	; 0x30
 800f6ee:	42ab      	cmp	r3, r5
 800f6f0:	dd19      	ble.n	800f726 <_strtoul_r+0x9e>
 800f6f2:	1c7e      	adds	r6, r7, #1
 800f6f4:	d005      	beq.n	800f702 <_strtoul_r+0x7a>
 800f6f6:	45cc      	cmp	ip, r9
 800f6f8:	d824      	bhi.n	800f744 <_strtoul_r+0xbc>
 800f6fa:	d021      	beq.n	800f740 <_strtoul_r+0xb8>
 800f6fc:	fb0a 5c0c 	mla	ip, sl, ip, r5
 800f700:	2701      	movs	r7, #1
 800f702:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f706:	eb0e 0605 	add.w	r6, lr, r5
 800f70a:	7876      	ldrb	r6, [r6, #1]
 800f70c:	f016 0f04 	tst.w	r6, #4
 800f710:	d1ec      	bne.n	800f6ec <_strtoul_r+0x64>
 800f712:	f016 0603 	ands.w	r6, r6, #3
 800f716:	d006      	beq.n	800f726 <_strtoul_r+0x9e>
 800f718:	2e01      	cmp	r6, #1
 800f71a:	bf0c      	ite	eq
 800f71c:	2637      	moveq	r6, #55	; 0x37
 800f71e:	2657      	movne	r6, #87	; 0x57
 800f720:	1bad      	subs	r5, r5, r6
 800f722:	42ab      	cmp	r3, r5
 800f724:	dce5      	bgt.n	800f6f2 <_strtoul_r+0x6a>
 800f726:	2f00      	cmp	r7, #0
 800f728:	db11      	blt.n	800f74e <_strtoul_r+0xc6>
 800f72a:	f1c8 0000 	rsb	r0, r8, #0
 800f72e:	ea8c 0000 	eor.w	r0, ip, r0
 800f732:	4440      	add	r0, r8
 800f734:	b14a      	cbz	r2, 800f74a <_strtoul_r+0xc2>
 800f736:	b107      	cbz	r7, 800f73a <_strtoul_r+0xb2>
 800f738:	1e61      	subs	r1, r4, #1
 800f73a:	6011      	str	r1, [r2, #0]
 800f73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f740:	455d      	cmp	r5, fp
 800f742:	dddb      	ble.n	800f6fc <_strtoul_r+0x74>
 800f744:	f04f 37ff 	mov.w	r7, #4294967295
 800f748:	e7db      	b.n	800f702 <_strtoul_r+0x7a>
 800f74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f74e:	2322      	movs	r3, #34	; 0x22
 800f750:	6003      	str	r3, [r0, #0]
 800f752:	f04f 30ff 	mov.w	r0, #4294967295
 800f756:	e7ed      	b.n	800f734 <_strtoul_r+0xac>
 800f758:	1cbc      	adds	r4, r7, #2
 800f75a:	787d      	ldrb	r5, [r7, #1]
 800f75c:	f04f 0801 	mov.w	r8, #1
 800f760:	e7ac      	b.n	800f6bc <_strtoul_r+0x34>
 800f762:	7823      	ldrb	r3, [r4, #0]
 800f764:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f768:	2b58      	cmp	r3, #88	; 0x58
 800f76a:	d013      	beq.n	800f794 <_strtoul_r+0x10c>
 800f76c:	2308      	movs	r3, #8
 800f76e:	469a      	mov	sl, r3
 800f770:	f04f 0b07 	mov.w	fp, #7
 800f774:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 800f778:	e7b5      	b.n	800f6e6 <_strtoul_r+0x5e>
 800f77a:	2d30      	cmp	r5, #48	; 0x30
 800f77c:	d005      	beq.n	800f78a <_strtoul_r+0x102>
 800f77e:	f04f 0b0f 	mov.w	fp, #15
 800f782:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 800f786:	469a      	mov	sl, r3
 800f788:	e7ad      	b.n	800f6e6 <_strtoul_r+0x5e>
 800f78a:	7826      	ldrb	r6, [r4, #0]
 800f78c:	f006 06df 	and.w	r6, r6, #223	; 0xdf
 800f790:	2e58      	cmp	r6, #88	; 0x58
 800f792:	d1f4      	bne.n	800f77e <_strtoul_r+0xf6>
 800f794:	f04f 0a10 	mov.w	sl, #16
 800f798:	7865      	ldrb	r5, [r4, #1]
 800f79a:	4653      	mov	r3, sl
 800f79c:	f04f 0b0f 	mov.w	fp, #15
 800f7a0:	3402      	adds	r4, #2
 800f7a2:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 800f7a6:	e79e      	b.n	800f6e6 <_strtoul_r+0x5e>
 800f7a8:	1ffe8880 	.word	0x1ffe8880
 800f7ac:	19999999 	.word	0x19999999

0800f7b0 <strtoul>:
 800f7b0:	b430      	push	{r4, r5}
 800f7b2:	4c04      	ldr	r4, [pc, #16]	; (800f7c4 <strtoul+0x14>)
 800f7b4:	460d      	mov	r5, r1
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	4601      	mov	r1, r0
 800f7ba:	462a      	mov	r2, r5
 800f7bc:	6820      	ldr	r0, [r4, #0]
 800f7be:	bc30      	pop	{r4, r5}
 800f7c0:	f7ff bf62 	b.w	800f688 <_strtoul_r>
 800f7c4:	1ffe8cb0 	.word	0x1ffe8cb0

0800f7c8 <_vfprintf_r>:
 800f7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7cc:	b0c1      	sub	sp, #260	; 0x104
 800f7ce:	461c      	mov	r4, r3
 800f7d0:	4689      	mov	r9, r1
 800f7d2:	9208      	str	r2, [sp, #32]
 800f7d4:	4607      	mov	r7, r0
 800f7d6:	f002 feb5 	bl	8012544 <_localeconv_r>
 800f7da:	6803      	ldr	r3, [r0, #0]
 800f7dc:	9315      	str	r3, [sp, #84]	; 0x54
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7ff fe8a 	bl	800f4f8 <strlen>
 800f7e4:	940c      	str	r4, [sp, #48]	; 0x30
 800f7e6:	9016      	str	r0, [sp, #88]	; 0x58
 800f7e8:	b11f      	cbz	r7, 800f7f2 <_vfprintf_r+0x2a>
 800f7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	f000 80f3 	beq.w	800f9d8 <_vfprintf_r+0x210>
 800f7f2:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 800f7f6:	b293      	uxth	r3, r2
 800f7f8:	049e      	lsls	r6, r3, #18
 800f7fa:	d40a      	bmi.n	800f812 <_vfprintf_r+0x4a>
 800f7fc:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 800f800:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 800f804:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800f808:	f8a9 300c 	strh.w	r3, [r9, #12]
 800f80c:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 800f810:	b29b      	uxth	r3, r3
 800f812:	071d      	lsls	r5, r3, #28
 800f814:	f140 80aa 	bpl.w	800f96c <_vfprintf_r+0x1a4>
 800f818:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f81c:	2a00      	cmp	r2, #0
 800f81e:	f000 80a5 	beq.w	800f96c <_vfprintf_r+0x1a4>
 800f822:	f003 031a 	and.w	r3, r3, #26
 800f826:	2b0a      	cmp	r3, #10
 800f828:	f000 80ac 	beq.w	800f984 <_vfprintf_r+0x1bc>
 800f82c:	ed9f 7b6e 	vldr	d7, [pc, #440]	; 800f9e8 <_vfprintf_r+0x220>
 800f830:	2300      	movs	r3, #0
 800f832:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800f836:	9311      	str	r3, [sp, #68]	; 0x44
 800f838:	9325      	str	r3, [sp, #148]	; 0x94
 800f83a:	9324      	str	r3, [sp, #144]	; 0x90
 800f83c:	9314      	str	r3, [sp, #80]	; 0x50
 800f83e:	9317      	str	r3, [sp, #92]	; 0x5c
 800f840:	9309      	str	r3, [sp, #36]	; 0x24
 800f842:	ab30      	add	r3, sp, #192	; 0xc0
 800f844:	9323      	str	r3, [sp, #140]	; 0x8c
 800f846:	461c      	mov	r4, r3
 800f848:	46b8      	mov	r8, r7
 800f84a:	9d08      	ldr	r5, [sp, #32]
 800f84c:	782b      	ldrb	r3, [r5, #0]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	f000 80c6 	beq.w	800f9e0 <_vfprintf_r+0x218>
 800f854:	2b25      	cmp	r3, #37	; 0x25
 800f856:	d102      	bne.n	800f85e <_vfprintf_r+0x96>
 800f858:	e0c2      	b.n	800f9e0 <_vfprintf_r+0x218>
 800f85a:	2b25      	cmp	r3, #37	; 0x25
 800f85c:	d003      	beq.n	800f866 <_vfprintf_r+0x9e>
 800f85e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800f862:	2b00      	cmp	r3, #0
 800f864:	d1f9      	bne.n	800f85a <_vfprintf_r+0x92>
 800f866:	9b08      	ldr	r3, [sp, #32]
 800f868:	1aee      	subs	r6, r5, r3
 800f86a:	b17e      	cbz	r6, 800f88c <_vfprintf_r+0xc4>
 800f86c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f86e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800f870:	9908      	ldr	r1, [sp, #32]
 800f872:	6021      	str	r1, [r4, #0]
 800f874:	3301      	adds	r3, #1
 800f876:	4432      	add	r2, r6
 800f878:	2b07      	cmp	r3, #7
 800f87a:	6066      	str	r6, [r4, #4]
 800f87c:	9225      	str	r2, [sp, #148]	; 0x94
 800f87e:	9324      	str	r3, [sp, #144]	; 0x90
 800f880:	f300 8093 	bgt.w	800f9aa <_vfprintf_r+0x1e2>
 800f884:	3408      	adds	r4, #8
 800f886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f888:	4433      	add	r3, r6
 800f88a:	9309      	str	r3, [sp, #36]	; 0x24
 800f88c:	782b      	ldrb	r3, [r5, #0]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f000 8093 	beq.w	800f9ba <_vfprintf_r+0x1f2>
 800f894:	2300      	movs	r3, #0
 800f896:	1c69      	adds	r1, r5, #1
 800f898:	f04f 3aff 	mov.w	sl, #4294967295
 800f89c:	786d      	ldrb	r5, [r5, #1]
 800f89e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	930a      	str	r3, [sp, #40]	; 0x28
 800f8a6:	9306      	str	r3, [sp, #24]
 800f8a8:	4656      	mov	r6, sl
 800f8aa:	1c4b      	adds	r3, r1, #1
 800f8ac:	f1a5 0120 	sub.w	r1, r5, #32
 800f8b0:	2958      	cmp	r1, #88	; 0x58
 800f8b2:	f200 83cd 	bhi.w	8010050 <_vfprintf_r+0x888>
 800f8b6:	e8df f011 	tbh	[pc, r1, lsl #1]
 800f8ba:	025c      	.short	0x025c
 800f8bc:	03cb03cb 	.word	0x03cb03cb
 800f8c0:	03cb0302 	.word	0x03cb0302
 800f8c4:	03cb03cb 	.word	0x03cb03cb
 800f8c8:	03cb03cb 	.word	0x03cb03cb
 800f8cc:	030903cb 	.word	0x030903cb
 800f8d0:	03cb02d2 	.word	0x03cb02d2
 800f8d4:	035301f8 	.word	0x035301f8
 800f8d8:	02d603cb 	.word	0x02d603cb
 800f8dc:	02dd02dd 	.word	0x02dd02dd
 800f8e0:	02dd02dd 	.word	0x02dd02dd
 800f8e4:	02dd02dd 	.word	0x02dd02dd
 800f8e8:	02dd02dd 	.word	0x02dd02dd
 800f8ec:	03cb02dd 	.word	0x03cb02dd
 800f8f0:	03cb03cb 	.word	0x03cb03cb
 800f8f4:	03cb03cb 	.word	0x03cb03cb
 800f8f8:	03cb03cb 	.word	0x03cb03cb
 800f8fc:	03cb03cb 	.word	0x03cb03cb
 800f900:	027103cb 	.word	0x027103cb
 800f904:	03cb0293 	.word	0x03cb0293
 800f908:	03cb0293 	.word	0x03cb0293
 800f90c:	03cb03cb 	.word	0x03cb03cb
 800f910:	02cb03cb 	.word	0x02cb03cb
 800f914:	03cb03cb 	.word	0x03cb03cb
 800f918:	03cb036e 	.word	0x03cb036e
 800f91c:	03cb03cb 	.word	0x03cb03cb
 800f920:	03cb03cb 	.word	0x03cb03cb
 800f924:	03cb03b5 	.word	0x03cb03b5
 800f928:	038b03cb 	.word	0x038b03cb
 800f92c:	03cb03cb 	.word	0x03cb03cb
 800f930:	03cb03cb 	.word	0x03cb03cb
 800f934:	03cb03cb 	.word	0x03cb03cb
 800f938:	03cb03cb 	.word	0x03cb03cb
 800f93c:	03cb03cb 	.word	0x03cb03cb
 800f940:	031703a0 	.word	0x031703a0
 800f944:	02930293 	.word	0x02930293
 800f948:	03300293 	.word	0x03300293
 800f94c:	03cb0317 	.word	0x03cb0317
 800f950:	033703cb 	.word	0x033703cb
 800f954:	034103cb 	.word	0x034103cb
 800f958:	02ec01ff 	.word	0x02ec01ff
 800f95c:	03cb0263 	.word	0x03cb0263
 800f960:	03cb0211 	.word	0x03cb0211
 800f964:	03cb009b 	.word	0x03cb009b
 800f968:	023603cb 	.word	0x023603cb
 800f96c:	4638      	mov	r0, r7
 800f96e:	4649      	mov	r1, r9
 800f970:	f001 f97a 	bl	8010c68 <__swsetup_r>
 800f974:	b9a0      	cbnz	r0, 800f9a0 <_vfprintf_r+0x1d8>
 800f976:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f97a:	f003 031a 	and.w	r3, r3, #26
 800f97e:	2b0a      	cmp	r3, #10
 800f980:	f47f af54 	bne.w	800f82c <_vfprintf_r+0x64>
 800f984:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	f6ff af4f 	blt.w	800f82c <_vfprintf_r+0x64>
 800f98e:	4638      	mov	r0, r7
 800f990:	4649      	mov	r1, r9
 800f992:	9a08      	ldr	r2, [sp, #32]
 800f994:	4623      	mov	r3, r4
 800f996:	f001 f92b 	bl	8010bf0 <__sbprintf>
 800f99a:	b041      	add	sp, #260	; 0x104
 800f99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9a4:	b041      	add	sp, #260	; 0x104
 800f9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9aa:	4640      	mov	r0, r8
 800f9ac:	4649      	mov	r1, r9
 800f9ae:	aa23      	add	r2, sp, #140	; 0x8c
 800f9b0:	f003 fe92 	bl	80136d8 <__sprint_r>
 800f9b4:	b940      	cbnz	r0, 800f9c8 <_vfprintf_r+0x200>
 800f9b6:	ac30      	add	r4, sp, #192	; 0xc0
 800f9b8:	e765      	b.n	800f886 <_vfprintf_r+0xbe>
 800f9ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800f9bc:	b123      	cbz	r3, 800f9c8 <_vfprintf_r+0x200>
 800f9be:	4640      	mov	r0, r8
 800f9c0:	4649      	mov	r1, r9
 800f9c2:	aa23      	add	r2, sp, #140	; 0x8c
 800f9c4:	f003 fe88 	bl	80136d8 <__sprint_r>
 800f9c8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f9cc:	065a      	lsls	r2, r3, #25
 800f9ce:	d4e7      	bmi.n	800f9a0 <_vfprintf_r+0x1d8>
 800f9d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9d2:	b041      	add	sp, #260	; 0x104
 800f9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9d8:	4638      	mov	r0, r7
 800f9da:	f002 fac3 	bl	8011f64 <__sinit>
 800f9de:	e708      	b.n	800f7f2 <_vfprintf_r+0x2a>
 800f9e0:	9d08      	ldr	r5, [sp, #32]
 800f9e2:	e753      	b.n	800f88c <_vfprintf_r+0xc4>
 800f9e4:	f3af 8000 	nop.w
	...
 800f9f0:	9308      	str	r3, [sp, #32]
 800f9f2:	9b06      	ldr	r3, [sp, #24]
 800f9f4:	46b2      	mov	sl, r6
 800f9f6:	069e      	lsls	r6, r3, #26
 800f9f8:	f140 831e 	bpl.w	8010038 <_vfprintf_r+0x870>
 800f9fc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800f9fe:	3707      	adds	r7, #7
 800fa00:	f027 0307 	bic.w	r3, r7, #7
 800fa04:	f103 0208 	add.w	r2, r3, #8
 800fa08:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fa0c:	920c      	str	r2, [sp, #48]	; 0x30
 800fa0e:	2301      	movs	r3, #1
 800fa10:	f04f 0c00 	mov.w	ip, #0
 800fa14:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
 800fa18:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 800fa1c:	f1ba 0f00 	cmp.w	sl, #0
 800fa20:	db03      	blt.n	800fa2a <_vfprintf_r+0x262>
 800fa22:	9a06      	ldr	r2, [sp, #24]
 800fa24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fa28:	9206      	str	r2, [sp, #24]
 800fa2a:	ea56 0207 	orrs.w	r2, r6, r7
 800fa2e:	f040 831f 	bne.w	8010070 <_vfprintf_r+0x8a8>
 800fa32:	f1ba 0f00 	cmp.w	sl, #0
 800fa36:	f000 841c 	beq.w	8010272 <_vfprintf_r+0xaaa>
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	f000 8320 	beq.w	8010080 <_vfprintf_r+0x8b8>
 800fa40:	2b02      	cmp	r3, #2
 800fa42:	f000 8452 	beq.w	80102ea <_vfprintf_r+0xb22>
 800fa46:	a930      	add	r1, sp, #192	; 0xc0
 800fa48:	08f2      	lsrs	r2, r6, #3
 800fa4a:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800fa4e:	08f8      	lsrs	r0, r7, #3
 800fa50:	f006 0307 	and.w	r3, r6, #7
 800fa54:	4607      	mov	r7, r0
 800fa56:	4616      	mov	r6, r2
 800fa58:	3330      	adds	r3, #48	; 0x30
 800fa5a:	ea56 0207 	orrs.w	r2, r6, r7
 800fa5e:	f801 3d01 	strb.w	r3, [r1, #-1]!
 800fa62:	d1f1      	bne.n	800fa48 <_vfprintf_r+0x280>
 800fa64:	9a06      	ldr	r2, [sp, #24]
 800fa66:	910e      	str	r1, [sp, #56]	; 0x38
 800fa68:	07d0      	lsls	r0, r2, #31
 800fa6a:	f100 84f9 	bmi.w	8010460 <_vfprintf_r+0xc98>
 800fa6e:	ab30      	add	r3, sp, #192	; 0xc0
 800fa70:	1a5b      	subs	r3, r3, r1
 800fa72:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fa76:	4592      	cmp	sl, r2
 800fa78:	4653      	mov	r3, sl
 800fa7a:	bfb8      	it	lt
 800fa7c:	4613      	movlt	r3, r2
 800fa7e:	9307      	str	r3, [sp, #28]
 800fa80:	2300      	movs	r3, #0
 800fa82:	9310      	str	r3, [sp, #64]	; 0x40
 800fa84:	f1bc 0f00 	cmp.w	ip, #0
 800fa88:	d002      	beq.n	800fa90 <_vfprintf_r+0x2c8>
 800fa8a:	9b07      	ldr	r3, [sp, #28]
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	9307      	str	r3, [sp, #28]
 800fa90:	9b06      	ldr	r3, [sp, #24]
 800fa92:	f013 0302 	ands.w	r3, r3, #2
 800fa96:	930d      	str	r3, [sp, #52]	; 0x34
 800fa98:	d002      	beq.n	800faa0 <_vfprintf_r+0x2d8>
 800fa9a:	9b07      	ldr	r3, [sp, #28]
 800fa9c:	3302      	adds	r3, #2
 800fa9e:	9307      	str	r3, [sp, #28]
 800faa0:	9b06      	ldr	r3, [sp, #24]
 800faa2:	f013 0684 	ands.w	r6, r3, #132	; 0x84
 800faa6:	f040 82e0 	bne.w	801006a <_vfprintf_r+0x8a2>
 800faaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faac:	9a07      	ldr	r2, [sp, #28]
 800faae:	ebc2 0a03 	rsb	sl, r2, r3
 800fab2:	f1ba 0f00 	cmp.w	sl, #0
 800fab6:	f340 82d8 	ble.w	801006a <_vfprintf_r+0x8a2>
 800faba:	f1ba 0f10 	cmp.w	sl, #16
 800fabe:	9925      	ldr	r1, [sp, #148]	; 0x94
 800fac0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fac2:	4fb3      	ldr	r7, [pc, #716]	; (800fd90 <_vfprintf_r+0x5c8>)
 800fac4:	bfc8      	it	gt
 800fac6:	f04f 0b10 	movgt.w	fp, #16
 800faca:	dc07      	bgt.n	800fadc <_vfprintf_r+0x314>
 800facc:	e01e      	b.n	800fb0c <_vfprintf_r+0x344>
 800face:	f1aa 0a10 	sub.w	sl, sl, #16
 800fad2:	f1ba 0f10 	cmp.w	sl, #16
 800fad6:	f104 0408 	add.w	r4, r4, #8
 800fada:	dd17      	ble.n	800fb0c <_vfprintf_r+0x344>
 800fadc:	3201      	adds	r2, #1
 800fade:	3110      	adds	r1, #16
 800fae0:	2a07      	cmp	r2, #7
 800fae2:	9125      	str	r1, [sp, #148]	; 0x94
 800fae4:	9224      	str	r2, [sp, #144]	; 0x90
 800fae6:	e884 0880 	stmia.w	r4, {r7, fp}
 800faea:	ddf0      	ble.n	800face <_vfprintf_r+0x306>
 800faec:	4640      	mov	r0, r8
 800faee:	4649      	mov	r1, r9
 800faf0:	aa23      	add	r2, sp, #140	; 0x8c
 800faf2:	f003 fdf1 	bl	80136d8 <__sprint_r>
 800faf6:	2800      	cmp	r0, #0
 800faf8:	f47f af66 	bne.w	800f9c8 <_vfprintf_r+0x200>
 800fafc:	f1aa 0a10 	sub.w	sl, sl, #16
 800fb00:	f1ba 0f10 	cmp.w	sl, #16
 800fb04:	9925      	ldr	r1, [sp, #148]	; 0x94
 800fb06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fb08:	ac30      	add	r4, sp, #192	; 0xc0
 800fb0a:	dce7      	bgt.n	800fadc <_vfprintf_r+0x314>
 800fb0c:	3201      	adds	r2, #1
 800fb0e:	eb0a 0b01 	add.w	fp, sl, r1
 800fb12:	2a07      	cmp	r2, #7
 800fb14:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 800fb18:	9224      	str	r2, [sp, #144]	; 0x90
 800fb1a:	e884 0480 	stmia.w	r4, {r7, sl}
 800fb1e:	f300 844a 	bgt.w	80103b6 <_vfprintf_r+0xbee>
 800fb22:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
 800fb26:	3408      	adds	r4, #8
 800fb28:	f1bc 0f00 	cmp.w	ip, #0
 800fb2c:	d00f      	beq.n	800fb4e <_vfprintf_r+0x386>
 800fb2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800fb30:	3301      	adds	r3, #1
 800fb32:	f10b 0b01 	add.w	fp, fp, #1
 800fb36:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 800fb3a:	2201      	movs	r2, #1
 800fb3c:	2b07      	cmp	r3, #7
 800fb3e:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 800fb42:	9324      	str	r3, [sp, #144]	; 0x90
 800fb44:	e884 0006 	stmia.w	r4, {r1, r2}
 800fb48:	f300 83b1 	bgt.w	80102ae <_vfprintf_r+0xae6>
 800fb4c:	3408      	adds	r4, #8
 800fb4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb50:	b173      	cbz	r3, 800fb70 <_vfprintf_r+0x3a8>
 800fb52:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800fb54:	3301      	adds	r3, #1
 800fb56:	f10b 0b02 	add.w	fp, fp, #2
 800fb5a:	a91c      	add	r1, sp, #112	; 0x70
 800fb5c:	2202      	movs	r2, #2
 800fb5e:	2b07      	cmp	r3, #7
 800fb60:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 800fb64:	9324      	str	r3, [sp, #144]	; 0x90
 800fb66:	e884 0006 	stmia.w	r4, {r1, r2}
 800fb6a:	f300 83ac 	bgt.w	80102c6 <_vfprintf_r+0xafe>
 800fb6e:	3408      	adds	r4, #8
 800fb70:	2e80      	cmp	r6, #128	; 0x80
 800fb72:	f000 82f0 	beq.w	8010156 <_vfprintf_r+0x98e>
 800fb76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fb7a:	ebc2 0a03 	rsb	sl, r2, r3
 800fb7e:	f1ba 0f00 	cmp.w	sl, #0
 800fb82:	dd32      	ble.n	800fbea <_vfprintf_r+0x422>
 800fb84:	f1ba 0f10 	cmp.w	sl, #16
 800fb88:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fb8a:	4f82      	ldr	r7, [pc, #520]	; (800fd94 <_vfprintf_r+0x5cc>)
 800fb8c:	dd22      	ble.n	800fbd4 <_vfprintf_r+0x40c>
 800fb8e:	2610      	movs	r6, #16
 800fb90:	465b      	mov	r3, fp
 800fb92:	e006      	b.n	800fba2 <_vfprintf_r+0x3da>
 800fb94:	f1aa 0a10 	sub.w	sl, sl, #16
 800fb98:	f1ba 0f10 	cmp.w	sl, #16
 800fb9c:	f104 0408 	add.w	r4, r4, #8
 800fba0:	dd17      	ble.n	800fbd2 <_vfprintf_r+0x40a>
 800fba2:	3201      	adds	r2, #1
 800fba4:	3310      	adds	r3, #16
 800fba6:	2a07      	cmp	r2, #7
 800fba8:	9325      	str	r3, [sp, #148]	; 0x94
 800fbaa:	9224      	str	r2, [sp, #144]	; 0x90
 800fbac:	6027      	str	r7, [r4, #0]
 800fbae:	6066      	str	r6, [r4, #4]
 800fbb0:	ddf0      	ble.n	800fb94 <_vfprintf_r+0x3cc>
 800fbb2:	4640      	mov	r0, r8
 800fbb4:	4649      	mov	r1, r9
 800fbb6:	aa23      	add	r2, sp, #140	; 0x8c
 800fbb8:	f003 fd8e 	bl	80136d8 <__sprint_r>
 800fbbc:	2800      	cmp	r0, #0
 800fbbe:	f47f af03 	bne.w	800f9c8 <_vfprintf_r+0x200>
 800fbc2:	f1aa 0a10 	sub.w	sl, sl, #16
 800fbc6:	f1ba 0f10 	cmp.w	sl, #16
 800fbca:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800fbcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fbce:	ac30      	add	r4, sp, #192	; 0xc0
 800fbd0:	dce7      	bgt.n	800fba2 <_vfprintf_r+0x3da>
 800fbd2:	469b      	mov	fp, r3
 800fbd4:	3201      	adds	r2, #1
 800fbd6:	44d3      	add	fp, sl
 800fbd8:	2a07      	cmp	r2, #7
 800fbda:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 800fbde:	9224      	str	r2, [sp, #144]	; 0x90
 800fbe0:	e884 0480 	stmia.w	r4, {r7, sl}
 800fbe4:	f300 8357 	bgt.w	8010296 <_vfprintf_r+0xace>
 800fbe8:	3408      	adds	r4, #8
 800fbea:	9b06      	ldr	r3, [sp, #24]
 800fbec:	05db      	lsls	r3, r3, #23
 800fbee:	f100 825b 	bmi.w	80100a8 <_vfprintf_r+0x8e0>
 800fbf2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800fbf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fbf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fbf8:	6022      	str	r2, [r4, #0]
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	448b      	add	fp, r1
 800fbfe:	2b07      	cmp	r3, #7
 800fc00:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 800fc04:	6061      	str	r1, [r4, #4]
 800fc06:	9324      	str	r3, [sp, #144]	; 0x90
 800fc08:	f300 831d 	bgt.w	8010246 <_vfprintf_r+0xa7e>
 800fc0c:	3408      	adds	r4, #8
 800fc0e:	9b06      	ldr	r3, [sp, #24]
 800fc10:	0759      	lsls	r1, r3, #29
 800fc12:	d53a      	bpl.n	800fc8a <_vfprintf_r+0x4c2>
 800fc14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc16:	9a07      	ldr	r2, [sp, #28]
 800fc18:	1a9d      	subs	r5, r3, r2
 800fc1a:	2d00      	cmp	r5, #0
 800fc1c:	dd35      	ble.n	800fc8a <_vfprintf_r+0x4c2>
 800fc1e:	2d10      	cmp	r5, #16
 800fc20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800fc22:	4f5b      	ldr	r7, [pc, #364]	; (800fd90 <_vfprintf_r+0x5c8>)
 800fc24:	dd1e      	ble.n	800fc64 <_vfprintf_r+0x49c>
 800fc26:	2610      	movs	r6, #16
 800fc28:	465a      	mov	r2, fp
 800fc2a:	e004      	b.n	800fc36 <_vfprintf_r+0x46e>
 800fc2c:	3d10      	subs	r5, #16
 800fc2e:	2d10      	cmp	r5, #16
 800fc30:	f104 0408 	add.w	r4, r4, #8
 800fc34:	dd15      	ble.n	800fc62 <_vfprintf_r+0x49a>
 800fc36:	3301      	adds	r3, #1
 800fc38:	3210      	adds	r2, #16
 800fc3a:	2b07      	cmp	r3, #7
 800fc3c:	9225      	str	r2, [sp, #148]	; 0x94
 800fc3e:	9324      	str	r3, [sp, #144]	; 0x90
 800fc40:	6027      	str	r7, [r4, #0]
 800fc42:	6066      	str	r6, [r4, #4]
 800fc44:	ddf2      	ble.n	800fc2c <_vfprintf_r+0x464>
 800fc46:	4640      	mov	r0, r8
 800fc48:	4649      	mov	r1, r9
 800fc4a:	aa23      	add	r2, sp, #140	; 0x8c
 800fc4c:	f003 fd44 	bl	80136d8 <__sprint_r>
 800fc50:	2800      	cmp	r0, #0
 800fc52:	f47f aeb9 	bne.w	800f9c8 <_vfprintf_r+0x200>
 800fc56:	3d10      	subs	r5, #16
 800fc58:	2d10      	cmp	r5, #16
 800fc5a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800fc5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800fc5e:	ac30      	add	r4, sp, #192	; 0xc0
 800fc60:	dce9      	bgt.n	800fc36 <_vfprintf_r+0x46e>
 800fc62:	4693      	mov	fp, r2
 800fc64:	3301      	adds	r3, #1
 800fc66:	44ab      	add	fp, r5
 800fc68:	2b07      	cmp	r3, #7
 800fc6a:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 800fc6e:	9324      	str	r3, [sp, #144]	; 0x90
 800fc70:	6027      	str	r7, [r4, #0]
 800fc72:	6065      	str	r5, [r4, #4]
 800fc74:	dd09      	ble.n	800fc8a <_vfprintf_r+0x4c2>
 800fc76:	4640      	mov	r0, r8
 800fc78:	4649      	mov	r1, r9
 800fc7a:	aa23      	add	r2, sp, #140	; 0x8c
 800fc7c:	f003 fd2c 	bl	80136d8 <__sprint_r>
 800fc80:	2800      	cmp	r0, #0
 800fc82:	f47f aea1 	bne.w	800f9c8 <_vfprintf_r+0x200>
 800fc86:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 800fc8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc8c:	9a07      	ldr	r2, [sp, #28]
 800fc8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fc90:	428a      	cmp	r2, r1
 800fc92:	bfac      	ite	ge
 800fc94:	189b      	addge	r3, r3, r2
 800fc96:	185b      	addlt	r3, r3, r1
 800fc98:	9309      	str	r3, [sp, #36]	; 0x24
 800fc9a:	f1bb 0f00 	cmp.w	fp, #0
 800fc9e:	f040 82de 	bne.w	801025e <_vfprintf_r+0xa96>
 800fca2:	2300      	movs	r3, #0
 800fca4:	9324      	str	r3, [sp, #144]	; 0x90
 800fca6:	ac30      	add	r4, sp, #192	; 0xc0
 800fca8:	e5cf      	b.n	800f84a <_vfprintf_r+0x82>
 800fcaa:	4619      	mov	r1, r3
 800fcac:	9806      	ldr	r0, [sp, #24]
 800fcae:	781d      	ldrb	r5, [r3, #0]
 800fcb0:	f040 0004 	orr.w	r0, r0, #4
 800fcb4:	9006      	str	r0, [sp, #24]
 800fcb6:	e5f8      	b.n	800f8aa <_vfprintf_r+0xe2>
 800fcb8:	9308      	str	r3, [sp, #32]
 800fcba:	9b06      	ldr	r3, [sp, #24]
 800fcbc:	f013 0320 	ands.w	r3, r3, #32
 800fcc0:	46b2      	mov	sl, r6
 800fcc2:	f000 8173 	beq.w	800ffac <_vfprintf_r+0x7e4>
 800fcc6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800fcc8:	3707      	adds	r7, #7
 800fcca:	f027 0307 	bic.w	r3, r7, #7
 800fcce:	f103 0208 	add.w	r2, r3, #8
 800fcd2:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fcd6:	920c      	str	r2, [sp, #48]	; 0x30
 800fcd8:	2300      	movs	r3, #0
 800fcda:	e699      	b.n	800fa10 <_vfprintf_r+0x248>
 800fcdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fcde:	9308      	str	r3, [sp, #32]
 800fce0:	6813      	ldr	r3, [r2, #0]
 800fce2:	930e      	str	r3, [sp, #56]	; 0x38
 800fce4:	f04f 0b00 	mov.w	fp, #0
 800fce8:	f88d b06f 	strb.w	fp, [sp, #111]	; 0x6f
 800fcec:	1d17      	adds	r7, r2, #4
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	f000 8660 	beq.w	80109b4 <_vfprintf_r+0x11ec>
 800fcf4:	2e00      	cmp	r6, #0
 800fcf6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800fcf8:	f2c0 8612 	blt.w	8010920 <_vfprintf_r+0x1158>
 800fcfc:	4659      	mov	r1, fp
 800fcfe:	4632      	mov	r2, r6
 800fd00:	f002 ff22 	bl	8012b48 <memchr>
 800fd04:	2800      	cmp	r0, #0
 800fd06:	f000 8691 	beq.w	8010a2c <_vfprintf_r+0x1264>
 800fd0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd0c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 800fd10:	1ac3      	subs	r3, r0, r3
 800fd12:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd14:	970c      	str	r7, [sp, #48]	; 0x30
 800fd16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fd1a:	9307      	str	r3, [sp, #28]
 800fd1c:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 800fd20:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
 800fd24:	e6ae      	b.n	800fa84 <_vfprintf_r+0x2bc>
 800fd26:	9308      	str	r3, [sp, #32]
 800fd28:	4b1b      	ldr	r3, [pc, #108]	; (800fd98 <_vfprintf_r+0x5d0>)
 800fd2a:	9314      	str	r3, [sp, #80]	; 0x50
 800fd2c:	9b06      	ldr	r3, [sp, #24]
 800fd2e:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800fd32:	0699      	lsls	r1, r3, #26
 800fd34:	46b2      	mov	sl, r6
 800fd36:	f140 8155 	bpl.w	800ffe4 <_vfprintf_r+0x81c>
 800fd3a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800fd3c:	3707      	adds	r7, #7
 800fd3e:	f027 0307 	bic.w	r3, r7, #7
 800fd42:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fd46:	f103 0208 	add.w	r2, r3, #8
 800fd4a:	920c      	str	r2, [sp, #48]	; 0x30
 800fd4c:	9b06      	ldr	r3, [sp, #24]
 800fd4e:	07db      	lsls	r3, r3, #31
 800fd50:	f140 82e4 	bpl.w	801031c <_vfprintf_r+0xb54>
 800fd54:	ea56 0307 	orrs.w	r3, r6, r7
 800fd58:	f000 82e0 	beq.w	801031c <_vfprintf_r+0xb54>
 800fd5c:	9a06      	ldr	r2, [sp, #24]
 800fd5e:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
 800fd62:	2330      	movs	r3, #48	; 0x30
 800fd64:	f042 0202 	orr.w	r2, r2, #2
 800fd68:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800fd6c:	9206      	str	r2, [sp, #24]
 800fd6e:	2302      	movs	r3, #2
 800fd70:	e64e      	b.n	800fa10 <_vfprintf_r+0x248>
 800fd72:	781d      	ldrb	r5, [r3, #0]
 800fd74:	4619      	mov	r1, r3
 800fd76:	2a00      	cmp	r2, #0
 800fd78:	f47f ad97 	bne.w	800f8aa <_vfprintf_r+0xe2>
 800fd7c:	2220      	movs	r2, #32
 800fd7e:	e594      	b.n	800f8aa <_vfprintf_r+0xe2>
 800fd80:	9906      	ldr	r1, [sp, #24]
 800fd82:	f041 0120 	orr.w	r1, r1, #32
 800fd86:	9106      	str	r1, [sp, #24]
 800fd88:	781d      	ldrb	r5, [r3, #0]
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	e58d      	b.n	800f8aa <_vfprintf_r+0xe2>
 800fd8e:	bf00      	nop
 800fd90:	0801483c 	.word	0x0801483c
 800fd94:	080147e8 	.word	0x080147e8
 800fd98:	0801481c 	.word	0x0801481c
 800fd9c:	9308      	str	r3, [sp, #32]
 800fd9e:	9b06      	ldr	r3, [sp, #24]
 800fda0:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800fda4:	f043 0310 	orr.w	r3, r3, #16
 800fda8:	9306      	str	r3, [sp, #24]
 800fdaa:	9b06      	ldr	r3, [sp, #24]
 800fdac:	0698      	lsls	r0, r3, #26
 800fdae:	46b2      	mov	sl, r6
 800fdb0:	f140 80a2 	bpl.w	800fef8 <_vfprintf_r+0x730>
 800fdb4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800fdb6:	3707      	adds	r7, #7
 800fdb8:	f027 0707 	bic.w	r7, r7, #7
 800fdbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdc0:	f107 0108 	add.w	r1, r7, #8
 800fdc4:	910c      	str	r1, [sp, #48]	; 0x30
 800fdc6:	4616      	mov	r6, r2
 800fdc8:	461f      	mov	r7, r3
 800fdca:	2a00      	cmp	r2, #0
 800fdcc:	f173 0300 	sbcs.w	r3, r3, #0
 800fdd0:	f2c0 841c 	blt.w	801060c <_vfprintf_r+0xe44>
 800fdd4:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
 800fdd8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 800fddc:	2301      	movs	r3, #1
 800fdde:	e61d      	b.n	800fa1c <_vfprintf_r+0x254>
 800fde0:	9308      	str	r3, [sp, #32]
 800fde2:	9b06      	ldr	r3, [sp, #24]
 800fde4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800fde6:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800fdea:	071b      	lsls	r3, r3, #28
 800fdec:	46b2      	mov	sl, r6
 800fdee:	46b3      	mov	fp, r6
 800fdf0:	f107 0707 	add.w	r7, r7, #7
 800fdf4:	f140 849b 	bpl.w	801072e <_vfprintf_r+0xf66>
 800fdf8:	f027 0307 	bic.w	r3, r7, #7
 800fdfc:	ed93 7b00 	vldr	d7, [r3]
 800fe00:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800fe04:	f103 0208 	add.w	r2, r3, #8
 800fe08:	920c      	str	r2, [sp, #48]	; 0x30
 800fe0a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800fe0e:	f7fe fa85 	bl	800e31c <__fpclassifyd>
 800fe12:	2801      	cmp	r0, #1
 800fe14:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800fe18:	f040 8406 	bne.w	8010628 <_vfprintf_r+0xe60>
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	2300      	movs	r3, #0
 800fe20:	f7fe fed2 	bl	800ebc8 <__aeabi_dcmplt>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	f040 85ee 	bne.w	8010a06 <_vfprintf_r+0x123e>
 800fe2a:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
 800fe2e:	9e06      	ldr	r6, [sp, #24]
 800fe30:	4a99      	ldr	r2, [pc, #612]	; (8010098 <_vfprintf_r+0x8d0>)
 800fe32:	4b9a      	ldr	r3, [pc, #616]	; (801009c <_vfprintf_r+0x8d4>)
 800fe34:	2103      	movs	r1, #3
 800fe36:	2000      	movs	r0, #0
 800fe38:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800fe3c:	2d47      	cmp	r5, #71	; 0x47
 800fe3e:	bfd8      	it	le
 800fe40:	461a      	movle	r2, r3
 800fe42:	9107      	str	r1, [sp, #28]
 800fe44:	900f      	str	r0, [sp, #60]	; 0x3c
 800fe46:	9606      	str	r6, [sp, #24]
 800fe48:	920e      	str	r2, [sp, #56]	; 0x38
 800fe4a:	910b      	str	r1, [sp, #44]	; 0x2c
 800fe4c:	9010      	str	r0, [sp, #64]	; 0x40
 800fe4e:	e619      	b.n	800fa84 <_vfprintf_r+0x2bc>
 800fe50:	9906      	ldr	r1, [sp, #24]
 800fe52:	f041 0108 	orr.w	r1, r1, #8
 800fe56:	9106      	str	r1, [sp, #24]
 800fe58:	781d      	ldrb	r5, [r3, #0]
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	e525      	b.n	800f8aa <_vfprintf_r+0xe2>
 800fe5e:	781d      	ldrb	r5, [r3, #0]
 800fe60:	4619      	mov	r1, r3
 800fe62:	222b      	movs	r2, #43	; 0x2b
 800fe64:	e521      	b.n	800f8aa <_vfprintf_r+0xe2>
 800fe66:	9906      	ldr	r1, [sp, #24]
 800fe68:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800fe6c:	9106      	str	r1, [sp, #24]
 800fe6e:	781d      	ldrb	r5, [r3, #0]
 800fe70:	4619      	mov	r1, r3
 800fe72:	e51a      	b.n	800f8aa <_vfprintf_r+0xe2>
 800fe74:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 800fe78:	2100      	movs	r1, #0
 800fe7a:	f813 5b01 	ldrb.w	r5, [r3], #1
 800fe7e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800fe82:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800fe86:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 800fe8a:	2809      	cmp	r0, #9
 800fe8c:	d9f5      	bls.n	800fe7a <_vfprintf_r+0x6b2>
 800fe8e:	910a      	str	r1, [sp, #40]	; 0x28
 800fe90:	e50c      	b.n	800f8ac <_vfprintf_r+0xe4>
 800fe92:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fe94:	9308      	str	r3, [sp, #32]
 800fe96:	2330      	movs	r3, #48	; 0x30
 800fe98:	9a06      	ldr	r2, [sp, #24]
 800fe9a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800fe9e:	460b      	mov	r3, r1
 800fea0:	3304      	adds	r3, #4
 800fea2:	2578      	movs	r5, #120	; 0x78
 800fea4:	f042 0202 	orr.w	r2, r2, #2
 800fea8:	930c      	str	r3, [sp, #48]	; 0x30
 800feaa:	4b7d      	ldr	r3, [pc, #500]	; (80100a0 <_vfprintf_r+0x8d8>)
 800feac:	9314      	str	r3, [sp, #80]	; 0x50
 800feae:	46b2      	mov	sl, r6
 800feb0:	9206      	str	r2, [sp, #24]
 800feb2:	680e      	ldr	r6, [r1, #0]
 800feb4:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
 800feb8:	2700      	movs	r7, #0
 800feba:	2302      	movs	r3, #2
 800febc:	e5a8      	b.n	800fa10 <_vfprintf_r+0x248>
 800febe:	9906      	ldr	r1, [sp, #24]
 800fec0:	f041 0101 	orr.w	r1, r1, #1
 800fec4:	9106      	str	r1, [sp, #24]
 800fec6:	781d      	ldrb	r5, [r3, #0]
 800fec8:	4619      	mov	r1, r3
 800feca:	e4ee      	b.n	800f8aa <_vfprintf_r+0xe2>
 800fecc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fece:	6829      	ldr	r1, [r5, #0]
 800fed0:	910a      	str	r1, [sp, #40]	; 0x28
 800fed2:	4608      	mov	r0, r1
 800fed4:	2800      	cmp	r0, #0
 800fed6:	4629      	mov	r1, r5
 800fed8:	f101 0104 	add.w	r1, r1, #4
 800fedc:	f2c0 84ee 	blt.w	80108bc <_vfprintf_r+0x10f4>
 800fee0:	910c      	str	r1, [sp, #48]	; 0x30
 800fee2:	781d      	ldrb	r5, [r3, #0]
 800fee4:	4619      	mov	r1, r3
 800fee6:	e4e0      	b.n	800f8aa <_vfprintf_r+0xe2>
 800fee8:	9308      	str	r3, [sp, #32]
 800feea:	9b06      	ldr	r3, [sp, #24]
 800feec:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800fef0:	0698      	lsls	r0, r3, #26
 800fef2:	46b2      	mov	sl, r6
 800fef4:	f53f af5e 	bmi.w	800fdb4 <_vfprintf_r+0x5ec>
 800fef8:	9b06      	ldr	r3, [sp, #24]
 800fefa:	06d9      	lsls	r1, r3, #27
 800fefc:	f100 829b 	bmi.w	8010436 <_vfprintf_r+0xc6e>
 800ff00:	9b06      	ldr	r3, [sp, #24]
 800ff02:	065a      	lsls	r2, r3, #25
 800ff04:	f140 8297 	bpl.w	8010436 <_vfprintf_r+0xc6e>
 800ff08:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ff0a:	f9b1 6000 	ldrsh.w	r6, [r1]
 800ff0e:	3104      	adds	r1, #4
 800ff10:	17f7      	asrs	r7, r6, #31
 800ff12:	4632      	mov	r2, r6
 800ff14:	463b      	mov	r3, r7
 800ff16:	910c      	str	r1, [sp, #48]	; 0x30
 800ff18:	e757      	b.n	800fdca <_vfprintf_r+0x602>
 800ff1a:	9906      	ldr	r1, [sp, #24]
 800ff1c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800ff20:	9106      	str	r1, [sp, #24]
 800ff22:	781d      	ldrb	r5, [r3, #0]
 800ff24:	4619      	mov	r1, r3
 800ff26:	e4c0      	b.n	800f8aa <_vfprintf_r+0xe2>
 800ff28:	781d      	ldrb	r5, [r3, #0]
 800ff2a:	9906      	ldr	r1, [sp, #24]
 800ff2c:	2d6c      	cmp	r5, #108	; 0x6c
 800ff2e:	f000 84be 	beq.w	80108ae <_vfprintf_r+0x10e6>
 800ff32:	f041 0110 	orr.w	r1, r1, #16
 800ff36:	9106      	str	r1, [sp, #24]
 800ff38:	4619      	mov	r1, r3
 800ff3a:	e4b6      	b.n	800f8aa <_vfprintf_r+0xe2>
 800ff3c:	9308      	str	r3, [sp, #32]
 800ff3e:	9b06      	ldr	r3, [sp, #24]
 800ff40:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800ff44:	069a      	lsls	r2, r3, #26
 800ff46:	f140 83fd 	bpl.w	8010744 <_vfprintf_r+0xf7c>
 800ff4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff4e:	6813      	ldr	r3, [r2, #0]
 800ff50:	17cf      	asrs	r7, r1, #31
 800ff52:	4608      	mov	r0, r1
 800ff54:	3204      	adds	r2, #4
 800ff56:	4639      	mov	r1, r7
 800ff58:	920c      	str	r2, [sp, #48]	; 0x30
 800ff5a:	e9c3 0100 	strd	r0, r1, [r3]
 800ff5e:	e474      	b.n	800f84a <_vfprintf_r+0x82>
 800ff60:	781d      	ldrb	r5, [r3, #0]
 800ff62:	2d2a      	cmp	r5, #42	; 0x2a
 800ff64:	f103 0101 	add.w	r1, r3, #1
 800ff68:	f000 862c 	beq.w	8010bc4 <_vfprintf_r+0x13fc>
 800ff6c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 800ff70:	2809      	cmp	r0, #9
 800ff72:	460b      	mov	r3, r1
 800ff74:	f04f 0600 	mov.w	r6, #0
 800ff78:	f63f ac98 	bhi.w	800f8ac <_vfprintf_r+0xe4>
 800ff7c:	f813 5b01 	ldrb.w	r5, [r3], #1
 800ff80:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800ff84:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800ff88:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 800ff8c:	2809      	cmp	r0, #9
 800ff8e:	d9f5      	bls.n	800ff7c <_vfprintf_r+0x7b4>
 800ff90:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 800ff94:	e48a      	b.n	800f8ac <_vfprintf_r+0xe4>
 800ff96:	9308      	str	r3, [sp, #32]
 800ff98:	9b06      	ldr	r3, [sp, #24]
 800ff9a:	f043 0310 	orr.w	r3, r3, #16
 800ff9e:	9306      	str	r3, [sp, #24]
 800ffa0:	9b06      	ldr	r3, [sp, #24]
 800ffa2:	f013 0320 	ands.w	r3, r3, #32
 800ffa6:	46b2      	mov	sl, r6
 800ffa8:	f47f ae8d 	bne.w	800fcc6 <_vfprintf_r+0x4fe>
 800ffac:	9a06      	ldr	r2, [sp, #24]
 800ffae:	f012 0210 	ands.w	r2, r2, #16
 800ffb2:	f040 8238 	bne.w	8010426 <_vfprintf_r+0xc5e>
 800ffb6:	9b06      	ldr	r3, [sp, #24]
 800ffb8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800ffbc:	f000 8233 	beq.w	8010426 <_vfprintf_r+0xc5e>
 800ffc0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ffc2:	4613      	mov	r3, r2
 800ffc4:	460a      	mov	r2, r1
 800ffc6:	3204      	adds	r2, #4
 800ffc8:	880e      	ldrh	r6, [r1, #0]
 800ffca:	920c      	str	r2, [sp, #48]	; 0x30
 800ffcc:	2700      	movs	r7, #0
 800ffce:	e51f      	b.n	800fa10 <_vfprintf_r+0x248>
 800ffd0:	9308      	str	r3, [sp, #32]
 800ffd2:	4b34      	ldr	r3, [pc, #208]	; (80100a4 <_vfprintf_r+0x8dc>)
 800ffd4:	9314      	str	r3, [sp, #80]	; 0x50
 800ffd6:	9b06      	ldr	r3, [sp, #24]
 800ffd8:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800ffdc:	0699      	lsls	r1, r3, #26
 800ffde:	46b2      	mov	sl, r6
 800ffe0:	f53f aeab 	bmi.w	800fd3a <_vfprintf_r+0x572>
 800ffe4:	9b06      	ldr	r3, [sp, #24]
 800ffe6:	06da      	lsls	r2, r3, #27
 800ffe8:	f140 83d1 	bpl.w	801078e <_vfprintf_r+0xfc6>
 800ffec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ffee:	4613      	mov	r3, r2
 800fff0:	3304      	adds	r3, #4
 800fff2:	6816      	ldr	r6, [r2, #0]
 800fff4:	930c      	str	r3, [sp, #48]	; 0x30
 800fff6:	2700      	movs	r7, #0
 800fff8:	e6a8      	b.n	800fd4c <_vfprintf_r+0x584>
 800fffa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fffc:	9308      	str	r3, [sp, #32]
 800fffe:	680a      	ldr	r2, [r1, #0]
 8010000:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8010004:	2300      	movs	r3, #0
 8010006:	2201      	movs	r2, #1
 8010008:	3104      	adds	r1, #4
 801000a:	469c      	mov	ip, r3
 801000c:	9207      	str	r2, [sp, #28]
 801000e:	910c      	str	r1, [sp, #48]	; 0x30
 8010010:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8010014:	ab26      	add	r3, sp, #152	; 0x98
 8010016:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801001a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 801001e:	920b      	str	r2, [sp, #44]	; 0x2c
 8010020:	930e      	str	r3, [sp, #56]	; 0x38
 8010022:	e535      	b.n	800fa90 <_vfprintf_r+0x2c8>
 8010024:	9308      	str	r3, [sp, #32]
 8010026:	9b06      	ldr	r3, [sp, #24]
 8010028:	f043 0310 	orr.w	r3, r3, #16
 801002c:	9306      	str	r3, [sp, #24]
 801002e:	9b06      	ldr	r3, [sp, #24]
 8010030:	46b2      	mov	sl, r6
 8010032:	069e      	lsls	r6, r3, #26
 8010034:	f53f ace2 	bmi.w	800f9fc <_vfprintf_r+0x234>
 8010038:	9b06      	ldr	r3, [sp, #24]
 801003a:	06d8      	lsls	r0, r3, #27
 801003c:	f140 8399 	bpl.w	8010772 <_vfprintf_r+0xfaa>
 8010040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010042:	4613      	mov	r3, r2
 8010044:	3204      	adds	r2, #4
 8010046:	681e      	ldr	r6, [r3, #0]
 8010048:	920c      	str	r2, [sp, #48]	; 0x30
 801004a:	2301      	movs	r3, #1
 801004c:	2700      	movs	r7, #0
 801004e:	e4df      	b.n	800fa10 <_vfprintf_r+0x248>
 8010050:	9308      	str	r3, [sp, #32]
 8010052:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8010056:	2d00      	cmp	r5, #0
 8010058:	f43f acaf 	beq.w	800f9ba <_vfprintf_r+0x1f2>
 801005c:	2300      	movs	r3, #0
 801005e:	2201      	movs	r2, #1
 8010060:	469c      	mov	ip, r3
 8010062:	9207      	str	r2, [sp, #28]
 8010064:	f88d 5098 	strb.w	r5, [sp, #152]	; 0x98
 8010068:	e7d2      	b.n	8010010 <_vfprintf_r+0x848>
 801006a:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801006e:	e55b      	b.n	800fb28 <_vfprintf_r+0x360>
 8010070:	2b01      	cmp	r3, #1
 8010072:	f47f ace5 	bne.w	800fa40 <_vfprintf_r+0x278>
 8010076:	2f00      	cmp	r7, #0
 8010078:	bf08      	it	eq
 801007a:	2e0a      	cmpeq	r6, #10
 801007c:	f080 81ff 	bcs.w	801047e <_vfprintf_r+0xcb6>
 8010080:	f50d 7b80 	add.w	fp, sp, #256	; 0x100
 8010084:	3630      	adds	r6, #48	; 0x30
 8010086:	f80b 6d41 	strb.w	r6, [fp, #-65]!
 801008a:	ab30      	add	r3, sp, #192	; 0xc0
 801008c:	ebcb 0303 	rsb	r3, fp, r3
 8010090:	930b      	str	r3, [sp, #44]	; 0x2c
 8010092:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8010096:	e4ed      	b.n	800fa74 <_vfprintf_r+0x2ac>
 8010098:	080147fc 	.word	0x080147fc
 801009c:	080147f8 	.word	0x080147f8
 80100a0:	0801481c 	.word	0x0801481c
 80100a4:	08014808 	.word	0x08014808
 80100a8:	2d65      	cmp	r5, #101	; 0x65
 80100aa:	f340 808a 	ble.w	80101c2 <_vfprintf_r+0x9fa>
 80100ae:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80100b2:	2200      	movs	r2, #0
 80100b4:	2300      	movs	r3, #0
 80100b6:	f7fe fd7d 	bl	800ebb4 <__aeabi_dcmpeq>
 80100ba:	2800      	cmp	r0, #0
 80100bc:	f000 8131 	beq.w	8010322 <_vfprintf_r+0xb5a>
 80100c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80100c2:	4aae      	ldr	r2, [pc, #696]	; (801037c <_vfprintf_r+0xbb4>)
 80100c4:	6022      	str	r2, [r4, #0]
 80100c6:	3301      	adds	r3, #1
 80100c8:	f10b 0b01 	add.w	fp, fp, #1
 80100cc:	2201      	movs	r2, #1
 80100ce:	2b07      	cmp	r3, #7
 80100d0:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 80100d4:	9324      	str	r3, [sp, #144]	; 0x90
 80100d6:	6062      	str	r2, [r4, #4]
 80100d8:	f300 8372 	bgt.w	80107c0 <_vfprintf_r+0xff8>
 80100dc:	3408      	adds	r4, #8
 80100de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80100e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80100e2:	4293      	cmp	r3, r2
 80100e4:	db03      	blt.n	80100ee <_vfprintf_r+0x926>
 80100e6:	9b06      	ldr	r3, [sp, #24]
 80100e8:	07df      	lsls	r7, r3, #31
 80100ea:	f57f ad90 	bpl.w	800fc0e <_vfprintf_r+0x446>
 80100ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80100f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80100f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80100f4:	6022      	str	r2, [r4, #0]
 80100f6:	3301      	adds	r3, #1
 80100f8:	448b      	add	fp, r1
 80100fa:	2b07      	cmp	r3, #7
 80100fc:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 8010100:	6061      	str	r1, [r4, #4]
 8010102:	9324      	str	r3, [sp, #144]	; 0x90
 8010104:	f300 83e1 	bgt.w	80108ca <_vfprintf_r+0x1102>
 8010108:	3408      	adds	r4, #8
 801010a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801010c:	1e5d      	subs	r5, r3, #1
 801010e:	2d00      	cmp	r5, #0
 8010110:	f77f ad7d 	ble.w	800fc0e <_vfprintf_r+0x446>
 8010114:	2d10      	cmp	r5, #16
 8010116:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010118:	4f99      	ldr	r7, [pc, #612]	; (8010380 <_vfprintf_r+0xbb8>)
 801011a:	f340 8196 	ble.w	801044a <_vfprintf_r+0xc82>
 801011e:	2610      	movs	r6, #16
 8010120:	465a      	mov	r2, fp
 8010122:	e004      	b.n	801012e <_vfprintf_r+0x966>
 8010124:	3408      	adds	r4, #8
 8010126:	3d10      	subs	r5, #16
 8010128:	2d10      	cmp	r5, #16
 801012a:	f340 818d 	ble.w	8010448 <_vfprintf_r+0xc80>
 801012e:	3301      	adds	r3, #1
 8010130:	3210      	adds	r2, #16
 8010132:	2b07      	cmp	r3, #7
 8010134:	9225      	str	r2, [sp, #148]	; 0x94
 8010136:	9324      	str	r3, [sp, #144]	; 0x90
 8010138:	6027      	str	r7, [r4, #0]
 801013a:	6066      	str	r6, [r4, #4]
 801013c:	ddf2      	ble.n	8010124 <_vfprintf_r+0x95c>
 801013e:	4640      	mov	r0, r8
 8010140:	4649      	mov	r1, r9
 8010142:	aa23      	add	r2, sp, #140	; 0x8c
 8010144:	f003 fac8 	bl	80136d8 <__sprint_r>
 8010148:	2800      	cmp	r0, #0
 801014a:	f47f ac3d 	bne.w	800f9c8 <_vfprintf_r+0x200>
 801014e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010150:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010152:	ac30      	add	r4, sp, #192	; 0xc0
 8010154:	e7e7      	b.n	8010126 <_vfprintf_r+0x95e>
 8010156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010158:	9a07      	ldr	r2, [sp, #28]
 801015a:	1a9e      	subs	r6, r3, r2
 801015c:	2e00      	cmp	r6, #0
 801015e:	f77f ad0a 	ble.w	800fb76 <_vfprintf_r+0x3ae>
 8010162:	2e10      	cmp	r6, #16
 8010164:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010166:	4f86      	ldr	r7, [pc, #536]	; (8010380 <_vfprintf_r+0xbb8>)
 8010168:	dd1f      	ble.n	80101aa <_vfprintf_r+0x9e2>
 801016a:	f04f 0a10 	mov.w	sl, #16
 801016e:	465b      	mov	r3, fp
 8010170:	e004      	b.n	801017c <_vfprintf_r+0x9b4>
 8010172:	3e10      	subs	r6, #16
 8010174:	2e10      	cmp	r6, #16
 8010176:	f104 0408 	add.w	r4, r4, #8
 801017a:	dd15      	ble.n	80101a8 <_vfprintf_r+0x9e0>
 801017c:	3201      	adds	r2, #1
 801017e:	3310      	adds	r3, #16
 8010180:	2a07      	cmp	r2, #7
 8010182:	9325      	str	r3, [sp, #148]	; 0x94
 8010184:	9224      	str	r2, [sp, #144]	; 0x90
 8010186:	e884 0480 	stmia.w	r4, {r7, sl}
 801018a:	ddf2      	ble.n	8010172 <_vfprintf_r+0x9aa>
 801018c:	4640      	mov	r0, r8
 801018e:	4649      	mov	r1, r9
 8010190:	aa23      	add	r2, sp, #140	; 0x8c
 8010192:	f003 faa1 	bl	80136d8 <__sprint_r>
 8010196:	2800      	cmp	r0, #0
 8010198:	f47f ac16 	bne.w	800f9c8 <_vfprintf_r+0x200>
 801019c:	3e10      	subs	r6, #16
 801019e:	2e10      	cmp	r6, #16
 80101a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80101a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80101a4:	ac30      	add	r4, sp, #192	; 0xc0
 80101a6:	dce9      	bgt.n	801017c <_vfprintf_r+0x9b4>
 80101a8:	469b      	mov	fp, r3
 80101aa:	3201      	adds	r2, #1
 80101ac:	44b3      	add	fp, r6
 80101ae:	2a07      	cmp	r2, #7
 80101b0:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 80101b4:	9224      	str	r2, [sp, #144]	; 0x90
 80101b6:	6027      	str	r7, [r4, #0]
 80101b8:	6066      	str	r6, [r4, #4]
 80101ba:	f300 821a 	bgt.w	80105f2 <_vfprintf_r+0xe2a>
 80101be:	3408      	adds	r4, #8
 80101c0:	e4d9      	b.n	800fb76 <_vfprintf_r+0x3ae>
 80101c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80101c4:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80101c6:	2b01      	cmp	r3, #1
 80101c8:	f340 81d5 	ble.w	8010576 <_vfprintf_r+0xdae>
 80101cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101ce:	6023      	str	r3, [r4, #0]
 80101d0:	3501      	adds	r5, #1
 80101d2:	f10b 0601 	add.w	r6, fp, #1
 80101d6:	2301      	movs	r3, #1
 80101d8:	2d07      	cmp	r5, #7
 80101da:	9625      	str	r6, [sp, #148]	; 0x94
 80101dc:	9524      	str	r5, [sp, #144]	; 0x90
 80101de:	6063      	str	r3, [r4, #4]
 80101e0:	f300 81e5 	bgt.w	80105ae <_vfprintf_r+0xde6>
 80101e4:	3408      	adds	r4, #8
 80101e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80101e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101ea:	6023      	str	r3, [r4, #0]
 80101ec:	3501      	adds	r5, #1
 80101ee:	4416      	add	r6, r2
 80101f0:	2d07      	cmp	r5, #7
 80101f2:	9625      	str	r6, [sp, #148]	; 0x94
 80101f4:	9524      	str	r5, [sp, #144]	; 0x90
 80101f6:	6062      	str	r2, [r4, #4]
 80101f8:	f300 81ef 	bgt.w	80105da <_vfprintf_r+0xe12>
 80101fc:	3408      	adds	r4, #8
 80101fe:	2300      	movs	r3, #0
 8010200:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8010204:	2200      	movs	r2, #0
 8010206:	f7fe fcd5 	bl	800ebb4 <__aeabi_dcmpeq>
 801020a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801020c:	2800      	cmp	r0, #0
 801020e:	f040 80e1 	bne.w	80103d4 <_vfprintf_r+0xc0c>
 8010212:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010214:	3b01      	subs	r3, #1
 8010216:	3501      	adds	r5, #1
 8010218:	3201      	adds	r2, #1
 801021a:	441e      	add	r6, r3
 801021c:	2d07      	cmp	r5, #7
 801021e:	9524      	str	r5, [sp, #144]	; 0x90
 8010220:	9625      	str	r6, [sp, #148]	; 0x94
 8010222:	6022      	str	r2, [r4, #0]
 8010224:	6063      	str	r3, [r4, #4]
 8010226:	f300 81b6 	bgt.w	8010596 <_vfprintf_r+0xdce>
 801022a:	3408      	adds	r4, #8
 801022c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801022e:	6062      	str	r2, [r4, #4]
 8010230:	3501      	adds	r5, #1
 8010232:	eb06 0b02 	add.w	fp, r6, r2
 8010236:	ab1f      	add	r3, sp, #124	; 0x7c
 8010238:	2d07      	cmp	r5, #7
 801023a:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801023e:	9524      	str	r5, [sp, #144]	; 0x90
 8010240:	6023      	str	r3, [r4, #0]
 8010242:	f77f ace3 	ble.w	800fc0c <_vfprintf_r+0x444>
 8010246:	4640      	mov	r0, r8
 8010248:	4649      	mov	r1, r9
 801024a:	aa23      	add	r2, sp, #140	; 0x8c
 801024c:	f003 fa44 	bl	80136d8 <__sprint_r>
 8010250:	2800      	cmp	r0, #0
 8010252:	f47f abb9 	bne.w	800f9c8 <_vfprintf_r+0x200>
 8010256:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801025a:	ac30      	add	r4, sp, #192	; 0xc0
 801025c:	e4d7      	b.n	800fc0e <_vfprintf_r+0x446>
 801025e:	4640      	mov	r0, r8
 8010260:	4649      	mov	r1, r9
 8010262:	aa23      	add	r2, sp, #140	; 0x8c
 8010264:	f003 fa38 	bl	80136d8 <__sprint_r>
 8010268:	2800      	cmp	r0, #0
 801026a:	f43f ad1a 	beq.w	800fca2 <_vfprintf_r+0x4da>
 801026e:	f7ff bbab 	b.w	800f9c8 <_vfprintf_r+0x200>
 8010272:	2b00      	cmp	r3, #0
 8010274:	d133      	bne.n	80102de <_vfprintf_r+0xb16>
 8010276:	9b06      	ldr	r3, [sp, #24]
 8010278:	07da      	lsls	r2, r3, #31
 801027a:	d530      	bpl.n	80102de <_vfprintf_r+0xb16>
 801027c:	f50d 7b80 	add.w	fp, sp, #256	; 0x100
 8010280:	2330      	movs	r3, #48	; 0x30
 8010282:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 8010286:	ab30      	add	r3, sp, #192	; 0xc0
 8010288:	ebcb 0303 	rsb	r3, fp, r3
 801028c:	930b      	str	r3, [sp, #44]	; 0x2c
 801028e:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8010292:	f7ff bbef 	b.w	800fa74 <_vfprintf_r+0x2ac>
 8010296:	4640      	mov	r0, r8
 8010298:	4649      	mov	r1, r9
 801029a:	aa23      	add	r2, sp, #140	; 0x8c
 801029c:	f003 fa1c 	bl	80136d8 <__sprint_r>
 80102a0:	2800      	cmp	r0, #0
 80102a2:	f47f ab91 	bne.w	800f9c8 <_vfprintf_r+0x200>
 80102a6:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 80102aa:	ac30      	add	r4, sp, #192	; 0xc0
 80102ac:	e49d      	b.n	800fbea <_vfprintf_r+0x422>
 80102ae:	4640      	mov	r0, r8
 80102b0:	4649      	mov	r1, r9
 80102b2:	aa23      	add	r2, sp, #140	; 0x8c
 80102b4:	f003 fa10 	bl	80136d8 <__sprint_r>
 80102b8:	2800      	cmp	r0, #0
 80102ba:	f47f ab85 	bne.w	800f9c8 <_vfprintf_r+0x200>
 80102be:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 80102c2:	ac30      	add	r4, sp, #192	; 0xc0
 80102c4:	e443      	b.n	800fb4e <_vfprintf_r+0x386>
 80102c6:	4640      	mov	r0, r8
 80102c8:	4649      	mov	r1, r9
 80102ca:	aa23      	add	r2, sp, #140	; 0x8c
 80102cc:	f003 fa04 	bl	80136d8 <__sprint_r>
 80102d0:	2800      	cmp	r0, #0
 80102d2:	f47f ab79 	bne.w	800f9c8 <_vfprintf_r+0x200>
 80102d6:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 80102da:	ac30      	add	r4, sp, #192	; 0xc0
 80102dc:	e448      	b.n	800fb70 <_vfprintf_r+0x3a8>
 80102de:	ab30      	add	r3, sp, #192	; 0xc0
 80102e0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80102e4:	930e      	str	r3, [sp, #56]	; 0x38
 80102e6:	f7ff bbc5 	b.w	800fa74 <_vfprintf_r+0x2ac>
 80102ea:	9814      	ldr	r0, [sp, #80]	; 0x50
 80102ec:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 80102f0:	0933      	lsrs	r3, r6, #4
 80102f2:	f006 010f 	and.w	r1, r6, #15
 80102f6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80102fa:	093a      	lsrs	r2, r7, #4
 80102fc:	461e      	mov	r6, r3
 80102fe:	4617      	mov	r7, r2
 8010300:	5c43      	ldrb	r3, [r0, r1]
 8010302:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8010306:	ea56 0307 	orrs.w	r3, r6, r7
 801030a:	d1f1      	bne.n	80102f0 <_vfprintf_r+0xb28>
 801030c:	465a      	mov	r2, fp
 801030e:	ab30      	add	r3, sp, #192	; 0xc0
 8010310:	1a9b      	subs	r3, r3, r2
 8010312:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8010316:	930b      	str	r3, [sp, #44]	; 0x2c
 8010318:	f7ff bbac 	b.w	800fa74 <_vfprintf_r+0x2ac>
 801031c:	2302      	movs	r3, #2
 801031e:	f7ff bb77 	b.w	800fa10 <_vfprintf_r+0x248>
 8010322:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8010324:	2d00      	cmp	r5, #0
 8010326:	f340 8257 	ble.w	80107d8 <_vfprintf_r+0x1010>
 801032a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801032c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801032e:	428a      	cmp	r2, r1
 8010330:	4613      	mov	r3, r2
 8010332:	bfa8      	it	ge
 8010334:	460b      	movge	r3, r1
 8010336:	461d      	mov	r5, r3
 8010338:	990e      	ldr	r1, [sp, #56]	; 0x38
 801033a:	2d00      	cmp	r5, #0
 801033c:	eb01 0a02 	add.w	sl, r1, r2
 8010340:	dd0b      	ble.n	801035a <_vfprintf_r+0xb92>
 8010342:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010344:	6021      	str	r1, [r4, #0]
 8010346:	3301      	adds	r3, #1
 8010348:	44ab      	add	fp, r5
 801034a:	2b07      	cmp	r3, #7
 801034c:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 8010350:	6065      	str	r5, [r4, #4]
 8010352:	9324      	str	r3, [sp, #144]	; 0x90
 8010354:	f300 830b 	bgt.w	801096e <_vfprintf_r+0x11a6>
 8010358:	3408      	adds	r4, #8
 801035a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801035c:	2d00      	cmp	r5, #0
 801035e:	bfa8      	it	ge
 8010360:	1b5b      	subge	r3, r3, r5
 8010362:	2b00      	cmp	r3, #0
 8010364:	461d      	mov	r5, r3
 8010366:	f340 80b0 	ble.w	80104ca <_vfprintf_r+0xd02>
 801036a:	2d10      	cmp	r5, #16
 801036c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801036e:	4f04      	ldr	r7, [pc, #16]	; (8010380 <_vfprintf_r+0xbb8>)
 8010370:	f340 821a 	ble.w	80107a8 <_vfprintf_r+0xfe0>
 8010374:	2610      	movs	r6, #16
 8010376:	465a      	mov	r2, fp
 8010378:	e009      	b.n	801038e <_vfprintf_r+0xbc6>
 801037a:	bf00      	nop
 801037c:	08014838 	.word	0x08014838
 8010380:	080147e8 	.word	0x080147e8
 8010384:	3408      	adds	r4, #8
 8010386:	3d10      	subs	r5, #16
 8010388:	2d10      	cmp	r5, #16
 801038a:	f340 820c 	ble.w	80107a6 <_vfprintf_r+0xfde>
 801038e:	3301      	adds	r3, #1
 8010390:	3210      	adds	r2, #16
 8010392:	2b07      	cmp	r3, #7
 8010394:	9225      	str	r2, [sp, #148]	; 0x94
 8010396:	9324      	str	r3, [sp, #144]	; 0x90
 8010398:	6027      	str	r7, [r4, #0]
 801039a:	6066      	str	r6, [r4, #4]
 801039c:	ddf2      	ble.n	8010384 <_vfprintf_r+0xbbc>
 801039e:	4640      	mov	r0, r8
 80103a0:	4649      	mov	r1, r9
 80103a2:	aa23      	add	r2, sp, #140	; 0x8c
 80103a4:	f003 f998 	bl	80136d8 <__sprint_r>
 80103a8:	2800      	cmp	r0, #0
 80103aa:	f47f ab0d 	bne.w	800f9c8 <_vfprintf_r+0x200>
 80103ae:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80103b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80103b2:	ac30      	add	r4, sp, #192	; 0xc0
 80103b4:	e7e7      	b.n	8010386 <_vfprintf_r+0xbbe>
 80103b6:	4640      	mov	r0, r8
 80103b8:	4649      	mov	r1, r9
 80103ba:	aa23      	add	r2, sp, #140	; 0x8c
 80103bc:	f003 f98c 	bl	80136d8 <__sprint_r>
 80103c0:	2800      	cmp	r0, #0
 80103c2:	f47f ab01 	bne.w	800f9c8 <_vfprintf_r+0x200>
 80103c6:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
 80103ca:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 80103ce:	ac30      	add	r4, sp, #192	; 0xc0
 80103d0:	f7ff bbaa 	b.w	800fb28 <_vfprintf_r+0x360>
 80103d4:	f103 3aff 	add.w	sl, r3, #4294967295
 80103d8:	f1ba 0f00 	cmp.w	sl, #0
 80103dc:	f77f af26 	ble.w	801022c <_vfprintf_r+0xa64>
 80103e0:	f1ba 0f10 	cmp.w	sl, #16
 80103e4:	4f8f      	ldr	r7, [pc, #572]	; (8010624 <_vfprintf_r+0xe5c>)
 80103e6:	bfc8      	it	gt
 80103e8:	f04f 0b10 	movgt.w	fp, #16
 80103ec:	dc07      	bgt.n	80103fe <_vfprintf_r+0xc36>
 80103ee:	e0ea      	b.n	80105c6 <_vfprintf_r+0xdfe>
 80103f0:	3408      	adds	r4, #8
 80103f2:	f1aa 0a10 	sub.w	sl, sl, #16
 80103f6:	f1ba 0f10 	cmp.w	sl, #16
 80103fa:	f340 80e4 	ble.w	80105c6 <_vfprintf_r+0xdfe>
 80103fe:	3501      	adds	r5, #1
 8010400:	3610      	adds	r6, #16
 8010402:	2d07      	cmp	r5, #7
 8010404:	9625      	str	r6, [sp, #148]	; 0x94
 8010406:	9524      	str	r5, [sp, #144]	; 0x90
 8010408:	e884 0880 	stmia.w	r4, {r7, fp}
 801040c:	ddf0      	ble.n	80103f0 <_vfprintf_r+0xc28>
 801040e:	4640      	mov	r0, r8
 8010410:	4649      	mov	r1, r9
 8010412:	aa23      	add	r2, sp, #140	; 0x8c
 8010414:	f003 f960 	bl	80136d8 <__sprint_r>
 8010418:	2800      	cmp	r0, #0
 801041a:	f47f aad5 	bne.w	800f9c8 <_vfprintf_r+0x200>
 801041e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8010420:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8010422:	ac30      	add	r4, sp, #192	; 0xc0
 8010424:	e7e5      	b.n	80103f2 <_vfprintf_r+0xc2a>
 8010426:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010428:	460a      	mov	r2, r1
 801042a:	3204      	adds	r2, #4
 801042c:	680e      	ldr	r6, [r1, #0]
 801042e:	920c      	str	r2, [sp, #48]	; 0x30
 8010430:	2700      	movs	r7, #0
 8010432:	f7ff baed 	b.w	800fa10 <_vfprintf_r+0x248>
 8010436:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010438:	6816      	ldr	r6, [r2, #0]
 801043a:	4613      	mov	r3, r2
 801043c:	3304      	adds	r3, #4
 801043e:	17f7      	asrs	r7, r6, #31
 8010440:	930c      	str	r3, [sp, #48]	; 0x30
 8010442:	4632      	mov	r2, r6
 8010444:	463b      	mov	r3, r7
 8010446:	e4c0      	b.n	800fdca <_vfprintf_r+0x602>
 8010448:	4693      	mov	fp, r2
 801044a:	3301      	adds	r3, #1
 801044c:	44ab      	add	fp, r5
 801044e:	2b07      	cmp	r3, #7
 8010450:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 8010454:	9324      	str	r3, [sp, #144]	; 0x90
 8010456:	6027      	str	r7, [r4, #0]
 8010458:	6065      	str	r5, [r4, #4]
 801045a:	f77f abd7 	ble.w	800fc0c <_vfprintf_r+0x444>
 801045e:	e6f2      	b.n	8010246 <_vfprintf_r+0xa7e>
 8010460:	2b30      	cmp	r3, #48	; 0x30
 8010462:	f000 823e 	beq.w	80108e2 <_vfprintf_r+0x111a>
 8010466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010468:	3b01      	subs	r3, #1
 801046a:	461a      	mov	r2, r3
 801046c:	a830      	add	r0, sp, #192	; 0xc0
 801046e:	930e      	str	r3, [sp, #56]	; 0x38
 8010470:	1a82      	subs	r2, r0, r2
 8010472:	2330      	movs	r3, #48	; 0x30
 8010474:	920b      	str	r2, [sp, #44]	; 0x2c
 8010476:	f801 3c01 	strb.w	r3, [r1, #-1]
 801047a:	f7ff bafb 	b.w	800fa74 <_vfprintf_r+0x2ac>
 801047e:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 8010482:	f8cd c01c 	str.w	ip, [sp, #28]
 8010486:	4630      	mov	r0, r6
 8010488:	4639      	mov	r1, r7
 801048a:	220a      	movs	r2, #10
 801048c:	2300      	movs	r3, #0
 801048e:	f7fe fbeb 	bl	800ec68 <__aeabi_uldivmod>
 8010492:	3230      	adds	r2, #48	; 0x30
 8010494:	4630      	mov	r0, r6
 8010496:	4639      	mov	r1, r7
 8010498:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 801049c:	2300      	movs	r3, #0
 801049e:	220a      	movs	r2, #10
 80104a0:	f7fe fbe2 	bl	800ec68 <__aeabi_uldivmod>
 80104a4:	4606      	mov	r6, r0
 80104a6:	460f      	mov	r7, r1
 80104a8:	ea56 0307 	orrs.w	r3, r6, r7
 80104ac:	d1eb      	bne.n	8010486 <_vfprintf_r+0xcbe>
 80104ae:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80104b2:	e72b      	b.n	801030c <_vfprintf_r+0xb44>
 80104b4:	4640      	mov	r0, r8
 80104b6:	4649      	mov	r1, r9
 80104b8:	aa23      	add	r2, sp, #140	; 0x8c
 80104ba:	f003 f90d 	bl	80136d8 <__sprint_r>
 80104be:	2800      	cmp	r0, #0
 80104c0:	f47f aa82 	bne.w	800f9c8 <_vfprintf_r+0x200>
 80104c4:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 80104c8:	ac30      	add	r4, sp, #192	; 0xc0
 80104ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80104cc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80104ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80104d0:	440a      	add	r2, r1
 80104d2:	4616      	mov	r6, r2
 80104d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80104d6:	4293      	cmp	r3, r2
 80104d8:	db3e      	blt.n	8010558 <_vfprintf_r+0xd90>
 80104da:	9a06      	ldr	r2, [sp, #24]
 80104dc:	07d5      	lsls	r5, r2, #31
 80104de:	d43b      	bmi.n	8010558 <_vfprintf_r+0xd90>
 80104e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80104e2:	ebc6 050a 	rsb	r5, r6, sl
 80104e6:	1ad3      	subs	r3, r2, r3
 80104e8:	429d      	cmp	r5, r3
 80104ea:	bfa8      	it	ge
 80104ec:	461d      	movge	r5, r3
 80104ee:	2d00      	cmp	r5, #0
 80104f0:	462f      	mov	r7, r5
 80104f2:	dd0b      	ble.n	801050c <_vfprintf_r+0xd44>
 80104f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80104f6:	6026      	str	r6, [r4, #0]
 80104f8:	3201      	adds	r2, #1
 80104fa:	44ab      	add	fp, r5
 80104fc:	2a07      	cmp	r2, #7
 80104fe:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 8010502:	6065      	str	r5, [r4, #4]
 8010504:	9224      	str	r2, [sp, #144]	; 0x90
 8010506:	f300 8268 	bgt.w	80109da <_vfprintf_r+0x1212>
 801050a:	3408      	adds	r4, #8
 801050c:	2f00      	cmp	r7, #0
 801050e:	bfac      	ite	ge
 8010510:	1bdd      	subge	r5, r3, r7
 8010512:	461d      	movlt	r5, r3
 8010514:	2d00      	cmp	r5, #0
 8010516:	f77f ab7a 	ble.w	800fc0e <_vfprintf_r+0x446>
 801051a:	2d10      	cmp	r5, #16
 801051c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801051e:	4f41      	ldr	r7, [pc, #260]	; (8010624 <_vfprintf_r+0xe5c>)
 8010520:	dd93      	ble.n	801044a <_vfprintf_r+0xc82>
 8010522:	2610      	movs	r6, #16
 8010524:	465a      	mov	r2, fp
 8010526:	e003      	b.n	8010530 <_vfprintf_r+0xd68>
 8010528:	3408      	adds	r4, #8
 801052a:	3d10      	subs	r5, #16
 801052c:	2d10      	cmp	r5, #16
 801052e:	dd8b      	ble.n	8010448 <_vfprintf_r+0xc80>
 8010530:	3301      	adds	r3, #1
 8010532:	3210      	adds	r2, #16
 8010534:	2b07      	cmp	r3, #7
 8010536:	9225      	str	r2, [sp, #148]	; 0x94
 8010538:	9324      	str	r3, [sp, #144]	; 0x90
 801053a:	6027      	str	r7, [r4, #0]
 801053c:	6066      	str	r6, [r4, #4]
 801053e:	ddf3      	ble.n	8010528 <_vfprintf_r+0xd60>
 8010540:	4640      	mov	r0, r8
 8010542:	4649      	mov	r1, r9
 8010544:	aa23      	add	r2, sp, #140	; 0x8c
 8010546:	f003 f8c7 	bl	80136d8 <__sprint_r>
 801054a:	2800      	cmp	r0, #0
 801054c:	f47f aa3c 	bne.w	800f9c8 <_vfprintf_r+0x200>
 8010550:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010552:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010554:	ac30      	add	r4, sp, #192	; 0xc0
 8010556:	e7e8      	b.n	801052a <_vfprintf_r+0xd62>
 8010558:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801055a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801055c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801055e:	6021      	str	r1, [r4, #0]
 8010560:	3201      	adds	r2, #1
 8010562:	4483      	add	fp, r0
 8010564:	2a07      	cmp	r2, #7
 8010566:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801056a:	6060      	str	r0, [r4, #4]
 801056c:	9224      	str	r2, [sp, #144]	; 0x90
 801056e:	f300 820a 	bgt.w	8010986 <_vfprintf_r+0x11be>
 8010572:	3408      	adds	r4, #8
 8010574:	e7b4      	b.n	80104e0 <_vfprintf_r+0xd18>
 8010576:	9b06      	ldr	r3, [sp, #24]
 8010578:	07d8      	lsls	r0, r3, #31
 801057a:	f53f ae27 	bmi.w	80101cc <_vfprintf_r+0xa04>
 801057e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010580:	6023      	str	r3, [r4, #0]
 8010582:	3501      	adds	r5, #1
 8010584:	f10b 0601 	add.w	r6, fp, #1
 8010588:	2301      	movs	r3, #1
 801058a:	2d07      	cmp	r5, #7
 801058c:	9625      	str	r6, [sp, #148]	; 0x94
 801058e:	9524      	str	r5, [sp, #144]	; 0x90
 8010590:	6063      	str	r3, [r4, #4]
 8010592:	f77f ae4a 	ble.w	801022a <_vfprintf_r+0xa62>
 8010596:	4640      	mov	r0, r8
 8010598:	4649      	mov	r1, r9
 801059a:	aa23      	add	r2, sp, #140	; 0x8c
 801059c:	f003 f89c 	bl	80136d8 <__sprint_r>
 80105a0:	2800      	cmp	r0, #0
 80105a2:	f47f aa11 	bne.w	800f9c8 <_vfprintf_r+0x200>
 80105a6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80105a8:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80105aa:	ac30      	add	r4, sp, #192	; 0xc0
 80105ac:	e63e      	b.n	801022c <_vfprintf_r+0xa64>
 80105ae:	4640      	mov	r0, r8
 80105b0:	4649      	mov	r1, r9
 80105b2:	aa23      	add	r2, sp, #140	; 0x8c
 80105b4:	f003 f890 	bl	80136d8 <__sprint_r>
 80105b8:	2800      	cmp	r0, #0
 80105ba:	f47f aa05 	bne.w	800f9c8 <_vfprintf_r+0x200>
 80105be:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80105c0:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80105c2:	ac30      	add	r4, sp, #192	; 0xc0
 80105c4:	e60f      	b.n	80101e6 <_vfprintf_r+0xa1e>
 80105c6:	3501      	adds	r5, #1
 80105c8:	4456      	add	r6, sl
 80105ca:	2d07      	cmp	r5, #7
 80105cc:	9625      	str	r6, [sp, #148]	; 0x94
 80105ce:	9524      	str	r5, [sp, #144]	; 0x90
 80105d0:	e884 0480 	stmia.w	r4, {r7, sl}
 80105d4:	f77f ae29 	ble.w	801022a <_vfprintf_r+0xa62>
 80105d8:	e7dd      	b.n	8010596 <_vfprintf_r+0xdce>
 80105da:	4640      	mov	r0, r8
 80105dc:	4649      	mov	r1, r9
 80105de:	aa23      	add	r2, sp, #140	; 0x8c
 80105e0:	f003 f87a 	bl	80136d8 <__sprint_r>
 80105e4:	2800      	cmp	r0, #0
 80105e6:	f47f a9ef 	bne.w	800f9c8 <_vfprintf_r+0x200>
 80105ea:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80105ec:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80105ee:	ac30      	add	r4, sp, #192	; 0xc0
 80105f0:	e605      	b.n	80101fe <_vfprintf_r+0xa36>
 80105f2:	4640      	mov	r0, r8
 80105f4:	4649      	mov	r1, r9
 80105f6:	aa23      	add	r2, sp, #140	; 0x8c
 80105f8:	f003 f86e 	bl	80136d8 <__sprint_r>
 80105fc:	2800      	cmp	r0, #0
 80105fe:	f47f a9e3 	bne.w	800f9c8 <_vfprintf_r+0x200>
 8010602:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 8010606:	ac30      	add	r4, sp, #192	; 0xc0
 8010608:	f7ff bab5 	b.w	800fb76 <_vfprintf_r+0x3ae>
 801060c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8010610:	4276      	negs	r6, r6
 8010612:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8010616:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
 801061a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 801061e:	2301      	movs	r3, #1
 8010620:	f7ff b9fc 	b.w	800fa1c <_vfprintf_r+0x254>
 8010624:	080147e8 	.word	0x080147e8
 8010628:	f7fd fe78 	bl	800e31c <__fpclassifyd>
 801062c:	2800      	cmp	r0, #0
 801062e:	f000 8118 	beq.w	8010862 <_vfprintf_r+0x109a>
 8010632:	f025 0320 	bic.w	r3, r5, #32
 8010636:	f1ba 3fff 	cmp.w	sl, #4294967295
 801063a:	9307      	str	r3, [sp, #28]
 801063c:	f000 8264 	beq.w	8010b08 <_vfprintf_r+0x1340>
 8010640:	2b47      	cmp	r3, #71	; 0x47
 8010642:	d105      	bne.n	8010650 <_vfprintf_r+0xe88>
 8010644:	f1ba 0f00 	cmp.w	sl, #0
 8010648:	bf14      	ite	ne
 801064a:	46d3      	movne	fp, sl
 801064c:	f04f 0b01 	moveq.w	fp, #1
 8010650:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010652:	9a06      	ldr	r2, [sp, #24]
 8010654:	2b00      	cmp	r3, #0
 8010656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801065a:	920d      	str	r2, [sp, #52]	; 0x34
 801065c:	f2c0 8264 	blt.w	8010b28 <_vfprintf_r+0x1360>
 8010660:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 8010664:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8010668:	f04f 0a00 	mov.w	sl, #0
 801066c:	2d66      	cmp	r5, #102	; 0x66
 801066e:	f000 8160 	beq.w	8010932 <_vfprintf_r+0x116a>
 8010672:	2d46      	cmp	r5, #70	; 0x46
 8010674:	f000 815d 	beq.w	8010932 <_vfprintf_r+0x116a>
 8010678:	9b07      	ldr	r3, [sp, #28]
 801067a:	2b45      	cmp	r3, #69	; 0x45
 801067c:	bf0c      	ite	eq
 801067e:	f10b 0701 	addeq.w	r7, fp, #1
 8010682:	465f      	movne	r7, fp
 8010684:	2002      	movs	r0, #2
 8010686:	a91d      	add	r1, sp, #116	; 0x74
 8010688:	aa1e      	add	r2, sp, #120	; 0x78
 801068a:	ab21      	add	r3, sp, #132	; 0x84
 801068c:	e88d 0081 	stmia.w	sp, {r0, r7}
 8010690:	9203      	str	r2, [sp, #12]
 8010692:	9304      	str	r3, [sp, #16]
 8010694:	9102      	str	r1, [sp, #8]
 8010696:	4640      	mov	r0, r8
 8010698:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 801069c:	f000 fbdc 	bl	8010e58 <_dtoa_r>
 80106a0:	2d67      	cmp	r5, #103	; 0x67
 80106a2:	900e      	str	r0, [sp, #56]	; 0x38
 80106a4:	d002      	beq.n	80106ac <_vfprintf_r+0xee4>
 80106a6:	2d47      	cmp	r5, #71	; 0x47
 80106a8:	f040 8153 	bne.w	8010952 <_vfprintf_r+0x118a>
 80106ac:	9b06      	ldr	r3, [sp, #24]
 80106ae:	07db      	lsls	r3, r3, #31
 80106b0:	f140 8243 	bpl.w	8010b3a <_vfprintf_r+0x1372>
 80106b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106b6:	19de      	adds	r6, r3, r7
 80106b8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80106bc:	2200      	movs	r2, #0
 80106be:	2300      	movs	r3, #0
 80106c0:	f7fe fa78 	bl	800ebb4 <__aeabi_dcmpeq>
 80106c4:	2800      	cmp	r0, #0
 80106c6:	f040 81af 	bne.w	8010a28 <_vfprintf_r+0x1260>
 80106ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80106cc:	429e      	cmp	r6, r3
 80106ce:	d906      	bls.n	80106de <_vfprintf_r+0xf16>
 80106d0:	2130      	movs	r1, #48	; 0x30
 80106d2:	1c5a      	adds	r2, r3, #1
 80106d4:	9221      	str	r2, [sp, #132]	; 0x84
 80106d6:	7019      	strb	r1, [r3, #0]
 80106d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80106da:	429e      	cmp	r6, r3
 80106dc:	d8f9      	bhi.n	80106d2 <_vfprintf_r+0xf0a>
 80106de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80106e0:	1a9b      	subs	r3, r3, r2
 80106e2:	9311      	str	r3, [sp, #68]	; 0x44
 80106e4:	9b07      	ldr	r3, [sp, #28]
 80106e6:	2b47      	cmp	r3, #71	; 0x47
 80106e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80106ea:	f000 8185 	beq.w	80109f8 <_vfprintf_r+0x1230>
 80106ee:	2d65      	cmp	r5, #101	; 0x65
 80106f0:	f340 81a8 	ble.w	8010a44 <_vfprintf_r+0x127c>
 80106f4:	2d66      	cmp	r5, #102	; 0x66
 80106f6:	9310      	str	r3, [sp, #64]	; 0x40
 80106f8:	f000 8221 	beq.w	8010b3e <_vfprintf_r+0x1376>
 80106fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80106fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010700:	4293      	cmp	r3, r2
 8010702:	f300 8204 	bgt.w	8010b0e <_vfprintf_r+0x1346>
 8010706:	9b06      	ldr	r3, [sp, #24]
 8010708:	07d9      	lsls	r1, r3, #31
 801070a:	f100 823b 	bmi.w	8010b84 <_vfprintf_r+0x13bc>
 801070e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010712:	920b      	str	r2, [sp, #44]	; 0x2c
 8010714:	f1ba 0f00 	cmp.w	sl, #0
 8010718:	f040 817b 	bne.w	8010a12 <_vfprintf_r+0x124a>
 801071c:	9307      	str	r3, [sp, #28]
 801071e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010720:	9306      	str	r3, [sp, #24]
 8010722:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8010726:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
 801072a:	f7ff b9ab 	b.w	800fa84 <_vfprintf_r+0x2bc>
 801072e:	f027 0707 	bic.w	r7, r7, #7
 8010732:	ed97 7b00 	vldr	d7, [r7]
 8010736:	f107 0308 	add.w	r3, r7, #8
 801073a:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 801073e:	930c      	str	r3, [sp, #48]	; 0x30
 8010740:	f7ff bb63 	b.w	800fe0a <_vfprintf_r+0x642>
 8010744:	9b06      	ldr	r3, [sp, #24]
 8010746:	06db      	lsls	r3, r3, #27
 8010748:	d40b      	bmi.n	8010762 <_vfprintf_r+0xf9a>
 801074a:	9b06      	ldr	r3, [sp, #24]
 801074c:	065f      	lsls	r7, r3, #25
 801074e:	d508      	bpl.n	8010762 <_vfprintf_r+0xf9a>
 8010750:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010752:	6813      	ldr	r3, [r2, #0]
 8010754:	3204      	adds	r2, #4
 8010756:	920c      	str	r2, [sp, #48]	; 0x30
 8010758:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801075c:	801a      	strh	r2, [r3, #0]
 801075e:	f7ff b874 	b.w	800f84a <_vfprintf_r+0x82>
 8010762:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010764:	6813      	ldr	r3, [r2, #0]
 8010766:	3204      	adds	r2, #4
 8010768:	920c      	str	r2, [sp, #48]	; 0x30
 801076a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801076c:	601a      	str	r2, [r3, #0]
 801076e:	f7ff b86c 	b.w	800f84a <_vfprintf_r+0x82>
 8010772:	9b06      	ldr	r3, [sp, #24]
 8010774:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010776:	f013 0f40 	tst.w	r3, #64	; 0x40
 801077a:	4613      	mov	r3, r2
 801077c:	f43f ac62 	beq.w	8010044 <_vfprintf_r+0x87c>
 8010780:	8816      	ldrh	r6, [r2, #0]
 8010782:	3204      	adds	r2, #4
 8010784:	2700      	movs	r7, #0
 8010786:	2301      	movs	r3, #1
 8010788:	920c      	str	r2, [sp, #48]	; 0x30
 801078a:	f7ff b941 	b.w	800fa10 <_vfprintf_r+0x248>
 801078e:	9b06      	ldr	r3, [sp, #24]
 8010790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010792:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010796:	4613      	mov	r3, r2
 8010798:	d076      	beq.n	8010888 <_vfprintf_r+0x10c0>
 801079a:	3304      	adds	r3, #4
 801079c:	8816      	ldrh	r6, [r2, #0]
 801079e:	930c      	str	r3, [sp, #48]	; 0x30
 80107a0:	2700      	movs	r7, #0
 80107a2:	f7ff bad3 	b.w	800fd4c <_vfprintf_r+0x584>
 80107a6:	4693      	mov	fp, r2
 80107a8:	3301      	adds	r3, #1
 80107aa:	44ab      	add	fp, r5
 80107ac:	2b07      	cmp	r3, #7
 80107ae:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 80107b2:	9324      	str	r3, [sp, #144]	; 0x90
 80107b4:	6027      	str	r7, [r4, #0]
 80107b6:	6065      	str	r5, [r4, #4]
 80107b8:	f73f ae7c 	bgt.w	80104b4 <_vfprintf_r+0xcec>
 80107bc:	3408      	adds	r4, #8
 80107be:	e684      	b.n	80104ca <_vfprintf_r+0xd02>
 80107c0:	4640      	mov	r0, r8
 80107c2:	4649      	mov	r1, r9
 80107c4:	aa23      	add	r2, sp, #140	; 0x8c
 80107c6:	f002 ff87 	bl	80136d8 <__sprint_r>
 80107ca:	2800      	cmp	r0, #0
 80107cc:	f47f a8fc 	bne.w	800f9c8 <_vfprintf_r+0x200>
 80107d0:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 80107d4:	ac30      	add	r4, sp, #192	; 0xc0
 80107d6:	e482      	b.n	80100de <_vfprintf_r+0x916>
 80107d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80107da:	4ab1      	ldr	r2, [pc, #708]	; (8010aa0 <_vfprintf_r+0x12d8>)
 80107dc:	6022      	str	r2, [r4, #0]
 80107de:	3301      	adds	r3, #1
 80107e0:	f10b 0b01 	add.w	fp, fp, #1
 80107e4:	2201      	movs	r2, #1
 80107e6:	2b07      	cmp	r3, #7
 80107e8:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 80107ec:	9324      	str	r3, [sp, #144]	; 0x90
 80107ee:	6062      	str	r2, [r4, #4]
 80107f0:	dc50      	bgt.n	8010894 <_vfprintf_r+0x10cc>
 80107f2:	3408      	adds	r4, #8
 80107f4:	b92d      	cbnz	r5, 8010802 <_vfprintf_r+0x103a>
 80107f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80107f8:	b91b      	cbnz	r3, 8010802 <_vfprintf_r+0x103a>
 80107fa:	9b06      	ldr	r3, [sp, #24]
 80107fc:	07de      	lsls	r6, r3, #31
 80107fe:	f57f aa06 	bpl.w	800fc0e <_vfprintf_r+0x446>
 8010802:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010804:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010806:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010808:	6022      	str	r2, [r4, #0]
 801080a:	3301      	adds	r3, #1
 801080c:	eb0b 0201 	add.w	r2, fp, r1
 8010810:	2b07      	cmp	r3, #7
 8010812:	9225      	str	r2, [sp, #148]	; 0x94
 8010814:	6061      	str	r1, [r4, #4]
 8010816:	9324      	str	r3, [sp, #144]	; 0x90
 8010818:	f300 8169 	bgt.w	8010aee <_vfprintf_r+0x1326>
 801081c:	3408      	adds	r4, #8
 801081e:	426d      	negs	r5, r5
 8010820:	2d00      	cmp	r5, #0
 8010822:	dd6f      	ble.n	8010904 <_vfprintf_r+0x113c>
 8010824:	2d10      	cmp	r5, #16
 8010826:	4f9f      	ldr	r7, [pc, #636]	; (8010aa4 <_vfprintf_r+0x12dc>)
 8010828:	bfc8      	it	gt
 801082a:	2610      	movgt	r6, #16
 801082c:	dc05      	bgt.n	801083a <_vfprintf_r+0x1072>
 801082e:	e0b7      	b.n	80109a0 <_vfprintf_r+0x11d8>
 8010830:	3408      	adds	r4, #8
 8010832:	3d10      	subs	r5, #16
 8010834:	2d10      	cmp	r5, #16
 8010836:	f340 80b3 	ble.w	80109a0 <_vfprintf_r+0x11d8>
 801083a:	3301      	adds	r3, #1
 801083c:	3210      	adds	r2, #16
 801083e:	2b07      	cmp	r3, #7
 8010840:	9225      	str	r2, [sp, #148]	; 0x94
 8010842:	9324      	str	r3, [sp, #144]	; 0x90
 8010844:	6027      	str	r7, [r4, #0]
 8010846:	6066      	str	r6, [r4, #4]
 8010848:	ddf2      	ble.n	8010830 <_vfprintf_r+0x1068>
 801084a:	4640      	mov	r0, r8
 801084c:	4649      	mov	r1, r9
 801084e:	aa23      	add	r2, sp, #140	; 0x8c
 8010850:	f002 ff42 	bl	80136d8 <__sprint_r>
 8010854:	2800      	cmp	r0, #0
 8010856:	f47f a8b7 	bne.w	800f9c8 <_vfprintf_r+0x200>
 801085a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801085c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801085e:	ac30      	add	r4, sp, #192	; 0xc0
 8010860:	e7e7      	b.n	8010832 <_vfprintf_r+0x106a>
 8010862:	9e06      	ldr	r6, [sp, #24]
 8010864:	4a90      	ldr	r2, [pc, #576]	; (8010aa8 <_vfprintf_r+0x12e0>)
 8010866:	4b91      	ldr	r3, [pc, #580]	; (8010aac <_vfprintf_r+0x12e4>)
 8010868:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
 801086c:	900f      	str	r0, [sp, #60]	; 0x3c
 801086e:	2103      	movs	r1, #3
 8010870:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8010874:	2d47      	cmp	r5, #71	; 0x47
 8010876:	bfd8      	it	le
 8010878:	461a      	movle	r2, r3
 801087a:	9107      	str	r1, [sp, #28]
 801087c:	9606      	str	r6, [sp, #24]
 801087e:	9010      	str	r0, [sp, #64]	; 0x40
 8010880:	920e      	str	r2, [sp, #56]	; 0x38
 8010882:	910b      	str	r1, [sp, #44]	; 0x2c
 8010884:	f7ff b8fe 	b.w	800fa84 <_vfprintf_r+0x2bc>
 8010888:	3304      	adds	r3, #4
 801088a:	6816      	ldr	r6, [r2, #0]
 801088c:	930c      	str	r3, [sp, #48]	; 0x30
 801088e:	2700      	movs	r7, #0
 8010890:	f7ff ba5c 	b.w	800fd4c <_vfprintf_r+0x584>
 8010894:	4640      	mov	r0, r8
 8010896:	4649      	mov	r1, r9
 8010898:	aa23      	add	r2, sp, #140	; 0x8c
 801089a:	f002 ff1d 	bl	80136d8 <__sprint_r>
 801089e:	2800      	cmp	r0, #0
 80108a0:	f47f a892 	bne.w	800f9c8 <_vfprintf_r+0x200>
 80108a4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80108a6:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 80108aa:	ac30      	add	r4, sp, #192	; 0xc0
 80108ac:	e7a2      	b.n	80107f4 <_vfprintf_r+0x102c>
 80108ae:	f041 0120 	orr.w	r1, r1, #32
 80108b2:	9106      	str	r1, [sp, #24]
 80108b4:	785d      	ldrb	r5, [r3, #1]
 80108b6:	1c59      	adds	r1, r3, #1
 80108b8:	f7fe bff7 	b.w	800f8aa <_vfprintf_r+0xe2>
 80108bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80108be:	910c      	str	r1, [sp, #48]	; 0x30
 80108c0:	4240      	negs	r0, r0
 80108c2:	900a      	str	r0, [sp, #40]	; 0x28
 80108c4:	4619      	mov	r1, r3
 80108c6:	f7ff b9f1 	b.w	800fcac <_vfprintf_r+0x4e4>
 80108ca:	4640      	mov	r0, r8
 80108cc:	4649      	mov	r1, r9
 80108ce:	aa23      	add	r2, sp, #140	; 0x8c
 80108d0:	f002 ff02 	bl	80136d8 <__sprint_r>
 80108d4:	2800      	cmp	r0, #0
 80108d6:	f47f a877 	bne.w	800f9c8 <_vfprintf_r+0x200>
 80108da:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 80108de:	ac30      	add	r4, sp, #192	; 0xc0
 80108e0:	e413      	b.n	801010a <_vfprintf_r+0x942>
 80108e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80108e4:	ab30      	add	r3, sp, #192	; 0xc0
 80108e6:	1a9b      	subs	r3, r3, r2
 80108e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80108ea:	f7ff b8c3 	b.w	800fa74 <_vfprintf_r+0x2ac>
 80108ee:	4640      	mov	r0, r8
 80108f0:	4649      	mov	r1, r9
 80108f2:	aa23      	add	r2, sp, #140	; 0x8c
 80108f4:	f002 fef0 	bl	80136d8 <__sprint_r>
 80108f8:	2800      	cmp	r0, #0
 80108fa:	f47f a865 	bne.w	800f9c8 <_vfprintf_r+0x200>
 80108fe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010900:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010902:	ac30      	add	r4, sp, #192	; 0xc0
 8010904:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010906:	6060      	str	r0, [r4, #4]
 8010908:	3301      	adds	r3, #1
 801090a:	eb02 0b00 	add.w	fp, r2, r0
 801090e:	2b07      	cmp	r3, #7
 8010910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010912:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 8010916:	9324      	str	r3, [sp, #144]	; 0x90
 8010918:	6022      	str	r2, [r4, #0]
 801091a:	f77f a977 	ble.w	800fc0c <_vfprintf_r+0x444>
 801091e:	e492      	b.n	8010246 <_vfprintf_r+0xa7e>
 8010920:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8010924:	f7fe fde8 	bl	800f4f8 <strlen>
 8010928:	970c      	str	r7, [sp, #48]	; 0x30
 801092a:	900b      	str	r0, [sp, #44]	; 0x2c
 801092c:	4603      	mov	r3, r0
 801092e:	f7ff b9f2 	b.w	800fd16 <_vfprintf_r+0x54e>
 8010932:	2003      	movs	r0, #3
 8010934:	a91d      	add	r1, sp, #116	; 0x74
 8010936:	aa1e      	add	r2, sp, #120	; 0x78
 8010938:	ab21      	add	r3, sp, #132	; 0x84
 801093a:	e88d 0801 	stmia.w	sp, {r0, fp}
 801093e:	9203      	str	r2, [sp, #12]
 8010940:	9304      	str	r3, [sp, #16]
 8010942:	9102      	str	r1, [sp, #8]
 8010944:	4640      	mov	r0, r8
 8010946:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 801094a:	f000 fa85 	bl	8010e58 <_dtoa_r>
 801094e:	465f      	mov	r7, fp
 8010950:	900e      	str	r0, [sp, #56]	; 0x38
 8010952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010954:	19de      	adds	r6, r3, r7
 8010956:	9b07      	ldr	r3, [sp, #28]
 8010958:	2b46      	cmp	r3, #70	; 0x46
 801095a:	f47f aead 	bne.w	80106b8 <_vfprintf_r+0xef0>
 801095e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010960:	781b      	ldrb	r3, [r3, #0]
 8010962:	2b30      	cmp	r3, #48	; 0x30
 8010964:	f000 8100 	beq.w	8010b68 <_vfprintf_r+0x13a0>
 8010968:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 801096a:	443e      	add	r6, r7
 801096c:	e6a4      	b.n	80106b8 <_vfprintf_r+0xef0>
 801096e:	4640      	mov	r0, r8
 8010970:	4649      	mov	r1, r9
 8010972:	aa23      	add	r2, sp, #140	; 0x8c
 8010974:	f002 feb0 	bl	80136d8 <__sprint_r>
 8010978:	2800      	cmp	r0, #0
 801097a:	f47f a825 	bne.w	800f9c8 <_vfprintf_r+0x200>
 801097e:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 8010982:	ac30      	add	r4, sp, #192	; 0xc0
 8010984:	e4e9      	b.n	801035a <_vfprintf_r+0xb92>
 8010986:	4640      	mov	r0, r8
 8010988:	4649      	mov	r1, r9
 801098a:	aa23      	add	r2, sp, #140	; 0x8c
 801098c:	f002 fea4 	bl	80136d8 <__sprint_r>
 8010990:	2800      	cmp	r0, #0
 8010992:	f47f a819 	bne.w	800f9c8 <_vfprintf_r+0x200>
 8010996:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010998:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801099c:	ac30      	add	r4, sp, #192	; 0xc0
 801099e:	e59f      	b.n	80104e0 <_vfprintf_r+0xd18>
 80109a0:	3301      	adds	r3, #1
 80109a2:	442a      	add	r2, r5
 80109a4:	2b07      	cmp	r3, #7
 80109a6:	9225      	str	r2, [sp, #148]	; 0x94
 80109a8:	9324      	str	r3, [sp, #144]	; 0x90
 80109aa:	6027      	str	r7, [r4, #0]
 80109ac:	6065      	str	r5, [r4, #4]
 80109ae:	dc9e      	bgt.n	80108ee <_vfprintf_r+0x1126>
 80109b0:	3408      	adds	r4, #8
 80109b2:	e7a7      	b.n	8010904 <_vfprintf_r+0x113c>
 80109b4:	2e06      	cmp	r6, #6
 80109b6:	4633      	mov	r3, r6
 80109b8:	bf28      	it	cs
 80109ba:	2306      	movcs	r3, #6
 80109bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80109be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80109c2:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 80109c6:	9307      	str	r3, [sp, #28]
 80109c8:	4b39      	ldr	r3, [pc, #228]	; (8010ab0 <_vfprintf_r+0x12e8>)
 80109ca:	970c      	str	r7, [sp, #48]	; 0x30
 80109cc:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80109d0:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80109d4:	930e      	str	r3, [sp, #56]	; 0x38
 80109d6:	f7ff b855 	b.w	800fa84 <_vfprintf_r+0x2bc>
 80109da:	4640      	mov	r0, r8
 80109dc:	4649      	mov	r1, r9
 80109de:	aa23      	add	r2, sp, #140	; 0x8c
 80109e0:	f002 fe7a 	bl	80136d8 <__sprint_r>
 80109e4:	2800      	cmp	r0, #0
 80109e6:	f47e afef 	bne.w	800f9c8 <_vfprintf_r+0x200>
 80109ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80109ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80109ee:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 80109f2:	1ad3      	subs	r3, r2, r3
 80109f4:	ac30      	add	r4, sp, #192	; 0xc0
 80109f6:	e589      	b.n	801050c <_vfprintf_r+0xd44>
 80109f8:	1cdf      	adds	r7, r3, #3
 80109fa:	db22      	blt.n	8010a42 <_vfprintf_r+0x127a>
 80109fc:	459b      	cmp	fp, r3
 80109fe:	db20      	blt.n	8010a42 <_vfprintf_r+0x127a>
 8010a00:	9310      	str	r3, [sp, #64]	; 0x40
 8010a02:	2567      	movs	r5, #103	; 0x67
 8010a04:	e67a      	b.n	80106fc <_vfprintf_r+0xf34>
 8010a06:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8010a0a:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
 8010a0e:	f7ff ba0e 	b.w	800fe2e <_vfprintf_r+0x666>
 8010a12:	9307      	str	r3, [sp, #28]
 8010a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a16:	9306      	str	r3, [sp, #24]
 8010a18:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
 8010a22:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a24:	f7ff b831 	b.w	800fa8a <_vfprintf_r+0x2c2>
 8010a28:	4633      	mov	r3, r6
 8010a2a:	e658      	b.n	80106de <_vfprintf_r+0xf16>
 8010a2c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8010a30:	900f      	str	r0, [sp, #60]	; 0x3c
 8010a32:	970c      	str	r7, [sp, #48]	; 0x30
 8010a34:	9010      	str	r0, [sp, #64]	; 0x40
 8010a36:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
 8010a3a:	9307      	str	r3, [sp, #28]
 8010a3c:	960b      	str	r6, [sp, #44]	; 0x2c
 8010a3e:	f7ff b821 	b.w	800fa84 <_vfprintf_r+0x2bc>
 8010a42:	3d02      	subs	r5, #2
 8010a44:	3b01      	subs	r3, #1
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	931d      	str	r3, [sp, #116]	; 0x74
 8010a4a:	bfba      	itte	lt
 8010a4c:	425b      	neglt	r3, r3
 8010a4e:	222d      	movlt	r2, #45	; 0x2d
 8010a50:	222b      	movge	r2, #43	; 0x2b
 8010a52:	2b09      	cmp	r3, #9
 8010a54:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
 8010a58:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 8010a5c:	f340 8098 	ble.w	8010b90 <_vfprintf_r+0x13c8>
 8010a60:	f10d 068b 	add.w	r6, sp, #139	; 0x8b
 8010a64:	4630      	mov	r0, r6
 8010a66:	4a13      	ldr	r2, [pc, #76]	; (8010ab4 <_vfprintf_r+0x12ec>)
 8010a68:	fb82 2103 	smull	r2, r1, r2, r3
 8010a6c:	17da      	asrs	r2, r3, #31
 8010a6e:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8010a72:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8010a76:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8010a7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a7e:	2a09      	cmp	r2, #9
 8010a80:	4613      	mov	r3, r2
 8010a82:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8010a86:	dcee      	bgt.n	8010a66 <_vfprintf_r+0x129e>
 8010a88:	4602      	mov	r2, r0
 8010a8a:	3330      	adds	r3, #48	; 0x30
 8010a8c:	b2d9      	uxtb	r1, r3
 8010a8e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8010a92:	4296      	cmp	r6, r2
 8010a94:	f240 80a9 	bls.w	8010bea <_vfprintf_r+0x1422>
 8010a98:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	e00d      	b.n	8010abc <_vfprintf_r+0x12f4>
 8010aa0:	08014838 	.word	0x08014838
 8010aa4:	080147e8 	.word	0x080147e8
 8010aa8:	08014804 	.word	0x08014804
 8010aac:	08014800 	.word	0x08014800
 8010ab0:	08014830 	.word	0x08014830
 8010ab4:	66666667 	.word	0x66666667
 8010ab8:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010abc:	f802 1b01 	strb.w	r1, [r2], #1
 8010ac0:	42b3      	cmp	r3, r6
 8010ac2:	d1f9      	bne.n	8010ab8 <_vfprintf_r+0x12f0>
 8010ac4:	ab23      	add	r3, sp, #140	; 0x8c
 8010ac6:	1a1b      	subs	r3, r3, r0
 8010ac8:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 8010acc:	4413      	add	r3, r2
 8010ace:	aa1f      	add	r2, sp, #124	; 0x7c
 8010ad0:	1a9b      	subs	r3, r3, r2
 8010ad2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010ad4:	9317      	str	r3, [sp, #92]	; 0x5c
 8010ad6:	2a01      	cmp	r2, #1
 8010ad8:	4413      	add	r3, r2
 8010ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8010adc:	dd69      	ble.n	8010bb2 <_vfprintf_r+0x13ea>
 8010ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	3301      	adds	r3, #1
 8010ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ae6:	9210      	str	r2, [sp, #64]	; 0x40
 8010ae8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010aec:	e612      	b.n	8010714 <_vfprintf_r+0xf4c>
 8010aee:	4640      	mov	r0, r8
 8010af0:	4649      	mov	r1, r9
 8010af2:	aa23      	add	r2, sp, #140	; 0x8c
 8010af4:	f002 fdf0 	bl	80136d8 <__sprint_r>
 8010af8:	2800      	cmp	r0, #0
 8010afa:	f47e af65 	bne.w	800f9c8 <_vfprintf_r+0x200>
 8010afe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8010b00:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010b02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010b04:	ac30      	add	r4, sp, #192	; 0xc0
 8010b06:	e68a      	b.n	801081e <_vfprintf_r+0x1056>
 8010b08:	f04f 0b06 	mov.w	fp, #6
 8010b0c:	e5a0      	b.n	8010650 <_vfprintf_r+0xe88>
 8010b0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	bfd8      	it	le
 8010b14:	f1c3 0602 	rsble	r6, r3, #2
 8010b18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b1a:	bfc8      	it	gt
 8010b1c:	2601      	movgt	r6, #1
 8010b1e:	18f3      	adds	r3, r6, r3
 8010b20:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010b26:	e5f5      	b.n	8010714 <_vfprintf_r+0xf4c>
 8010b28:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8010b2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b30:	9018      	str	r0, [sp, #96]	; 0x60
 8010b32:	9319      	str	r3, [sp, #100]	; 0x64
 8010b34:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8010b38:	e598      	b.n	801066c <_vfprintf_r+0xea4>
 8010b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b3c:	e5cf      	b.n	80106de <_vfprintf_r+0xf16>
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	dd2e      	ble.n	8010ba0 <_vfprintf_r+0x13d8>
 8010b42:	f1bb 0f00 	cmp.w	fp, #0
 8010b46:	d107      	bne.n	8010b58 <_vfprintf_r+0x1390>
 8010b48:	9b06      	ldr	r3, [sp, #24]
 8010b4a:	07de      	lsls	r6, r3, #31
 8010b4c:	d404      	bmi.n	8010b58 <_vfprintf_r+0x1390>
 8010b4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010b50:	920b      	str	r2, [sp, #44]	; 0x2c
 8010b52:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010b56:	e5dd      	b.n	8010714 <_vfprintf_r+0xf4c>
 8010b58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b5a:	f10b 0601 	add.w	r6, fp, #1
 8010b5e:	4433      	add	r3, r6
 8010b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010b66:	e5d5      	b.n	8010714 <_vfprintf_r+0xf4c>
 8010b68:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	2300      	movs	r3, #0
 8010b70:	f7fe f820 	bl	800ebb4 <__aeabi_dcmpeq>
 8010b74:	2800      	cmp	r0, #0
 8010b76:	f47f aef7 	bne.w	8010968 <_vfprintf_r+0x11a0>
 8010b7a:	f1c7 0701 	rsb	r7, r7, #1
 8010b7e:	971d      	str	r7, [sp, #116]	; 0x74
 8010b80:	443e      	add	r6, r7
 8010b82:	e599      	b.n	80106b8 <_vfprintf_r+0xef0>
 8010b84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b86:	3301      	adds	r3, #1
 8010b88:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010b8e:	e5c1      	b.n	8010714 <_vfprintf_r+0xf4c>
 8010b90:	3330      	adds	r3, #48	; 0x30
 8010b92:	2230      	movs	r2, #48	; 0x30
 8010b94:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8010b98:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 8010b9c:	ab20      	add	r3, sp, #128	; 0x80
 8010b9e:	e796      	b.n	8010ace <_vfprintf_r+0x1306>
 8010ba0:	f1bb 0f00 	cmp.w	fp, #0
 8010ba4:	d11b      	bne.n	8010bde <_vfprintf_r+0x1416>
 8010ba6:	9b06      	ldr	r3, [sp, #24]
 8010ba8:	07d8      	lsls	r0, r3, #31
 8010baa:	d418      	bmi.n	8010bde <_vfprintf_r+0x1416>
 8010bac:	2301      	movs	r3, #1
 8010bae:	930b      	str	r3, [sp, #44]	; 0x2c
 8010bb0:	e5b0      	b.n	8010714 <_vfprintf_r+0xf4c>
 8010bb2:	9b06      	ldr	r3, [sp, #24]
 8010bb4:	f013 0301 	ands.w	r3, r3, #1
 8010bb8:	d191      	bne.n	8010ade <_vfprintf_r+0x1316>
 8010bba:	9310      	str	r3, [sp, #64]	; 0x40
 8010bbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010bc2:	e5a7      	b.n	8010714 <_vfprintf_r+0xf4c>
 8010bc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010bc6:	682e      	ldr	r6, [r5, #0]
 8010bc8:	4628      	mov	r0, r5
 8010bca:	3004      	adds	r0, #4
 8010bcc:	2e00      	cmp	r6, #0
 8010bce:	785d      	ldrb	r5, [r3, #1]
 8010bd0:	900c      	str	r0, [sp, #48]	; 0x30
 8010bd2:	f6be ae6a 	bge.w	800f8aa <_vfprintf_r+0xe2>
 8010bd6:	f04f 36ff 	mov.w	r6, #4294967295
 8010bda:	f7fe be66 	b.w	800f8aa <_vfprintf_r+0xe2>
 8010bde:	f10b 0302 	add.w	r3, fp, #2
 8010be2:	930b      	str	r3, [sp, #44]	; 0x2c
 8010be4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010be8:	e594      	b.n	8010714 <_vfprintf_r+0xf4c>
 8010bea:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 8010bee:	e76e      	b.n	8010ace <_vfprintf_r+0x1306>

08010bf0 <__sbprintf>:
 8010bf0:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8010bf4:	460c      	mov	r4, r1
 8010bf6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8010bfa:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8010bfe:	69e7      	ldr	r7, [r4, #28]
 8010c00:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8010c02:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 8010c06:	9119      	str	r1, [sp, #100]	; 0x64
 8010c08:	ad1a      	add	r5, sp, #104	; 0x68
 8010c0a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8010c0e:	f02e 0e02 	bic.w	lr, lr, #2
 8010c12:	f04f 0c00 	mov.w	ip, #0
 8010c16:	9707      	str	r7, [sp, #28]
 8010c18:	4669      	mov	r1, sp
 8010c1a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8010c1c:	9500      	str	r5, [sp, #0]
 8010c1e:	9504      	str	r5, [sp, #16]
 8010c20:	9602      	str	r6, [sp, #8]
 8010c22:	9605      	str	r6, [sp, #20]
 8010c24:	f8ad e00c 	strh.w	lr, [sp, #12]
 8010c28:	f8ad 900e 	strh.w	r9, [sp, #14]
 8010c2c:	9709      	str	r7, [sp, #36]	; 0x24
 8010c2e:	f8cd c018 	str.w	ip, [sp, #24]
 8010c32:	4606      	mov	r6, r0
 8010c34:	f7fe fdc8 	bl	800f7c8 <_vfprintf_r>
 8010c38:	1e05      	subs	r5, r0, #0
 8010c3a:	db07      	blt.n	8010c4c <__sbprintf+0x5c>
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	4669      	mov	r1, sp
 8010c40:	f001 f8fc 	bl	8011e3c <_fflush_r>
 8010c44:	2800      	cmp	r0, #0
 8010c46:	bf18      	it	ne
 8010c48:	f04f 35ff 	movne.w	r5, #4294967295
 8010c4c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010c50:	065b      	lsls	r3, r3, #25
 8010c52:	d503      	bpl.n	8010c5c <__sbprintf+0x6c>
 8010c54:	89a3      	ldrh	r3, [r4, #12]
 8010c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c5a:	81a3      	strh	r3, [r4, #12]
 8010c5c:	4628      	mov	r0, r5
 8010c5e:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8010c62:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8010c66:	bf00      	nop

08010c68 <__swsetup_r>:
 8010c68:	b538      	push	{r3, r4, r5, lr}
 8010c6a:	4b2f      	ldr	r3, [pc, #188]	; (8010d28 <__swsetup_r+0xc0>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	4605      	mov	r5, r0
 8010c70:	460c      	mov	r4, r1
 8010c72:	b113      	cbz	r3, 8010c7a <__swsetup_r+0x12>
 8010c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c76:	2a00      	cmp	r2, #0
 8010c78:	d036      	beq.n	8010ce8 <__swsetup_r+0x80>
 8010c7a:	89a2      	ldrh	r2, [r4, #12]
 8010c7c:	b293      	uxth	r3, r2
 8010c7e:	0718      	lsls	r0, r3, #28
 8010c80:	d50c      	bpl.n	8010c9c <__swsetup_r+0x34>
 8010c82:	6920      	ldr	r0, [r4, #16]
 8010c84:	b1a8      	cbz	r0, 8010cb2 <__swsetup_r+0x4a>
 8010c86:	f013 0201 	ands.w	r2, r3, #1
 8010c8a:	d01e      	beq.n	8010cca <__swsetup_r+0x62>
 8010c8c:	6963      	ldr	r3, [r4, #20]
 8010c8e:	2200      	movs	r2, #0
 8010c90:	425b      	negs	r3, r3
 8010c92:	61a3      	str	r3, [r4, #24]
 8010c94:	60a2      	str	r2, [r4, #8]
 8010c96:	b1f0      	cbz	r0, 8010cd6 <__swsetup_r+0x6e>
 8010c98:	2000      	movs	r0, #0
 8010c9a:	bd38      	pop	{r3, r4, r5, pc}
 8010c9c:	06d9      	lsls	r1, r3, #27
 8010c9e:	d53b      	bpl.n	8010d18 <__swsetup_r+0xb0>
 8010ca0:	0758      	lsls	r0, r3, #29
 8010ca2:	d425      	bmi.n	8010cf0 <__swsetup_r+0x88>
 8010ca4:	6920      	ldr	r0, [r4, #16]
 8010ca6:	f042 0308 	orr.w	r3, r2, #8
 8010caa:	81a3      	strh	r3, [r4, #12]
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	2800      	cmp	r0, #0
 8010cb0:	d1e9      	bne.n	8010c86 <__swsetup_r+0x1e>
 8010cb2:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8010cb6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8010cba:	d0e4      	beq.n	8010c86 <__swsetup_r+0x1e>
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	4621      	mov	r1, r4
 8010cc0:	f001 fc44 	bl	801254c <__smakebuf_r>
 8010cc4:	89a3      	ldrh	r3, [r4, #12]
 8010cc6:	6920      	ldr	r0, [r4, #16]
 8010cc8:	e7dd      	b.n	8010c86 <__swsetup_r+0x1e>
 8010cca:	0799      	lsls	r1, r3, #30
 8010ccc:	bf58      	it	pl
 8010cce:	6962      	ldrpl	r2, [r4, #20]
 8010cd0:	60a2      	str	r2, [r4, #8]
 8010cd2:	2800      	cmp	r0, #0
 8010cd4:	d1e0      	bne.n	8010c98 <__swsetup_r+0x30>
 8010cd6:	89a3      	ldrh	r3, [r4, #12]
 8010cd8:	061a      	lsls	r2, r3, #24
 8010cda:	d5de      	bpl.n	8010c9a <__swsetup_r+0x32>
 8010cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ce0:	81a3      	strh	r3, [r4, #12]
 8010ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ce6:	bd38      	pop	{r3, r4, r5, pc}
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f001 f93b 	bl	8011f64 <__sinit>
 8010cee:	e7c4      	b.n	8010c7a <__swsetup_r+0x12>
 8010cf0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010cf2:	b149      	cbz	r1, 8010d08 <__swsetup_r+0xa0>
 8010cf4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8010cf8:	4299      	cmp	r1, r3
 8010cfa:	d003      	beq.n	8010d04 <__swsetup_r+0x9c>
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	f001 f989 	bl	8012014 <_free_r>
 8010d02:	89a2      	ldrh	r2, [r4, #12]
 8010d04:	2300      	movs	r3, #0
 8010d06:	6323      	str	r3, [r4, #48]	; 0x30
 8010d08:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	6920      	ldr	r0, [r4, #16]
 8010d10:	6063      	str	r3, [r4, #4]
 8010d12:	b292      	uxth	r2, r2
 8010d14:	6020      	str	r0, [r4, #0]
 8010d16:	e7c6      	b.n	8010ca6 <__swsetup_r+0x3e>
 8010d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010d1c:	2309      	movs	r3, #9
 8010d1e:	602b      	str	r3, [r5, #0]
 8010d20:	f04f 30ff 	mov.w	r0, #4294967295
 8010d24:	81a2      	strh	r2, [r4, #12]
 8010d26:	bd38      	pop	{r3, r4, r5, pc}
 8010d28:	1ffe8cb0 	.word	0x1ffe8cb0

08010d2c <quorem>:
 8010d2c:	6902      	ldr	r2, [r0, #16]
 8010d2e:	690b      	ldr	r3, [r1, #16]
 8010d30:	4293      	cmp	r3, r2
 8010d32:	f300 808f 	bgt.w	8010e54 <quorem+0x128>
 8010d36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8010d3e:	f101 0714 	add.w	r7, r1, #20
 8010d42:	f100 0b14 	add.w	fp, r0, #20
 8010d46:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8010d4a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8010d4e:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8010d52:	b083      	sub	sp, #12
 8010d54:	3201      	adds	r2, #1
 8010d56:	fbb3 f9f2 	udiv	r9, r3, r2
 8010d5a:	eb0b 0304 	add.w	r3, fp, r4
 8010d5e:	9400      	str	r4, [sp, #0]
 8010d60:	eb07 0a04 	add.w	sl, r7, r4
 8010d64:	9301      	str	r3, [sp, #4]
 8010d66:	f1b9 0f00 	cmp.w	r9, #0
 8010d6a:	d03b      	beq.n	8010de4 <quorem+0xb8>
 8010d6c:	2600      	movs	r6, #0
 8010d6e:	4632      	mov	r2, r6
 8010d70:	46bc      	mov	ip, r7
 8010d72:	46de      	mov	lr, fp
 8010d74:	4634      	mov	r4, r6
 8010d76:	f85c 6b04 	ldr.w	r6, [ip], #4
 8010d7a:	f8de 5000 	ldr.w	r5, [lr]
 8010d7e:	b2b3      	uxth	r3, r6
 8010d80:	0c36      	lsrs	r6, r6, #16
 8010d82:	fb03 4409 	mla	r4, r3, r9, r4
 8010d86:	fb06 f609 	mul.w	r6, r6, r9
 8010d8a:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 8010d8e:	b2a3      	uxth	r3, r4
 8010d90:	1ad3      	subs	r3, r2, r3
 8010d92:	b2b4      	uxth	r4, r6
 8010d94:	fa13 f385 	uxtah	r3, r3, r5
 8010d98:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 8010d9c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8010da0:	b29b      	uxth	r3, r3
 8010da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010da6:	45e2      	cmp	sl, ip
 8010da8:	ea4f 4224 	mov.w	r2, r4, asr #16
 8010dac:	f84e 3b04 	str.w	r3, [lr], #4
 8010db0:	ea4f 4416 	mov.w	r4, r6, lsr #16
 8010db4:	d2df      	bcs.n	8010d76 <quorem+0x4a>
 8010db6:	9b00      	ldr	r3, [sp, #0]
 8010db8:	f85b 3003 	ldr.w	r3, [fp, r3]
 8010dbc:	b993      	cbnz	r3, 8010de4 <quorem+0xb8>
 8010dbe:	9c01      	ldr	r4, [sp, #4]
 8010dc0:	1f23      	subs	r3, r4, #4
 8010dc2:	459b      	cmp	fp, r3
 8010dc4:	d20c      	bcs.n	8010de0 <quorem+0xb4>
 8010dc6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010dca:	b94b      	cbnz	r3, 8010de0 <quorem+0xb4>
 8010dcc:	f1a4 0308 	sub.w	r3, r4, #8
 8010dd0:	e002      	b.n	8010dd8 <quorem+0xac>
 8010dd2:	681a      	ldr	r2, [r3, #0]
 8010dd4:	3b04      	subs	r3, #4
 8010dd6:	b91a      	cbnz	r2, 8010de0 <quorem+0xb4>
 8010dd8:	459b      	cmp	fp, r3
 8010dda:	f108 38ff 	add.w	r8, r8, #4294967295
 8010dde:	d3f8      	bcc.n	8010dd2 <quorem+0xa6>
 8010de0:	f8c0 8010 	str.w	r8, [r0, #16]
 8010de4:	4604      	mov	r4, r0
 8010de6:	f002 f907 	bl	8012ff8 <__mcmp>
 8010dea:	2800      	cmp	r0, #0
 8010dec:	db2e      	blt.n	8010e4c <quorem+0x120>
 8010dee:	f109 0901 	add.w	r9, r9, #1
 8010df2:	465d      	mov	r5, fp
 8010df4:	2300      	movs	r3, #0
 8010df6:	f857 1b04 	ldr.w	r1, [r7], #4
 8010dfa:	6828      	ldr	r0, [r5, #0]
 8010dfc:	b28a      	uxth	r2, r1
 8010dfe:	1a9a      	subs	r2, r3, r2
 8010e00:	0c09      	lsrs	r1, r1, #16
 8010e02:	fa12 f280 	uxtah	r2, r2, r0
 8010e06:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8010e0a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8010e0e:	b291      	uxth	r1, r2
 8010e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010e14:	45ba      	cmp	sl, r7
 8010e16:	f845 1b04 	str.w	r1, [r5], #4
 8010e1a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8010e1e:	d2ea      	bcs.n	8010df6 <quorem+0xca>
 8010e20:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8010e24:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8010e28:	b982      	cbnz	r2, 8010e4c <quorem+0x120>
 8010e2a:	1f1a      	subs	r2, r3, #4
 8010e2c:	4593      	cmp	fp, r2
 8010e2e:	d20b      	bcs.n	8010e48 <quorem+0x11c>
 8010e30:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8010e34:	b942      	cbnz	r2, 8010e48 <quorem+0x11c>
 8010e36:	3b08      	subs	r3, #8
 8010e38:	e002      	b.n	8010e40 <quorem+0x114>
 8010e3a:	681a      	ldr	r2, [r3, #0]
 8010e3c:	3b04      	subs	r3, #4
 8010e3e:	b91a      	cbnz	r2, 8010e48 <quorem+0x11c>
 8010e40:	459b      	cmp	fp, r3
 8010e42:	f108 38ff 	add.w	r8, r8, #4294967295
 8010e46:	d3f8      	bcc.n	8010e3a <quorem+0x10e>
 8010e48:	f8c4 8010 	str.w	r8, [r4, #16]
 8010e4c:	4648      	mov	r0, r9
 8010e4e:	b003      	add	sp, #12
 8010e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e54:	2000      	movs	r0, #0
 8010e56:	4770      	bx	lr

08010e58 <_dtoa_r>:
 8010e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e5c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8010e5e:	b097      	sub	sp, #92	; 0x5c
 8010e60:	4604      	mov	r4, r0
 8010e62:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8010e64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010e68:	b141      	cbz	r1, 8010e7c <_dtoa_r+0x24>
 8010e6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010e6c:	604a      	str	r2, [r1, #4]
 8010e6e:	2301      	movs	r3, #1
 8010e70:	4093      	lsls	r3, r2
 8010e72:	608b      	str	r3, [r1, #8]
 8010e74:	f001 fedc 	bl	8012c30 <_Bfree>
 8010e78:	2300      	movs	r3, #0
 8010e7a:	6423      	str	r3, [r4, #64]	; 0x40
 8010e7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	4699      	mov	r9, r3
 8010e84:	db36      	blt.n	8010ef4 <_dtoa_r+0x9c>
 8010e86:	2300      	movs	r3, #0
 8010e88:	602b      	str	r3, [r5, #0]
 8010e8a:	4ba5      	ldr	r3, [pc, #660]	; (8011120 <_dtoa_r+0x2c8>)
 8010e8c:	461a      	mov	r2, r3
 8010e8e:	ea09 0303 	and.w	r3, r9, r3
 8010e92:	4293      	cmp	r3, r2
 8010e94:	d017      	beq.n	8010ec6 <_dtoa_r+0x6e>
 8010e96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	4630      	mov	r0, r6
 8010ea0:	4639      	mov	r1, r7
 8010ea2:	f7fd fe87 	bl	800ebb4 <__aeabi_dcmpeq>
 8010ea6:	4680      	mov	r8, r0
 8010ea8:	2800      	cmp	r0, #0
 8010eaa:	d02b      	beq.n	8010f04 <_dtoa_r+0xac>
 8010eac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010eae:	2301      	movs	r3, #1
 8010eb0:	6013      	str	r3, [r2, #0]
 8010eb2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	f000 80cb 	beq.w	8011050 <_dtoa_r+0x1f8>
 8010eba:	489a      	ldr	r0, [pc, #616]	; (8011124 <_dtoa_r+0x2cc>)
 8010ebc:	6018      	str	r0, [r3, #0]
 8010ebe:	3801      	subs	r0, #1
 8010ec0:	b017      	add	sp, #92	; 0x5c
 8010ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ec6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010ec8:	f242 730f 	movw	r3, #9999	; 0x270f
 8010ecc:	6013      	str	r3, [r2, #0]
 8010ece:	9b02      	ldr	r3, [sp, #8]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	f000 80a6 	beq.w	8011022 <_dtoa_r+0x1ca>
 8010ed6:	4894      	ldr	r0, [pc, #592]	; (8011128 <_dtoa_r+0x2d0>)
 8010ed8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d0f0      	beq.n	8010ec0 <_dtoa_r+0x68>
 8010ede:	78c3      	ldrb	r3, [r0, #3]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	f000 80b7 	beq.w	8011054 <_dtoa_r+0x1fc>
 8010ee6:	f100 0308 	add.w	r3, r0, #8
 8010eea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010eec:	6013      	str	r3, [r2, #0]
 8010eee:	b017      	add	sp, #92	; 0x5c
 8010ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ef4:	9a03      	ldr	r2, [sp, #12]
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 8010efc:	602b      	str	r3, [r5, #0]
 8010efe:	f8cd 900c 	str.w	r9, [sp, #12]
 8010f02:	e7c2      	b.n	8010e8a <_dtoa_r+0x32>
 8010f04:	aa15      	add	r2, sp, #84	; 0x54
 8010f06:	ab14      	add	r3, sp, #80	; 0x50
 8010f08:	e88d 000c 	stmia.w	sp, {r2, r3}
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	4632      	mov	r2, r6
 8010f10:	463b      	mov	r3, r7
 8010f12:	f002 f8ff 	bl	8013114 <__d2b>
 8010f16:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8010f1a:	4683      	mov	fp, r0
 8010f1c:	f040 808a 	bne.w	8011034 <_dtoa_r+0x1dc>
 8010f20:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010f24:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8010f26:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8010f2a:	4445      	add	r5, r8
 8010f2c:	429d      	cmp	r5, r3
 8010f2e:	f2c0 8297 	blt.w	8011460 <_dtoa_r+0x608>
 8010f32:	4a7e      	ldr	r2, [pc, #504]	; (801112c <_dtoa_r+0x2d4>)
 8010f34:	1b52      	subs	r2, r2, r5
 8010f36:	fa09 f902 	lsl.w	r9, r9, r2
 8010f3a:	9a02      	ldr	r2, [sp, #8]
 8010f3c:	f205 4312 	addw	r3, r5, #1042	; 0x412
 8010f40:	fa22 f003 	lsr.w	r0, r2, r3
 8010f44:	ea49 0000 	orr.w	r0, r9, r0
 8010f48:	f7fd fb56 	bl	800e5f8 <__aeabi_ui2d>
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	3d01      	subs	r5, #1
 8010f50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8010f54:	930d      	str	r3, [sp, #52]	; 0x34
 8010f56:	2200      	movs	r2, #0
 8010f58:	4b75      	ldr	r3, [pc, #468]	; (8011130 <_dtoa_r+0x2d8>)
 8010f5a:	f7fd fa0f 	bl	800e37c <__aeabi_dsub>
 8010f5e:	a36a      	add	r3, pc, #424	; (adr r3, 8011108 <_dtoa_r+0x2b0>)
 8010f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f64:	f7fd fbbe 	bl	800e6e4 <__aeabi_dmul>
 8010f68:	a369      	add	r3, pc, #420	; (adr r3, 8011110 <_dtoa_r+0x2b8>)
 8010f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f6e:	f7fd fa07 	bl	800e380 <__adddf3>
 8010f72:	4606      	mov	r6, r0
 8010f74:	4628      	mov	r0, r5
 8010f76:	460f      	mov	r7, r1
 8010f78:	f7fd fb4e 	bl	800e618 <__aeabi_i2d>
 8010f7c:	a366      	add	r3, pc, #408	; (adr r3, 8011118 <_dtoa_r+0x2c0>)
 8010f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f82:	f7fd fbaf 	bl	800e6e4 <__aeabi_dmul>
 8010f86:	4602      	mov	r2, r0
 8010f88:	460b      	mov	r3, r1
 8010f8a:	4630      	mov	r0, r6
 8010f8c:	4639      	mov	r1, r7
 8010f8e:	f7fd f9f7 	bl	800e380 <__adddf3>
 8010f92:	4606      	mov	r6, r0
 8010f94:	460f      	mov	r7, r1
 8010f96:	f7fd fe3f 	bl	800ec18 <__aeabi_d2iz>
 8010f9a:	4639      	mov	r1, r7
 8010f9c:	9004      	str	r0, [sp, #16]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	4630      	mov	r0, r6
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	f7fd fe10 	bl	800ebc8 <__aeabi_dcmplt>
 8010fa8:	2800      	cmp	r0, #0
 8010faa:	f040 81a6 	bne.w	80112fa <_dtoa_r+0x4a2>
 8010fae:	9b04      	ldr	r3, [sp, #16]
 8010fb0:	2b16      	cmp	r3, #22
 8010fb2:	f200 819f 	bhi.w	80112f4 <_dtoa_r+0x49c>
 8010fb6:	9a04      	ldr	r2, [sp, #16]
 8010fb8:	4b5e      	ldr	r3, [pc, #376]	; (8011134 <_dtoa_r+0x2dc>)
 8010fba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010fc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010fc6:	f7fd fe1d 	bl	800ec04 <__aeabi_dcmpgt>
 8010fca:	2800      	cmp	r0, #0
 8010fcc:	f000 824e 	beq.w	801146c <_dtoa_r+0x614>
 8010fd0:	9b04      	ldr	r3, [sp, #16]
 8010fd2:	3b01      	subs	r3, #1
 8010fd4:	9304      	str	r3, [sp, #16]
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8010fda:	ebc5 0508 	rsb	r5, r5, r8
 8010fde:	f1b5 0a01 	subs.w	sl, r5, #1
 8010fe2:	f100 81a1 	bmi.w	8011328 <_dtoa_r+0x4d0>
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	9305      	str	r3, [sp, #20]
 8010fea:	9b04      	ldr	r3, [sp, #16]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	f2c0 8192 	blt.w	8011316 <_dtoa_r+0x4be>
 8010ff2:	449a      	add	sl, r3
 8010ff4:	930a      	str	r3, [sp, #40]	; 0x28
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	9308      	str	r3, [sp, #32]
 8010ffa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010ffc:	2b09      	cmp	r3, #9
 8010ffe:	d82b      	bhi.n	8011058 <_dtoa_r+0x200>
 8011000:	2b05      	cmp	r3, #5
 8011002:	f340 866d 	ble.w	8011ce0 <_dtoa_r+0xe88>
 8011006:	3b04      	subs	r3, #4
 8011008:	9320      	str	r3, [sp, #128]	; 0x80
 801100a:	2500      	movs	r5, #0
 801100c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801100e:	3b02      	subs	r3, #2
 8011010:	2b03      	cmp	r3, #3
 8011012:	f200 864b 	bhi.w	8011cac <_dtoa_r+0xe54>
 8011016:	e8df f013 	tbh	[pc, r3, lsl #1]
 801101a:	03cc      	.short	0x03cc
 801101c:	02b203be 	.word	0x02b203be
 8011020:	0660      	.short	0x0660
 8011022:	4b41      	ldr	r3, [pc, #260]	; (8011128 <_dtoa_r+0x2d0>)
 8011024:	4a44      	ldr	r2, [pc, #272]	; (8011138 <_dtoa_r+0x2e0>)
 8011026:	f3c9 0013 	ubfx	r0, r9, #0, #20
 801102a:	2800      	cmp	r0, #0
 801102c:	bf14      	ite	ne
 801102e:	4618      	movne	r0, r3
 8011030:	4610      	moveq	r0, r2
 8011032:	e751      	b.n	8010ed8 <_dtoa_r+0x80>
 8011034:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011038:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801103c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8011040:	4630      	mov	r0, r6
 8011042:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011046:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801104a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801104e:	e782      	b.n	8010f56 <_dtoa_r+0xfe>
 8011050:	483a      	ldr	r0, [pc, #232]	; (801113c <_dtoa_r+0x2e4>)
 8011052:	e735      	b.n	8010ec0 <_dtoa_r+0x68>
 8011054:	1cc3      	adds	r3, r0, #3
 8011056:	e748      	b.n	8010eea <_dtoa_r+0x92>
 8011058:	2100      	movs	r1, #0
 801105a:	6461      	str	r1, [r4, #68]	; 0x44
 801105c:	4620      	mov	r0, r4
 801105e:	9120      	str	r1, [sp, #128]	; 0x80
 8011060:	f001 fdc0 	bl	8012be4 <_Balloc>
 8011064:	f04f 33ff 	mov.w	r3, #4294967295
 8011068:	9306      	str	r3, [sp, #24]
 801106a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801106c:	930c      	str	r3, [sp, #48]	; 0x30
 801106e:	2301      	movs	r3, #1
 8011070:	9007      	str	r0, [sp, #28]
 8011072:	9221      	str	r2, [sp, #132]	; 0x84
 8011074:	6420      	str	r0, [r4, #64]	; 0x40
 8011076:	9309      	str	r3, [sp, #36]	; 0x24
 8011078:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801107a:	2b00      	cmp	r3, #0
 801107c:	f2c0 80d2 	blt.w	8011224 <_dtoa_r+0x3cc>
 8011080:	9a04      	ldr	r2, [sp, #16]
 8011082:	2a0e      	cmp	r2, #14
 8011084:	f300 80ce 	bgt.w	8011224 <_dtoa_r+0x3cc>
 8011088:	4b2a      	ldr	r3, [pc, #168]	; (8011134 <_dtoa_r+0x2dc>)
 801108a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801108e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011094:	2b00      	cmp	r3, #0
 8011096:	f2c0 838f 	blt.w	80117b8 <_dtoa_r+0x960>
 801109a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801109e:	4642      	mov	r2, r8
 80110a0:	464b      	mov	r3, r9
 80110a2:	4630      	mov	r0, r6
 80110a4:	4639      	mov	r1, r7
 80110a6:	f7fd fc47 	bl	800e938 <__aeabi_ddiv>
 80110aa:	f7fd fdb5 	bl	800ec18 <__aeabi_d2iz>
 80110ae:	4682      	mov	sl, r0
 80110b0:	f7fd fab2 	bl	800e618 <__aeabi_i2d>
 80110b4:	4642      	mov	r2, r8
 80110b6:	464b      	mov	r3, r9
 80110b8:	f7fd fb14 	bl	800e6e4 <__aeabi_dmul>
 80110bc:	460b      	mov	r3, r1
 80110be:	4602      	mov	r2, r0
 80110c0:	4639      	mov	r1, r7
 80110c2:	4630      	mov	r0, r6
 80110c4:	f7fd f95a 	bl	800e37c <__aeabi_dsub>
 80110c8:	9d07      	ldr	r5, [sp, #28]
 80110ca:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 80110ce:	702b      	strb	r3, [r5, #0]
 80110d0:	9b06      	ldr	r3, [sp, #24]
 80110d2:	2b01      	cmp	r3, #1
 80110d4:	4606      	mov	r6, r0
 80110d6:	460f      	mov	r7, r1
 80110d8:	f105 0501 	add.w	r5, r5, #1
 80110dc:	d062      	beq.n	80111a4 <_dtoa_r+0x34c>
 80110de:	2200      	movs	r2, #0
 80110e0:	4b17      	ldr	r3, [pc, #92]	; (8011140 <_dtoa_r+0x2e8>)
 80110e2:	f7fd faff 	bl	800e6e4 <__aeabi_dmul>
 80110e6:	2200      	movs	r2, #0
 80110e8:	2300      	movs	r3, #0
 80110ea:	4606      	mov	r6, r0
 80110ec:	460f      	mov	r7, r1
 80110ee:	f7fd fd61 	bl	800ebb4 <__aeabi_dcmpeq>
 80110f2:	2800      	cmp	r0, #0
 80110f4:	f040 8083 	bne.w	80111fe <_dtoa_r+0x3a6>
 80110f8:	f8cd b008 	str.w	fp, [sp, #8]
 80110fc:	9405      	str	r4, [sp, #20]
 80110fe:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8011102:	9c06      	ldr	r4, [sp, #24]
 8011104:	e029      	b.n	801115a <_dtoa_r+0x302>
 8011106:	bf00      	nop
 8011108:	636f4361 	.word	0x636f4361
 801110c:	3fd287a7 	.word	0x3fd287a7
 8011110:	8b60c8b3 	.word	0x8b60c8b3
 8011114:	3fc68a28 	.word	0x3fc68a28
 8011118:	509f79fb 	.word	0x509f79fb
 801111c:	3fd34413 	.word	0x3fd34413
 8011120:	7ff00000 	.word	0x7ff00000
 8011124:	08014839 	.word	0x08014839
 8011128:	08014858 	.word	0x08014858
 801112c:	fffffc0e 	.word	0xfffffc0e
 8011130:	3ff80000 	.word	0x3ff80000
 8011134:	08014868 	.word	0x08014868
 8011138:	0801484c 	.word	0x0801484c
 801113c:	08014838 	.word	0x08014838
 8011140:	40240000 	.word	0x40240000
 8011144:	f7fd face 	bl	800e6e4 <__aeabi_dmul>
 8011148:	2200      	movs	r2, #0
 801114a:	2300      	movs	r3, #0
 801114c:	4606      	mov	r6, r0
 801114e:	460f      	mov	r7, r1
 8011150:	f7fd fd30 	bl	800ebb4 <__aeabi_dcmpeq>
 8011154:	2800      	cmp	r0, #0
 8011156:	f040 83de 	bne.w	8011916 <_dtoa_r+0xabe>
 801115a:	4642      	mov	r2, r8
 801115c:	464b      	mov	r3, r9
 801115e:	4630      	mov	r0, r6
 8011160:	4639      	mov	r1, r7
 8011162:	f7fd fbe9 	bl	800e938 <__aeabi_ddiv>
 8011166:	f7fd fd57 	bl	800ec18 <__aeabi_d2iz>
 801116a:	4682      	mov	sl, r0
 801116c:	f7fd fa54 	bl	800e618 <__aeabi_i2d>
 8011170:	4642      	mov	r2, r8
 8011172:	464b      	mov	r3, r9
 8011174:	f7fd fab6 	bl	800e6e4 <__aeabi_dmul>
 8011178:	4602      	mov	r2, r0
 801117a:	460b      	mov	r3, r1
 801117c:	4630      	mov	r0, r6
 801117e:	4639      	mov	r1, r7
 8011180:	f7fd f8fc 	bl	800e37c <__aeabi_dsub>
 8011184:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8011188:	f805 eb01 	strb.w	lr, [r5], #1
 801118c:	ebcb 0e05 	rsb	lr, fp, r5
 8011190:	4574      	cmp	r4, lr
 8011192:	4606      	mov	r6, r0
 8011194:	460f      	mov	r7, r1
 8011196:	f04f 0200 	mov.w	r2, #0
 801119a:	4bb5      	ldr	r3, [pc, #724]	; (8011470 <_dtoa_r+0x618>)
 801119c:	d1d2      	bne.n	8011144 <_dtoa_r+0x2ec>
 801119e:	f8dd b008 	ldr.w	fp, [sp, #8]
 80111a2:	9c05      	ldr	r4, [sp, #20]
 80111a4:	4632      	mov	r2, r6
 80111a6:	463b      	mov	r3, r7
 80111a8:	4630      	mov	r0, r6
 80111aa:	4639      	mov	r1, r7
 80111ac:	f7fd f8e8 	bl	800e380 <__adddf3>
 80111b0:	4606      	mov	r6, r0
 80111b2:	460f      	mov	r7, r1
 80111b4:	4640      	mov	r0, r8
 80111b6:	4649      	mov	r1, r9
 80111b8:	4632      	mov	r2, r6
 80111ba:	463b      	mov	r3, r7
 80111bc:	f7fd fd04 	bl	800ebc8 <__aeabi_dcmplt>
 80111c0:	b948      	cbnz	r0, 80111d6 <_dtoa_r+0x37e>
 80111c2:	4640      	mov	r0, r8
 80111c4:	4649      	mov	r1, r9
 80111c6:	4632      	mov	r2, r6
 80111c8:	463b      	mov	r3, r7
 80111ca:	f7fd fcf3 	bl	800ebb4 <__aeabi_dcmpeq>
 80111ce:	b1b0      	cbz	r0, 80111fe <_dtoa_r+0x3a6>
 80111d0:	f01a 0f01 	tst.w	sl, #1
 80111d4:	d013      	beq.n	80111fe <_dtoa_r+0x3a6>
 80111d6:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 80111da:	9907      	ldr	r1, [sp, #28]
 80111dc:	1e6b      	subs	r3, r5, #1
 80111de:	e004      	b.n	80111ea <_dtoa_r+0x392>
 80111e0:	428b      	cmp	r3, r1
 80111e2:	f000 8442 	beq.w	8011a6a <_dtoa_r+0xc12>
 80111e6:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 80111ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80111ee:	f103 0501 	add.w	r5, r3, #1
 80111f2:	461a      	mov	r2, r3
 80111f4:	d0f4      	beq.n	80111e0 <_dtoa_r+0x388>
 80111f6:	f108 0301 	add.w	r3, r8, #1
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	7013      	strb	r3, [r2, #0]
 80111fe:	4620      	mov	r0, r4
 8011200:	4659      	mov	r1, fp
 8011202:	f001 fd15 	bl	8012c30 <_Bfree>
 8011206:	2200      	movs	r2, #0
 8011208:	9b04      	ldr	r3, [sp, #16]
 801120a:	702a      	strb	r2, [r5, #0]
 801120c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801120e:	3301      	adds	r3, #1
 8011210:	6013      	str	r3, [r2, #0]
 8011212:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011214:	2b00      	cmp	r3, #0
 8011216:	f000 8345 	beq.w	80118a4 <_dtoa_r+0xa4c>
 801121a:	9807      	ldr	r0, [sp, #28]
 801121c:	601d      	str	r5, [r3, #0]
 801121e:	b017      	add	sp, #92	; 0x5c
 8011220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011226:	2a00      	cmp	r2, #0
 8011228:	f000 8084 	beq.w	8011334 <_dtoa_r+0x4dc>
 801122c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801122e:	2a01      	cmp	r2, #1
 8011230:	f340 8304 	ble.w	801183c <_dtoa_r+0x9e4>
 8011234:	9b06      	ldr	r3, [sp, #24]
 8011236:	1e5f      	subs	r7, r3, #1
 8011238:	9b08      	ldr	r3, [sp, #32]
 801123a:	42bb      	cmp	r3, r7
 801123c:	f2c0 83a0 	blt.w	8011980 <_dtoa_r+0xb28>
 8011240:	1bdf      	subs	r7, r3, r7
 8011242:	9b06      	ldr	r3, [sp, #24]
 8011244:	2b00      	cmp	r3, #0
 8011246:	f2c0 849e 	blt.w	8011b86 <_dtoa_r+0xd2e>
 801124a:	9d05      	ldr	r5, [sp, #20]
 801124c:	9b06      	ldr	r3, [sp, #24]
 801124e:	9a05      	ldr	r2, [sp, #20]
 8011250:	4620      	mov	r0, r4
 8011252:	441a      	add	r2, r3
 8011254:	2101      	movs	r1, #1
 8011256:	9205      	str	r2, [sp, #20]
 8011258:	449a      	add	sl, r3
 801125a:	f001 fd83 	bl	8012d64 <__i2b>
 801125e:	4606      	mov	r6, r0
 8011260:	b165      	cbz	r5, 801127c <_dtoa_r+0x424>
 8011262:	f1ba 0f00 	cmp.w	sl, #0
 8011266:	dd09      	ble.n	801127c <_dtoa_r+0x424>
 8011268:	45aa      	cmp	sl, r5
 801126a:	9a05      	ldr	r2, [sp, #20]
 801126c:	4653      	mov	r3, sl
 801126e:	bfa8      	it	ge
 8011270:	462b      	movge	r3, r5
 8011272:	1ad2      	subs	r2, r2, r3
 8011274:	9205      	str	r2, [sp, #20]
 8011276:	1aed      	subs	r5, r5, r3
 8011278:	ebc3 0a0a 	rsb	sl, r3, sl
 801127c:	9b08      	ldr	r3, [sp, #32]
 801127e:	2b00      	cmp	r3, #0
 8011280:	dd1a      	ble.n	80112b8 <_dtoa_r+0x460>
 8011282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011284:	2b00      	cmp	r3, #0
 8011286:	f000 8374 	beq.w	8011972 <_dtoa_r+0xb1a>
 801128a:	2f00      	cmp	r7, #0
 801128c:	dd10      	ble.n	80112b0 <_dtoa_r+0x458>
 801128e:	4631      	mov	r1, r6
 8011290:	463a      	mov	r2, r7
 8011292:	4620      	mov	r0, r4
 8011294:	f001 fe0a 	bl	8012eac <__pow5mult>
 8011298:	4606      	mov	r6, r0
 801129a:	465a      	mov	r2, fp
 801129c:	4631      	mov	r1, r6
 801129e:	4620      	mov	r0, r4
 80112a0:	f001 fd6a 	bl	8012d78 <__multiply>
 80112a4:	4659      	mov	r1, fp
 80112a6:	4680      	mov	r8, r0
 80112a8:	4620      	mov	r0, r4
 80112aa:	f001 fcc1 	bl	8012c30 <_Bfree>
 80112ae:	46c3      	mov	fp, r8
 80112b0:	9b08      	ldr	r3, [sp, #32]
 80112b2:	1bda      	subs	r2, r3, r7
 80112b4:	f040 82a2 	bne.w	80117fc <_dtoa_r+0x9a4>
 80112b8:	4620      	mov	r0, r4
 80112ba:	2101      	movs	r1, #1
 80112bc:	f001 fd52 	bl	8012d64 <__i2b>
 80112c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	4680      	mov	r8, r0
 80112c6:	dd39      	ble.n	801133c <_dtoa_r+0x4e4>
 80112c8:	4601      	mov	r1, r0
 80112ca:	461a      	mov	r2, r3
 80112cc:	4620      	mov	r0, r4
 80112ce:	f001 fded 	bl	8012eac <__pow5mult>
 80112d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80112d4:	2b01      	cmp	r3, #1
 80112d6:	4680      	mov	r8, r0
 80112d8:	f340 8296 	ble.w	8011808 <_dtoa_r+0x9b0>
 80112dc:	f04f 0900 	mov.w	r9, #0
 80112e0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80112e4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80112e8:	6918      	ldr	r0, [r3, #16]
 80112ea:	f001 fced 	bl	8012cc8 <__hi0bits>
 80112ee:	f1c0 0020 	rsb	r0, r0, #32
 80112f2:	e02d      	b.n	8011350 <_dtoa_r+0x4f8>
 80112f4:	2301      	movs	r3, #1
 80112f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80112f8:	e66f      	b.n	8010fda <_dtoa_r+0x182>
 80112fa:	9804      	ldr	r0, [sp, #16]
 80112fc:	f7fd f98c 	bl	800e618 <__aeabi_i2d>
 8011300:	4632      	mov	r2, r6
 8011302:	463b      	mov	r3, r7
 8011304:	f7fd fc56 	bl	800ebb4 <__aeabi_dcmpeq>
 8011308:	2800      	cmp	r0, #0
 801130a:	f47f ae50 	bne.w	8010fae <_dtoa_r+0x156>
 801130e:	9b04      	ldr	r3, [sp, #16]
 8011310:	3b01      	subs	r3, #1
 8011312:	9304      	str	r3, [sp, #16]
 8011314:	e64b      	b.n	8010fae <_dtoa_r+0x156>
 8011316:	9a05      	ldr	r2, [sp, #20]
 8011318:	9b04      	ldr	r3, [sp, #16]
 801131a:	1ad2      	subs	r2, r2, r3
 801131c:	425b      	negs	r3, r3
 801131e:	9308      	str	r3, [sp, #32]
 8011320:	2300      	movs	r3, #0
 8011322:	9205      	str	r2, [sp, #20]
 8011324:	930a      	str	r3, [sp, #40]	; 0x28
 8011326:	e668      	b.n	8010ffa <_dtoa_r+0x1a2>
 8011328:	f1ca 0300 	rsb	r3, sl, #0
 801132c:	9305      	str	r3, [sp, #20]
 801132e:	f04f 0a00 	mov.w	sl, #0
 8011332:	e65a      	b.n	8010fea <_dtoa_r+0x192>
 8011334:	9f08      	ldr	r7, [sp, #32]
 8011336:	9d05      	ldr	r5, [sp, #20]
 8011338:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801133a:	e791      	b.n	8011260 <_dtoa_r+0x408>
 801133c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801133e:	2b01      	cmp	r3, #1
 8011340:	f340 82b3 	ble.w	80118aa <_dtoa_r+0xa52>
 8011344:	f04f 0900 	mov.w	r9, #0
 8011348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801134a:	2b00      	cmp	r3, #0
 801134c:	d1c8      	bne.n	80112e0 <_dtoa_r+0x488>
 801134e:	2001      	movs	r0, #1
 8011350:	4450      	add	r0, sl
 8011352:	f010 001f 	ands.w	r0, r0, #31
 8011356:	f000 8081 	beq.w	801145c <_dtoa_r+0x604>
 801135a:	f1c0 0320 	rsb	r3, r0, #32
 801135e:	2b04      	cmp	r3, #4
 8011360:	f340 84b5 	ble.w	8011cce <_dtoa_r+0xe76>
 8011364:	f1c0 001c 	rsb	r0, r0, #28
 8011368:	9b05      	ldr	r3, [sp, #20]
 801136a:	4403      	add	r3, r0
 801136c:	9305      	str	r3, [sp, #20]
 801136e:	4405      	add	r5, r0
 8011370:	4482      	add	sl, r0
 8011372:	9b05      	ldr	r3, [sp, #20]
 8011374:	2b00      	cmp	r3, #0
 8011376:	dd05      	ble.n	8011384 <_dtoa_r+0x52c>
 8011378:	4659      	mov	r1, fp
 801137a:	461a      	mov	r2, r3
 801137c:	4620      	mov	r0, r4
 801137e:	f001 fde5 	bl	8012f4c <__lshift>
 8011382:	4683      	mov	fp, r0
 8011384:	f1ba 0f00 	cmp.w	sl, #0
 8011388:	dd05      	ble.n	8011396 <_dtoa_r+0x53e>
 801138a:	4641      	mov	r1, r8
 801138c:	4652      	mov	r2, sl
 801138e:	4620      	mov	r0, r4
 8011390:	f001 fddc 	bl	8012f4c <__lshift>
 8011394:	4680      	mov	r8, r0
 8011396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011398:	2b00      	cmp	r3, #0
 801139a:	f040 8268 	bne.w	801186e <_dtoa_r+0xa16>
 801139e:	9b06      	ldr	r3, [sp, #24]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	f340 8295 	ble.w	80118d0 <_dtoa_r+0xa78>
 80113a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d171      	bne.n	8011490 <_dtoa_r+0x638>
 80113ac:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80113b0:	9f06      	ldr	r7, [sp, #24]
 80113b2:	464d      	mov	r5, r9
 80113b4:	e002      	b.n	80113bc <_dtoa_r+0x564>
 80113b6:	f001 fc45 	bl	8012c44 <__multadd>
 80113ba:	4683      	mov	fp, r0
 80113bc:	4641      	mov	r1, r8
 80113be:	4658      	mov	r0, fp
 80113c0:	f7ff fcb4 	bl	8010d2c <quorem>
 80113c4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 80113c8:	f805 cb01 	strb.w	ip, [r5], #1
 80113cc:	ebc9 0305 	rsb	r3, r9, r5
 80113d0:	42bb      	cmp	r3, r7
 80113d2:	4620      	mov	r0, r4
 80113d4:	4659      	mov	r1, fp
 80113d6:	f04f 020a 	mov.w	r2, #10
 80113da:	f04f 0300 	mov.w	r3, #0
 80113de:	dbea      	blt.n	80113b6 <_dtoa_r+0x55e>
 80113e0:	9b07      	ldr	r3, [sp, #28]
 80113e2:	9a06      	ldr	r2, [sp, #24]
 80113e4:	2a01      	cmp	r2, #1
 80113e6:	bfac      	ite	ge
 80113e8:	189b      	addge	r3, r3, r2
 80113ea:	3301      	addlt	r3, #1
 80113ec:	461d      	mov	r5, r3
 80113ee:	f04f 0a00 	mov.w	sl, #0
 80113f2:	4659      	mov	r1, fp
 80113f4:	2201      	movs	r2, #1
 80113f6:	4620      	mov	r0, r4
 80113f8:	f8cd c008 	str.w	ip, [sp, #8]
 80113fc:	f001 fda6 	bl	8012f4c <__lshift>
 8011400:	4641      	mov	r1, r8
 8011402:	4683      	mov	fp, r0
 8011404:	f001 fdf8 	bl	8012ff8 <__mcmp>
 8011408:	2800      	cmp	r0, #0
 801140a:	f8dd c008 	ldr.w	ip, [sp, #8]
 801140e:	f340 82ed 	ble.w	80119ec <_dtoa_r+0xb94>
 8011412:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011416:	9907      	ldr	r1, [sp, #28]
 8011418:	1e6b      	subs	r3, r5, #1
 801141a:	e004      	b.n	8011426 <_dtoa_r+0x5ce>
 801141c:	428b      	cmp	r3, r1
 801141e:	f000 8273 	beq.w	8011908 <_dtoa_r+0xab0>
 8011422:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011426:	2a39      	cmp	r2, #57	; 0x39
 8011428:	f103 0501 	add.w	r5, r3, #1
 801142c:	d0f6      	beq.n	801141c <_dtoa_r+0x5c4>
 801142e:	3201      	adds	r2, #1
 8011430:	701a      	strb	r2, [r3, #0]
 8011432:	4641      	mov	r1, r8
 8011434:	4620      	mov	r0, r4
 8011436:	f001 fbfb 	bl	8012c30 <_Bfree>
 801143a:	2e00      	cmp	r6, #0
 801143c:	f43f aedf 	beq.w	80111fe <_dtoa_r+0x3a6>
 8011440:	f1ba 0f00 	cmp.w	sl, #0
 8011444:	d005      	beq.n	8011452 <_dtoa_r+0x5fa>
 8011446:	45b2      	cmp	sl, r6
 8011448:	d003      	beq.n	8011452 <_dtoa_r+0x5fa>
 801144a:	4651      	mov	r1, sl
 801144c:	4620      	mov	r0, r4
 801144e:	f001 fbef 	bl	8012c30 <_Bfree>
 8011452:	4631      	mov	r1, r6
 8011454:	4620      	mov	r0, r4
 8011456:	f001 fbeb 	bl	8012c30 <_Bfree>
 801145a:	e6d0      	b.n	80111fe <_dtoa_r+0x3a6>
 801145c:	201c      	movs	r0, #28
 801145e:	e783      	b.n	8011368 <_dtoa_r+0x510>
 8011460:	4b04      	ldr	r3, [pc, #16]	; (8011474 <_dtoa_r+0x61c>)
 8011462:	9a02      	ldr	r2, [sp, #8]
 8011464:	1b5b      	subs	r3, r3, r5
 8011466:	fa02 f003 	lsl.w	r0, r2, r3
 801146a:	e56d      	b.n	8010f48 <_dtoa_r+0xf0>
 801146c:	900b      	str	r0, [sp, #44]	; 0x2c
 801146e:	e5b4      	b.n	8010fda <_dtoa_r+0x182>
 8011470:	40240000 	.word	0x40240000
 8011474:	fffffbee 	.word	0xfffffbee
 8011478:	4631      	mov	r1, r6
 801147a:	2300      	movs	r3, #0
 801147c:	4620      	mov	r0, r4
 801147e:	220a      	movs	r2, #10
 8011480:	f001 fbe0 	bl	8012c44 <__multadd>
 8011484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011486:	2b00      	cmp	r3, #0
 8011488:	4606      	mov	r6, r0
 801148a:	f340 8409 	ble.w	8011ca0 <_dtoa_r+0xe48>
 801148e:	9306      	str	r3, [sp, #24]
 8011490:	2d00      	cmp	r5, #0
 8011492:	dd05      	ble.n	80114a0 <_dtoa_r+0x648>
 8011494:	4631      	mov	r1, r6
 8011496:	462a      	mov	r2, r5
 8011498:	4620      	mov	r0, r4
 801149a:	f001 fd57 	bl	8012f4c <__lshift>
 801149e:	4606      	mov	r6, r0
 80114a0:	f1b9 0f00 	cmp.w	r9, #0
 80114a4:	f040 82eb 	bne.w	8011a7e <_dtoa_r+0xc26>
 80114a8:	46b1      	mov	r9, r6
 80114aa:	9b06      	ldr	r3, [sp, #24]
 80114ac:	9a07      	ldr	r2, [sp, #28]
 80114ae:	3b01      	subs	r3, #1
 80114b0:	18d3      	adds	r3, r2, r3
 80114b2:	9308      	str	r3, [sp, #32]
 80114b4:	9b02      	ldr	r3, [sp, #8]
 80114b6:	f003 0301 	and.w	r3, r3, #1
 80114ba:	9309      	str	r3, [sp, #36]	; 0x24
 80114bc:	4617      	mov	r7, r2
 80114be:	4641      	mov	r1, r8
 80114c0:	4658      	mov	r0, fp
 80114c2:	f7ff fc33 	bl	8010d2c <quorem>
 80114c6:	4631      	mov	r1, r6
 80114c8:	4605      	mov	r5, r0
 80114ca:	4658      	mov	r0, fp
 80114cc:	f001 fd94 	bl	8012ff8 <__mcmp>
 80114d0:	464a      	mov	r2, r9
 80114d2:	4682      	mov	sl, r0
 80114d4:	4641      	mov	r1, r8
 80114d6:	4620      	mov	r0, r4
 80114d8:	f001 fdb2 	bl	8013040 <__mdiff>
 80114dc:	68c2      	ldr	r2, [r0, #12]
 80114de:	4603      	mov	r3, r0
 80114e0:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 80114e4:	2a00      	cmp	r2, #0
 80114e6:	f040 81b8 	bne.w	801185a <_dtoa_r+0xa02>
 80114ea:	4619      	mov	r1, r3
 80114ec:	4658      	mov	r0, fp
 80114ee:	f8cd c018 	str.w	ip, [sp, #24]
 80114f2:	9305      	str	r3, [sp, #20]
 80114f4:	f001 fd80 	bl	8012ff8 <__mcmp>
 80114f8:	9b05      	ldr	r3, [sp, #20]
 80114fa:	9002      	str	r0, [sp, #8]
 80114fc:	4619      	mov	r1, r3
 80114fe:	4620      	mov	r0, r4
 8011500:	f001 fb96 	bl	8012c30 <_Bfree>
 8011504:	9a02      	ldr	r2, [sp, #8]
 8011506:	f8dd c018 	ldr.w	ip, [sp, #24]
 801150a:	b92a      	cbnz	r2, 8011518 <_dtoa_r+0x6c0>
 801150c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801150e:	b91b      	cbnz	r3, 8011518 <_dtoa_r+0x6c0>
 8011510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011512:	2b00      	cmp	r3, #0
 8011514:	f000 83a8 	beq.w	8011c68 <_dtoa_r+0xe10>
 8011518:	f1ba 0f00 	cmp.w	sl, #0
 801151c:	f2c0 8248 	blt.w	80119b0 <_dtoa_r+0xb58>
 8011520:	d105      	bne.n	801152e <_dtoa_r+0x6d6>
 8011522:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011524:	b91b      	cbnz	r3, 801152e <_dtoa_r+0x6d6>
 8011526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011528:	2b00      	cmp	r3, #0
 801152a:	f000 8241 	beq.w	80119b0 <_dtoa_r+0xb58>
 801152e:	2a00      	cmp	r2, #0
 8011530:	f300 82b9 	bgt.w	8011aa6 <_dtoa_r+0xc4e>
 8011534:	9b08      	ldr	r3, [sp, #32]
 8011536:	f887 c000 	strb.w	ip, [r7]
 801153a:	f107 0a01 	add.w	sl, r7, #1
 801153e:	429f      	cmp	r7, r3
 8011540:	4655      	mov	r5, sl
 8011542:	f000 82bc 	beq.w	8011abe <_dtoa_r+0xc66>
 8011546:	4659      	mov	r1, fp
 8011548:	220a      	movs	r2, #10
 801154a:	2300      	movs	r3, #0
 801154c:	4620      	mov	r0, r4
 801154e:	f001 fb79 	bl	8012c44 <__multadd>
 8011552:	454e      	cmp	r6, r9
 8011554:	4683      	mov	fp, r0
 8011556:	4631      	mov	r1, r6
 8011558:	4620      	mov	r0, r4
 801155a:	f04f 020a 	mov.w	r2, #10
 801155e:	f04f 0300 	mov.w	r3, #0
 8011562:	f000 8174 	beq.w	801184e <_dtoa_r+0x9f6>
 8011566:	f001 fb6d 	bl	8012c44 <__multadd>
 801156a:	4649      	mov	r1, r9
 801156c:	4606      	mov	r6, r0
 801156e:	220a      	movs	r2, #10
 8011570:	4620      	mov	r0, r4
 8011572:	2300      	movs	r3, #0
 8011574:	f001 fb66 	bl	8012c44 <__multadd>
 8011578:	4657      	mov	r7, sl
 801157a:	4681      	mov	r9, r0
 801157c:	e79f      	b.n	80114be <_dtoa_r+0x666>
 801157e:	2301      	movs	r3, #1
 8011580:	9309      	str	r3, [sp, #36]	; 0x24
 8011582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011584:	2b00      	cmp	r3, #0
 8011586:	f340 820a 	ble.w	801199e <_dtoa_r+0xb46>
 801158a:	461f      	mov	r7, r3
 801158c:	461e      	mov	r6, r3
 801158e:	930c      	str	r3, [sp, #48]	; 0x30
 8011590:	9306      	str	r3, [sp, #24]
 8011592:	2100      	movs	r1, #0
 8011594:	2f17      	cmp	r7, #23
 8011596:	6461      	str	r1, [r4, #68]	; 0x44
 8011598:	d90a      	bls.n	80115b0 <_dtoa_r+0x758>
 801159a:	2201      	movs	r2, #1
 801159c:	2304      	movs	r3, #4
 801159e:	005b      	lsls	r3, r3, #1
 80115a0:	f103 0014 	add.w	r0, r3, #20
 80115a4:	4287      	cmp	r7, r0
 80115a6:	4611      	mov	r1, r2
 80115a8:	f102 0201 	add.w	r2, r2, #1
 80115ac:	d2f7      	bcs.n	801159e <_dtoa_r+0x746>
 80115ae:	6461      	str	r1, [r4, #68]	; 0x44
 80115b0:	4620      	mov	r0, r4
 80115b2:	f001 fb17 	bl	8012be4 <_Balloc>
 80115b6:	2e0e      	cmp	r6, #14
 80115b8:	9007      	str	r0, [sp, #28]
 80115ba:	6420      	str	r0, [r4, #64]	; 0x40
 80115bc:	f63f ad5c 	bhi.w	8011078 <_dtoa_r+0x220>
 80115c0:	2d00      	cmp	r5, #0
 80115c2:	f43f ad59 	beq.w	8011078 <_dtoa_r+0x220>
 80115c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80115ca:	9904      	ldr	r1, [sp, #16]
 80115cc:	2900      	cmp	r1, #0
 80115ce:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80115d2:	f340 8223 	ble.w	8011a1c <_dtoa_r+0xbc4>
 80115d6:	4bb7      	ldr	r3, [pc, #732]	; (80118b4 <_dtoa_r+0xa5c>)
 80115d8:	f001 020f 	and.w	r2, r1, #15
 80115dc:	110d      	asrs	r5, r1, #4
 80115de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80115e2:	06e9      	lsls	r1, r5, #27
 80115e4:	e9d3 6700 	ldrd	r6, r7, [r3]
 80115e8:	f140 81d2 	bpl.w	8011990 <_dtoa_r+0xb38>
 80115ec:	4bb2      	ldr	r3, [pc, #712]	; (80118b8 <_dtoa_r+0xa60>)
 80115ee:	ec51 0b17 	vmov	r0, r1, d7
 80115f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80115f6:	f7fd f99f 	bl	800e938 <__aeabi_ddiv>
 80115fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80115fe:	f005 050f 	and.w	r5, r5, #15
 8011602:	f04f 0803 	mov.w	r8, #3
 8011606:	b18d      	cbz	r5, 801162c <_dtoa_r+0x7d4>
 8011608:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 80118b8 <_dtoa_r+0xa60>
 801160c:	4630      	mov	r0, r6
 801160e:	4639      	mov	r1, r7
 8011610:	07ea      	lsls	r2, r5, #31
 8011612:	d505      	bpl.n	8011620 <_dtoa_r+0x7c8>
 8011614:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011618:	f7fd f864 	bl	800e6e4 <__aeabi_dmul>
 801161c:	f108 0801 	add.w	r8, r8, #1
 8011620:	106d      	asrs	r5, r5, #1
 8011622:	f109 0908 	add.w	r9, r9, #8
 8011626:	d1f3      	bne.n	8011610 <_dtoa_r+0x7b8>
 8011628:	4606      	mov	r6, r0
 801162a:	460f      	mov	r7, r1
 801162c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011630:	4632      	mov	r2, r6
 8011632:	463b      	mov	r3, r7
 8011634:	f7fd f980 	bl	800e938 <__aeabi_ddiv>
 8011638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801163c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801163e:	b143      	cbz	r3, 8011652 <_dtoa_r+0x7fa>
 8011640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011644:	2200      	movs	r2, #0
 8011646:	4b9d      	ldr	r3, [pc, #628]	; (80118bc <_dtoa_r+0xa64>)
 8011648:	f7fd fabe 	bl	800ebc8 <__aeabi_dcmplt>
 801164c:	2800      	cmp	r0, #0
 801164e:	f040 82ae 	bne.w	8011bae <_dtoa_r+0xd56>
 8011652:	4640      	mov	r0, r8
 8011654:	f7fc ffe0 	bl	800e618 <__aeabi_i2d>
 8011658:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801165c:	f7fd f842 	bl	800e6e4 <__aeabi_dmul>
 8011660:	4b97      	ldr	r3, [pc, #604]	; (80118c0 <_dtoa_r+0xa68>)
 8011662:	2200      	movs	r2, #0
 8011664:	f7fc fe8c 	bl	800e380 <__adddf3>
 8011668:	9b06      	ldr	r3, [sp, #24]
 801166a:	4606      	mov	r6, r0
 801166c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8011670:	2b00      	cmp	r3, #0
 8011672:	f000 8162 	beq.w	801193a <_dtoa_r+0xae2>
 8011676:	9b04      	ldr	r3, [sp, #16]
 8011678:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801167c:	9312      	str	r3, [sp, #72]	; 0x48
 801167e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011680:	2b00      	cmp	r3, #0
 8011682:	f000 8223 	beq.w	8011acc <_dtoa_r+0xc74>
 8011686:	4b8b      	ldr	r3, [pc, #556]	; (80118b4 <_dtoa_r+0xa5c>)
 8011688:	498e      	ldr	r1, [pc, #568]	; (80118c4 <_dtoa_r+0xa6c>)
 801168a:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801168e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011692:	2000      	movs	r0, #0
 8011694:	f7fd f950 	bl	800e938 <__aeabi_ddiv>
 8011698:	4632      	mov	r2, r6
 801169a:	463b      	mov	r3, r7
 801169c:	f7fc fe6e 	bl	800e37c <__aeabi_dsub>
 80116a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80116a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80116a8:	4639      	mov	r1, r7
 80116aa:	4630      	mov	r0, r6
 80116ac:	f7fd fab4 	bl	800ec18 <__aeabi_d2iz>
 80116b0:	4605      	mov	r5, r0
 80116b2:	f7fc ffb1 	bl	800e618 <__aeabi_i2d>
 80116b6:	3530      	adds	r5, #48	; 0x30
 80116b8:	4602      	mov	r2, r0
 80116ba:	460b      	mov	r3, r1
 80116bc:	4630      	mov	r0, r6
 80116be:	4639      	mov	r1, r7
 80116c0:	f7fc fe5c 	bl	800e37c <__aeabi_dsub>
 80116c4:	fa5f f885 	uxtb.w	r8, r5
 80116c8:	9d07      	ldr	r5, [sp, #28]
 80116ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80116ce:	f885 8000 	strb.w	r8, [r5]
 80116d2:	4606      	mov	r6, r0
 80116d4:	460f      	mov	r7, r1
 80116d6:	3501      	adds	r5, #1
 80116d8:	f7fd fa76 	bl	800ebc8 <__aeabi_dcmplt>
 80116dc:	2800      	cmp	r0, #0
 80116de:	f040 82a7 	bne.w	8011c30 <_dtoa_r+0xdd8>
 80116e2:	4632      	mov	r2, r6
 80116e4:	463b      	mov	r3, r7
 80116e6:	2000      	movs	r0, #0
 80116e8:	4974      	ldr	r1, [pc, #464]	; (80118bc <_dtoa_r+0xa64>)
 80116ea:	f7fc fe47 	bl	800e37c <__aeabi_dsub>
 80116ee:	4602      	mov	r2, r0
 80116f0:	460b      	mov	r3, r1
 80116f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80116f6:	f7fd fa85 	bl	800ec04 <__aeabi_dcmpgt>
 80116fa:	2800      	cmp	r0, #0
 80116fc:	f040 82ad 	bne.w	8011c5a <_dtoa_r+0xe02>
 8011700:	f1b9 0f01 	cmp.w	r9, #1
 8011704:	f340 8184 	ble.w	8011a10 <_dtoa_r+0xbb8>
 8011708:	9b07      	ldr	r3, [sp, #28]
 801170a:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 801170e:	f8cd b008 	str.w	fp, [sp, #8]
 8011712:	4499      	add	r9, r3
 8011714:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 8011718:	46a0      	mov	r8, r4
 801171a:	e00d      	b.n	8011738 <_dtoa_r+0x8e0>
 801171c:	2000      	movs	r0, #0
 801171e:	4967      	ldr	r1, [pc, #412]	; (80118bc <_dtoa_r+0xa64>)
 8011720:	f7fc fe2c 	bl	800e37c <__aeabi_dsub>
 8011724:	4652      	mov	r2, sl
 8011726:	465b      	mov	r3, fp
 8011728:	f7fd fa4e 	bl	800ebc8 <__aeabi_dcmplt>
 801172c:	2800      	cmp	r0, #0
 801172e:	f040 828f 	bne.w	8011c50 <_dtoa_r+0xdf8>
 8011732:	454d      	cmp	r5, r9
 8011734:	f000 8167 	beq.w	8011a06 <_dtoa_r+0xbae>
 8011738:	4650      	mov	r0, sl
 801173a:	4659      	mov	r1, fp
 801173c:	2200      	movs	r2, #0
 801173e:	4b62      	ldr	r3, [pc, #392]	; (80118c8 <_dtoa_r+0xa70>)
 8011740:	f7fc ffd0 	bl	800e6e4 <__aeabi_dmul>
 8011744:	2200      	movs	r2, #0
 8011746:	4b60      	ldr	r3, [pc, #384]	; (80118c8 <_dtoa_r+0xa70>)
 8011748:	4682      	mov	sl, r0
 801174a:	468b      	mov	fp, r1
 801174c:	4630      	mov	r0, r6
 801174e:	4639      	mov	r1, r7
 8011750:	f7fc ffc8 	bl	800e6e4 <__aeabi_dmul>
 8011754:	460f      	mov	r7, r1
 8011756:	4606      	mov	r6, r0
 8011758:	f7fd fa5e 	bl	800ec18 <__aeabi_d2iz>
 801175c:	4604      	mov	r4, r0
 801175e:	f7fc ff5b 	bl	800e618 <__aeabi_i2d>
 8011762:	4602      	mov	r2, r0
 8011764:	460b      	mov	r3, r1
 8011766:	4630      	mov	r0, r6
 8011768:	4639      	mov	r1, r7
 801176a:	f7fc fe07 	bl	800e37c <__aeabi_dsub>
 801176e:	3430      	adds	r4, #48	; 0x30
 8011770:	b2e4      	uxtb	r4, r4
 8011772:	4652      	mov	r2, sl
 8011774:	465b      	mov	r3, fp
 8011776:	f805 4b01 	strb.w	r4, [r5], #1
 801177a:	4606      	mov	r6, r0
 801177c:	460f      	mov	r7, r1
 801177e:	f7fd fa23 	bl	800ebc8 <__aeabi_dcmplt>
 8011782:	4632      	mov	r2, r6
 8011784:	463b      	mov	r3, r7
 8011786:	2800      	cmp	r0, #0
 8011788:	d0c8      	beq.n	801171c <_dtoa_r+0x8c4>
 801178a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801178c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8011790:	9304      	str	r3, [sp, #16]
 8011792:	4644      	mov	r4, r8
 8011794:	e533      	b.n	80111fe <_dtoa_r+0x3a6>
 8011796:	2300      	movs	r3, #0
 8011798:	9309      	str	r3, [sp, #36]	; 0x24
 801179a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801179c:	9a04      	ldr	r2, [sp, #16]
 801179e:	4413      	add	r3, r2
 80117a0:	930c      	str	r3, [sp, #48]	; 0x30
 80117a2:	3301      	adds	r3, #1
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	9306      	str	r3, [sp, #24]
 80117a8:	f340 8100 	ble.w	80119ac <_dtoa_r+0xb54>
 80117ac:	9e06      	ldr	r6, [sp, #24]
 80117ae:	4637      	mov	r7, r6
 80117b0:	e6ef      	b.n	8011592 <_dtoa_r+0x73a>
 80117b2:	2300      	movs	r3, #0
 80117b4:	9309      	str	r3, [sp, #36]	; 0x24
 80117b6:	e6e4      	b.n	8011582 <_dtoa_r+0x72a>
 80117b8:	9b06      	ldr	r3, [sp, #24]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	f73f ac6d 	bgt.w	801109a <_dtoa_r+0x242>
 80117c0:	f040 80d3 	bne.w	801196a <_dtoa_r+0xb12>
 80117c4:	4640      	mov	r0, r8
 80117c6:	2200      	movs	r2, #0
 80117c8:	4b40      	ldr	r3, [pc, #256]	; (80118cc <_dtoa_r+0xa74>)
 80117ca:	4649      	mov	r1, r9
 80117cc:	f7fc ff8a 	bl	800e6e4 <__aeabi_dmul>
 80117d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80117d4:	f7fd fa0c 	bl	800ebf0 <__aeabi_dcmpge>
 80117d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80117dc:	4646      	mov	r6, r8
 80117de:	2800      	cmp	r0, #0
 80117e0:	f000 808a 	beq.w	80118f8 <_dtoa_r+0xaa0>
 80117e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80117e6:	9d07      	ldr	r5, [sp, #28]
 80117e8:	43db      	mvns	r3, r3
 80117ea:	9304      	str	r3, [sp, #16]
 80117ec:	4641      	mov	r1, r8
 80117ee:	4620      	mov	r0, r4
 80117f0:	f001 fa1e 	bl	8012c30 <_Bfree>
 80117f4:	2e00      	cmp	r6, #0
 80117f6:	f47f ae2c 	bne.w	8011452 <_dtoa_r+0x5fa>
 80117fa:	e500      	b.n	80111fe <_dtoa_r+0x3a6>
 80117fc:	4659      	mov	r1, fp
 80117fe:	4620      	mov	r0, r4
 8011800:	f001 fb54 	bl	8012eac <__pow5mult>
 8011804:	4683      	mov	fp, r0
 8011806:	e557      	b.n	80112b8 <_dtoa_r+0x460>
 8011808:	9b02      	ldr	r3, [sp, #8]
 801180a:	2b00      	cmp	r3, #0
 801180c:	f47f ad66 	bne.w	80112dc <_dtoa_r+0x484>
 8011810:	9b03      	ldr	r3, [sp, #12]
 8011812:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011816:	2b00      	cmp	r3, #0
 8011818:	f47f ad94 	bne.w	8011344 <_dtoa_r+0x4ec>
 801181c:	9b03      	ldr	r3, [sp, #12]
 801181e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8011822:	0d3f      	lsrs	r7, r7, #20
 8011824:	053f      	lsls	r7, r7, #20
 8011826:	2f00      	cmp	r7, #0
 8011828:	f000 821b 	beq.w	8011c62 <_dtoa_r+0xe0a>
 801182c:	9b05      	ldr	r3, [sp, #20]
 801182e:	3301      	adds	r3, #1
 8011830:	9305      	str	r3, [sp, #20]
 8011832:	f10a 0a01 	add.w	sl, sl, #1
 8011836:	f04f 0901 	mov.w	r9, #1
 801183a:	e585      	b.n	8011348 <_dtoa_r+0x4f0>
 801183c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801183e:	2a00      	cmp	r2, #0
 8011840:	f000 81a7 	beq.w	8011b92 <_dtoa_r+0xd3a>
 8011844:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011848:	9f08      	ldr	r7, [sp, #32]
 801184a:	9d05      	ldr	r5, [sp, #20]
 801184c:	e4ff      	b.n	801124e <_dtoa_r+0x3f6>
 801184e:	f001 f9f9 	bl	8012c44 <__multadd>
 8011852:	4657      	mov	r7, sl
 8011854:	4606      	mov	r6, r0
 8011856:	4681      	mov	r9, r0
 8011858:	e631      	b.n	80114be <_dtoa_r+0x666>
 801185a:	4601      	mov	r1, r0
 801185c:	4620      	mov	r0, r4
 801185e:	f8cd c008 	str.w	ip, [sp, #8]
 8011862:	f001 f9e5 	bl	8012c30 <_Bfree>
 8011866:	2201      	movs	r2, #1
 8011868:	f8dd c008 	ldr.w	ip, [sp, #8]
 801186c:	e654      	b.n	8011518 <_dtoa_r+0x6c0>
 801186e:	4658      	mov	r0, fp
 8011870:	4641      	mov	r1, r8
 8011872:	f001 fbc1 	bl	8012ff8 <__mcmp>
 8011876:	2800      	cmp	r0, #0
 8011878:	f6bf ad91 	bge.w	801139e <_dtoa_r+0x546>
 801187c:	9f04      	ldr	r7, [sp, #16]
 801187e:	4659      	mov	r1, fp
 8011880:	2300      	movs	r3, #0
 8011882:	4620      	mov	r0, r4
 8011884:	220a      	movs	r2, #10
 8011886:	3f01      	subs	r7, #1
 8011888:	9704      	str	r7, [sp, #16]
 801188a:	f001 f9db 	bl	8012c44 <__multadd>
 801188e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011890:	4683      	mov	fp, r0
 8011892:	2b00      	cmp	r3, #0
 8011894:	f47f adf0 	bne.w	8011478 <_dtoa_r+0x620>
 8011898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801189a:	2b00      	cmp	r3, #0
 801189c:	f340 81f5 	ble.w	8011c8a <_dtoa_r+0xe32>
 80118a0:	9306      	str	r3, [sp, #24]
 80118a2:	e583      	b.n	80113ac <_dtoa_r+0x554>
 80118a4:	9807      	ldr	r0, [sp, #28]
 80118a6:	f7ff bb0b 	b.w	8010ec0 <_dtoa_r+0x68>
 80118aa:	9b02      	ldr	r3, [sp, #8]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	f47f ad49 	bne.w	8011344 <_dtoa_r+0x4ec>
 80118b2:	e7ad      	b.n	8011810 <_dtoa_r+0x9b8>
 80118b4:	08014868 	.word	0x08014868
 80118b8:	08014930 	.word	0x08014930
 80118bc:	3ff00000 	.word	0x3ff00000
 80118c0:	401c0000 	.word	0x401c0000
 80118c4:	3fe00000 	.word	0x3fe00000
 80118c8:	40240000 	.word	0x40240000
 80118cc:	40140000 	.word	0x40140000
 80118d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80118d2:	2b02      	cmp	r3, #2
 80118d4:	f77f ad67 	ble.w	80113a6 <_dtoa_r+0x54e>
 80118d8:	9b06      	ldr	r3, [sp, #24]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d182      	bne.n	80117e4 <_dtoa_r+0x98c>
 80118de:	4641      	mov	r1, r8
 80118e0:	2205      	movs	r2, #5
 80118e2:	4620      	mov	r0, r4
 80118e4:	f001 f9ae 	bl	8012c44 <__multadd>
 80118e8:	4680      	mov	r8, r0
 80118ea:	4641      	mov	r1, r8
 80118ec:	4658      	mov	r0, fp
 80118ee:	f001 fb83 	bl	8012ff8 <__mcmp>
 80118f2:	2800      	cmp	r0, #0
 80118f4:	f77f af76 	ble.w	80117e4 <_dtoa_r+0x98c>
 80118f8:	9a04      	ldr	r2, [sp, #16]
 80118fa:	9907      	ldr	r1, [sp, #28]
 80118fc:	2331      	movs	r3, #49	; 0x31
 80118fe:	3201      	adds	r2, #1
 8011900:	9204      	str	r2, [sp, #16]
 8011902:	700b      	strb	r3, [r1, #0]
 8011904:	1c4d      	adds	r5, r1, #1
 8011906:	e771      	b.n	80117ec <_dtoa_r+0x994>
 8011908:	9a04      	ldr	r2, [sp, #16]
 801190a:	3201      	adds	r2, #1
 801190c:	9204      	str	r2, [sp, #16]
 801190e:	9a07      	ldr	r2, [sp, #28]
 8011910:	2331      	movs	r3, #49	; 0x31
 8011912:	7013      	strb	r3, [r2, #0]
 8011914:	e58d      	b.n	8011432 <_dtoa_r+0x5da>
 8011916:	f8dd b008 	ldr.w	fp, [sp, #8]
 801191a:	9c05      	ldr	r4, [sp, #20]
 801191c:	e46f      	b.n	80111fe <_dtoa_r+0x3a6>
 801191e:	4640      	mov	r0, r8
 8011920:	f7fc fe7a 	bl	800e618 <__aeabi_i2d>
 8011924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011928:	f7fc fedc 	bl	800e6e4 <__aeabi_dmul>
 801192c:	2200      	movs	r2, #0
 801192e:	4bc2      	ldr	r3, [pc, #776]	; (8011c38 <_dtoa_r+0xde0>)
 8011930:	f7fc fd26 	bl	800e380 <__adddf3>
 8011934:	4606      	mov	r6, r0
 8011936:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 801193a:	2200      	movs	r2, #0
 801193c:	4bbf      	ldr	r3, [pc, #764]	; (8011c3c <_dtoa_r+0xde4>)
 801193e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011942:	f7fc fd1b 	bl	800e37c <__aeabi_dsub>
 8011946:	4632      	mov	r2, r6
 8011948:	463b      	mov	r3, r7
 801194a:	4680      	mov	r8, r0
 801194c:	4689      	mov	r9, r1
 801194e:	f7fd f959 	bl	800ec04 <__aeabi_dcmpgt>
 8011952:	2800      	cmp	r0, #0
 8011954:	f040 80b6 	bne.w	8011ac4 <_dtoa_r+0xc6c>
 8011958:	4632      	mov	r2, r6
 801195a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801195e:	4640      	mov	r0, r8
 8011960:	4649      	mov	r1, r9
 8011962:	f7fd f931 	bl	800ebc8 <__aeabi_dcmplt>
 8011966:	2800      	cmp	r0, #0
 8011968:	d052      	beq.n	8011a10 <_dtoa_r+0xbb8>
 801196a:	f04f 0800 	mov.w	r8, #0
 801196e:	4646      	mov	r6, r8
 8011970:	e738      	b.n	80117e4 <_dtoa_r+0x98c>
 8011972:	4659      	mov	r1, fp
 8011974:	9a08      	ldr	r2, [sp, #32]
 8011976:	4620      	mov	r0, r4
 8011978:	f001 fa98 	bl	8012eac <__pow5mult>
 801197c:	4683      	mov	fp, r0
 801197e:	e49b      	b.n	80112b8 <_dtoa_r+0x460>
 8011980:	9b08      	ldr	r3, [sp, #32]
 8011982:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011984:	9708      	str	r7, [sp, #32]
 8011986:	1afb      	subs	r3, r7, r3
 8011988:	441a      	add	r2, r3
 801198a:	920a      	str	r2, [sp, #40]	; 0x28
 801198c:	2700      	movs	r7, #0
 801198e:	e458      	b.n	8011242 <_dtoa_r+0x3ea>
 8011990:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8011994:	f04f 0802 	mov.w	r8, #2
 8011998:	ed8d 7b02 	vstr	d7, [sp, #8]
 801199c:	e633      	b.n	8011606 <_dtoa_r+0x7ae>
 801199e:	2601      	movs	r6, #1
 80119a0:	9621      	str	r6, [sp, #132]	; 0x84
 80119a2:	960c      	str	r6, [sp, #48]	; 0x30
 80119a4:	9606      	str	r6, [sp, #24]
 80119a6:	2100      	movs	r1, #0
 80119a8:	6461      	str	r1, [r4, #68]	; 0x44
 80119aa:	e601      	b.n	80115b0 <_dtoa_r+0x758>
 80119ac:	461e      	mov	r6, r3
 80119ae:	e7fa      	b.n	80119a6 <_dtoa_r+0xb4e>
 80119b0:	2a00      	cmp	r2, #0
 80119b2:	dd15      	ble.n	80119e0 <_dtoa_r+0xb88>
 80119b4:	4659      	mov	r1, fp
 80119b6:	2201      	movs	r2, #1
 80119b8:	4620      	mov	r0, r4
 80119ba:	f8cd c008 	str.w	ip, [sp, #8]
 80119be:	f001 fac5 	bl	8012f4c <__lshift>
 80119c2:	4641      	mov	r1, r8
 80119c4:	4683      	mov	fp, r0
 80119c6:	f001 fb17 	bl	8012ff8 <__mcmp>
 80119ca:	2800      	cmp	r0, #0
 80119cc:	f8dd c008 	ldr.w	ip, [sp, #8]
 80119d0:	f340 8154 	ble.w	8011c7c <_dtoa_r+0xe24>
 80119d4:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80119d8:	f000 8111 	beq.w	8011bfe <_dtoa_r+0xda6>
 80119dc:	f10c 0c01 	add.w	ip, ip, #1
 80119e0:	46b2      	mov	sl, r6
 80119e2:	f887 c000 	strb.w	ip, [r7]
 80119e6:	1c7d      	adds	r5, r7, #1
 80119e8:	464e      	mov	r6, r9
 80119ea:	e522      	b.n	8011432 <_dtoa_r+0x5da>
 80119ec:	d104      	bne.n	80119f8 <_dtoa_r+0xba0>
 80119ee:	f01c 0f01 	tst.w	ip, #1
 80119f2:	d001      	beq.n	80119f8 <_dtoa_r+0xba0>
 80119f4:	e50d      	b.n	8011412 <_dtoa_r+0x5ba>
 80119f6:	4615      	mov	r5, r2
 80119f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80119fc:	2b30      	cmp	r3, #48	; 0x30
 80119fe:	f105 32ff 	add.w	r2, r5, #4294967295
 8011a02:	d0f8      	beq.n	80119f6 <_dtoa_r+0xb9e>
 8011a04:	e515      	b.n	8011432 <_dtoa_r+0x5da>
 8011a06:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8011a0a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8011a0e:	4644      	mov	r4, r8
 8011a10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011a14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011a18:	f7ff bb2e 	b.w	8011078 <_dtoa_r+0x220>
 8011a1c:	9b04      	ldr	r3, [sp, #16]
 8011a1e:	425d      	negs	r5, r3
 8011a20:	2d00      	cmp	r5, #0
 8011a22:	f000 80bd 	beq.w	8011ba0 <_dtoa_r+0xd48>
 8011a26:	4b86      	ldr	r3, [pc, #536]	; (8011c40 <_dtoa_r+0xde8>)
 8011a28:	f005 020f 	and.w	r2, r5, #15
 8011a2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011a38:	f7fc fe54 	bl	800e6e4 <__aeabi_dmul>
 8011a3c:	112d      	asrs	r5, r5, #4
 8011a3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a42:	f000 8127 	beq.w	8011c94 <_dtoa_r+0xe3c>
 8011a46:	4e7f      	ldr	r6, [pc, #508]	; (8011c44 <_dtoa_r+0xdec>)
 8011a48:	f04f 0802 	mov.w	r8, #2
 8011a4c:	07eb      	lsls	r3, r5, #31
 8011a4e:	d505      	bpl.n	8011a5c <_dtoa_r+0xc04>
 8011a50:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011a54:	f7fc fe46 	bl	800e6e4 <__aeabi_dmul>
 8011a58:	f108 0801 	add.w	r8, r8, #1
 8011a5c:	106d      	asrs	r5, r5, #1
 8011a5e:	f106 0608 	add.w	r6, r6, #8
 8011a62:	d1f3      	bne.n	8011a4c <_dtoa_r+0xbf4>
 8011a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a68:	e5e8      	b.n	801163c <_dtoa_r+0x7e4>
 8011a6a:	9a04      	ldr	r2, [sp, #16]
 8011a6c:	3201      	adds	r2, #1
 8011a6e:	9204      	str	r2, [sp, #16]
 8011a70:	9a07      	ldr	r2, [sp, #28]
 8011a72:	2330      	movs	r3, #48	; 0x30
 8011a74:	7013      	strb	r3, [r2, #0]
 8011a76:	2331      	movs	r3, #49	; 0x31
 8011a78:	7013      	strb	r3, [r2, #0]
 8011a7a:	f7ff bbc0 	b.w	80111fe <_dtoa_r+0x3a6>
 8011a7e:	6871      	ldr	r1, [r6, #4]
 8011a80:	4620      	mov	r0, r4
 8011a82:	f001 f8af 	bl	8012be4 <_Balloc>
 8011a86:	6933      	ldr	r3, [r6, #16]
 8011a88:	1c9a      	adds	r2, r3, #2
 8011a8a:	4605      	mov	r5, r0
 8011a8c:	0092      	lsls	r2, r2, #2
 8011a8e:	f106 010c 	add.w	r1, r6, #12
 8011a92:	300c      	adds	r0, #12
 8011a94:	f7f4 f90a 	bl	8005cac <memcpy>
 8011a98:	4620      	mov	r0, r4
 8011a9a:	4629      	mov	r1, r5
 8011a9c:	2201      	movs	r2, #1
 8011a9e:	f001 fa55 	bl	8012f4c <__lshift>
 8011aa2:	4681      	mov	r9, r0
 8011aa4:	e501      	b.n	80114aa <_dtoa_r+0x652>
 8011aa6:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8011aaa:	f000 80a8 	beq.w	8011bfe <_dtoa_r+0xda6>
 8011aae:	f10c 0c01 	add.w	ip, ip, #1
 8011ab2:	46b2      	mov	sl, r6
 8011ab4:	f887 c000 	strb.w	ip, [r7]
 8011ab8:	1c7d      	adds	r5, r7, #1
 8011aba:	464e      	mov	r6, r9
 8011abc:	e4b9      	b.n	8011432 <_dtoa_r+0x5da>
 8011abe:	46b2      	mov	sl, r6
 8011ac0:	464e      	mov	r6, r9
 8011ac2:	e496      	b.n	80113f2 <_dtoa_r+0x59a>
 8011ac4:	f04f 0800 	mov.w	r8, #0
 8011ac8:	4646      	mov	r6, r8
 8011aca:	e715      	b.n	80118f8 <_dtoa_r+0xaa0>
 8011acc:	495c      	ldr	r1, [pc, #368]	; (8011c40 <_dtoa_r+0xde8>)
 8011ace:	f109 33ff 	add.w	r3, r9, #4294967295
 8011ad2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011ad6:	4632      	mov	r2, r6
 8011ad8:	9313      	str	r3, [sp, #76]	; 0x4c
 8011ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ade:	463b      	mov	r3, r7
 8011ae0:	f7fc fe00 	bl	800e6e4 <__aeabi_dmul>
 8011ae4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011ae8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011aec:	4639      	mov	r1, r7
 8011aee:	4630      	mov	r0, r6
 8011af0:	f7fd f892 	bl	800ec18 <__aeabi_d2iz>
 8011af4:	4605      	mov	r5, r0
 8011af6:	f7fc fd8f 	bl	800e618 <__aeabi_i2d>
 8011afa:	4602      	mov	r2, r0
 8011afc:	460b      	mov	r3, r1
 8011afe:	4630      	mov	r0, r6
 8011b00:	4639      	mov	r1, r7
 8011b02:	f7fc fc3b 	bl	800e37c <__aeabi_dsub>
 8011b06:	9a07      	ldr	r2, [sp, #28]
 8011b08:	3530      	adds	r5, #48	; 0x30
 8011b0a:	f1b9 0f01 	cmp.w	r9, #1
 8011b0e:	7015      	strb	r5, [r2, #0]
 8011b10:	4606      	mov	r6, r0
 8011b12:	460f      	mov	r7, r1
 8011b14:	f102 0501 	add.w	r5, r2, #1
 8011b18:	d023      	beq.n	8011b62 <_dtoa_r+0xd0a>
 8011b1a:	9b07      	ldr	r3, [sp, #28]
 8011b1c:	f8cd a008 	str.w	sl, [sp, #8]
 8011b20:	444b      	add	r3, r9
 8011b22:	465e      	mov	r6, fp
 8011b24:	469a      	mov	sl, r3
 8011b26:	46ab      	mov	fp, r5
 8011b28:	2200      	movs	r2, #0
 8011b2a:	4b47      	ldr	r3, [pc, #284]	; (8011c48 <_dtoa_r+0xdf0>)
 8011b2c:	f7fc fdda 	bl	800e6e4 <__aeabi_dmul>
 8011b30:	4689      	mov	r9, r1
 8011b32:	4680      	mov	r8, r0
 8011b34:	f7fd f870 	bl	800ec18 <__aeabi_d2iz>
 8011b38:	4607      	mov	r7, r0
 8011b3a:	f7fc fd6d 	bl	800e618 <__aeabi_i2d>
 8011b3e:	3730      	adds	r7, #48	; 0x30
 8011b40:	4602      	mov	r2, r0
 8011b42:	460b      	mov	r3, r1
 8011b44:	4640      	mov	r0, r8
 8011b46:	4649      	mov	r1, r9
 8011b48:	f7fc fc18 	bl	800e37c <__aeabi_dsub>
 8011b4c:	f80b 7b01 	strb.w	r7, [fp], #1
 8011b50:	45d3      	cmp	fp, sl
 8011b52:	d1e9      	bne.n	8011b28 <_dtoa_r+0xcd0>
 8011b54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011b56:	f8dd a008 	ldr.w	sl, [sp, #8]
 8011b5a:	46b3      	mov	fp, r6
 8011b5c:	460f      	mov	r7, r1
 8011b5e:	4606      	mov	r6, r0
 8011b60:	441d      	add	r5, r3
 8011b62:	2200      	movs	r2, #0
 8011b64:	4b39      	ldr	r3, [pc, #228]	; (8011c4c <_dtoa_r+0xdf4>)
 8011b66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011b6a:	f7fc fc09 	bl	800e380 <__adddf3>
 8011b6e:	4632      	mov	r2, r6
 8011b70:	463b      	mov	r3, r7
 8011b72:	f7fd f829 	bl	800ebc8 <__aeabi_dcmplt>
 8011b76:	2800      	cmp	r0, #0
 8011b78:	d047      	beq.n	8011c0a <_dtoa_r+0xdb2>
 8011b7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011b7c:	9304      	str	r3, [sp, #16]
 8011b7e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8011b82:	f7ff bb2a 	b.w	80111da <_dtoa_r+0x382>
 8011b86:	9b05      	ldr	r3, [sp, #20]
 8011b88:	9a06      	ldr	r2, [sp, #24]
 8011b8a:	1a9d      	subs	r5, r3, r2
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	f7ff bb5e 	b.w	801124e <_dtoa_r+0x3f6>
 8011b92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b94:	9f08      	ldr	r7, [sp, #32]
 8011b96:	9d05      	ldr	r5, [sp, #20]
 8011b98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011b9c:	f7ff bb57 	b.w	801124e <_dtoa_r+0x3f6>
 8011ba0:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8011ba4:	f04f 0802 	mov.w	r8, #2
 8011ba8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011bac:	e546      	b.n	801163c <_dtoa_r+0x7e4>
 8011bae:	9b06      	ldr	r3, [sp, #24]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	f43f aeb4 	beq.w	801191e <_dtoa_r+0xac6>
 8011bb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011bb8:	2d00      	cmp	r5, #0
 8011bba:	f77f af29 	ble.w	8011a10 <_dtoa_r+0xbb8>
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	4b21      	ldr	r3, [pc, #132]	; (8011c48 <_dtoa_r+0xdf0>)
 8011bc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011bc6:	f7fc fd8d 	bl	800e6e4 <__aeabi_dmul>
 8011bca:	4606      	mov	r6, r0
 8011bcc:	460f      	mov	r7, r1
 8011bce:	f108 0001 	add.w	r0, r8, #1
 8011bd2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011bd6:	f7fc fd1f 	bl	800e618 <__aeabi_i2d>
 8011bda:	4602      	mov	r2, r0
 8011bdc:	460b      	mov	r3, r1
 8011bde:	4630      	mov	r0, r6
 8011be0:	4639      	mov	r1, r7
 8011be2:	f7fc fd7f 	bl	800e6e4 <__aeabi_dmul>
 8011be6:	4b14      	ldr	r3, [pc, #80]	; (8011c38 <_dtoa_r+0xde0>)
 8011be8:	2200      	movs	r2, #0
 8011bea:	f7fc fbc9 	bl	800e380 <__adddf3>
 8011bee:	9b04      	ldr	r3, [sp, #16]
 8011bf0:	3b01      	subs	r3, #1
 8011bf2:	4606      	mov	r6, r0
 8011bf4:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8011bf8:	9312      	str	r3, [sp, #72]	; 0x48
 8011bfa:	46a9      	mov	r9, r5
 8011bfc:	e53f      	b.n	801167e <_dtoa_r+0x826>
 8011bfe:	2239      	movs	r2, #57	; 0x39
 8011c00:	46b2      	mov	sl, r6
 8011c02:	703a      	strb	r2, [r7, #0]
 8011c04:	464e      	mov	r6, r9
 8011c06:	1c7d      	adds	r5, r7, #1
 8011c08:	e405      	b.n	8011416 <_dtoa_r+0x5be>
 8011c0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011c0e:	2000      	movs	r0, #0
 8011c10:	490e      	ldr	r1, [pc, #56]	; (8011c4c <_dtoa_r+0xdf4>)
 8011c12:	f7fc fbb3 	bl	800e37c <__aeabi_dsub>
 8011c16:	4632      	mov	r2, r6
 8011c18:	463b      	mov	r3, r7
 8011c1a:	f7fc fff3 	bl	800ec04 <__aeabi_dcmpgt>
 8011c1e:	b908      	cbnz	r0, 8011c24 <_dtoa_r+0xdcc>
 8011c20:	e6f6      	b.n	8011a10 <_dtoa_r+0xbb8>
 8011c22:	4615      	mov	r5, r2
 8011c24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011c28:	2b30      	cmp	r3, #48	; 0x30
 8011c2a:	f105 32ff 	add.w	r2, r5, #4294967295
 8011c2e:	d0f8      	beq.n	8011c22 <_dtoa_r+0xdca>
 8011c30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011c32:	9304      	str	r3, [sp, #16]
 8011c34:	f7ff bae3 	b.w	80111fe <_dtoa_r+0x3a6>
 8011c38:	401c0000 	.word	0x401c0000
 8011c3c:	40140000 	.word	0x40140000
 8011c40:	08014868 	.word	0x08014868
 8011c44:	08014930 	.word	0x08014930
 8011c48:	40240000 	.word	0x40240000
 8011c4c:	3fe00000 	.word	0x3fe00000
 8011c50:	4643      	mov	r3, r8
 8011c52:	f8dd b008 	ldr.w	fp, [sp, #8]
 8011c56:	46a0      	mov	r8, r4
 8011c58:	461c      	mov	r4, r3
 8011c5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011c5c:	9304      	str	r3, [sp, #16]
 8011c5e:	f7ff babc 	b.w	80111da <_dtoa_r+0x382>
 8011c62:	46b9      	mov	r9, r7
 8011c64:	f7ff bb70 	b.w	8011348 <_dtoa_r+0x4f0>
 8011c68:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8011c6c:	d0c7      	beq.n	8011bfe <_dtoa_r+0xda6>
 8011c6e:	f1ba 0f00 	cmp.w	sl, #0
 8011c72:	f77f aeb5 	ble.w	80119e0 <_dtoa_r+0xb88>
 8011c76:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 8011c7a:	e6b1      	b.n	80119e0 <_dtoa_r+0xb88>
 8011c7c:	f47f aeb0 	bne.w	80119e0 <_dtoa_r+0xb88>
 8011c80:	f01c 0f01 	tst.w	ip, #1
 8011c84:	f43f aeac 	beq.w	80119e0 <_dtoa_r+0xb88>
 8011c88:	e6a4      	b.n	80119d4 <_dtoa_r+0xb7c>
 8011c8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011c8c:	2b02      	cmp	r3, #2
 8011c8e:	dc04      	bgt.n	8011c9a <_dtoa_r+0xe42>
 8011c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c92:	e605      	b.n	80118a0 <_dtoa_r+0xa48>
 8011c94:	f04f 0802 	mov.w	r8, #2
 8011c98:	e4d0      	b.n	801163c <_dtoa_r+0x7e4>
 8011c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c9c:	9306      	str	r3, [sp, #24]
 8011c9e:	e61b      	b.n	80118d8 <_dtoa_r+0xa80>
 8011ca0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011ca2:	2b02      	cmp	r3, #2
 8011ca4:	dcf9      	bgt.n	8011c9a <_dtoa_r+0xe42>
 8011ca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ca8:	f7ff bbf1 	b.w	801148e <_dtoa_r+0x636>
 8011cac:	2500      	movs	r5, #0
 8011cae:	6465      	str	r5, [r4, #68]	; 0x44
 8011cb0:	4629      	mov	r1, r5
 8011cb2:	4620      	mov	r0, r4
 8011cb4:	f000 ff96 	bl	8012be4 <_Balloc>
 8011cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cbc:	9306      	str	r3, [sp, #24]
 8011cbe:	930c      	str	r3, [sp, #48]	; 0x30
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	9007      	str	r0, [sp, #28]
 8011cc4:	9521      	str	r5, [sp, #132]	; 0x84
 8011cc6:	6420      	str	r0, [r4, #64]	; 0x40
 8011cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8011cca:	f7ff b9d5 	b.w	8011078 <_dtoa_r+0x220>
 8011cce:	f43f ab50 	beq.w	8011372 <_dtoa_r+0x51a>
 8011cd2:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8011cd6:	f7ff bb47 	b.w	8011368 <_dtoa_r+0x510>
 8011cda:	2301      	movs	r3, #1
 8011cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8011cde:	e55c      	b.n	801179a <_dtoa_r+0x942>
 8011ce0:	2501      	movs	r5, #1
 8011ce2:	f7ff b993 	b.w	801100c <_dtoa_r+0x1b4>
 8011ce6:	bf00      	nop

08011ce8 <__sflush_r>:
 8011ce8:	898b      	ldrh	r3, [r1, #12]
 8011cea:	b29a      	uxth	r2, r3
 8011cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf0:	460d      	mov	r5, r1
 8011cf2:	0711      	lsls	r1, r2, #28
 8011cf4:	4680      	mov	r8, r0
 8011cf6:	d43c      	bmi.n	8011d72 <__sflush_r+0x8a>
 8011cf8:	686a      	ldr	r2, [r5, #4]
 8011cfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011cfe:	2a00      	cmp	r2, #0
 8011d00:	81ab      	strh	r3, [r5, #12]
 8011d02:	dd65      	ble.n	8011dd0 <__sflush_r+0xe8>
 8011d04:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8011d06:	2e00      	cmp	r6, #0
 8011d08:	d04b      	beq.n	8011da2 <__sflush_r+0xba>
 8011d0a:	b29b      	uxth	r3, r3
 8011d0c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8011d10:	2100      	movs	r1, #0
 8011d12:	b292      	uxth	r2, r2
 8011d14:	f8d8 4000 	ldr.w	r4, [r8]
 8011d18:	f8c8 1000 	str.w	r1, [r8]
 8011d1c:	2a00      	cmp	r2, #0
 8011d1e:	d05b      	beq.n	8011dd8 <__sflush_r+0xf0>
 8011d20:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8011d22:	075f      	lsls	r7, r3, #29
 8011d24:	d505      	bpl.n	8011d32 <__sflush_r+0x4a>
 8011d26:	6869      	ldr	r1, [r5, #4]
 8011d28:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011d2a:	1a52      	subs	r2, r2, r1
 8011d2c:	b10b      	cbz	r3, 8011d32 <__sflush_r+0x4a>
 8011d2e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8011d30:	1ad2      	subs	r2, r2, r3
 8011d32:	4640      	mov	r0, r8
 8011d34:	69e9      	ldr	r1, [r5, #28]
 8011d36:	2300      	movs	r3, #0
 8011d38:	47b0      	blx	r6
 8011d3a:	1c46      	adds	r6, r0, #1
 8011d3c:	d056      	beq.n	8011dec <__sflush_r+0x104>
 8011d3e:	89ab      	ldrh	r3, [r5, #12]
 8011d40:	692a      	ldr	r2, [r5, #16]
 8011d42:	602a      	str	r2, [r5, #0]
 8011d44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011d48:	b29b      	uxth	r3, r3
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	606a      	str	r2, [r5, #4]
 8011d4e:	04da      	lsls	r2, r3, #19
 8011d50:	81ab      	strh	r3, [r5, #12]
 8011d52:	d43b      	bmi.n	8011dcc <__sflush_r+0xe4>
 8011d54:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8011d56:	f8c8 4000 	str.w	r4, [r8]
 8011d5a:	b311      	cbz	r1, 8011da2 <__sflush_r+0xba>
 8011d5c:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8011d60:	4299      	cmp	r1, r3
 8011d62:	d002      	beq.n	8011d6a <__sflush_r+0x82>
 8011d64:	4640      	mov	r0, r8
 8011d66:	f000 f955 	bl	8012014 <_free_r>
 8011d6a:	2000      	movs	r0, #0
 8011d6c:	6328      	str	r0, [r5, #48]	; 0x30
 8011d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d72:	692e      	ldr	r6, [r5, #16]
 8011d74:	b1ae      	cbz	r6, 8011da2 <__sflush_r+0xba>
 8011d76:	682c      	ldr	r4, [r5, #0]
 8011d78:	602e      	str	r6, [r5, #0]
 8011d7a:	0791      	lsls	r1, r2, #30
 8011d7c:	bf0c      	ite	eq
 8011d7e:	696b      	ldreq	r3, [r5, #20]
 8011d80:	2300      	movne	r3, #0
 8011d82:	1ba4      	subs	r4, r4, r6
 8011d84:	60ab      	str	r3, [r5, #8]
 8011d86:	e00a      	b.n	8011d9e <__sflush_r+0xb6>
 8011d88:	4632      	mov	r2, r6
 8011d8a:	4623      	mov	r3, r4
 8011d8c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8011d8e:	69e9      	ldr	r1, [r5, #28]
 8011d90:	4640      	mov	r0, r8
 8011d92:	47b8      	blx	r7
 8011d94:	2800      	cmp	r0, #0
 8011d96:	eba4 0400 	sub.w	r4, r4, r0
 8011d9a:	4406      	add	r6, r0
 8011d9c:	dd04      	ble.n	8011da8 <__sflush_r+0xc0>
 8011d9e:	2c00      	cmp	r4, #0
 8011da0:	dcf2      	bgt.n	8011d88 <__sflush_r+0xa0>
 8011da2:	2000      	movs	r0, #0
 8011da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011da8:	89ab      	ldrh	r3, [r5, #12]
 8011daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011dae:	81ab      	strh	r3, [r5, #12]
 8011db0:	f04f 30ff 	mov.w	r0, #4294967295
 8011db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011db8:	89ab      	ldrh	r3, [r5, #12]
 8011dba:	692a      	ldr	r2, [r5, #16]
 8011dbc:	6069      	str	r1, [r5, #4]
 8011dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011dc2:	b29b      	uxth	r3, r3
 8011dc4:	81ab      	strh	r3, [r5, #12]
 8011dc6:	04db      	lsls	r3, r3, #19
 8011dc8:	602a      	str	r2, [r5, #0]
 8011dca:	d5c3      	bpl.n	8011d54 <__sflush_r+0x6c>
 8011dcc:	6528      	str	r0, [r5, #80]	; 0x50
 8011dce:	e7c1      	b.n	8011d54 <__sflush_r+0x6c>
 8011dd0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8011dd2:	2a00      	cmp	r2, #0
 8011dd4:	dc96      	bgt.n	8011d04 <__sflush_r+0x1c>
 8011dd6:	e7e4      	b.n	8011da2 <__sflush_r+0xba>
 8011dd8:	2301      	movs	r3, #1
 8011dda:	4640      	mov	r0, r8
 8011ddc:	69e9      	ldr	r1, [r5, #28]
 8011dde:	47b0      	blx	r6
 8011de0:	1c43      	adds	r3, r0, #1
 8011de2:	4602      	mov	r2, r0
 8011de4:	d019      	beq.n	8011e1a <__sflush_r+0x132>
 8011de6:	89ab      	ldrh	r3, [r5, #12]
 8011de8:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8011dea:	e79a      	b.n	8011d22 <__sflush_r+0x3a>
 8011dec:	f8d8 1000 	ldr.w	r1, [r8]
 8011df0:	2900      	cmp	r1, #0
 8011df2:	d0e1      	beq.n	8011db8 <__sflush_r+0xd0>
 8011df4:	291d      	cmp	r1, #29
 8011df6:	d007      	beq.n	8011e08 <__sflush_r+0x120>
 8011df8:	2916      	cmp	r1, #22
 8011dfa:	d005      	beq.n	8011e08 <__sflush_r+0x120>
 8011dfc:	89ab      	ldrh	r3, [r5, #12]
 8011dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e02:	81ab      	strh	r3, [r5, #12]
 8011e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e08:	89ab      	ldrh	r3, [r5, #12]
 8011e0a:	692a      	ldr	r2, [r5, #16]
 8011e0c:	602a      	str	r2, [r5, #0]
 8011e0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011e12:	2200      	movs	r2, #0
 8011e14:	81ab      	strh	r3, [r5, #12]
 8011e16:	606a      	str	r2, [r5, #4]
 8011e18:	e79c      	b.n	8011d54 <__sflush_r+0x6c>
 8011e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d0e1      	beq.n	8011de6 <__sflush_r+0xfe>
 8011e22:	2b1d      	cmp	r3, #29
 8011e24:	d007      	beq.n	8011e36 <__sflush_r+0x14e>
 8011e26:	2b16      	cmp	r3, #22
 8011e28:	d005      	beq.n	8011e36 <__sflush_r+0x14e>
 8011e2a:	89ab      	ldrh	r3, [r5, #12]
 8011e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e30:	81ab      	strh	r3, [r5, #12]
 8011e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e36:	f8c8 4000 	str.w	r4, [r8]
 8011e3a:	e7b2      	b.n	8011da2 <__sflush_r+0xba>

08011e3c <_fflush_r>:
 8011e3c:	b510      	push	{r4, lr}
 8011e3e:	4604      	mov	r4, r0
 8011e40:	b082      	sub	sp, #8
 8011e42:	b108      	cbz	r0, 8011e48 <_fflush_r+0xc>
 8011e44:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8011e46:	b153      	cbz	r3, 8011e5e <_fflush_r+0x22>
 8011e48:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8011e4c:	b908      	cbnz	r0, 8011e52 <_fflush_r+0x16>
 8011e4e:	b002      	add	sp, #8
 8011e50:	bd10      	pop	{r4, pc}
 8011e52:	4620      	mov	r0, r4
 8011e54:	b002      	add	sp, #8
 8011e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e5a:	f7ff bf45 	b.w	8011ce8 <__sflush_r>
 8011e5e:	9101      	str	r1, [sp, #4]
 8011e60:	f000 f880 	bl	8011f64 <__sinit>
 8011e64:	9901      	ldr	r1, [sp, #4]
 8011e66:	e7ef      	b.n	8011e48 <_fflush_r+0xc>

08011e68 <_cleanup_r>:
 8011e68:	4901      	ldr	r1, [pc, #4]	; (8011e70 <_cleanup_r+0x8>)
 8011e6a:	f000 bb37 	b.w	80124dc <_fwalk_reent>
 8011e6e:	bf00      	nop
 8011e70:	0801379d 	.word	0x0801379d

08011e74 <__sinit.part.1>:
 8011e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e78:	4b35      	ldr	r3, [pc, #212]	; (8011f50 <__sinit.part.1+0xdc>)
 8011e7a:	6845      	ldr	r5, [r0, #4]
 8011e7c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8011e7e:	2400      	movs	r4, #0
 8011e80:	4607      	mov	r7, r0
 8011e82:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8011e86:	2304      	movs	r3, #4
 8011e88:	2103      	movs	r1, #3
 8011e8a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8011e8e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8011e92:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8011e96:	b083      	sub	sp, #12
 8011e98:	602c      	str	r4, [r5, #0]
 8011e9a:	606c      	str	r4, [r5, #4]
 8011e9c:	60ac      	str	r4, [r5, #8]
 8011e9e:	666c      	str	r4, [r5, #100]	; 0x64
 8011ea0:	81ec      	strh	r4, [r5, #14]
 8011ea2:	612c      	str	r4, [r5, #16]
 8011ea4:	616c      	str	r4, [r5, #20]
 8011ea6:	61ac      	str	r4, [r5, #24]
 8011ea8:	81ab      	strh	r3, [r5, #12]
 8011eaa:	4621      	mov	r1, r4
 8011eac:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8011eb0:	2208      	movs	r2, #8
 8011eb2:	f7fd fa69 	bl	800f388 <memset>
 8011eb6:	68be      	ldr	r6, [r7, #8]
 8011eb8:	f8df b098 	ldr.w	fp, [pc, #152]	; 8011f54 <__sinit.part.1+0xe0>
 8011ebc:	f8df a098 	ldr.w	sl, [pc, #152]	; 8011f58 <__sinit.part.1+0xe4>
 8011ec0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8011f5c <__sinit.part.1+0xe8>
 8011ec4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8011f60 <__sinit.part.1+0xec>
 8011ec8:	f8c5 b020 	str.w	fp, [r5, #32]
 8011ecc:	2301      	movs	r3, #1
 8011ece:	2209      	movs	r2, #9
 8011ed0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8011ed4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8011ed8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8011edc:	61ed      	str	r5, [r5, #28]
 8011ede:	4621      	mov	r1, r4
 8011ee0:	81f3      	strh	r3, [r6, #14]
 8011ee2:	81b2      	strh	r2, [r6, #12]
 8011ee4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8011ee8:	6034      	str	r4, [r6, #0]
 8011eea:	6074      	str	r4, [r6, #4]
 8011eec:	60b4      	str	r4, [r6, #8]
 8011eee:	6674      	str	r4, [r6, #100]	; 0x64
 8011ef0:	6134      	str	r4, [r6, #16]
 8011ef2:	6174      	str	r4, [r6, #20]
 8011ef4:	61b4      	str	r4, [r6, #24]
 8011ef6:	2208      	movs	r2, #8
 8011ef8:	9301      	str	r3, [sp, #4]
 8011efa:	f7fd fa45 	bl	800f388 <memset>
 8011efe:	68fd      	ldr	r5, [r7, #12]
 8011f00:	61f6      	str	r6, [r6, #28]
 8011f02:	2012      	movs	r0, #18
 8011f04:	2202      	movs	r2, #2
 8011f06:	f8c6 b020 	str.w	fp, [r6, #32]
 8011f0a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8011f0e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8011f12:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8011f16:	4621      	mov	r1, r4
 8011f18:	81a8      	strh	r0, [r5, #12]
 8011f1a:	81ea      	strh	r2, [r5, #14]
 8011f1c:	602c      	str	r4, [r5, #0]
 8011f1e:	606c      	str	r4, [r5, #4]
 8011f20:	60ac      	str	r4, [r5, #8]
 8011f22:	666c      	str	r4, [r5, #100]	; 0x64
 8011f24:	612c      	str	r4, [r5, #16]
 8011f26:	616c      	str	r4, [r5, #20]
 8011f28:	61ac      	str	r4, [r5, #24]
 8011f2a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8011f2e:	2208      	movs	r2, #8
 8011f30:	f7fd fa2a 	bl	800f388 <memset>
 8011f34:	9b01      	ldr	r3, [sp, #4]
 8011f36:	61ed      	str	r5, [r5, #28]
 8011f38:	f8c5 b020 	str.w	fp, [r5, #32]
 8011f3c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8011f40:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8011f44:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8011f48:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f4a:	b003      	add	sp, #12
 8011f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f50:	08011e69 	.word	0x08011e69
 8011f54:	080135dd 	.word	0x080135dd
 8011f58:	08013601 	.word	0x08013601
 8011f5c:	08013639 	.word	0x08013639
 8011f60:	08013659 	.word	0x08013659

08011f64 <__sinit>:
 8011f64:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8011f66:	b103      	cbz	r3, 8011f6a <__sinit+0x6>
 8011f68:	4770      	bx	lr
 8011f6a:	f7ff bf83 	b.w	8011e74 <__sinit.part.1>
 8011f6e:	bf00      	nop

08011f70 <__sfp_lock_acquire>:
 8011f70:	4770      	bx	lr
 8011f72:	bf00      	nop

08011f74 <__sfp_lock_release>:
 8011f74:	4770      	bx	lr
 8011f76:	bf00      	nop

08011f78 <_malloc_trim_r>:
 8011f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f7a:	4f23      	ldr	r7, [pc, #140]	; (8012008 <_malloc_trim_r+0x90>)
 8011f7c:	460c      	mov	r4, r1
 8011f7e:	4606      	mov	r6, r0
 8011f80:	f000 fe2c 	bl	8012bdc <__malloc_lock>
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	685d      	ldr	r5, [r3, #4]
 8011f88:	f025 0503 	bic.w	r5, r5, #3
 8011f8c:	1b29      	subs	r1, r5, r4
 8011f8e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8011f92:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8011f96:	f021 010f 	bic.w	r1, r1, #15
 8011f9a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8011f9e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8011fa2:	db07      	blt.n	8011fb4 <_malloc_trim_r+0x3c>
 8011fa4:	4630      	mov	r0, r6
 8011fa6:	2100      	movs	r1, #0
 8011fa8:	f001 fb06 	bl	80135b8 <_sbrk_r>
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	442b      	add	r3, r5
 8011fb0:	4298      	cmp	r0, r3
 8011fb2:	d004      	beq.n	8011fbe <_malloc_trim_r+0x46>
 8011fb4:	4630      	mov	r0, r6
 8011fb6:	f000 fe13 	bl	8012be0 <__malloc_unlock>
 8011fba:	2000      	movs	r0, #0
 8011fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fbe:	4630      	mov	r0, r6
 8011fc0:	4261      	negs	r1, r4
 8011fc2:	f001 faf9 	bl	80135b8 <_sbrk_r>
 8011fc6:	3001      	adds	r0, #1
 8011fc8:	d00d      	beq.n	8011fe6 <_malloc_trim_r+0x6e>
 8011fca:	4b10      	ldr	r3, [pc, #64]	; (801200c <_malloc_trim_r+0x94>)
 8011fcc:	68ba      	ldr	r2, [r7, #8]
 8011fce:	6819      	ldr	r1, [r3, #0]
 8011fd0:	1b2d      	subs	r5, r5, r4
 8011fd2:	f045 0501 	orr.w	r5, r5, #1
 8011fd6:	4630      	mov	r0, r6
 8011fd8:	1b09      	subs	r1, r1, r4
 8011fda:	6055      	str	r5, [r2, #4]
 8011fdc:	6019      	str	r1, [r3, #0]
 8011fde:	f000 fdff 	bl	8012be0 <__malloc_unlock>
 8011fe2:	2001      	movs	r0, #1
 8011fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fe6:	4630      	mov	r0, r6
 8011fe8:	2100      	movs	r1, #0
 8011fea:	f001 fae5 	bl	80135b8 <_sbrk_r>
 8011fee:	68ba      	ldr	r2, [r7, #8]
 8011ff0:	1a83      	subs	r3, r0, r2
 8011ff2:	2b0f      	cmp	r3, #15
 8011ff4:	ddde      	ble.n	8011fb4 <_malloc_trim_r+0x3c>
 8011ff6:	4c06      	ldr	r4, [pc, #24]	; (8012010 <_malloc_trim_r+0x98>)
 8011ff8:	4904      	ldr	r1, [pc, #16]	; (801200c <_malloc_trim_r+0x94>)
 8011ffa:	6824      	ldr	r4, [r4, #0]
 8011ffc:	f043 0301 	orr.w	r3, r3, #1
 8012000:	1b00      	subs	r0, r0, r4
 8012002:	6053      	str	r3, [r2, #4]
 8012004:	6008      	str	r0, [r1, #0]
 8012006:	e7d5      	b.n	8011fb4 <_malloc_trim_r+0x3c>
 8012008:	1ffe8d10 	.word	0x1ffe8d10
 801200c:	1ffe92bc 	.word	0x1ffe92bc
 8012010:	1ffe911c 	.word	0x1ffe911c

08012014 <_free_r>:
 8012014:	2900      	cmp	r1, #0
 8012016:	d04e      	beq.n	80120b6 <_free_r+0xa2>
 8012018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801201c:	460c      	mov	r4, r1
 801201e:	4680      	mov	r8, r0
 8012020:	f000 fddc 	bl	8012bdc <__malloc_lock>
 8012024:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8012028:	4962      	ldr	r1, [pc, #392]	; (80121b4 <_free_r+0x1a0>)
 801202a:	f027 0201 	bic.w	r2, r7, #1
 801202e:	f1a4 0508 	sub.w	r5, r4, #8
 8012032:	18ab      	adds	r3, r5, r2
 8012034:	688e      	ldr	r6, [r1, #8]
 8012036:	6858      	ldr	r0, [r3, #4]
 8012038:	429e      	cmp	r6, r3
 801203a:	f020 0003 	bic.w	r0, r0, #3
 801203e:	d05a      	beq.n	80120f6 <_free_r+0xe2>
 8012040:	07fe      	lsls	r6, r7, #31
 8012042:	6058      	str	r0, [r3, #4]
 8012044:	d40b      	bmi.n	801205e <_free_r+0x4a>
 8012046:	f854 7c08 	ldr.w	r7, [r4, #-8]
 801204a:	1bed      	subs	r5, r5, r7
 801204c:	f101 0e08 	add.w	lr, r1, #8
 8012050:	68ac      	ldr	r4, [r5, #8]
 8012052:	4574      	cmp	r4, lr
 8012054:	443a      	add	r2, r7
 8012056:	d067      	beq.n	8012128 <_free_r+0x114>
 8012058:	68ef      	ldr	r7, [r5, #12]
 801205a:	60e7      	str	r7, [r4, #12]
 801205c:	60bc      	str	r4, [r7, #8]
 801205e:	181c      	adds	r4, r3, r0
 8012060:	6864      	ldr	r4, [r4, #4]
 8012062:	07e4      	lsls	r4, r4, #31
 8012064:	d40c      	bmi.n	8012080 <_free_r+0x6c>
 8012066:	4f54      	ldr	r7, [pc, #336]	; (80121b8 <_free_r+0x1a4>)
 8012068:	689c      	ldr	r4, [r3, #8]
 801206a:	42bc      	cmp	r4, r7
 801206c:	4402      	add	r2, r0
 801206e:	d07c      	beq.n	801216a <_free_r+0x156>
 8012070:	68d8      	ldr	r0, [r3, #12]
 8012072:	60e0      	str	r0, [r4, #12]
 8012074:	f042 0301 	orr.w	r3, r2, #1
 8012078:	6084      	str	r4, [r0, #8]
 801207a:	606b      	str	r3, [r5, #4]
 801207c:	50aa      	str	r2, [r5, r2]
 801207e:	e003      	b.n	8012088 <_free_r+0x74>
 8012080:	f042 0301 	orr.w	r3, r2, #1
 8012084:	606b      	str	r3, [r5, #4]
 8012086:	50aa      	str	r2, [r5, r2]
 8012088:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801208c:	d214      	bcs.n	80120b8 <_free_r+0xa4>
 801208e:	08d2      	lsrs	r2, r2, #3
 8012090:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8012094:	6848      	ldr	r0, [r1, #4]
 8012096:	689f      	ldr	r7, [r3, #8]
 8012098:	60af      	str	r7, [r5, #8]
 801209a:	1092      	asrs	r2, r2, #2
 801209c:	2401      	movs	r4, #1
 801209e:	fa04 f202 	lsl.w	r2, r4, r2
 80120a2:	4310      	orrs	r0, r2
 80120a4:	60eb      	str	r3, [r5, #12]
 80120a6:	6048      	str	r0, [r1, #4]
 80120a8:	609d      	str	r5, [r3, #8]
 80120aa:	60fd      	str	r5, [r7, #12]
 80120ac:	4640      	mov	r0, r8
 80120ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120b2:	f000 bd95 	b.w	8012be0 <__malloc_unlock>
 80120b6:	4770      	bx	lr
 80120b8:	0a53      	lsrs	r3, r2, #9
 80120ba:	2b04      	cmp	r3, #4
 80120bc:	d847      	bhi.n	801214e <_free_r+0x13a>
 80120be:	0993      	lsrs	r3, r2, #6
 80120c0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80120c4:	0060      	lsls	r0, r4, #1
 80120c6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80120ca:	493a      	ldr	r1, [pc, #232]	; (80121b4 <_free_r+0x1a0>)
 80120cc:	6883      	ldr	r3, [r0, #8]
 80120ce:	4283      	cmp	r3, r0
 80120d0:	d043      	beq.n	801215a <_free_r+0x146>
 80120d2:	6859      	ldr	r1, [r3, #4]
 80120d4:	f021 0103 	bic.w	r1, r1, #3
 80120d8:	4291      	cmp	r1, r2
 80120da:	d902      	bls.n	80120e2 <_free_r+0xce>
 80120dc:	689b      	ldr	r3, [r3, #8]
 80120de:	4298      	cmp	r0, r3
 80120e0:	d1f7      	bne.n	80120d2 <_free_r+0xbe>
 80120e2:	68da      	ldr	r2, [r3, #12]
 80120e4:	60ea      	str	r2, [r5, #12]
 80120e6:	60ab      	str	r3, [r5, #8]
 80120e8:	4640      	mov	r0, r8
 80120ea:	6095      	str	r5, [r2, #8]
 80120ec:	60dd      	str	r5, [r3, #12]
 80120ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120f2:	f000 bd75 	b.w	8012be0 <__malloc_unlock>
 80120f6:	07ff      	lsls	r7, r7, #31
 80120f8:	4402      	add	r2, r0
 80120fa:	d407      	bmi.n	801210c <_free_r+0xf8>
 80120fc:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8012100:	1aed      	subs	r5, r5, r3
 8012102:	441a      	add	r2, r3
 8012104:	68a8      	ldr	r0, [r5, #8]
 8012106:	68eb      	ldr	r3, [r5, #12]
 8012108:	60c3      	str	r3, [r0, #12]
 801210a:	6098      	str	r0, [r3, #8]
 801210c:	4b2b      	ldr	r3, [pc, #172]	; (80121bc <_free_r+0x1a8>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	f042 0001 	orr.w	r0, r2, #1
 8012114:	429a      	cmp	r2, r3
 8012116:	6068      	str	r0, [r5, #4]
 8012118:	608d      	str	r5, [r1, #8]
 801211a:	d3c7      	bcc.n	80120ac <_free_r+0x98>
 801211c:	4b28      	ldr	r3, [pc, #160]	; (80121c0 <_free_r+0x1ac>)
 801211e:	4640      	mov	r0, r8
 8012120:	6819      	ldr	r1, [r3, #0]
 8012122:	f7ff ff29 	bl	8011f78 <_malloc_trim_r>
 8012126:	e7c1      	b.n	80120ac <_free_r+0x98>
 8012128:	1819      	adds	r1, r3, r0
 801212a:	6849      	ldr	r1, [r1, #4]
 801212c:	07c9      	lsls	r1, r1, #31
 801212e:	d409      	bmi.n	8012144 <_free_r+0x130>
 8012130:	68d9      	ldr	r1, [r3, #12]
 8012132:	689b      	ldr	r3, [r3, #8]
 8012134:	4402      	add	r2, r0
 8012136:	f042 0001 	orr.w	r0, r2, #1
 801213a:	60d9      	str	r1, [r3, #12]
 801213c:	608b      	str	r3, [r1, #8]
 801213e:	6068      	str	r0, [r5, #4]
 8012140:	50aa      	str	r2, [r5, r2]
 8012142:	e7b3      	b.n	80120ac <_free_r+0x98>
 8012144:	f042 0301 	orr.w	r3, r2, #1
 8012148:	606b      	str	r3, [r5, #4]
 801214a:	50aa      	str	r2, [r5, r2]
 801214c:	e7ae      	b.n	80120ac <_free_r+0x98>
 801214e:	2b14      	cmp	r3, #20
 8012150:	d814      	bhi.n	801217c <_free_r+0x168>
 8012152:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 8012156:	0060      	lsls	r0, r4, #1
 8012158:	e7b5      	b.n	80120c6 <_free_r+0xb2>
 801215a:	684a      	ldr	r2, [r1, #4]
 801215c:	10a4      	asrs	r4, r4, #2
 801215e:	2001      	movs	r0, #1
 8012160:	40a0      	lsls	r0, r4
 8012162:	4302      	orrs	r2, r0
 8012164:	604a      	str	r2, [r1, #4]
 8012166:	461a      	mov	r2, r3
 8012168:	e7bc      	b.n	80120e4 <_free_r+0xd0>
 801216a:	f042 0301 	orr.w	r3, r2, #1
 801216e:	614d      	str	r5, [r1, #20]
 8012170:	610d      	str	r5, [r1, #16]
 8012172:	60ec      	str	r4, [r5, #12]
 8012174:	60ac      	str	r4, [r5, #8]
 8012176:	606b      	str	r3, [r5, #4]
 8012178:	50aa      	str	r2, [r5, r2]
 801217a:	e797      	b.n	80120ac <_free_r+0x98>
 801217c:	2b54      	cmp	r3, #84	; 0x54
 801217e:	d804      	bhi.n	801218a <_free_r+0x176>
 8012180:	0b13      	lsrs	r3, r2, #12
 8012182:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8012186:	0060      	lsls	r0, r4, #1
 8012188:	e79d      	b.n	80120c6 <_free_r+0xb2>
 801218a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801218e:	d804      	bhi.n	801219a <_free_r+0x186>
 8012190:	0bd3      	lsrs	r3, r2, #15
 8012192:	f103 0477 	add.w	r4, r3, #119	; 0x77
 8012196:	0060      	lsls	r0, r4, #1
 8012198:	e795      	b.n	80120c6 <_free_r+0xb2>
 801219a:	f240 5054 	movw	r0, #1364	; 0x554
 801219e:	4283      	cmp	r3, r0
 80121a0:	d804      	bhi.n	80121ac <_free_r+0x198>
 80121a2:	0c93      	lsrs	r3, r2, #18
 80121a4:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80121a8:	0060      	lsls	r0, r4, #1
 80121aa:	e78c      	b.n	80120c6 <_free_r+0xb2>
 80121ac:	20fc      	movs	r0, #252	; 0xfc
 80121ae:	247e      	movs	r4, #126	; 0x7e
 80121b0:	e789      	b.n	80120c6 <_free_r+0xb2>
 80121b2:	bf00      	nop
 80121b4:	1ffe8d10 	.word	0x1ffe8d10
 80121b8:	1ffe8d18 	.word	0x1ffe8d18
 80121bc:	1ffe9118 	.word	0x1ffe9118
 80121c0:	1ffe92b8 	.word	0x1ffe92b8

080121c4 <__sfvwrite_r>:
 80121c4:	6893      	ldr	r3, [r2, #8]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d07a      	beq.n	80122c0 <__sfvwrite_r+0xfc>
 80121ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121ce:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 80121d2:	f01e 0f08 	tst.w	lr, #8
 80121d6:	b083      	sub	sp, #12
 80121d8:	460c      	mov	r4, r1
 80121da:	4681      	mov	r9, r0
 80121dc:	4616      	mov	r6, r2
 80121de:	d026      	beq.n	801222e <__sfvwrite_r+0x6a>
 80121e0:	690b      	ldr	r3, [r1, #16]
 80121e2:	b323      	cbz	r3, 801222e <__sfvwrite_r+0x6a>
 80121e4:	f00e 0802 	and.w	r8, lr, #2
 80121e8:	fa1f f088 	uxth.w	r0, r8
 80121ec:	6835      	ldr	r5, [r6, #0]
 80121ee:	b370      	cbz	r0, 801224e <__sfvwrite_r+0x8a>
 80121f0:	f04f 0a00 	mov.w	sl, #0
 80121f4:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 80124d8 <__sfvwrite_r+0x314>
 80121f8:	46d0      	mov	r8, sl
 80121fa:	45d8      	cmp	r8, fp
 80121fc:	4643      	mov	r3, r8
 80121fe:	4652      	mov	r2, sl
 8012200:	bf28      	it	cs
 8012202:	465b      	movcs	r3, fp
 8012204:	4648      	mov	r0, r9
 8012206:	f1b8 0f00 	cmp.w	r8, #0
 801220a:	d053      	beq.n	80122b4 <__sfvwrite_r+0xf0>
 801220c:	69e1      	ldr	r1, [r4, #28]
 801220e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8012210:	47b8      	blx	r7
 8012212:	2800      	cmp	r0, #0
 8012214:	dd73      	ble.n	80122fe <__sfvwrite_r+0x13a>
 8012216:	68b3      	ldr	r3, [r6, #8]
 8012218:	1a1b      	subs	r3, r3, r0
 801221a:	4482      	add	sl, r0
 801221c:	ebc0 0808 	rsb	r8, r0, r8
 8012220:	60b3      	str	r3, [r6, #8]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d1e9      	bne.n	80121fa <__sfvwrite_r+0x36>
 8012226:	2000      	movs	r0, #0
 8012228:	b003      	add	sp, #12
 801222a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801222e:	4648      	mov	r0, r9
 8012230:	4621      	mov	r1, r4
 8012232:	f7fe fd19 	bl	8010c68 <__swsetup_r>
 8012236:	2800      	cmp	r0, #0
 8012238:	f040 8145 	bne.w	80124c6 <__sfvwrite_r+0x302>
 801223c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8012240:	6835      	ldr	r5, [r6, #0]
 8012242:	f00e 0802 	and.w	r8, lr, #2
 8012246:	fa1f f088 	uxth.w	r0, r8
 801224a:	2800      	cmp	r0, #0
 801224c:	d1d0      	bne.n	80121f0 <__sfvwrite_r+0x2c>
 801224e:	f01e 0b01 	ands.w	fp, lr, #1
 8012252:	d15d      	bne.n	8012310 <__sfvwrite_r+0x14c>
 8012254:	46d8      	mov	r8, fp
 8012256:	f1b8 0f00 	cmp.w	r8, #0
 801225a:	d025      	beq.n	80122a8 <__sfvwrite_r+0xe4>
 801225c:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8012260:	68a7      	ldr	r7, [r4, #8]
 8012262:	d02f      	beq.n	80122c4 <__sfvwrite_r+0x100>
 8012264:	45b8      	cmp	r8, r7
 8012266:	46ba      	mov	sl, r7
 8012268:	f0c0 80a9 	bcc.w	80123be <__sfvwrite_r+0x1fa>
 801226c:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8012270:	f040 80b6 	bne.w	80123e0 <__sfvwrite_r+0x21c>
 8012274:	6820      	ldr	r0, [r4, #0]
 8012276:	4652      	mov	r2, sl
 8012278:	4659      	mov	r1, fp
 801227a:	f7fd f821 	bl	800f2c0 <memmove>
 801227e:	68a0      	ldr	r0, [r4, #8]
 8012280:	6822      	ldr	r2, [r4, #0]
 8012282:	1bc0      	subs	r0, r0, r7
 8012284:	eb02 030a 	add.w	r3, r2, sl
 8012288:	60a0      	str	r0, [r4, #8]
 801228a:	6023      	str	r3, [r4, #0]
 801228c:	4640      	mov	r0, r8
 801228e:	68b3      	ldr	r3, [r6, #8]
 8012290:	1a1b      	subs	r3, r3, r0
 8012292:	4483      	add	fp, r0
 8012294:	ebc0 0808 	rsb	r8, r0, r8
 8012298:	60b3      	str	r3, [r6, #8]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d0c3      	beq.n	8012226 <__sfvwrite_r+0x62>
 801229e:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 80122a2:	f1b8 0f00 	cmp.w	r8, #0
 80122a6:	d1d9      	bne.n	801225c <__sfvwrite_r+0x98>
 80122a8:	f8d5 b000 	ldr.w	fp, [r5]
 80122ac:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80122b0:	3508      	adds	r5, #8
 80122b2:	e7d0      	b.n	8012256 <__sfvwrite_r+0x92>
 80122b4:	f8d5 a000 	ldr.w	sl, [r5]
 80122b8:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80122bc:	3508      	adds	r5, #8
 80122be:	e79c      	b.n	80121fa <__sfvwrite_r+0x36>
 80122c0:	2000      	movs	r0, #0
 80122c2:	4770      	bx	lr
 80122c4:	6820      	ldr	r0, [r4, #0]
 80122c6:	6923      	ldr	r3, [r4, #16]
 80122c8:	4298      	cmp	r0, r3
 80122ca:	d803      	bhi.n	80122d4 <__sfvwrite_r+0x110>
 80122cc:	6962      	ldr	r2, [r4, #20]
 80122ce:	4590      	cmp	r8, r2
 80122d0:	f080 80b9 	bcs.w	8012446 <__sfvwrite_r+0x282>
 80122d4:	4547      	cmp	r7, r8
 80122d6:	bf28      	it	cs
 80122d8:	4647      	movcs	r7, r8
 80122da:	463a      	mov	r2, r7
 80122dc:	4659      	mov	r1, fp
 80122de:	f7fc ffef 	bl	800f2c0 <memmove>
 80122e2:	68a3      	ldr	r3, [r4, #8]
 80122e4:	6822      	ldr	r2, [r4, #0]
 80122e6:	1bdb      	subs	r3, r3, r7
 80122e8:	443a      	add	r2, r7
 80122ea:	60a3      	str	r3, [r4, #8]
 80122ec:	6022      	str	r2, [r4, #0]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d14a      	bne.n	8012388 <__sfvwrite_r+0x1c4>
 80122f2:	4648      	mov	r0, r9
 80122f4:	4621      	mov	r1, r4
 80122f6:	f7ff fda1 	bl	8011e3c <_fflush_r>
 80122fa:	2800      	cmp	r0, #0
 80122fc:	d044      	beq.n	8012388 <__sfvwrite_r+0x1c4>
 80122fe:	89a3      	ldrh	r3, [r4, #12]
 8012300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012304:	f04f 30ff 	mov.w	r0, #4294967295
 8012308:	81a3      	strh	r3, [r4, #12]
 801230a:	b003      	add	sp, #12
 801230c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012310:	4680      	mov	r8, r0
 8012312:	9000      	str	r0, [sp, #0]
 8012314:	4683      	mov	fp, r0
 8012316:	4682      	mov	sl, r0
 8012318:	f1ba 0f00 	cmp.w	sl, #0
 801231c:	d02c      	beq.n	8012378 <__sfvwrite_r+0x1b4>
 801231e:	9b00      	ldr	r3, [sp, #0]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d050      	beq.n	80123c6 <__sfvwrite_r+0x202>
 8012324:	6820      	ldr	r0, [r4, #0]
 8012326:	6921      	ldr	r1, [r4, #16]
 8012328:	f8d4 e008 	ldr.w	lr, [r4, #8]
 801232c:	6962      	ldr	r2, [r4, #20]
 801232e:	45d0      	cmp	r8, sl
 8012330:	4643      	mov	r3, r8
 8012332:	bf28      	it	cs
 8012334:	4653      	movcs	r3, sl
 8012336:	4288      	cmp	r0, r1
 8012338:	461f      	mov	r7, r3
 801233a:	d904      	bls.n	8012346 <__sfvwrite_r+0x182>
 801233c:	eb0e 0c02 	add.w	ip, lr, r2
 8012340:	4563      	cmp	r3, ip
 8012342:	f300 8092 	bgt.w	801246a <__sfvwrite_r+0x2a6>
 8012346:	4293      	cmp	r3, r2
 8012348:	db20      	blt.n	801238c <__sfvwrite_r+0x1c8>
 801234a:	4613      	mov	r3, r2
 801234c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801234e:	69e1      	ldr	r1, [r4, #28]
 8012350:	4648      	mov	r0, r9
 8012352:	465a      	mov	r2, fp
 8012354:	47b8      	blx	r7
 8012356:	1e07      	subs	r7, r0, #0
 8012358:	ddd1      	ble.n	80122fe <__sfvwrite_r+0x13a>
 801235a:	ebb8 0807 	subs.w	r8, r8, r7
 801235e:	d025      	beq.n	80123ac <__sfvwrite_r+0x1e8>
 8012360:	68b3      	ldr	r3, [r6, #8]
 8012362:	1bdb      	subs	r3, r3, r7
 8012364:	44bb      	add	fp, r7
 8012366:	ebc7 0a0a 	rsb	sl, r7, sl
 801236a:	60b3      	str	r3, [r6, #8]
 801236c:	2b00      	cmp	r3, #0
 801236e:	f43f af5a 	beq.w	8012226 <__sfvwrite_r+0x62>
 8012372:	f1ba 0f00 	cmp.w	sl, #0
 8012376:	d1d2      	bne.n	801231e <__sfvwrite_r+0x15a>
 8012378:	2300      	movs	r3, #0
 801237a:	f8d5 b000 	ldr.w	fp, [r5]
 801237e:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8012382:	9300      	str	r3, [sp, #0]
 8012384:	3508      	adds	r5, #8
 8012386:	e7c7      	b.n	8012318 <__sfvwrite_r+0x154>
 8012388:	4638      	mov	r0, r7
 801238a:	e780      	b.n	801228e <__sfvwrite_r+0xca>
 801238c:	461a      	mov	r2, r3
 801238e:	4659      	mov	r1, fp
 8012390:	9301      	str	r3, [sp, #4]
 8012392:	f7fc ff95 	bl	800f2c0 <memmove>
 8012396:	68a2      	ldr	r2, [r4, #8]
 8012398:	6821      	ldr	r1, [r4, #0]
 801239a:	9b01      	ldr	r3, [sp, #4]
 801239c:	ebb8 0807 	subs.w	r8, r8, r7
 80123a0:	eba2 0203 	sub.w	r2, r2, r3
 80123a4:	440b      	add	r3, r1
 80123a6:	60a2      	str	r2, [r4, #8]
 80123a8:	6023      	str	r3, [r4, #0]
 80123aa:	d1d9      	bne.n	8012360 <__sfvwrite_r+0x19c>
 80123ac:	4648      	mov	r0, r9
 80123ae:	4621      	mov	r1, r4
 80123b0:	f7ff fd44 	bl	8011e3c <_fflush_r>
 80123b4:	2800      	cmp	r0, #0
 80123b6:	d1a2      	bne.n	80122fe <__sfvwrite_r+0x13a>
 80123b8:	f8cd 8000 	str.w	r8, [sp]
 80123bc:	e7d0      	b.n	8012360 <__sfvwrite_r+0x19c>
 80123be:	6820      	ldr	r0, [r4, #0]
 80123c0:	4647      	mov	r7, r8
 80123c2:	46c2      	mov	sl, r8
 80123c4:	e757      	b.n	8012276 <__sfvwrite_r+0xb2>
 80123c6:	4658      	mov	r0, fp
 80123c8:	210a      	movs	r1, #10
 80123ca:	4652      	mov	r2, sl
 80123cc:	f000 fbbc 	bl	8012b48 <memchr>
 80123d0:	2800      	cmp	r0, #0
 80123d2:	d073      	beq.n	80124bc <__sfvwrite_r+0x2f8>
 80123d4:	3001      	adds	r0, #1
 80123d6:	2301      	movs	r3, #1
 80123d8:	ebcb 0800 	rsb	r8, fp, r0
 80123dc:	9300      	str	r3, [sp, #0]
 80123de:	e7a1      	b.n	8012324 <__sfvwrite_r+0x160>
 80123e0:	6967      	ldr	r7, [r4, #20]
 80123e2:	6921      	ldr	r1, [r4, #16]
 80123e4:	6823      	ldr	r3, [r4, #0]
 80123e6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80123ea:	1a5b      	subs	r3, r3, r1
 80123ec:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80123f0:	1c58      	adds	r0, r3, #1
 80123f2:	107f      	asrs	r7, r7, #1
 80123f4:	4440      	add	r0, r8
 80123f6:	4287      	cmp	r7, r0
 80123f8:	463a      	mov	r2, r7
 80123fa:	bf3c      	itt	cc
 80123fc:	4607      	movcc	r7, r0
 80123fe:	463a      	movcc	r2, r7
 8012400:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8012404:	9300      	str	r3, [sp, #0]
 8012406:	d046      	beq.n	8012496 <__sfvwrite_r+0x2d2>
 8012408:	4611      	mov	r1, r2
 801240a:	4648      	mov	r0, r9
 801240c:	f000 f90e 	bl	801262c <_malloc_r>
 8012410:	9b00      	ldr	r3, [sp, #0]
 8012412:	4682      	mov	sl, r0
 8012414:	2800      	cmp	r0, #0
 8012416:	d059      	beq.n	80124cc <__sfvwrite_r+0x308>
 8012418:	461a      	mov	r2, r3
 801241a:	6921      	ldr	r1, [r4, #16]
 801241c:	9300      	str	r3, [sp, #0]
 801241e:	f7f3 fc45 	bl	8005cac <memcpy>
 8012422:	89a2      	ldrh	r2, [r4, #12]
 8012424:	9b00      	ldr	r3, [sp, #0]
 8012426:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801242a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801242e:	81a2      	strh	r2, [r4, #12]
 8012430:	eb0a 0003 	add.w	r0, sl, r3
 8012434:	1afb      	subs	r3, r7, r3
 8012436:	f8c4 a010 	str.w	sl, [r4, #16]
 801243a:	6167      	str	r7, [r4, #20]
 801243c:	6020      	str	r0, [r4, #0]
 801243e:	60a3      	str	r3, [r4, #8]
 8012440:	4647      	mov	r7, r8
 8012442:	46c2      	mov	sl, r8
 8012444:	e717      	b.n	8012276 <__sfvwrite_r+0xb2>
 8012446:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801244a:	4543      	cmp	r3, r8
 801244c:	bf28      	it	cs
 801244e:	4643      	movcs	r3, r8
 8012450:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8012452:	fb93 f3f2 	sdiv	r3, r3, r2
 8012456:	4648      	mov	r0, r9
 8012458:	fb03 f302 	mul.w	r3, r3, r2
 801245c:	69e1      	ldr	r1, [r4, #28]
 801245e:	465a      	mov	r2, fp
 8012460:	47b8      	blx	r7
 8012462:	2800      	cmp	r0, #0
 8012464:	f73f af13 	bgt.w	801228e <__sfvwrite_r+0xca>
 8012468:	e749      	b.n	80122fe <__sfvwrite_r+0x13a>
 801246a:	4662      	mov	r2, ip
 801246c:	4659      	mov	r1, fp
 801246e:	f8cd c004 	str.w	ip, [sp, #4]
 8012472:	f7fc ff25 	bl	800f2c0 <memmove>
 8012476:	6823      	ldr	r3, [r4, #0]
 8012478:	f8dd c004 	ldr.w	ip, [sp, #4]
 801247c:	4463      	add	r3, ip
 801247e:	6023      	str	r3, [r4, #0]
 8012480:	4648      	mov	r0, r9
 8012482:	4621      	mov	r1, r4
 8012484:	f7ff fcda 	bl	8011e3c <_fflush_r>
 8012488:	f8dd c004 	ldr.w	ip, [sp, #4]
 801248c:	2800      	cmp	r0, #0
 801248e:	f47f af36 	bne.w	80122fe <__sfvwrite_r+0x13a>
 8012492:	4667      	mov	r7, ip
 8012494:	e761      	b.n	801235a <__sfvwrite_r+0x196>
 8012496:	4648      	mov	r0, r9
 8012498:	f000 fe98 	bl	80131cc <_realloc_r>
 801249c:	9b00      	ldr	r3, [sp, #0]
 801249e:	4682      	mov	sl, r0
 80124a0:	2800      	cmp	r0, #0
 80124a2:	d1c5      	bne.n	8012430 <__sfvwrite_r+0x26c>
 80124a4:	4648      	mov	r0, r9
 80124a6:	6921      	ldr	r1, [r4, #16]
 80124a8:	f7ff fdb4 	bl	8012014 <_free_r>
 80124ac:	89a3      	ldrh	r3, [r4, #12]
 80124ae:	220c      	movs	r2, #12
 80124b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80124b4:	b29b      	uxth	r3, r3
 80124b6:	f8c9 2000 	str.w	r2, [r9]
 80124ba:	e721      	b.n	8012300 <__sfvwrite_r+0x13c>
 80124bc:	2301      	movs	r3, #1
 80124be:	f10a 0801 	add.w	r8, sl, #1
 80124c2:	9300      	str	r3, [sp, #0]
 80124c4:	e72e      	b.n	8012324 <__sfvwrite_r+0x160>
 80124c6:	f04f 30ff 	mov.w	r0, #4294967295
 80124ca:	e6ad      	b.n	8012228 <__sfvwrite_r+0x64>
 80124cc:	230c      	movs	r3, #12
 80124ce:	f8c9 3000 	str.w	r3, [r9]
 80124d2:	89a3      	ldrh	r3, [r4, #12]
 80124d4:	e714      	b.n	8012300 <__sfvwrite_r+0x13c>
 80124d6:	bf00      	nop
 80124d8:	7ffffc00 	.word	0x7ffffc00

080124dc <_fwalk_reent>:
 80124dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124e0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 80124e4:	d01f      	beq.n	8012526 <_fwalk_reent+0x4a>
 80124e6:	4688      	mov	r8, r1
 80124e8:	4606      	mov	r6, r0
 80124ea:	f04f 0900 	mov.w	r9, #0
 80124ee:	687d      	ldr	r5, [r7, #4]
 80124f0:	68bc      	ldr	r4, [r7, #8]
 80124f2:	3d01      	subs	r5, #1
 80124f4:	d411      	bmi.n	801251a <_fwalk_reent+0x3e>
 80124f6:	89a3      	ldrh	r3, [r4, #12]
 80124f8:	2b01      	cmp	r3, #1
 80124fa:	f105 35ff 	add.w	r5, r5, #4294967295
 80124fe:	d908      	bls.n	8012512 <_fwalk_reent+0x36>
 8012500:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8012504:	3301      	adds	r3, #1
 8012506:	4621      	mov	r1, r4
 8012508:	4630      	mov	r0, r6
 801250a:	d002      	beq.n	8012512 <_fwalk_reent+0x36>
 801250c:	47c0      	blx	r8
 801250e:	ea49 0900 	orr.w	r9, r9, r0
 8012512:	1c6b      	adds	r3, r5, #1
 8012514:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8012518:	d1ed      	bne.n	80124f6 <_fwalk_reent+0x1a>
 801251a:	683f      	ldr	r7, [r7, #0]
 801251c:	2f00      	cmp	r7, #0
 801251e:	d1e6      	bne.n	80124ee <_fwalk_reent+0x12>
 8012520:	4648      	mov	r0, r9
 8012522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012526:	46b9      	mov	r9, r7
 8012528:	4648      	mov	r0, r9
 801252a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801252e:	bf00      	nop

08012530 <__locale_charset>:
 8012530:	4800      	ldr	r0, [pc, #0]	; (8012534 <__locale_charset+0x4>)
 8012532:	4770      	bx	lr
 8012534:	1ffe8cec 	.word	0x1ffe8cec

08012538 <__locale_mb_cur_max>:
 8012538:	4b01      	ldr	r3, [pc, #4]	; (8012540 <__locale_mb_cur_max+0x8>)
 801253a:	6818      	ldr	r0, [r3, #0]
 801253c:	4770      	bx	lr
 801253e:	bf00      	nop
 8012540:	1ffe8d0c 	.word	0x1ffe8d0c

08012544 <_localeconv_r>:
 8012544:	4800      	ldr	r0, [pc, #0]	; (8012548 <_localeconv_r+0x4>)
 8012546:	4770      	bx	lr
 8012548:	1ffe8cb4 	.word	0x1ffe8cb4

0801254c <__smakebuf_r>:
 801254c:	898b      	ldrh	r3, [r1, #12]
 801254e:	b29a      	uxth	r2, r3
 8012550:	f012 0f02 	tst.w	r2, #2
 8012554:	d13c      	bne.n	80125d0 <__smakebuf_r+0x84>
 8012556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012558:	460c      	mov	r4, r1
 801255a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801255e:	2900      	cmp	r1, #0
 8012560:	b091      	sub	sp, #68	; 0x44
 8012562:	4605      	mov	r5, r0
 8012564:	db19      	blt.n	801259a <__smakebuf_r+0x4e>
 8012566:	aa01      	add	r2, sp, #4
 8012568:	f001 f9bc 	bl	80138e4 <_fstat_r>
 801256c:	2800      	cmp	r0, #0
 801256e:	db12      	blt.n	8012596 <__smakebuf_r+0x4a>
 8012570:	9b02      	ldr	r3, [sp, #8]
 8012572:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8012576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801257a:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 801257e:	fab7 f787 	clz	r7, r7
 8012582:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8012586:	d02a      	beq.n	80125de <__smakebuf_r+0x92>
 8012588:	89a3      	ldrh	r3, [r4, #12]
 801258a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801258e:	81a3      	strh	r3, [r4, #12]
 8012590:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8012594:	e00b      	b.n	80125ae <__smakebuf_r+0x62>
 8012596:	89a3      	ldrh	r3, [r4, #12]
 8012598:	b29a      	uxth	r2, r3
 801259a:	f012 0f80 	tst.w	r2, #128	; 0x80
 801259e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80125a2:	81a3      	strh	r3, [r4, #12]
 80125a4:	bf0c      	ite	eq
 80125a6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 80125aa:	2640      	movne	r6, #64	; 0x40
 80125ac:	2700      	movs	r7, #0
 80125ae:	4628      	mov	r0, r5
 80125b0:	4631      	mov	r1, r6
 80125b2:	f000 f83b 	bl	801262c <_malloc_r>
 80125b6:	89a3      	ldrh	r3, [r4, #12]
 80125b8:	b340      	cbz	r0, 801260c <__smakebuf_r+0xc0>
 80125ba:	4a1a      	ldr	r2, [pc, #104]	; (8012624 <__smakebuf_r+0xd8>)
 80125bc:	63ea      	str	r2, [r5, #60]	; 0x3c
 80125be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125c2:	81a3      	strh	r3, [r4, #12]
 80125c4:	6020      	str	r0, [r4, #0]
 80125c6:	6120      	str	r0, [r4, #16]
 80125c8:	6166      	str	r6, [r4, #20]
 80125ca:	b99f      	cbnz	r7, 80125f4 <__smakebuf_r+0xa8>
 80125cc:	b011      	add	sp, #68	; 0x44
 80125ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125d0:	f101 0343 	add.w	r3, r1, #67	; 0x43
 80125d4:	2201      	movs	r2, #1
 80125d6:	600b      	str	r3, [r1, #0]
 80125d8:	610b      	str	r3, [r1, #16]
 80125da:	614a      	str	r2, [r1, #20]
 80125dc:	4770      	bx	lr
 80125de:	4b12      	ldr	r3, [pc, #72]	; (8012628 <__smakebuf_r+0xdc>)
 80125e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d1d0      	bne.n	8012588 <__smakebuf_r+0x3c>
 80125e6:	89a3      	ldrh	r3, [r4, #12]
 80125e8:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80125ec:	4333      	orrs	r3, r6
 80125ee:	81a3      	strh	r3, [r4, #12]
 80125f0:	64e6      	str	r6, [r4, #76]	; 0x4c
 80125f2:	e7dc      	b.n	80125ae <__smakebuf_r+0x62>
 80125f4:	4628      	mov	r0, r5
 80125f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125fa:	f001 f987 	bl	801390c <_isatty_r>
 80125fe:	2800      	cmp	r0, #0
 8012600:	d0e4      	beq.n	80125cc <__smakebuf_r+0x80>
 8012602:	89a3      	ldrh	r3, [r4, #12]
 8012604:	f043 0301 	orr.w	r3, r3, #1
 8012608:	81a3      	strh	r3, [r4, #12]
 801260a:	e7df      	b.n	80125cc <__smakebuf_r+0x80>
 801260c:	059a      	lsls	r2, r3, #22
 801260e:	d4dd      	bmi.n	80125cc <__smakebuf_r+0x80>
 8012610:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012614:	f043 0302 	orr.w	r3, r3, #2
 8012618:	2101      	movs	r1, #1
 801261a:	81a3      	strh	r3, [r4, #12]
 801261c:	6022      	str	r2, [r4, #0]
 801261e:	6122      	str	r2, [r4, #16]
 8012620:	6161      	str	r1, [r4, #20]
 8012622:	e7d3      	b.n	80125cc <__smakebuf_r+0x80>
 8012624:	08011e69 	.word	0x08011e69
 8012628:	08013639 	.word	0x08013639

0801262c <_malloc_r>:
 801262c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012630:	f101 050b 	add.w	r5, r1, #11
 8012634:	2d16      	cmp	r5, #22
 8012636:	b083      	sub	sp, #12
 8012638:	4606      	mov	r6, r0
 801263a:	d927      	bls.n	801268c <_malloc_r+0x60>
 801263c:	f035 0507 	bics.w	r5, r5, #7
 8012640:	f100 80b6 	bmi.w	80127b0 <_malloc_r+0x184>
 8012644:	42a9      	cmp	r1, r5
 8012646:	f200 80b3 	bhi.w	80127b0 <_malloc_r+0x184>
 801264a:	f000 fac7 	bl	8012bdc <__malloc_lock>
 801264e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8012652:	d222      	bcs.n	801269a <_malloc_r+0x6e>
 8012654:	4fc2      	ldr	r7, [pc, #776]	; (8012960 <_malloc_r+0x334>)
 8012656:	08e8      	lsrs	r0, r5, #3
 8012658:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 801265c:	68dc      	ldr	r4, [r3, #12]
 801265e:	429c      	cmp	r4, r3
 8012660:	f000 81c9 	beq.w	80129f6 <_malloc_r+0x3ca>
 8012664:	6863      	ldr	r3, [r4, #4]
 8012666:	68e1      	ldr	r1, [r4, #12]
 8012668:	68a5      	ldr	r5, [r4, #8]
 801266a:	f023 0303 	bic.w	r3, r3, #3
 801266e:	4423      	add	r3, r4
 8012670:	4630      	mov	r0, r6
 8012672:	685a      	ldr	r2, [r3, #4]
 8012674:	60e9      	str	r1, [r5, #12]
 8012676:	f042 0201 	orr.w	r2, r2, #1
 801267a:	608d      	str	r5, [r1, #8]
 801267c:	605a      	str	r2, [r3, #4]
 801267e:	f000 faaf 	bl	8012be0 <__malloc_unlock>
 8012682:	3408      	adds	r4, #8
 8012684:	4620      	mov	r0, r4
 8012686:	b003      	add	sp, #12
 8012688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801268c:	2910      	cmp	r1, #16
 801268e:	f200 808f 	bhi.w	80127b0 <_malloc_r+0x184>
 8012692:	f000 faa3 	bl	8012bdc <__malloc_lock>
 8012696:	2510      	movs	r5, #16
 8012698:	e7dc      	b.n	8012654 <_malloc_r+0x28>
 801269a:	0a68      	lsrs	r0, r5, #9
 801269c:	f000 808f 	beq.w	80127be <_malloc_r+0x192>
 80126a0:	2804      	cmp	r0, #4
 80126a2:	f200 8154 	bhi.w	801294e <_malloc_r+0x322>
 80126a6:	09a8      	lsrs	r0, r5, #6
 80126a8:	3038      	adds	r0, #56	; 0x38
 80126aa:	0041      	lsls	r1, r0, #1
 80126ac:	4fac      	ldr	r7, [pc, #688]	; (8012960 <_malloc_r+0x334>)
 80126ae:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80126b2:	68cc      	ldr	r4, [r1, #12]
 80126b4:	42a1      	cmp	r1, r4
 80126b6:	d106      	bne.n	80126c6 <_malloc_r+0x9a>
 80126b8:	e00c      	b.n	80126d4 <_malloc_r+0xa8>
 80126ba:	2a00      	cmp	r2, #0
 80126bc:	f280 8082 	bge.w	80127c4 <_malloc_r+0x198>
 80126c0:	68e4      	ldr	r4, [r4, #12]
 80126c2:	42a1      	cmp	r1, r4
 80126c4:	d006      	beq.n	80126d4 <_malloc_r+0xa8>
 80126c6:	6863      	ldr	r3, [r4, #4]
 80126c8:	f023 0303 	bic.w	r3, r3, #3
 80126cc:	1b5a      	subs	r2, r3, r5
 80126ce:	2a0f      	cmp	r2, #15
 80126d0:	ddf3      	ble.n	80126ba <_malloc_r+0x8e>
 80126d2:	3801      	subs	r0, #1
 80126d4:	3001      	adds	r0, #1
 80126d6:	49a2      	ldr	r1, [pc, #648]	; (8012960 <_malloc_r+0x334>)
 80126d8:	693c      	ldr	r4, [r7, #16]
 80126da:	f101 0e08 	add.w	lr, r1, #8
 80126de:	4574      	cmp	r4, lr
 80126e0:	f000 817e 	beq.w	80129e0 <_malloc_r+0x3b4>
 80126e4:	6863      	ldr	r3, [r4, #4]
 80126e6:	f023 0303 	bic.w	r3, r3, #3
 80126ea:	1b5a      	subs	r2, r3, r5
 80126ec:	2a0f      	cmp	r2, #15
 80126ee:	f300 8164 	bgt.w	80129ba <_malloc_r+0x38e>
 80126f2:	2a00      	cmp	r2, #0
 80126f4:	f8c1 e014 	str.w	lr, [r1, #20]
 80126f8:	f8c1 e010 	str.w	lr, [r1, #16]
 80126fc:	da73      	bge.n	80127e6 <_malloc_r+0x1ba>
 80126fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012702:	f080 8139 	bcs.w	8012978 <_malloc_r+0x34c>
 8012706:	08db      	lsrs	r3, r3, #3
 8012708:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 801270c:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8012710:	684a      	ldr	r2, [r1, #4]
 8012712:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8012716:	f8c4 9008 	str.w	r9, [r4, #8]
 801271a:	2301      	movs	r3, #1
 801271c:	fa03 f30c 	lsl.w	r3, r3, ip
 8012720:	4313      	orrs	r3, r2
 8012722:	f8c4 800c 	str.w	r8, [r4, #12]
 8012726:	604b      	str	r3, [r1, #4]
 8012728:	f8c8 4008 	str.w	r4, [r8, #8]
 801272c:	f8c9 400c 	str.w	r4, [r9, #12]
 8012730:	1082      	asrs	r2, r0, #2
 8012732:	2401      	movs	r4, #1
 8012734:	4094      	lsls	r4, r2
 8012736:	429c      	cmp	r4, r3
 8012738:	d862      	bhi.n	8012800 <_malloc_r+0x1d4>
 801273a:	4223      	tst	r3, r4
 801273c:	d106      	bne.n	801274c <_malloc_r+0x120>
 801273e:	f020 0003 	bic.w	r0, r0, #3
 8012742:	0064      	lsls	r4, r4, #1
 8012744:	4223      	tst	r3, r4
 8012746:	f100 0004 	add.w	r0, r0, #4
 801274a:	d0fa      	beq.n	8012742 <_malloc_r+0x116>
 801274c:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8012750:	46c4      	mov	ip, r8
 8012752:	4681      	mov	r9, r0
 8012754:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8012758:	459c      	cmp	ip, r3
 801275a:	d107      	bne.n	801276c <_malloc_r+0x140>
 801275c:	e142      	b.n	80129e4 <_malloc_r+0x3b8>
 801275e:	2900      	cmp	r1, #0
 8012760:	f280 8152 	bge.w	8012a08 <_malloc_r+0x3dc>
 8012764:	68db      	ldr	r3, [r3, #12]
 8012766:	459c      	cmp	ip, r3
 8012768:	f000 813c 	beq.w	80129e4 <_malloc_r+0x3b8>
 801276c:	685a      	ldr	r2, [r3, #4]
 801276e:	f022 0203 	bic.w	r2, r2, #3
 8012772:	1b51      	subs	r1, r2, r5
 8012774:	290f      	cmp	r1, #15
 8012776:	ddf2      	ble.n	801275e <_malloc_r+0x132>
 8012778:	461c      	mov	r4, r3
 801277a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801277e:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8012782:	195a      	adds	r2, r3, r5
 8012784:	f045 0901 	orr.w	r9, r5, #1
 8012788:	f041 0501 	orr.w	r5, r1, #1
 801278c:	f8c3 9004 	str.w	r9, [r3, #4]
 8012790:	4630      	mov	r0, r6
 8012792:	f8c8 c00c 	str.w	ip, [r8, #12]
 8012796:	f8cc 8008 	str.w	r8, [ip, #8]
 801279a:	617a      	str	r2, [r7, #20]
 801279c:	613a      	str	r2, [r7, #16]
 801279e:	f8c2 e00c 	str.w	lr, [r2, #12]
 80127a2:	f8c2 e008 	str.w	lr, [r2, #8]
 80127a6:	6055      	str	r5, [r2, #4]
 80127a8:	5051      	str	r1, [r2, r1]
 80127aa:	f000 fa19 	bl	8012be0 <__malloc_unlock>
 80127ae:	e769      	b.n	8012684 <_malloc_r+0x58>
 80127b0:	2400      	movs	r4, #0
 80127b2:	230c      	movs	r3, #12
 80127b4:	4620      	mov	r0, r4
 80127b6:	6033      	str	r3, [r6, #0]
 80127b8:	b003      	add	sp, #12
 80127ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127be:	217e      	movs	r1, #126	; 0x7e
 80127c0:	203f      	movs	r0, #63	; 0x3f
 80127c2:	e773      	b.n	80126ac <_malloc_r+0x80>
 80127c4:	4423      	add	r3, r4
 80127c6:	68e1      	ldr	r1, [r4, #12]
 80127c8:	685a      	ldr	r2, [r3, #4]
 80127ca:	68a5      	ldr	r5, [r4, #8]
 80127cc:	f042 0201 	orr.w	r2, r2, #1
 80127d0:	60e9      	str	r1, [r5, #12]
 80127d2:	4630      	mov	r0, r6
 80127d4:	608d      	str	r5, [r1, #8]
 80127d6:	605a      	str	r2, [r3, #4]
 80127d8:	f000 fa02 	bl	8012be0 <__malloc_unlock>
 80127dc:	3408      	adds	r4, #8
 80127de:	4620      	mov	r0, r4
 80127e0:	b003      	add	sp, #12
 80127e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127e6:	4423      	add	r3, r4
 80127e8:	4630      	mov	r0, r6
 80127ea:	685a      	ldr	r2, [r3, #4]
 80127ec:	f042 0201 	orr.w	r2, r2, #1
 80127f0:	605a      	str	r2, [r3, #4]
 80127f2:	f000 f9f5 	bl	8012be0 <__malloc_unlock>
 80127f6:	3408      	adds	r4, #8
 80127f8:	4620      	mov	r0, r4
 80127fa:	b003      	add	sp, #12
 80127fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012800:	68bc      	ldr	r4, [r7, #8]
 8012802:	6863      	ldr	r3, [r4, #4]
 8012804:	f023 0803 	bic.w	r8, r3, #3
 8012808:	4545      	cmp	r5, r8
 801280a:	d804      	bhi.n	8012816 <_malloc_r+0x1ea>
 801280c:	ebc5 0308 	rsb	r3, r5, r8
 8012810:	2b0f      	cmp	r3, #15
 8012812:	f300 808c 	bgt.w	801292e <_malloc_r+0x302>
 8012816:	4b53      	ldr	r3, [pc, #332]	; (8012964 <_malloc_r+0x338>)
 8012818:	f8df a158 	ldr.w	sl, [pc, #344]	; 8012974 <_malloc_r+0x348>
 801281c:	681a      	ldr	r2, [r3, #0]
 801281e:	f8da 3000 	ldr.w	r3, [sl]
 8012822:	3301      	adds	r3, #1
 8012824:	442a      	add	r2, r5
 8012826:	eb04 0b08 	add.w	fp, r4, r8
 801282a:	f000 8150 	beq.w	8012ace <_malloc_r+0x4a2>
 801282e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8012832:	320f      	adds	r2, #15
 8012834:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8012838:	f022 020f 	bic.w	r2, r2, #15
 801283c:	4611      	mov	r1, r2
 801283e:	4630      	mov	r0, r6
 8012840:	9201      	str	r2, [sp, #4]
 8012842:	f000 feb9 	bl	80135b8 <_sbrk_r>
 8012846:	f1b0 3fff 	cmp.w	r0, #4294967295
 801284a:	4681      	mov	r9, r0
 801284c:	9a01      	ldr	r2, [sp, #4]
 801284e:	f000 80f5 	beq.w	8012a3c <_malloc_r+0x410>
 8012852:	4583      	cmp	fp, r0
 8012854:	f200 80ef 	bhi.w	8012a36 <_malloc_r+0x40a>
 8012858:	4b43      	ldr	r3, [pc, #268]	; (8012968 <_malloc_r+0x33c>)
 801285a:	6819      	ldr	r1, [r3, #0]
 801285c:	45cb      	cmp	fp, r9
 801285e:	4411      	add	r1, r2
 8012860:	6019      	str	r1, [r3, #0]
 8012862:	f000 813d 	beq.w	8012ae0 <_malloc_r+0x4b4>
 8012866:	f8da 0000 	ldr.w	r0, [sl]
 801286a:	f8df e108 	ldr.w	lr, [pc, #264]	; 8012974 <_malloc_r+0x348>
 801286e:	3001      	adds	r0, #1
 8012870:	bf1b      	ittet	ne
 8012872:	ebcb 0b09 	rsbne	fp, fp, r9
 8012876:	4459      	addne	r1, fp
 8012878:	f8ce 9000 	streq.w	r9, [lr]
 801287c:	6019      	strne	r1, [r3, #0]
 801287e:	f019 0107 	ands.w	r1, r9, #7
 8012882:	f000 8107 	beq.w	8012a94 <_malloc_r+0x468>
 8012886:	f1c1 0008 	rsb	r0, r1, #8
 801288a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 801288e:	4481      	add	r9, r0
 8012890:	3108      	adds	r1, #8
 8012892:	444a      	add	r2, r9
 8012894:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8012898:	ebc2 0a01 	rsb	sl, r2, r1
 801289c:	4651      	mov	r1, sl
 801289e:	4630      	mov	r0, r6
 80128a0:	9301      	str	r3, [sp, #4]
 80128a2:	f000 fe89 	bl	80135b8 <_sbrk_r>
 80128a6:	1c43      	adds	r3, r0, #1
 80128a8:	9b01      	ldr	r3, [sp, #4]
 80128aa:	f000 8127 	beq.w	8012afc <_malloc_r+0x4d0>
 80128ae:	ebc9 0200 	rsb	r2, r9, r0
 80128b2:	4452      	add	r2, sl
 80128b4:	f042 0201 	orr.w	r2, r2, #1
 80128b8:	6819      	ldr	r1, [r3, #0]
 80128ba:	f8c7 9008 	str.w	r9, [r7, #8]
 80128be:	4451      	add	r1, sl
 80128c0:	42bc      	cmp	r4, r7
 80128c2:	f8c9 2004 	str.w	r2, [r9, #4]
 80128c6:	6019      	str	r1, [r3, #0]
 80128c8:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8012968 <_malloc_r+0x33c>
 80128cc:	d016      	beq.n	80128fc <_malloc_r+0x2d0>
 80128ce:	f1b8 0f0f 	cmp.w	r8, #15
 80128d2:	f240 80e2 	bls.w	8012a9a <_malloc_r+0x46e>
 80128d6:	6862      	ldr	r2, [r4, #4]
 80128d8:	f1a8 030c 	sub.w	r3, r8, #12
 80128dc:	f023 0307 	bic.w	r3, r3, #7
 80128e0:	18e0      	adds	r0, r4, r3
 80128e2:	f002 0201 	and.w	r2, r2, #1
 80128e6:	f04f 0e05 	mov.w	lr, #5
 80128ea:	431a      	orrs	r2, r3
 80128ec:	2b0f      	cmp	r3, #15
 80128ee:	6062      	str	r2, [r4, #4]
 80128f0:	f8c0 e004 	str.w	lr, [r0, #4]
 80128f4:	f8c0 e008 	str.w	lr, [r0, #8]
 80128f8:	f200 8104 	bhi.w	8012b04 <_malloc_r+0x4d8>
 80128fc:	4b1b      	ldr	r3, [pc, #108]	; (801296c <_malloc_r+0x340>)
 80128fe:	68bc      	ldr	r4, [r7, #8]
 8012900:	681a      	ldr	r2, [r3, #0]
 8012902:	4291      	cmp	r1, r2
 8012904:	bf88      	it	hi
 8012906:	6019      	strhi	r1, [r3, #0]
 8012908:	4b19      	ldr	r3, [pc, #100]	; (8012970 <_malloc_r+0x344>)
 801290a:	681a      	ldr	r2, [r3, #0]
 801290c:	4291      	cmp	r1, r2
 801290e:	6862      	ldr	r2, [r4, #4]
 8012910:	bf88      	it	hi
 8012912:	6019      	strhi	r1, [r3, #0]
 8012914:	f022 0203 	bic.w	r2, r2, #3
 8012918:	4295      	cmp	r5, r2
 801291a:	eba2 0305 	sub.w	r3, r2, r5
 801291e:	d801      	bhi.n	8012924 <_malloc_r+0x2f8>
 8012920:	2b0f      	cmp	r3, #15
 8012922:	dc04      	bgt.n	801292e <_malloc_r+0x302>
 8012924:	4630      	mov	r0, r6
 8012926:	f000 f95b 	bl	8012be0 <__malloc_unlock>
 801292a:	2400      	movs	r4, #0
 801292c:	e6aa      	b.n	8012684 <_malloc_r+0x58>
 801292e:	1962      	adds	r2, r4, r5
 8012930:	f043 0301 	orr.w	r3, r3, #1
 8012934:	f045 0501 	orr.w	r5, r5, #1
 8012938:	6065      	str	r5, [r4, #4]
 801293a:	4630      	mov	r0, r6
 801293c:	60ba      	str	r2, [r7, #8]
 801293e:	6053      	str	r3, [r2, #4]
 8012940:	f000 f94e 	bl	8012be0 <__malloc_unlock>
 8012944:	3408      	adds	r4, #8
 8012946:	4620      	mov	r0, r4
 8012948:	b003      	add	sp, #12
 801294a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801294e:	2814      	cmp	r0, #20
 8012950:	d969      	bls.n	8012a26 <_malloc_r+0x3fa>
 8012952:	2854      	cmp	r0, #84	; 0x54
 8012954:	f200 8097 	bhi.w	8012a86 <_malloc_r+0x45a>
 8012958:	0b28      	lsrs	r0, r5, #12
 801295a:	306e      	adds	r0, #110	; 0x6e
 801295c:	0041      	lsls	r1, r0, #1
 801295e:	e6a5      	b.n	80126ac <_malloc_r+0x80>
 8012960:	1ffe8d10 	.word	0x1ffe8d10
 8012964:	1ffe92b8 	.word	0x1ffe92b8
 8012968:	1ffe92bc 	.word	0x1ffe92bc
 801296c:	1ffe92b4 	.word	0x1ffe92b4
 8012970:	1ffe92b0 	.word	0x1ffe92b0
 8012974:	1ffe911c 	.word	0x1ffe911c
 8012978:	0a5a      	lsrs	r2, r3, #9
 801297a:	2a04      	cmp	r2, #4
 801297c:	d956      	bls.n	8012a2c <_malloc_r+0x400>
 801297e:	2a14      	cmp	r2, #20
 8012980:	f200 80a7 	bhi.w	8012ad2 <_malloc_r+0x4a6>
 8012984:	325b      	adds	r2, #91	; 0x5b
 8012986:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 801298a:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 801298e:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8012b44 <_malloc_r+0x518>
 8012992:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8012996:	4561      	cmp	r1, ip
 8012998:	f000 8085 	beq.w	8012aa6 <_malloc_r+0x47a>
 801299c:	684a      	ldr	r2, [r1, #4]
 801299e:	f022 0203 	bic.w	r2, r2, #3
 80129a2:	4293      	cmp	r3, r2
 80129a4:	d202      	bcs.n	80129ac <_malloc_r+0x380>
 80129a6:	6889      	ldr	r1, [r1, #8]
 80129a8:	458c      	cmp	ip, r1
 80129aa:	d1f7      	bne.n	801299c <_malloc_r+0x370>
 80129ac:	68ca      	ldr	r2, [r1, #12]
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	60e2      	str	r2, [r4, #12]
 80129b2:	60a1      	str	r1, [r4, #8]
 80129b4:	6094      	str	r4, [r2, #8]
 80129b6:	60cc      	str	r4, [r1, #12]
 80129b8:	e6ba      	b.n	8012730 <_malloc_r+0x104>
 80129ba:	1963      	adds	r3, r4, r5
 80129bc:	f042 0701 	orr.w	r7, r2, #1
 80129c0:	f045 0501 	orr.w	r5, r5, #1
 80129c4:	6065      	str	r5, [r4, #4]
 80129c6:	4630      	mov	r0, r6
 80129c8:	614b      	str	r3, [r1, #20]
 80129ca:	610b      	str	r3, [r1, #16]
 80129cc:	f8c3 e00c 	str.w	lr, [r3, #12]
 80129d0:	f8c3 e008 	str.w	lr, [r3, #8]
 80129d4:	605f      	str	r7, [r3, #4]
 80129d6:	509a      	str	r2, [r3, r2]
 80129d8:	3408      	adds	r4, #8
 80129da:	f000 f901 	bl	8012be0 <__malloc_unlock>
 80129de:	e651      	b.n	8012684 <_malloc_r+0x58>
 80129e0:	684b      	ldr	r3, [r1, #4]
 80129e2:	e6a5      	b.n	8012730 <_malloc_r+0x104>
 80129e4:	f109 0901 	add.w	r9, r9, #1
 80129e8:	f019 0f03 	tst.w	r9, #3
 80129ec:	f10c 0c08 	add.w	ip, ip, #8
 80129f0:	f47f aeb0 	bne.w	8012754 <_malloc_r+0x128>
 80129f4:	e02b      	b.n	8012a4e <_malloc_r+0x422>
 80129f6:	f104 0308 	add.w	r3, r4, #8
 80129fa:	6964      	ldr	r4, [r4, #20]
 80129fc:	42a3      	cmp	r3, r4
 80129fe:	bf08      	it	eq
 8012a00:	3002      	addeq	r0, #2
 8012a02:	f43f ae68 	beq.w	80126d6 <_malloc_r+0xaa>
 8012a06:	e62d      	b.n	8012664 <_malloc_r+0x38>
 8012a08:	441a      	add	r2, r3
 8012a0a:	461c      	mov	r4, r3
 8012a0c:	6851      	ldr	r1, [r2, #4]
 8012a0e:	68db      	ldr	r3, [r3, #12]
 8012a10:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8012a14:	f041 0101 	orr.w	r1, r1, #1
 8012a18:	6051      	str	r1, [r2, #4]
 8012a1a:	4630      	mov	r0, r6
 8012a1c:	60eb      	str	r3, [r5, #12]
 8012a1e:	609d      	str	r5, [r3, #8]
 8012a20:	f000 f8de 	bl	8012be0 <__malloc_unlock>
 8012a24:	e62e      	b.n	8012684 <_malloc_r+0x58>
 8012a26:	305b      	adds	r0, #91	; 0x5b
 8012a28:	0041      	lsls	r1, r0, #1
 8012a2a:	e63f      	b.n	80126ac <_malloc_r+0x80>
 8012a2c:	099a      	lsrs	r2, r3, #6
 8012a2e:	3238      	adds	r2, #56	; 0x38
 8012a30:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8012a34:	e7a9      	b.n	801298a <_malloc_r+0x35e>
 8012a36:	42bc      	cmp	r4, r7
 8012a38:	f43f af0e 	beq.w	8012858 <_malloc_r+0x22c>
 8012a3c:	68bc      	ldr	r4, [r7, #8]
 8012a3e:	6862      	ldr	r2, [r4, #4]
 8012a40:	f022 0203 	bic.w	r2, r2, #3
 8012a44:	e768      	b.n	8012918 <_malloc_r+0x2ec>
 8012a46:	f8d8 8000 	ldr.w	r8, [r8]
 8012a4a:	4598      	cmp	r8, r3
 8012a4c:	d177      	bne.n	8012b3e <_malloc_r+0x512>
 8012a4e:	f010 0f03 	tst.w	r0, #3
 8012a52:	f1a8 0308 	sub.w	r3, r8, #8
 8012a56:	f100 30ff 	add.w	r0, r0, #4294967295
 8012a5a:	d1f4      	bne.n	8012a46 <_malloc_r+0x41a>
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	ea23 0304 	bic.w	r3, r3, r4
 8012a62:	607b      	str	r3, [r7, #4]
 8012a64:	0064      	lsls	r4, r4, #1
 8012a66:	429c      	cmp	r4, r3
 8012a68:	f63f aeca 	bhi.w	8012800 <_malloc_r+0x1d4>
 8012a6c:	2c00      	cmp	r4, #0
 8012a6e:	f43f aec7 	beq.w	8012800 <_malloc_r+0x1d4>
 8012a72:	4223      	tst	r3, r4
 8012a74:	4648      	mov	r0, r9
 8012a76:	f47f ae69 	bne.w	801274c <_malloc_r+0x120>
 8012a7a:	0064      	lsls	r4, r4, #1
 8012a7c:	4223      	tst	r3, r4
 8012a7e:	f100 0004 	add.w	r0, r0, #4
 8012a82:	d0fa      	beq.n	8012a7a <_malloc_r+0x44e>
 8012a84:	e662      	b.n	801274c <_malloc_r+0x120>
 8012a86:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8012a8a:	d818      	bhi.n	8012abe <_malloc_r+0x492>
 8012a8c:	0be8      	lsrs	r0, r5, #15
 8012a8e:	3077      	adds	r0, #119	; 0x77
 8012a90:	0041      	lsls	r1, r0, #1
 8012a92:	e60b      	b.n	80126ac <_malloc_r+0x80>
 8012a94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012a98:	e6fb      	b.n	8012892 <_malloc_r+0x266>
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	f8c9 3004 	str.w	r3, [r9, #4]
 8012aa0:	464c      	mov	r4, r9
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	e738      	b.n	8012918 <_malloc_r+0x2ec>
 8012aa6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012aaa:	1092      	asrs	r2, r2, #2
 8012aac:	f04f 0c01 	mov.w	ip, #1
 8012ab0:	fa0c f202 	lsl.w	r2, ip, r2
 8012ab4:	4313      	orrs	r3, r2
 8012ab6:	f8c8 3004 	str.w	r3, [r8, #4]
 8012aba:	460a      	mov	r2, r1
 8012abc:	e778      	b.n	80129b0 <_malloc_r+0x384>
 8012abe:	f240 5354 	movw	r3, #1364	; 0x554
 8012ac2:	4298      	cmp	r0, r3
 8012ac4:	d817      	bhi.n	8012af6 <_malloc_r+0x4ca>
 8012ac6:	0ca8      	lsrs	r0, r5, #18
 8012ac8:	307c      	adds	r0, #124	; 0x7c
 8012aca:	0041      	lsls	r1, r0, #1
 8012acc:	e5ee      	b.n	80126ac <_malloc_r+0x80>
 8012ace:	3210      	adds	r2, #16
 8012ad0:	e6b4      	b.n	801283c <_malloc_r+0x210>
 8012ad2:	2a54      	cmp	r2, #84	; 0x54
 8012ad4:	d81e      	bhi.n	8012b14 <_malloc_r+0x4e8>
 8012ad6:	0b1a      	lsrs	r2, r3, #12
 8012ad8:	326e      	adds	r2, #110	; 0x6e
 8012ada:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8012ade:	e754      	b.n	801298a <_malloc_r+0x35e>
 8012ae0:	f3cb 000b 	ubfx	r0, fp, #0, #12
 8012ae4:	2800      	cmp	r0, #0
 8012ae6:	f47f aebe 	bne.w	8012866 <_malloc_r+0x23a>
 8012aea:	4442      	add	r2, r8
 8012aec:	68bb      	ldr	r3, [r7, #8]
 8012aee:	f042 0201 	orr.w	r2, r2, #1
 8012af2:	605a      	str	r2, [r3, #4]
 8012af4:	e702      	b.n	80128fc <_malloc_r+0x2d0>
 8012af6:	21fc      	movs	r1, #252	; 0xfc
 8012af8:	207e      	movs	r0, #126	; 0x7e
 8012afa:	e5d7      	b.n	80126ac <_malloc_r+0x80>
 8012afc:	2201      	movs	r2, #1
 8012afe:	f04f 0a00 	mov.w	sl, #0
 8012b02:	e6d9      	b.n	80128b8 <_malloc_r+0x28c>
 8012b04:	f104 0108 	add.w	r1, r4, #8
 8012b08:	4630      	mov	r0, r6
 8012b0a:	f7ff fa83 	bl	8012014 <_free_r>
 8012b0e:	f8da 1000 	ldr.w	r1, [sl]
 8012b12:	e6f3      	b.n	80128fc <_malloc_r+0x2d0>
 8012b14:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8012b18:	d804      	bhi.n	8012b24 <_malloc_r+0x4f8>
 8012b1a:	0bda      	lsrs	r2, r3, #15
 8012b1c:	3277      	adds	r2, #119	; 0x77
 8012b1e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8012b22:	e732      	b.n	801298a <_malloc_r+0x35e>
 8012b24:	f240 5154 	movw	r1, #1364	; 0x554
 8012b28:	428a      	cmp	r2, r1
 8012b2a:	d804      	bhi.n	8012b36 <_malloc_r+0x50a>
 8012b2c:	0c9a      	lsrs	r2, r3, #18
 8012b2e:	327c      	adds	r2, #124	; 0x7c
 8012b30:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8012b34:	e729      	b.n	801298a <_malloc_r+0x35e>
 8012b36:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8012b3a:	227e      	movs	r2, #126	; 0x7e
 8012b3c:	e725      	b.n	801298a <_malloc_r+0x35e>
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	e790      	b.n	8012a64 <_malloc_r+0x438>
 8012b42:	bf00      	nop
 8012b44:	1ffe8d10 	.word	0x1ffe8d10

08012b48 <memchr>:
 8012b48:	0783      	lsls	r3, r0, #30
 8012b4a:	b470      	push	{r4, r5, r6}
 8012b4c:	b2c9      	uxtb	r1, r1
 8012b4e:	d040      	beq.n	8012bd2 <memchr+0x8a>
 8012b50:	1e54      	subs	r4, r2, #1
 8012b52:	2a00      	cmp	r2, #0
 8012b54:	d03f      	beq.n	8012bd6 <memchr+0x8e>
 8012b56:	7803      	ldrb	r3, [r0, #0]
 8012b58:	428b      	cmp	r3, r1
 8012b5a:	bf18      	it	ne
 8012b5c:	1c43      	addne	r3, r0, #1
 8012b5e:	d106      	bne.n	8012b6e <memchr+0x26>
 8012b60:	e01d      	b.n	8012b9e <memchr+0x56>
 8012b62:	b1f4      	cbz	r4, 8012ba2 <memchr+0x5a>
 8012b64:	7802      	ldrb	r2, [r0, #0]
 8012b66:	428a      	cmp	r2, r1
 8012b68:	f104 34ff 	add.w	r4, r4, #4294967295
 8012b6c:	d017      	beq.n	8012b9e <memchr+0x56>
 8012b6e:	f013 0f03 	tst.w	r3, #3
 8012b72:	4618      	mov	r0, r3
 8012b74:	f103 0301 	add.w	r3, r3, #1
 8012b78:	d1f3      	bne.n	8012b62 <memchr+0x1a>
 8012b7a:	2c03      	cmp	r4, #3
 8012b7c:	d814      	bhi.n	8012ba8 <memchr+0x60>
 8012b7e:	b184      	cbz	r4, 8012ba2 <memchr+0x5a>
 8012b80:	7803      	ldrb	r3, [r0, #0]
 8012b82:	428b      	cmp	r3, r1
 8012b84:	d00b      	beq.n	8012b9e <memchr+0x56>
 8012b86:	1905      	adds	r5, r0, r4
 8012b88:	1c43      	adds	r3, r0, #1
 8012b8a:	e002      	b.n	8012b92 <memchr+0x4a>
 8012b8c:	7802      	ldrb	r2, [r0, #0]
 8012b8e:	428a      	cmp	r2, r1
 8012b90:	d005      	beq.n	8012b9e <memchr+0x56>
 8012b92:	42ab      	cmp	r3, r5
 8012b94:	4618      	mov	r0, r3
 8012b96:	f103 0301 	add.w	r3, r3, #1
 8012b9a:	d1f7      	bne.n	8012b8c <memchr+0x44>
 8012b9c:	2000      	movs	r0, #0
 8012b9e:	bc70      	pop	{r4, r5, r6}
 8012ba0:	4770      	bx	lr
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	bc70      	pop	{r4, r5, r6}
 8012ba6:	4770      	bx	lr
 8012ba8:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8012bac:	4602      	mov	r2, r0
 8012bae:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8012bb2:	4610      	mov	r0, r2
 8012bb4:	3204      	adds	r2, #4
 8012bb6:	6803      	ldr	r3, [r0, #0]
 8012bb8:	4073      	eors	r3, r6
 8012bba:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8012bbe:	ea25 0303 	bic.w	r3, r5, r3
 8012bc2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8012bc6:	d1da      	bne.n	8012b7e <memchr+0x36>
 8012bc8:	3c04      	subs	r4, #4
 8012bca:	2c03      	cmp	r4, #3
 8012bcc:	4610      	mov	r0, r2
 8012bce:	d8f0      	bhi.n	8012bb2 <memchr+0x6a>
 8012bd0:	e7d5      	b.n	8012b7e <memchr+0x36>
 8012bd2:	4614      	mov	r4, r2
 8012bd4:	e7d1      	b.n	8012b7a <memchr+0x32>
 8012bd6:	4610      	mov	r0, r2
 8012bd8:	e7e1      	b.n	8012b9e <memchr+0x56>
 8012bda:	bf00      	nop

08012bdc <__malloc_lock>:
 8012bdc:	4770      	bx	lr
 8012bde:	bf00      	nop

08012be0 <__malloc_unlock>:
 8012be0:	4770      	bx	lr
 8012be2:	bf00      	nop

08012be4 <_Balloc>:
 8012be4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012be6:	b570      	push	{r4, r5, r6, lr}
 8012be8:	4605      	mov	r5, r0
 8012bea:	460c      	mov	r4, r1
 8012bec:	b14b      	cbz	r3, 8012c02 <_Balloc+0x1e>
 8012bee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012bf2:	b180      	cbz	r0, 8012c16 <_Balloc+0x32>
 8012bf4:	6802      	ldr	r2, [r0, #0]
 8012bf6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	6103      	str	r3, [r0, #16]
 8012bfe:	60c3      	str	r3, [r0, #12]
 8012c00:	bd70      	pop	{r4, r5, r6, pc}
 8012c02:	2104      	movs	r1, #4
 8012c04:	2221      	movs	r2, #33	; 0x21
 8012c06:	f000 fd87 	bl	8013718 <_calloc_r>
 8012c0a:	64e8      	str	r0, [r5, #76]	; 0x4c
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	2800      	cmp	r0, #0
 8012c10:	d1ed      	bne.n	8012bee <_Balloc+0xa>
 8012c12:	2000      	movs	r0, #0
 8012c14:	bd70      	pop	{r4, r5, r6, pc}
 8012c16:	2101      	movs	r1, #1
 8012c18:	fa01 f604 	lsl.w	r6, r1, r4
 8012c1c:	1d72      	adds	r2, r6, #5
 8012c1e:	4628      	mov	r0, r5
 8012c20:	0092      	lsls	r2, r2, #2
 8012c22:	f000 fd79 	bl	8013718 <_calloc_r>
 8012c26:	2800      	cmp	r0, #0
 8012c28:	d0f3      	beq.n	8012c12 <_Balloc+0x2e>
 8012c2a:	6044      	str	r4, [r0, #4]
 8012c2c:	6086      	str	r6, [r0, #8]
 8012c2e:	e7e4      	b.n	8012bfa <_Balloc+0x16>

08012c30 <_Bfree>:
 8012c30:	b131      	cbz	r1, 8012c40 <_Bfree+0x10>
 8012c32:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012c34:	684a      	ldr	r2, [r1, #4]
 8012c36:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012c3a:	6008      	str	r0, [r1, #0]
 8012c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012c40:	4770      	bx	lr
 8012c42:	bf00      	nop

08012c44 <__multadd>:
 8012c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c46:	690c      	ldr	r4, [r1, #16]
 8012c48:	b083      	sub	sp, #12
 8012c4a:	460d      	mov	r5, r1
 8012c4c:	4606      	mov	r6, r0
 8012c4e:	f101 0e14 	add.w	lr, r1, #20
 8012c52:	2700      	movs	r7, #0
 8012c54:	f8de 1000 	ldr.w	r1, [lr]
 8012c58:	b288      	uxth	r0, r1
 8012c5a:	0c09      	lsrs	r1, r1, #16
 8012c5c:	fb02 3300 	mla	r3, r2, r0, r3
 8012c60:	fb02 f101 	mul.w	r1, r2, r1
 8012c64:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 8012c68:	3701      	adds	r7, #1
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8012c70:	42bc      	cmp	r4, r7
 8012c72:	f84e 3b04 	str.w	r3, [lr], #4
 8012c76:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8012c7a:	dceb      	bgt.n	8012c54 <__multadd+0x10>
 8012c7c:	b13b      	cbz	r3, 8012c8e <__multadd+0x4a>
 8012c7e:	68aa      	ldr	r2, [r5, #8]
 8012c80:	4294      	cmp	r4, r2
 8012c82:	da07      	bge.n	8012c94 <__multadd+0x50>
 8012c84:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8012c88:	3401      	adds	r4, #1
 8012c8a:	6153      	str	r3, [r2, #20]
 8012c8c:	612c      	str	r4, [r5, #16]
 8012c8e:	4628      	mov	r0, r5
 8012c90:	b003      	add	sp, #12
 8012c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c94:	6869      	ldr	r1, [r5, #4]
 8012c96:	9301      	str	r3, [sp, #4]
 8012c98:	3101      	adds	r1, #1
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	f7ff ffa2 	bl	8012be4 <_Balloc>
 8012ca0:	692a      	ldr	r2, [r5, #16]
 8012ca2:	3202      	adds	r2, #2
 8012ca4:	f105 010c 	add.w	r1, r5, #12
 8012ca8:	4607      	mov	r7, r0
 8012caa:	0092      	lsls	r2, r2, #2
 8012cac:	300c      	adds	r0, #12
 8012cae:	f7f2 fffd 	bl	8005cac <memcpy>
 8012cb2:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8012cb4:	6869      	ldr	r1, [r5, #4]
 8012cb6:	9b01      	ldr	r3, [sp, #4]
 8012cb8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8012cbc:	6028      	str	r0, [r5, #0]
 8012cbe:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8012cc2:	463d      	mov	r5, r7
 8012cc4:	e7de      	b.n	8012c84 <__multadd+0x40>
 8012cc6:	bf00      	nop

08012cc8 <__hi0bits>:
 8012cc8:	0c03      	lsrs	r3, r0, #16
 8012cca:	041b      	lsls	r3, r3, #16
 8012ccc:	b9b3      	cbnz	r3, 8012cfc <__hi0bits+0x34>
 8012cce:	0400      	lsls	r0, r0, #16
 8012cd0:	2310      	movs	r3, #16
 8012cd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012cd6:	bf04      	itt	eq
 8012cd8:	0200      	lsleq	r0, r0, #8
 8012cda:	3308      	addeq	r3, #8
 8012cdc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012ce0:	bf04      	itt	eq
 8012ce2:	0100      	lsleq	r0, r0, #4
 8012ce4:	3304      	addeq	r3, #4
 8012ce6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012cea:	bf04      	itt	eq
 8012cec:	0080      	lsleq	r0, r0, #2
 8012cee:	3302      	addeq	r3, #2
 8012cf0:	2800      	cmp	r0, #0
 8012cf2:	db07      	blt.n	8012d04 <__hi0bits+0x3c>
 8012cf4:	0042      	lsls	r2, r0, #1
 8012cf6:	d403      	bmi.n	8012d00 <__hi0bits+0x38>
 8012cf8:	2020      	movs	r0, #32
 8012cfa:	4770      	bx	lr
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	e7e8      	b.n	8012cd2 <__hi0bits+0xa>
 8012d00:	1c58      	adds	r0, r3, #1
 8012d02:	4770      	bx	lr
 8012d04:	4618      	mov	r0, r3
 8012d06:	4770      	bx	lr

08012d08 <__lo0bits>:
 8012d08:	6803      	ldr	r3, [r0, #0]
 8012d0a:	f013 0207 	ands.w	r2, r3, #7
 8012d0e:	d007      	beq.n	8012d20 <__lo0bits+0x18>
 8012d10:	07d9      	lsls	r1, r3, #31
 8012d12:	d420      	bmi.n	8012d56 <__lo0bits+0x4e>
 8012d14:	079a      	lsls	r2, r3, #30
 8012d16:	d420      	bmi.n	8012d5a <__lo0bits+0x52>
 8012d18:	089b      	lsrs	r3, r3, #2
 8012d1a:	6003      	str	r3, [r0, #0]
 8012d1c:	2002      	movs	r0, #2
 8012d1e:	4770      	bx	lr
 8012d20:	b299      	uxth	r1, r3
 8012d22:	b909      	cbnz	r1, 8012d28 <__lo0bits+0x20>
 8012d24:	0c1b      	lsrs	r3, r3, #16
 8012d26:	2210      	movs	r2, #16
 8012d28:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012d2c:	bf04      	itt	eq
 8012d2e:	0a1b      	lsreq	r3, r3, #8
 8012d30:	3208      	addeq	r2, #8
 8012d32:	0719      	lsls	r1, r3, #28
 8012d34:	bf04      	itt	eq
 8012d36:	091b      	lsreq	r3, r3, #4
 8012d38:	3204      	addeq	r2, #4
 8012d3a:	0799      	lsls	r1, r3, #30
 8012d3c:	bf04      	itt	eq
 8012d3e:	089b      	lsreq	r3, r3, #2
 8012d40:	3202      	addeq	r2, #2
 8012d42:	07d9      	lsls	r1, r3, #31
 8012d44:	d404      	bmi.n	8012d50 <__lo0bits+0x48>
 8012d46:	085b      	lsrs	r3, r3, #1
 8012d48:	d101      	bne.n	8012d4e <__lo0bits+0x46>
 8012d4a:	2020      	movs	r0, #32
 8012d4c:	4770      	bx	lr
 8012d4e:	3201      	adds	r2, #1
 8012d50:	6003      	str	r3, [r0, #0]
 8012d52:	4610      	mov	r0, r2
 8012d54:	4770      	bx	lr
 8012d56:	2000      	movs	r0, #0
 8012d58:	4770      	bx	lr
 8012d5a:	085b      	lsrs	r3, r3, #1
 8012d5c:	6003      	str	r3, [r0, #0]
 8012d5e:	2001      	movs	r0, #1
 8012d60:	4770      	bx	lr
 8012d62:	bf00      	nop

08012d64 <__i2b>:
 8012d64:	b510      	push	{r4, lr}
 8012d66:	460c      	mov	r4, r1
 8012d68:	2101      	movs	r1, #1
 8012d6a:	f7ff ff3b 	bl	8012be4 <_Balloc>
 8012d6e:	2201      	movs	r2, #1
 8012d70:	6144      	str	r4, [r0, #20]
 8012d72:	6102      	str	r2, [r0, #16]
 8012d74:	bd10      	pop	{r4, pc}
 8012d76:	bf00      	nop

08012d78 <__multiply>:
 8012d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d7c:	690f      	ldr	r7, [r1, #16]
 8012d7e:	6916      	ldr	r6, [r2, #16]
 8012d80:	42b7      	cmp	r7, r6
 8012d82:	b083      	sub	sp, #12
 8012d84:	460d      	mov	r5, r1
 8012d86:	4614      	mov	r4, r2
 8012d88:	f2c0 808d 	blt.w	8012ea6 <__multiply+0x12e>
 8012d8c:	4633      	mov	r3, r6
 8012d8e:	463e      	mov	r6, r7
 8012d90:	461f      	mov	r7, r3
 8012d92:	68ab      	ldr	r3, [r5, #8]
 8012d94:	6869      	ldr	r1, [r5, #4]
 8012d96:	eb06 0807 	add.w	r8, r6, r7
 8012d9a:	4598      	cmp	r8, r3
 8012d9c:	bfc8      	it	gt
 8012d9e:	3101      	addgt	r1, #1
 8012da0:	f7ff ff20 	bl	8012be4 <_Balloc>
 8012da4:	f100 0c14 	add.w	ip, r0, #20
 8012da8:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8012dac:	45cc      	cmp	ip, r9
 8012dae:	9000      	str	r0, [sp, #0]
 8012db0:	d205      	bcs.n	8012dbe <__multiply+0x46>
 8012db2:	4663      	mov	r3, ip
 8012db4:	2100      	movs	r1, #0
 8012db6:	f843 1b04 	str.w	r1, [r3], #4
 8012dba:	4599      	cmp	r9, r3
 8012dbc:	d8fb      	bhi.n	8012db6 <__multiply+0x3e>
 8012dbe:	f104 0214 	add.w	r2, r4, #20
 8012dc2:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8012dc6:	f105 0314 	add.w	r3, r5, #20
 8012dca:	4552      	cmp	r2, sl
 8012dcc:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8012dd0:	d254      	bcs.n	8012e7c <__multiply+0x104>
 8012dd2:	f8cd 9004 	str.w	r9, [sp, #4]
 8012dd6:	4699      	mov	r9, r3
 8012dd8:	f852 3b04 	ldr.w	r3, [r2], #4
 8012ddc:	fa1f fb83 	uxth.w	fp, r3
 8012de0:	f1bb 0f00 	cmp.w	fp, #0
 8012de4:	d020      	beq.n	8012e28 <__multiply+0xb0>
 8012de6:	2000      	movs	r0, #0
 8012de8:	464f      	mov	r7, r9
 8012dea:	4666      	mov	r6, ip
 8012dec:	4605      	mov	r5, r0
 8012dee:	e000      	b.n	8012df2 <__multiply+0x7a>
 8012df0:	461e      	mov	r6, r3
 8012df2:	f857 4b04 	ldr.w	r4, [r7], #4
 8012df6:	6830      	ldr	r0, [r6, #0]
 8012df8:	b2a1      	uxth	r1, r4
 8012dfa:	b283      	uxth	r3, r0
 8012dfc:	fb0b 3101 	mla	r1, fp, r1, r3
 8012e00:	0c24      	lsrs	r4, r4, #16
 8012e02:	0c00      	lsrs	r0, r0, #16
 8012e04:	194b      	adds	r3, r1, r5
 8012e06:	fb0b 0004 	mla	r0, fp, r4, r0
 8012e0a:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8012e0e:	b299      	uxth	r1, r3
 8012e10:	4633      	mov	r3, r6
 8012e12:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012e16:	45be      	cmp	lr, r7
 8012e18:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8012e1c:	f843 1b04 	str.w	r1, [r3], #4
 8012e20:	d8e6      	bhi.n	8012df0 <__multiply+0x78>
 8012e22:	6075      	str	r5, [r6, #4]
 8012e24:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8012e28:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8012e2c:	d020      	beq.n	8012e70 <__multiply+0xf8>
 8012e2e:	f8dc 3000 	ldr.w	r3, [ip]
 8012e32:	4667      	mov	r7, ip
 8012e34:	4618      	mov	r0, r3
 8012e36:	464d      	mov	r5, r9
 8012e38:	2100      	movs	r1, #0
 8012e3a:	e000      	b.n	8012e3e <__multiply+0xc6>
 8012e3c:	4637      	mov	r7, r6
 8012e3e:	882c      	ldrh	r4, [r5, #0]
 8012e40:	0c00      	lsrs	r0, r0, #16
 8012e42:	fb0b 0004 	mla	r0, fp, r4, r0
 8012e46:	4401      	add	r1, r0
 8012e48:	b29c      	uxth	r4, r3
 8012e4a:	463e      	mov	r6, r7
 8012e4c:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8012e50:	f846 3b04 	str.w	r3, [r6], #4
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f855 4b04 	ldr.w	r4, [r5], #4
 8012e5a:	b283      	uxth	r3, r0
 8012e5c:	0c24      	lsrs	r4, r4, #16
 8012e5e:	fb0b 3404 	mla	r4, fp, r4, r3
 8012e62:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8012e66:	45ae      	cmp	lr, r5
 8012e68:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8012e6c:	d8e6      	bhi.n	8012e3c <__multiply+0xc4>
 8012e6e:	607b      	str	r3, [r7, #4]
 8012e70:	4592      	cmp	sl, r2
 8012e72:	f10c 0c04 	add.w	ip, ip, #4
 8012e76:	d8af      	bhi.n	8012dd8 <__multiply+0x60>
 8012e78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012e7c:	f1b8 0f00 	cmp.w	r8, #0
 8012e80:	dd0b      	ble.n	8012e9a <__multiply+0x122>
 8012e82:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8012e86:	f1a9 0904 	sub.w	r9, r9, #4
 8012e8a:	b11b      	cbz	r3, 8012e94 <__multiply+0x11c>
 8012e8c:	e005      	b.n	8012e9a <__multiply+0x122>
 8012e8e:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8012e92:	b913      	cbnz	r3, 8012e9a <__multiply+0x122>
 8012e94:	f1b8 0801 	subs.w	r8, r8, #1
 8012e98:	d1f9      	bne.n	8012e8e <__multiply+0x116>
 8012e9a:	9800      	ldr	r0, [sp, #0]
 8012e9c:	f8c0 8010 	str.w	r8, [r0, #16]
 8012ea0:	b003      	add	sp, #12
 8012ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ea6:	4615      	mov	r5, r2
 8012ea8:	460c      	mov	r4, r1
 8012eaa:	e772      	b.n	8012d92 <__multiply+0x1a>

08012eac <__pow5mult>:
 8012eac:	f012 0303 	ands.w	r3, r2, #3
 8012eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eb4:	4614      	mov	r4, r2
 8012eb6:	4607      	mov	r7, r0
 8012eb8:	460e      	mov	r6, r1
 8012eba:	d12d      	bne.n	8012f18 <__pow5mult+0x6c>
 8012ebc:	10a4      	asrs	r4, r4, #2
 8012ebe:	d01c      	beq.n	8012efa <__pow5mult+0x4e>
 8012ec0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8012ec2:	b395      	cbz	r5, 8012f2a <__pow5mult+0x7e>
 8012ec4:	07e3      	lsls	r3, r4, #31
 8012ec6:	f04f 0800 	mov.w	r8, #0
 8012eca:	d406      	bmi.n	8012eda <__pow5mult+0x2e>
 8012ecc:	1064      	asrs	r4, r4, #1
 8012ece:	d014      	beq.n	8012efa <__pow5mult+0x4e>
 8012ed0:	6828      	ldr	r0, [r5, #0]
 8012ed2:	b1a8      	cbz	r0, 8012f00 <__pow5mult+0x54>
 8012ed4:	4605      	mov	r5, r0
 8012ed6:	07e3      	lsls	r3, r4, #31
 8012ed8:	d5f8      	bpl.n	8012ecc <__pow5mult+0x20>
 8012eda:	4638      	mov	r0, r7
 8012edc:	4631      	mov	r1, r6
 8012ede:	462a      	mov	r2, r5
 8012ee0:	f7ff ff4a 	bl	8012d78 <__multiply>
 8012ee4:	b1b6      	cbz	r6, 8012f14 <__pow5mult+0x68>
 8012ee6:	6872      	ldr	r2, [r6, #4]
 8012ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012eea:	1064      	asrs	r4, r4, #1
 8012eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012ef0:	6031      	str	r1, [r6, #0]
 8012ef2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8012ef6:	4606      	mov	r6, r0
 8012ef8:	d1ea      	bne.n	8012ed0 <__pow5mult+0x24>
 8012efa:	4630      	mov	r0, r6
 8012efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f00:	4629      	mov	r1, r5
 8012f02:	462a      	mov	r2, r5
 8012f04:	4638      	mov	r0, r7
 8012f06:	f7ff ff37 	bl	8012d78 <__multiply>
 8012f0a:	6028      	str	r0, [r5, #0]
 8012f0c:	f8c0 8000 	str.w	r8, [r0]
 8012f10:	4605      	mov	r5, r0
 8012f12:	e7e0      	b.n	8012ed6 <__pow5mult+0x2a>
 8012f14:	4606      	mov	r6, r0
 8012f16:	e7d9      	b.n	8012ecc <__pow5mult+0x20>
 8012f18:	1e5a      	subs	r2, r3, #1
 8012f1a:	4d0b      	ldr	r5, [pc, #44]	; (8012f48 <__pow5mult+0x9c>)
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8012f22:	f7ff fe8f 	bl	8012c44 <__multadd>
 8012f26:	4606      	mov	r6, r0
 8012f28:	e7c8      	b.n	8012ebc <__pow5mult+0x10>
 8012f2a:	2101      	movs	r1, #1
 8012f2c:	4638      	mov	r0, r7
 8012f2e:	f7ff fe59 	bl	8012be4 <_Balloc>
 8012f32:	f240 2171 	movw	r1, #625	; 0x271
 8012f36:	2201      	movs	r2, #1
 8012f38:	2300      	movs	r3, #0
 8012f3a:	6141      	str	r1, [r0, #20]
 8012f3c:	6102      	str	r2, [r0, #16]
 8012f3e:	4605      	mov	r5, r0
 8012f40:	64b8      	str	r0, [r7, #72]	; 0x48
 8012f42:	6003      	str	r3, [r0, #0]
 8012f44:	e7be      	b.n	8012ec4 <__pow5mult+0x18>
 8012f46:	bf00      	nop
 8012f48:	08014958 	.word	0x08014958

08012f4c <__lshift>:
 8012f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f50:	690f      	ldr	r7, [r1, #16]
 8012f52:	688b      	ldr	r3, [r1, #8]
 8012f54:	ea4f 1962 	mov.w	r9, r2, asr #5
 8012f58:	444f      	add	r7, r9
 8012f5a:	1c7d      	adds	r5, r7, #1
 8012f5c:	429d      	cmp	r5, r3
 8012f5e:	460e      	mov	r6, r1
 8012f60:	4614      	mov	r4, r2
 8012f62:	6849      	ldr	r1, [r1, #4]
 8012f64:	4680      	mov	r8, r0
 8012f66:	dd04      	ble.n	8012f72 <__lshift+0x26>
 8012f68:	005b      	lsls	r3, r3, #1
 8012f6a:	429d      	cmp	r5, r3
 8012f6c:	f101 0101 	add.w	r1, r1, #1
 8012f70:	dcfa      	bgt.n	8012f68 <__lshift+0x1c>
 8012f72:	4640      	mov	r0, r8
 8012f74:	f7ff fe36 	bl	8012be4 <_Balloc>
 8012f78:	f1b9 0f00 	cmp.w	r9, #0
 8012f7c:	f100 0114 	add.w	r1, r0, #20
 8012f80:	dd09      	ble.n	8012f96 <__lshift+0x4a>
 8012f82:	2300      	movs	r3, #0
 8012f84:	469e      	mov	lr, r3
 8012f86:	460a      	mov	r2, r1
 8012f88:	3301      	adds	r3, #1
 8012f8a:	454b      	cmp	r3, r9
 8012f8c:	f842 eb04 	str.w	lr, [r2], #4
 8012f90:	d1fa      	bne.n	8012f88 <__lshift+0x3c>
 8012f92:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012f96:	6932      	ldr	r2, [r6, #16]
 8012f98:	f106 0314 	add.w	r3, r6, #20
 8012f9c:	f014 0c1f 	ands.w	ip, r4, #31
 8012fa0:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8012fa4:	d01f      	beq.n	8012fe6 <__lshift+0x9a>
 8012fa6:	f1cc 0920 	rsb	r9, ip, #32
 8012faa:	2200      	movs	r2, #0
 8012fac:	681c      	ldr	r4, [r3, #0]
 8012fae:	fa04 f40c 	lsl.w	r4, r4, ip
 8012fb2:	4314      	orrs	r4, r2
 8012fb4:	468a      	mov	sl, r1
 8012fb6:	f841 4b04 	str.w	r4, [r1], #4
 8012fba:	f853 4b04 	ldr.w	r4, [r3], #4
 8012fbe:	459e      	cmp	lr, r3
 8012fc0:	fa24 f209 	lsr.w	r2, r4, r9
 8012fc4:	d8f2      	bhi.n	8012fac <__lshift+0x60>
 8012fc6:	f8ca 2004 	str.w	r2, [sl, #4]
 8012fca:	b102      	cbz	r2, 8012fce <__lshift+0x82>
 8012fcc:	1cbd      	adds	r5, r7, #2
 8012fce:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8012fd2:	6872      	ldr	r2, [r6, #4]
 8012fd4:	3d01      	subs	r5, #1
 8012fd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012fda:	6105      	str	r5, [r0, #16]
 8012fdc:	6031      	str	r1, [r6, #0]
 8012fde:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8012fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fe6:	3904      	subs	r1, #4
 8012fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fec:	f841 2f04 	str.w	r2, [r1, #4]!
 8012ff0:	459e      	cmp	lr, r3
 8012ff2:	d8f9      	bhi.n	8012fe8 <__lshift+0x9c>
 8012ff4:	e7eb      	b.n	8012fce <__lshift+0x82>
 8012ff6:	bf00      	nop

08012ff8 <__mcmp>:
 8012ff8:	6902      	ldr	r2, [r0, #16]
 8012ffa:	690b      	ldr	r3, [r1, #16]
 8012ffc:	1ad2      	subs	r2, r2, r3
 8012ffe:	d113      	bne.n	8013028 <__mcmp+0x30>
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	3014      	adds	r0, #20
 8013004:	3114      	adds	r1, #20
 8013006:	4419      	add	r1, r3
 8013008:	b410      	push	{r4}
 801300a:	4403      	add	r3, r0
 801300c:	e001      	b.n	8013012 <__mcmp+0x1a>
 801300e:	4298      	cmp	r0, r3
 8013010:	d20c      	bcs.n	801302c <__mcmp+0x34>
 8013012:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8013016:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801301a:	4294      	cmp	r4, r2
 801301c:	d0f7      	beq.n	801300e <__mcmp+0x16>
 801301e:	d309      	bcc.n	8013034 <__mcmp+0x3c>
 8013020:	2001      	movs	r0, #1
 8013022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013026:	4770      	bx	lr
 8013028:	4610      	mov	r0, r2
 801302a:	4770      	bx	lr
 801302c:	2000      	movs	r0, #0
 801302e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013032:	4770      	bx	lr
 8013034:	f04f 30ff 	mov.w	r0, #4294967295
 8013038:	f85d 4b04 	ldr.w	r4, [sp], #4
 801303c:	4770      	bx	lr
 801303e:	bf00      	nop

08013040 <__mdiff>:
 8013040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013044:	460e      	mov	r6, r1
 8013046:	4605      	mov	r5, r0
 8013048:	4611      	mov	r1, r2
 801304a:	4630      	mov	r0, r6
 801304c:	4614      	mov	r4, r2
 801304e:	f7ff ffd3 	bl	8012ff8 <__mcmp>
 8013052:	1e07      	subs	r7, r0, #0
 8013054:	d054      	beq.n	8013100 <__mdiff+0xc0>
 8013056:	db4d      	blt.n	80130f4 <__mdiff+0xb4>
 8013058:	f04f 0800 	mov.w	r8, #0
 801305c:	6871      	ldr	r1, [r6, #4]
 801305e:	4628      	mov	r0, r5
 8013060:	f7ff fdc0 	bl	8012be4 <_Balloc>
 8013064:	6937      	ldr	r7, [r6, #16]
 8013066:	6923      	ldr	r3, [r4, #16]
 8013068:	f8c0 800c 	str.w	r8, [r0, #12]
 801306c:	3614      	adds	r6, #20
 801306e:	f104 0214 	add.w	r2, r4, #20
 8013072:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8013076:	f100 0514 	add.w	r5, r0, #20
 801307a:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 801307e:	2300      	movs	r3, #0
 8013080:	f856 8b04 	ldr.w	r8, [r6], #4
 8013084:	f852 4b04 	ldr.w	r4, [r2], #4
 8013088:	fa13 f388 	uxtah	r3, r3, r8
 801308c:	b2a1      	uxth	r1, r4
 801308e:	0c24      	lsrs	r4, r4, #16
 8013090:	1a59      	subs	r1, r3, r1
 8013092:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 8013096:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801309a:	b289      	uxth	r1, r1
 801309c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80130a0:	4594      	cmp	ip, r2
 80130a2:	f845 1b04 	str.w	r1, [r5], #4
 80130a6:	ea4f 4323 	mov.w	r3, r3, asr #16
 80130aa:	4634      	mov	r4, r6
 80130ac:	d8e8      	bhi.n	8013080 <__mdiff+0x40>
 80130ae:	45b6      	cmp	lr, r6
 80130b0:	46ac      	mov	ip, r5
 80130b2:	d915      	bls.n	80130e0 <__mdiff+0xa0>
 80130b4:	f854 2b04 	ldr.w	r2, [r4], #4
 80130b8:	fa13 f182 	uxtah	r1, r3, r2
 80130bc:	0c13      	lsrs	r3, r2, #16
 80130be:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80130c2:	b289      	uxth	r1, r1
 80130c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80130c8:	45a6      	cmp	lr, r4
 80130ca:	f845 1b04 	str.w	r1, [r5], #4
 80130ce:	ea4f 4323 	mov.w	r3, r3, asr #16
 80130d2:	d8ef      	bhi.n	80130b4 <__mdiff+0x74>
 80130d4:	43f6      	mvns	r6, r6
 80130d6:	4476      	add	r6, lr
 80130d8:	f026 0503 	bic.w	r5, r6, #3
 80130dc:	3504      	adds	r5, #4
 80130de:	4465      	add	r5, ip
 80130e0:	3d04      	subs	r5, #4
 80130e2:	b921      	cbnz	r1, 80130ee <__mdiff+0xae>
 80130e4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80130e8:	3f01      	subs	r7, #1
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d0fa      	beq.n	80130e4 <__mdiff+0xa4>
 80130ee:	6107      	str	r7, [r0, #16]
 80130f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130f4:	4633      	mov	r3, r6
 80130f6:	f04f 0801 	mov.w	r8, #1
 80130fa:	4626      	mov	r6, r4
 80130fc:	461c      	mov	r4, r3
 80130fe:	e7ad      	b.n	801305c <__mdiff+0x1c>
 8013100:	4628      	mov	r0, r5
 8013102:	4639      	mov	r1, r7
 8013104:	f7ff fd6e 	bl	8012be4 <_Balloc>
 8013108:	2301      	movs	r3, #1
 801310a:	6147      	str	r7, [r0, #20]
 801310c:	6103      	str	r3, [r0, #16]
 801310e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013112:	bf00      	nop

08013114 <__d2b>:
 8013114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013118:	b083      	sub	sp, #12
 801311a:	2101      	movs	r1, #1
 801311c:	461c      	mov	r4, r3
 801311e:	f3c3 550a 	ubfx	r5, r3, #20, #11
 8013122:	4617      	mov	r7, r2
 8013124:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8013126:	f7ff fd5d 	bl	8012be4 <_Balloc>
 801312a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801312e:	4681      	mov	r9, r0
 8013130:	b10d      	cbz	r5, 8013136 <__d2b+0x22>
 8013132:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8013136:	9401      	str	r4, [sp, #4]
 8013138:	b31f      	cbz	r7, 8013182 <__d2b+0x6e>
 801313a:	a802      	add	r0, sp, #8
 801313c:	f840 7d08 	str.w	r7, [r0, #-8]!
 8013140:	f7ff fde2 	bl	8012d08 <__lo0bits>
 8013144:	2800      	cmp	r0, #0
 8013146:	d135      	bne.n	80131b4 <__d2b+0xa0>
 8013148:	e89d 000c 	ldmia.w	sp, {r2, r3}
 801314c:	f8c9 2014 	str.w	r2, [r9, #20]
 8013150:	2b00      	cmp	r3, #0
 8013152:	bf14      	ite	ne
 8013154:	2402      	movne	r4, #2
 8013156:	2401      	moveq	r4, #1
 8013158:	f8c9 3018 	str.w	r3, [r9, #24]
 801315c:	f8c9 4010 	str.w	r4, [r9, #16]
 8013160:	b9dd      	cbnz	r5, 801319a <__d2b+0x86>
 8013162:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8013166:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801316a:	6030      	str	r0, [r6, #0]
 801316c:	6918      	ldr	r0, [r3, #16]
 801316e:	f7ff fdab 	bl	8012cc8 <__hi0bits>
 8013172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013174:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8013178:	6018      	str	r0, [r3, #0]
 801317a:	4648      	mov	r0, r9
 801317c:	b003      	add	sp, #12
 801317e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013182:	a801      	add	r0, sp, #4
 8013184:	f7ff fdc0 	bl	8012d08 <__lo0bits>
 8013188:	2401      	movs	r4, #1
 801318a:	9b01      	ldr	r3, [sp, #4]
 801318c:	f8c9 3014 	str.w	r3, [r9, #20]
 8013190:	3020      	adds	r0, #32
 8013192:	f8c9 4010 	str.w	r4, [r9, #16]
 8013196:	2d00      	cmp	r5, #0
 8013198:	d0e3      	beq.n	8013162 <__d2b+0x4e>
 801319a:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 801319e:	eb08 0300 	add.w	r3, r8, r0
 80131a2:	6033      	str	r3, [r6, #0]
 80131a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80131aa:	6018      	str	r0, [r3, #0]
 80131ac:	4648      	mov	r0, r9
 80131ae:	b003      	add	sp, #12
 80131b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131b4:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80131b8:	f1c0 0120 	rsb	r1, r0, #32
 80131bc:	fa03 f101 	lsl.w	r1, r3, r1
 80131c0:	430a      	orrs	r2, r1
 80131c2:	40c3      	lsrs	r3, r0
 80131c4:	9301      	str	r3, [sp, #4]
 80131c6:	f8c9 2014 	str.w	r2, [r9, #20]
 80131ca:	e7c1      	b.n	8013150 <__d2b+0x3c>

080131cc <_realloc_r>:
 80131cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131d0:	4617      	mov	r7, r2
 80131d2:	b083      	sub	sp, #12
 80131d4:	460e      	mov	r6, r1
 80131d6:	2900      	cmp	r1, #0
 80131d8:	f000 80e7 	beq.w	80133aa <_realloc_r+0x1de>
 80131dc:	4681      	mov	r9, r0
 80131de:	f107 050b 	add.w	r5, r7, #11
 80131e2:	f7ff fcfb 	bl	8012bdc <__malloc_lock>
 80131e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80131ea:	2d16      	cmp	r5, #22
 80131ec:	f023 0403 	bic.w	r4, r3, #3
 80131f0:	f1a6 0808 	sub.w	r8, r6, #8
 80131f4:	d84c      	bhi.n	8013290 <_realloc_r+0xc4>
 80131f6:	2210      	movs	r2, #16
 80131f8:	4615      	mov	r5, r2
 80131fa:	42af      	cmp	r7, r5
 80131fc:	d84d      	bhi.n	801329a <_realloc_r+0xce>
 80131fe:	4294      	cmp	r4, r2
 8013200:	f280 8084 	bge.w	801330c <_realloc_r+0x140>
 8013204:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 80135b4 <_realloc_r+0x3e8>
 8013208:	f8db 0008 	ldr.w	r0, [fp, #8]
 801320c:	eb08 0104 	add.w	r1, r8, r4
 8013210:	4288      	cmp	r0, r1
 8013212:	f000 80d6 	beq.w	80133c2 <_realloc_r+0x1f6>
 8013216:	6848      	ldr	r0, [r1, #4]
 8013218:	f020 0e01 	bic.w	lr, r0, #1
 801321c:	448e      	add	lr, r1
 801321e:	f8de e004 	ldr.w	lr, [lr, #4]
 8013222:	f01e 0f01 	tst.w	lr, #1
 8013226:	d13f      	bne.n	80132a8 <_realloc_r+0xdc>
 8013228:	f020 0003 	bic.w	r0, r0, #3
 801322c:	4420      	add	r0, r4
 801322e:	4290      	cmp	r0, r2
 8013230:	f280 80c1 	bge.w	80133b6 <_realloc_r+0x1ea>
 8013234:	07db      	lsls	r3, r3, #31
 8013236:	f100 808f 	bmi.w	8013358 <_realloc_r+0x18c>
 801323a:	f856 3c08 	ldr.w	r3, [r6, #-8]
 801323e:	ebc3 0a08 	rsb	sl, r3, r8
 8013242:	f8da 3004 	ldr.w	r3, [sl, #4]
 8013246:	f023 0303 	bic.w	r3, r3, #3
 801324a:	eb00 0e03 	add.w	lr, r0, r3
 801324e:	4596      	cmp	lr, r2
 8013250:	db34      	blt.n	80132bc <_realloc_r+0xf0>
 8013252:	68cb      	ldr	r3, [r1, #12]
 8013254:	688a      	ldr	r2, [r1, #8]
 8013256:	4657      	mov	r7, sl
 8013258:	60d3      	str	r3, [r2, #12]
 801325a:	609a      	str	r2, [r3, #8]
 801325c:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8013260:	f8da 300c 	ldr.w	r3, [sl, #12]
 8013264:	60cb      	str	r3, [r1, #12]
 8013266:	1f22      	subs	r2, r4, #4
 8013268:	2a24      	cmp	r2, #36	; 0x24
 801326a:	6099      	str	r1, [r3, #8]
 801326c:	f200 8136 	bhi.w	80134dc <_realloc_r+0x310>
 8013270:	2a13      	cmp	r2, #19
 8013272:	f240 80fd 	bls.w	8013470 <_realloc_r+0x2a4>
 8013276:	6833      	ldr	r3, [r6, #0]
 8013278:	f8ca 3008 	str.w	r3, [sl, #8]
 801327c:	6873      	ldr	r3, [r6, #4]
 801327e:	f8ca 300c 	str.w	r3, [sl, #12]
 8013282:	2a1b      	cmp	r2, #27
 8013284:	f200 8140 	bhi.w	8013508 <_realloc_r+0x33c>
 8013288:	3608      	adds	r6, #8
 801328a:	f10a 0310 	add.w	r3, sl, #16
 801328e:	e0f0      	b.n	8013472 <_realloc_r+0x2a6>
 8013290:	f025 0507 	bic.w	r5, r5, #7
 8013294:	2d00      	cmp	r5, #0
 8013296:	462a      	mov	r2, r5
 8013298:	daaf      	bge.n	80131fa <_realloc_r+0x2e>
 801329a:	230c      	movs	r3, #12
 801329c:	2000      	movs	r0, #0
 801329e:	f8c9 3000 	str.w	r3, [r9]
 80132a2:	b003      	add	sp, #12
 80132a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132a8:	07d9      	lsls	r1, r3, #31
 80132aa:	d455      	bmi.n	8013358 <_realloc_r+0x18c>
 80132ac:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80132b0:	ebc3 0a08 	rsb	sl, r3, r8
 80132b4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80132b8:	f023 0303 	bic.w	r3, r3, #3
 80132bc:	4423      	add	r3, r4
 80132be:	4293      	cmp	r3, r2
 80132c0:	db4a      	blt.n	8013358 <_realloc_r+0x18c>
 80132c2:	4657      	mov	r7, sl
 80132c4:	f8da 100c 	ldr.w	r1, [sl, #12]
 80132c8:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80132cc:	1f22      	subs	r2, r4, #4
 80132ce:	2a24      	cmp	r2, #36	; 0x24
 80132d0:	60c1      	str	r1, [r0, #12]
 80132d2:	6088      	str	r0, [r1, #8]
 80132d4:	f200 810e 	bhi.w	80134f4 <_realloc_r+0x328>
 80132d8:	2a13      	cmp	r2, #19
 80132da:	f240 8109 	bls.w	80134f0 <_realloc_r+0x324>
 80132de:	6831      	ldr	r1, [r6, #0]
 80132e0:	f8ca 1008 	str.w	r1, [sl, #8]
 80132e4:	6871      	ldr	r1, [r6, #4]
 80132e6:	f8ca 100c 	str.w	r1, [sl, #12]
 80132ea:	2a1b      	cmp	r2, #27
 80132ec:	f200 8121 	bhi.w	8013532 <_realloc_r+0x366>
 80132f0:	3608      	adds	r6, #8
 80132f2:	f10a 0210 	add.w	r2, sl, #16
 80132f6:	6831      	ldr	r1, [r6, #0]
 80132f8:	6011      	str	r1, [r2, #0]
 80132fa:	6871      	ldr	r1, [r6, #4]
 80132fc:	6051      	str	r1, [r2, #4]
 80132fe:	68b1      	ldr	r1, [r6, #8]
 8013300:	6091      	str	r1, [r2, #8]
 8013302:	461c      	mov	r4, r3
 8013304:	f8da 3004 	ldr.w	r3, [sl, #4]
 8013308:	463e      	mov	r6, r7
 801330a:	46d0      	mov	r8, sl
 801330c:	1b62      	subs	r2, r4, r5
 801330e:	2a0f      	cmp	r2, #15
 8013310:	f003 0301 	and.w	r3, r3, #1
 8013314:	d80e      	bhi.n	8013334 <_realloc_r+0x168>
 8013316:	4323      	orrs	r3, r4
 8013318:	4444      	add	r4, r8
 801331a:	f8c8 3004 	str.w	r3, [r8, #4]
 801331e:	6863      	ldr	r3, [r4, #4]
 8013320:	f043 0301 	orr.w	r3, r3, #1
 8013324:	6063      	str	r3, [r4, #4]
 8013326:	4648      	mov	r0, r9
 8013328:	f7ff fc5a 	bl	8012be0 <__malloc_unlock>
 801332c:	4630      	mov	r0, r6
 801332e:	b003      	add	sp, #12
 8013330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013334:	eb08 0105 	add.w	r1, r8, r5
 8013338:	431d      	orrs	r5, r3
 801333a:	f042 0301 	orr.w	r3, r2, #1
 801333e:	440a      	add	r2, r1
 8013340:	f8c8 5004 	str.w	r5, [r8, #4]
 8013344:	604b      	str	r3, [r1, #4]
 8013346:	6853      	ldr	r3, [r2, #4]
 8013348:	f043 0301 	orr.w	r3, r3, #1
 801334c:	3108      	adds	r1, #8
 801334e:	6053      	str	r3, [r2, #4]
 8013350:	4648      	mov	r0, r9
 8013352:	f7fe fe5f 	bl	8012014 <_free_r>
 8013356:	e7e6      	b.n	8013326 <_realloc_r+0x15a>
 8013358:	4639      	mov	r1, r7
 801335a:	4648      	mov	r0, r9
 801335c:	f7ff f966 	bl	801262c <_malloc_r>
 8013360:	4607      	mov	r7, r0
 8013362:	b1d8      	cbz	r0, 801339c <_realloc_r+0x1d0>
 8013364:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013368:	f023 0201 	bic.w	r2, r3, #1
 801336c:	4442      	add	r2, r8
 801336e:	f1a0 0108 	sub.w	r1, r0, #8
 8013372:	4291      	cmp	r1, r2
 8013374:	f000 80ac 	beq.w	80134d0 <_realloc_r+0x304>
 8013378:	1f22      	subs	r2, r4, #4
 801337a:	2a24      	cmp	r2, #36	; 0x24
 801337c:	f200 8099 	bhi.w	80134b2 <_realloc_r+0x2e6>
 8013380:	2a13      	cmp	r2, #19
 8013382:	d86a      	bhi.n	801345a <_realloc_r+0x28e>
 8013384:	4603      	mov	r3, r0
 8013386:	4632      	mov	r2, r6
 8013388:	6811      	ldr	r1, [r2, #0]
 801338a:	6019      	str	r1, [r3, #0]
 801338c:	6851      	ldr	r1, [r2, #4]
 801338e:	6059      	str	r1, [r3, #4]
 8013390:	6892      	ldr	r2, [r2, #8]
 8013392:	609a      	str	r2, [r3, #8]
 8013394:	4631      	mov	r1, r6
 8013396:	4648      	mov	r0, r9
 8013398:	f7fe fe3c 	bl	8012014 <_free_r>
 801339c:	4648      	mov	r0, r9
 801339e:	f7ff fc1f 	bl	8012be0 <__malloc_unlock>
 80133a2:	4638      	mov	r0, r7
 80133a4:	b003      	add	sp, #12
 80133a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133aa:	4611      	mov	r1, r2
 80133ac:	b003      	add	sp, #12
 80133ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b2:	f7ff b93b 	b.w	801262c <_malloc_r>
 80133b6:	68ca      	ldr	r2, [r1, #12]
 80133b8:	6889      	ldr	r1, [r1, #8]
 80133ba:	4604      	mov	r4, r0
 80133bc:	60ca      	str	r2, [r1, #12]
 80133be:	6091      	str	r1, [r2, #8]
 80133c0:	e7a4      	b.n	801330c <_realloc_r+0x140>
 80133c2:	6841      	ldr	r1, [r0, #4]
 80133c4:	f021 0103 	bic.w	r1, r1, #3
 80133c8:	4421      	add	r1, r4
 80133ca:	f105 0010 	add.w	r0, r5, #16
 80133ce:	4281      	cmp	r1, r0
 80133d0:	da5b      	bge.n	801348a <_realloc_r+0x2be>
 80133d2:	07db      	lsls	r3, r3, #31
 80133d4:	d4c0      	bmi.n	8013358 <_realloc_r+0x18c>
 80133d6:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80133da:	ebc3 0a08 	rsb	sl, r3, r8
 80133de:	f8da 3004 	ldr.w	r3, [sl, #4]
 80133e2:	f023 0303 	bic.w	r3, r3, #3
 80133e6:	eb01 0c03 	add.w	ip, r1, r3
 80133ea:	4560      	cmp	r0, ip
 80133ec:	f73f af66 	bgt.w	80132bc <_realloc_r+0xf0>
 80133f0:	4657      	mov	r7, sl
 80133f2:	f8da 300c 	ldr.w	r3, [sl, #12]
 80133f6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80133fa:	1f22      	subs	r2, r4, #4
 80133fc:	2a24      	cmp	r2, #36	; 0x24
 80133fe:	60cb      	str	r3, [r1, #12]
 8013400:	6099      	str	r1, [r3, #8]
 8013402:	f200 80b8 	bhi.w	8013576 <_realloc_r+0x3aa>
 8013406:	2a13      	cmp	r2, #19
 8013408:	f240 80a9 	bls.w	801355e <_realloc_r+0x392>
 801340c:	6833      	ldr	r3, [r6, #0]
 801340e:	f8ca 3008 	str.w	r3, [sl, #8]
 8013412:	6873      	ldr	r3, [r6, #4]
 8013414:	f8ca 300c 	str.w	r3, [sl, #12]
 8013418:	2a1b      	cmp	r2, #27
 801341a:	f200 80b5 	bhi.w	8013588 <_realloc_r+0x3bc>
 801341e:	3608      	adds	r6, #8
 8013420:	f10a 0310 	add.w	r3, sl, #16
 8013424:	6832      	ldr	r2, [r6, #0]
 8013426:	601a      	str	r2, [r3, #0]
 8013428:	6872      	ldr	r2, [r6, #4]
 801342a:	605a      	str	r2, [r3, #4]
 801342c:	68b2      	ldr	r2, [r6, #8]
 801342e:	609a      	str	r2, [r3, #8]
 8013430:	eb0a 0205 	add.w	r2, sl, r5
 8013434:	ebc5 030c 	rsb	r3, r5, ip
 8013438:	f043 0301 	orr.w	r3, r3, #1
 801343c:	f8cb 2008 	str.w	r2, [fp, #8]
 8013440:	6053      	str	r3, [r2, #4]
 8013442:	f8da 3004 	ldr.w	r3, [sl, #4]
 8013446:	f003 0301 	and.w	r3, r3, #1
 801344a:	431d      	orrs	r5, r3
 801344c:	4648      	mov	r0, r9
 801344e:	f8ca 5004 	str.w	r5, [sl, #4]
 8013452:	f7ff fbc5 	bl	8012be0 <__malloc_unlock>
 8013456:	4638      	mov	r0, r7
 8013458:	e769      	b.n	801332e <_realloc_r+0x162>
 801345a:	6833      	ldr	r3, [r6, #0]
 801345c:	6003      	str	r3, [r0, #0]
 801345e:	6873      	ldr	r3, [r6, #4]
 8013460:	6043      	str	r3, [r0, #4]
 8013462:	2a1b      	cmp	r2, #27
 8013464:	d829      	bhi.n	80134ba <_realloc_r+0x2ee>
 8013466:	f100 0308 	add.w	r3, r0, #8
 801346a:	f106 0208 	add.w	r2, r6, #8
 801346e:	e78b      	b.n	8013388 <_realloc_r+0x1bc>
 8013470:	463b      	mov	r3, r7
 8013472:	6832      	ldr	r2, [r6, #0]
 8013474:	601a      	str	r2, [r3, #0]
 8013476:	6872      	ldr	r2, [r6, #4]
 8013478:	605a      	str	r2, [r3, #4]
 801347a:	68b2      	ldr	r2, [r6, #8]
 801347c:	609a      	str	r2, [r3, #8]
 801347e:	463e      	mov	r6, r7
 8013480:	4674      	mov	r4, lr
 8013482:	f8da 3004 	ldr.w	r3, [sl, #4]
 8013486:	46d0      	mov	r8, sl
 8013488:	e740      	b.n	801330c <_realloc_r+0x140>
 801348a:	eb08 0205 	add.w	r2, r8, r5
 801348e:	1b4b      	subs	r3, r1, r5
 8013490:	f043 0301 	orr.w	r3, r3, #1
 8013494:	f8cb 2008 	str.w	r2, [fp, #8]
 8013498:	6053      	str	r3, [r2, #4]
 801349a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801349e:	f003 0301 	and.w	r3, r3, #1
 80134a2:	431d      	orrs	r5, r3
 80134a4:	4648      	mov	r0, r9
 80134a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80134aa:	f7ff fb99 	bl	8012be0 <__malloc_unlock>
 80134ae:	4630      	mov	r0, r6
 80134b0:	e73d      	b.n	801332e <_realloc_r+0x162>
 80134b2:	4631      	mov	r1, r6
 80134b4:	f7fb ff04 	bl	800f2c0 <memmove>
 80134b8:	e76c      	b.n	8013394 <_realloc_r+0x1c8>
 80134ba:	68b3      	ldr	r3, [r6, #8]
 80134bc:	6083      	str	r3, [r0, #8]
 80134be:	68f3      	ldr	r3, [r6, #12]
 80134c0:	60c3      	str	r3, [r0, #12]
 80134c2:	2a24      	cmp	r2, #36	; 0x24
 80134c4:	d02c      	beq.n	8013520 <_realloc_r+0x354>
 80134c6:	f100 0310 	add.w	r3, r0, #16
 80134ca:	f106 0210 	add.w	r2, r6, #16
 80134ce:	e75b      	b.n	8013388 <_realloc_r+0x1bc>
 80134d0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80134d4:	f022 0203 	bic.w	r2, r2, #3
 80134d8:	4414      	add	r4, r2
 80134da:	e717      	b.n	801330c <_realloc_r+0x140>
 80134dc:	4631      	mov	r1, r6
 80134de:	4638      	mov	r0, r7
 80134e0:	4674      	mov	r4, lr
 80134e2:	463e      	mov	r6, r7
 80134e4:	f7fb feec 	bl	800f2c0 <memmove>
 80134e8:	46d0      	mov	r8, sl
 80134ea:	f8da 3004 	ldr.w	r3, [sl, #4]
 80134ee:	e70d      	b.n	801330c <_realloc_r+0x140>
 80134f0:	463a      	mov	r2, r7
 80134f2:	e700      	b.n	80132f6 <_realloc_r+0x12a>
 80134f4:	4631      	mov	r1, r6
 80134f6:	4638      	mov	r0, r7
 80134f8:	461c      	mov	r4, r3
 80134fa:	463e      	mov	r6, r7
 80134fc:	f7fb fee0 	bl	800f2c0 <memmove>
 8013500:	46d0      	mov	r8, sl
 8013502:	f8da 3004 	ldr.w	r3, [sl, #4]
 8013506:	e701      	b.n	801330c <_realloc_r+0x140>
 8013508:	68b3      	ldr	r3, [r6, #8]
 801350a:	f8ca 3010 	str.w	r3, [sl, #16]
 801350e:	68f3      	ldr	r3, [r6, #12]
 8013510:	f8ca 3014 	str.w	r3, [sl, #20]
 8013514:	2a24      	cmp	r2, #36	; 0x24
 8013516:	d018      	beq.n	801354a <_realloc_r+0x37e>
 8013518:	3610      	adds	r6, #16
 801351a:	f10a 0318 	add.w	r3, sl, #24
 801351e:	e7a8      	b.n	8013472 <_realloc_r+0x2a6>
 8013520:	6933      	ldr	r3, [r6, #16]
 8013522:	6103      	str	r3, [r0, #16]
 8013524:	6973      	ldr	r3, [r6, #20]
 8013526:	6143      	str	r3, [r0, #20]
 8013528:	f106 0218 	add.w	r2, r6, #24
 801352c:	f100 0318 	add.w	r3, r0, #24
 8013530:	e72a      	b.n	8013388 <_realloc_r+0x1bc>
 8013532:	68b1      	ldr	r1, [r6, #8]
 8013534:	f8ca 1010 	str.w	r1, [sl, #16]
 8013538:	68f1      	ldr	r1, [r6, #12]
 801353a:	f8ca 1014 	str.w	r1, [sl, #20]
 801353e:	2a24      	cmp	r2, #36	; 0x24
 8013540:	d00f      	beq.n	8013562 <_realloc_r+0x396>
 8013542:	3610      	adds	r6, #16
 8013544:	f10a 0218 	add.w	r2, sl, #24
 8013548:	e6d5      	b.n	80132f6 <_realloc_r+0x12a>
 801354a:	6933      	ldr	r3, [r6, #16]
 801354c:	f8ca 3018 	str.w	r3, [sl, #24]
 8013550:	6973      	ldr	r3, [r6, #20]
 8013552:	f8ca 301c 	str.w	r3, [sl, #28]
 8013556:	3618      	adds	r6, #24
 8013558:	f10a 0320 	add.w	r3, sl, #32
 801355c:	e789      	b.n	8013472 <_realloc_r+0x2a6>
 801355e:	463b      	mov	r3, r7
 8013560:	e760      	b.n	8013424 <_realloc_r+0x258>
 8013562:	6932      	ldr	r2, [r6, #16]
 8013564:	f8ca 2018 	str.w	r2, [sl, #24]
 8013568:	6972      	ldr	r2, [r6, #20]
 801356a:	f8ca 201c 	str.w	r2, [sl, #28]
 801356e:	3618      	adds	r6, #24
 8013570:	f10a 0220 	add.w	r2, sl, #32
 8013574:	e6bf      	b.n	80132f6 <_realloc_r+0x12a>
 8013576:	4631      	mov	r1, r6
 8013578:	4638      	mov	r0, r7
 801357a:	f8cd c004 	str.w	ip, [sp, #4]
 801357e:	f7fb fe9f 	bl	800f2c0 <memmove>
 8013582:	f8dd c004 	ldr.w	ip, [sp, #4]
 8013586:	e753      	b.n	8013430 <_realloc_r+0x264>
 8013588:	68b3      	ldr	r3, [r6, #8]
 801358a:	f8ca 3010 	str.w	r3, [sl, #16]
 801358e:	68f3      	ldr	r3, [r6, #12]
 8013590:	f8ca 3014 	str.w	r3, [sl, #20]
 8013594:	2a24      	cmp	r2, #36	; 0x24
 8013596:	d003      	beq.n	80135a0 <_realloc_r+0x3d4>
 8013598:	3610      	adds	r6, #16
 801359a:	f10a 0318 	add.w	r3, sl, #24
 801359e:	e741      	b.n	8013424 <_realloc_r+0x258>
 80135a0:	6933      	ldr	r3, [r6, #16]
 80135a2:	f8ca 3018 	str.w	r3, [sl, #24]
 80135a6:	6973      	ldr	r3, [r6, #20]
 80135a8:	f8ca 301c 	str.w	r3, [sl, #28]
 80135ac:	3618      	adds	r6, #24
 80135ae:	f10a 0320 	add.w	r3, sl, #32
 80135b2:	e737      	b.n	8013424 <_realloc_r+0x258>
 80135b4:	1ffe8d10 	.word	0x1ffe8d10

080135b8 <_sbrk_r>:
 80135b8:	b538      	push	{r3, r4, r5, lr}
 80135ba:	4c07      	ldr	r4, [pc, #28]	; (80135d8 <_sbrk_r+0x20>)
 80135bc:	2300      	movs	r3, #0
 80135be:	4605      	mov	r5, r0
 80135c0:	4608      	mov	r0, r1
 80135c2:	6023      	str	r3, [r4, #0]
 80135c4:	f7f1 fba8 	bl	8004d18 <_sbrk>
 80135c8:	1c43      	adds	r3, r0, #1
 80135ca:	d000      	beq.n	80135ce <_sbrk_r+0x16>
 80135cc:	bd38      	pop	{r3, r4, r5, pc}
 80135ce:	6823      	ldr	r3, [r4, #0]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d0fb      	beq.n	80135cc <_sbrk_r+0x14>
 80135d4:	602b      	str	r3, [r5, #0]
 80135d6:	bd38      	pop	{r3, r4, r5, pc}
 80135d8:	1fff0458 	.word	0x1fff0458

080135dc <__sread>:
 80135dc:	b510      	push	{r4, lr}
 80135de:	460c      	mov	r4, r1
 80135e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135e4:	f000 f9b8 	bl	8013958 <_read_r>
 80135e8:	2800      	cmp	r0, #0
 80135ea:	db03      	blt.n	80135f4 <__sread+0x18>
 80135ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80135ee:	4403      	add	r3, r0
 80135f0:	6523      	str	r3, [r4, #80]	; 0x50
 80135f2:	bd10      	pop	{r4, pc}
 80135f4:	89a3      	ldrh	r3, [r4, #12]
 80135f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80135fa:	81a3      	strh	r3, [r4, #12]
 80135fc:	bd10      	pop	{r4, pc}
 80135fe:	bf00      	nop

08013600 <__swrite>:
 8013600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013604:	4616      	mov	r6, r2
 8013606:	898a      	ldrh	r2, [r1, #12]
 8013608:	461d      	mov	r5, r3
 801360a:	05d3      	lsls	r3, r2, #23
 801360c:	460c      	mov	r4, r1
 801360e:	4607      	mov	r7, r0
 8013610:	d506      	bpl.n	8013620 <__swrite+0x20>
 8013612:	2200      	movs	r2, #0
 8013614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013618:	2302      	movs	r3, #2
 801361a:	f000 f989 	bl	8013930 <_lseek_r>
 801361e:	89a2      	ldrh	r2, [r4, #12]
 8013620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013624:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013628:	81a2      	strh	r2, [r4, #12]
 801362a:	4638      	mov	r0, r7
 801362c:	4632      	mov	r2, r6
 801362e:	462b      	mov	r3, r5
 8013630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013634:	f000 b85c 	b.w	80136f0 <_write_r>

08013638 <__sseek>:
 8013638:	b510      	push	{r4, lr}
 801363a:	460c      	mov	r4, r1
 801363c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013640:	f000 f976 	bl	8013930 <_lseek_r>
 8013644:	89a3      	ldrh	r3, [r4, #12]
 8013646:	1c42      	adds	r2, r0, #1
 8013648:	bf0e      	itee	eq
 801364a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801364e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013652:	6520      	strne	r0, [r4, #80]	; 0x50
 8013654:	81a3      	strh	r3, [r4, #12]
 8013656:	bd10      	pop	{r4, pc}

08013658 <__sclose>:
 8013658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801365c:	f000 b88c 	b.w	8013778 <_close_r>

08013660 <__sprint_r.part.0>:
 8013660:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8013662:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013666:	049c      	lsls	r4, r3, #18
 8013668:	460f      	mov	r7, r1
 801366a:	4692      	mov	sl, r2
 801366c:	d52b      	bpl.n	80136c6 <__sprint_r.part.0+0x66>
 801366e:	6893      	ldr	r3, [r2, #8]
 8013670:	6812      	ldr	r2, [r2, #0]
 8013672:	b333      	cbz	r3, 80136c2 <__sprint_r.part.0+0x62>
 8013674:	4680      	mov	r8, r0
 8013676:	f102 0908 	add.w	r9, r2, #8
 801367a:	e919 0060 	ldmdb	r9, {r5, r6}
 801367e:	08b6      	lsrs	r6, r6, #2
 8013680:	d017      	beq.n	80136b2 <__sprint_r.part.0+0x52>
 8013682:	3d04      	subs	r5, #4
 8013684:	2400      	movs	r4, #0
 8013686:	e001      	b.n	801368c <__sprint_r.part.0+0x2c>
 8013688:	42a6      	cmp	r6, r4
 801368a:	d010      	beq.n	80136ae <__sprint_r.part.0+0x4e>
 801368c:	4640      	mov	r0, r8
 801368e:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8013692:	463a      	mov	r2, r7
 8013694:	f000 f8c4 	bl	8013820 <_fputwc_r>
 8013698:	1c43      	adds	r3, r0, #1
 801369a:	f104 0401 	add.w	r4, r4, #1
 801369e:	d1f3      	bne.n	8013688 <__sprint_r.part.0+0x28>
 80136a0:	2300      	movs	r3, #0
 80136a2:	f8ca 3008 	str.w	r3, [sl, #8]
 80136a6:	f8ca 3004 	str.w	r3, [sl, #4]
 80136aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136ae:	f8da 3008 	ldr.w	r3, [sl, #8]
 80136b2:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 80136b6:	f8ca 3008 	str.w	r3, [sl, #8]
 80136ba:	f109 0908 	add.w	r9, r9, #8
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d1db      	bne.n	801367a <__sprint_r.part.0+0x1a>
 80136c2:	2000      	movs	r0, #0
 80136c4:	e7ec      	b.n	80136a0 <__sprint_r.part.0+0x40>
 80136c6:	f7fe fd7d 	bl	80121c4 <__sfvwrite_r>
 80136ca:	2300      	movs	r3, #0
 80136cc:	f8ca 3008 	str.w	r3, [sl, #8]
 80136d0:	f8ca 3004 	str.w	r3, [sl, #4]
 80136d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080136d8 <__sprint_r>:
 80136d8:	6893      	ldr	r3, [r2, #8]
 80136da:	b410      	push	{r4}
 80136dc:	b11b      	cbz	r3, 80136e6 <__sprint_r+0xe>
 80136de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136e2:	f7ff bfbd 	b.w	8013660 <__sprint_r.part.0>
 80136e6:	4618      	mov	r0, r3
 80136e8:	6053      	str	r3, [r2, #4]
 80136ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136ee:	4770      	bx	lr

080136f0 <_write_r>:
 80136f0:	b570      	push	{r4, r5, r6, lr}
 80136f2:	4c08      	ldr	r4, [pc, #32]	; (8013714 <_write_r+0x24>)
 80136f4:	4606      	mov	r6, r0
 80136f6:	2500      	movs	r5, #0
 80136f8:	4608      	mov	r0, r1
 80136fa:	4611      	mov	r1, r2
 80136fc:	461a      	mov	r2, r3
 80136fe:	6025      	str	r5, [r4, #0]
 8013700:	f000 fad4 	bl	8013cac <_write>
 8013704:	1c43      	adds	r3, r0, #1
 8013706:	d000      	beq.n	801370a <_write_r+0x1a>
 8013708:	bd70      	pop	{r4, r5, r6, pc}
 801370a:	6823      	ldr	r3, [r4, #0]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d0fb      	beq.n	8013708 <_write_r+0x18>
 8013710:	6033      	str	r3, [r6, #0]
 8013712:	bd70      	pop	{r4, r5, r6, pc}
 8013714:	1fff0458 	.word	0x1fff0458

08013718 <_calloc_r>:
 8013718:	b510      	push	{r4, lr}
 801371a:	fb02 f101 	mul.w	r1, r2, r1
 801371e:	f7fe ff85 	bl	801262c <_malloc_r>
 8013722:	4604      	mov	r4, r0
 8013724:	b168      	cbz	r0, 8013742 <_calloc_r+0x2a>
 8013726:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801372a:	f022 0203 	bic.w	r2, r2, #3
 801372e:	3a04      	subs	r2, #4
 8013730:	2a24      	cmp	r2, #36	; 0x24
 8013732:	d818      	bhi.n	8013766 <_calloc_r+0x4e>
 8013734:	2a13      	cmp	r2, #19
 8013736:	d806      	bhi.n	8013746 <_calloc_r+0x2e>
 8013738:	4603      	mov	r3, r0
 801373a:	2200      	movs	r2, #0
 801373c:	601a      	str	r2, [r3, #0]
 801373e:	605a      	str	r2, [r3, #4]
 8013740:	609a      	str	r2, [r3, #8]
 8013742:	4620      	mov	r0, r4
 8013744:	bd10      	pop	{r4, pc}
 8013746:	2300      	movs	r3, #0
 8013748:	2a1b      	cmp	r2, #27
 801374a:	6003      	str	r3, [r0, #0]
 801374c:	6043      	str	r3, [r0, #4]
 801374e:	d90f      	bls.n	8013770 <_calloc_r+0x58>
 8013750:	2a24      	cmp	r2, #36	; 0x24
 8013752:	6083      	str	r3, [r0, #8]
 8013754:	60c3      	str	r3, [r0, #12]
 8013756:	bf05      	ittet	eq
 8013758:	6103      	streq	r3, [r0, #16]
 801375a:	6143      	streq	r3, [r0, #20]
 801375c:	f100 0310 	addne.w	r3, r0, #16
 8013760:	f100 0318 	addeq.w	r3, r0, #24
 8013764:	e7e9      	b.n	801373a <_calloc_r+0x22>
 8013766:	2100      	movs	r1, #0
 8013768:	f7fb fe0e 	bl	800f388 <memset>
 801376c:	4620      	mov	r0, r4
 801376e:	bd10      	pop	{r4, pc}
 8013770:	f100 0308 	add.w	r3, r0, #8
 8013774:	e7e1      	b.n	801373a <_calloc_r+0x22>
 8013776:	bf00      	nop

08013778 <_close_r>:
 8013778:	b538      	push	{r3, r4, r5, lr}
 801377a:	4c07      	ldr	r4, [pc, #28]	; (8013798 <_close_r+0x20>)
 801377c:	2300      	movs	r3, #0
 801377e:	4605      	mov	r5, r0
 8013780:	4608      	mov	r0, r1
 8013782:	6023      	str	r3, [r4, #0]
 8013784:	f000 fabe 	bl	8013d04 <_close>
 8013788:	1c43      	adds	r3, r0, #1
 801378a:	d000      	beq.n	801378e <_close_r+0x16>
 801378c:	bd38      	pop	{r3, r4, r5, pc}
 801378e:	6823      	ldr	r3, [r4, #0]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d0fb      	beq.n	801378c <_close_r+0x14>
 8013794:	602b      	str	r3, [r5, #0]
 8013796:	bd38      	pop	{r3, r4, r5, pc}
 8013798:	1fff0458 	.word	0x1fff0458

0801379c <_fclose_r>:
 801379c:	2900      	cmp	r1, #0
 801379e:	d03d      	beq.n	801381c <_fclose_r+0x80>
 80137a0:	b570      	push	{r4, r5, r6, lr}
 80137a2:	4605      	mov	r5, r0
 80137a4:	460c      	mov	r4, r1
 80137a6:	b108      	cbz	r0, 80137ac <_fclose_r+0x10>
 80137a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80137aa:	b37b      	cbz	r3, 801380c <_fclose_r+0x70>
 80137ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137b0:	b90b      	cbnz	r3, 80137b6 <_fclose_r+0x1a>
 80137b2:	2000      	movs	r0, #0
 80137b4:	bd70      	pop	{r4, r5, r6, pc}
 80137b6:	4628      	mov	r0, r5
 80137b8:	4621      	mov	r1, r4
 80137ba:	f7fe fa95 	bl	8011ce8 <__sflush_r>
 80137be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80137c0:	4606      	mov	r6, r0
 80137c2:	b133      	cbz	r3, 80137d2 <_fclose_r+0x36>
 80137c4:	4628      	mov	r0, r5
 80137c6:	69e1      	ldr	r1, [r4, #28]
 80137c8:	4798      	blx	r3
 80137ca:	2800      	cmp	r0, #0
 80137cc:	bfb8      	it	lt
 80137ce:	f04f 36ff 	movlt.w	r6, #4294967295
 80137d2:	89a3      	ldrh	r3, [r4, #12]
 80137d4:	061b      	lsls	r3, r3, #24
 80137d6:	d41c      	bmi.n	8013812 <_fclose_r+0x76>
 80137d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80137da:	b141      	cbz	r1, 80137ee <_fclose_r+0x52>
 80137dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80137e0:	4299      	cmp	r1, r3
 80137e2:	d002      	beq.n	80137ea <_fclose_r+0x4e>
 80137e4:	4628      	mov	r0, r5
 80137e6:	f7fe fc15 	bl	8012014 <_free_r>
 80137ea:	2300      	movs	r3, #0
 80137ec:	6323      	str	r3, [r4, #48]	; 0x30
 80137ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80137f0:	b121      	cbz	r1, 80137fc <_fclose_r+0x60>
 80137f2:	4628      	mov	r0, r5
 80137f4:	f7fe fc0e 	bl	8012014 <_free_r>
 80137f8:	2300      	movs	r3, #0
 80137fa:	6463      	str	r3, [r4, #68]	; 0x44
 80137fc:	f7fe fbb8 	bl	8011f70 <__sfp_lock_acquire>
 8013800:	2300      	movs	r3, #0
 8013802:	81a3      	strh	r3, [r4, #12]
 8013804:	f7fe fbb6 	bl	8011f74 <__sfp_lock_release>
 8013808:	4630      	mov	r0, r6
 801380a:	bd70      	pop	{r4, r5, r6, pc}
 801380c:	f7fe fbaa 	bl	8011f64 <__sinit>
 8013810:	e7cc      	b.n	80137ac <_fclose_r+0x10>
 8013812:	4628      	mov	r0, r5
 8013814:	6921      	ldr	r1, [r4, #16]
 8013816:	f7fe fbfd 	bl	8012014 <_free_r>
 801381a:	e7dd      	b.n	80137d8 <_fclose_r+0x3c>
 801381c:	2000      	movs	r0, #0
 801381e:	4770      	bx	lr

08013820 <_fputwc_r>:
 8013820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013824:	8993      	ldrh	r3, [r2, #12]
 8013826:	4614      	mov	r4, r2
 8013828:	049a      	lsls	r2, r3, #18
 801382a:	b082      	sub	sp, #8
 801382c:	4607      	mov	r7, r0
 801382e:	460e      	mov	r6, r1
 8013830:	d406      	bmi.n	8013840 <_fputwc_r+0x20>
 8013832:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013834:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801383c:	81a3      	strh	r3, [r4, #12]
 801383e:	6662      	str	r2, [r4, #100]	; 0x64
 8013840:	f7fe fe7a 	bl	8012538 <__locale_mb_cur_max>
 8013844:	2801      	cmp	r0, #1
 8013846:	d041      	beq.n	80138cc <_fputwc_r+0xac>
 8013848:	4638      	mov	r0, r7
 801384a:	a901      	add	r1, sp, #4
 801384c:	4632      	mov	r2, r6
 801384e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8013852:	f000 f8e9 	bl	8013a28 <_wcrtomb_r>
 8013856:	f1b0 3fff 	cmp.w	r0, #4294967295
 801385a:	4680      	mov	r8, r0
 801385c:	d02f      	beq.n	80138be <_fputwc_r+0x9e>
 801385e:	2800      	cmp	r0, #0
 8013860:	d03c      	beq.n	80138dc <_fputwc_r+0xbc>
 8013862:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013866:	2500      	movs	r5, #0
 8013868:	e009      	b.n	801387e <_fputwc_r+0x5e>
 801386a:	6823      	ldr	r3, [r4, #0]
 801386c:	7019      	strb	r1, [r3, #0]
 801386e:	6823      	ldr	r3, [r4, #0]
 8013870:	3301      	adds	r3, #1
 8013872:	6023      	str	r3, [r4, #0]
 8013874:	3501      	adds	r5, #1
 8013876:	45a8      	cmp	r8, r5
 8013878:	d930      	bls.n	80138dc <_fputwc_r+0xbc>
 801387a:	ab01      	add	r3, sp, #4
 801387c:	5d59      	ldrb	r1, [r3, r5]
 801387e:	68a3      	ldr	r3, [r4, #8]
 8013880:	3b01      	subs	r3, #1
 8013882:	2b00      	cmp	r3, #0
 8013884:	60a3      	str	r3, [r4, #8]
 8013886:	daf0      	bge.n	801386a <_fputwc_r+0x4a>
 8013888:	69a2      	ldr	r2, [r4, #24]
 801388a:	4293      	cmp	r3, r2
 801388c:	db07      	blt.n	801389e <_fputwc_r+0x7e>
 801388e:	6823      	ldr	r3, [r4, #0]
 8013890:	7019      	strb	r1, [r3, #0]
 8013892:	6823      	ldr	r3, [r4, #0]
 8013894:	7819      	ldrb	r1, [r3, #0]
 8013896:	290a      	cmp	r1, #10
 8013898:	f103 0301 	add.w	r3, r3, #1
 801389c:	d1e9      	bne.n	8013872 <_fputwc_r+0x52>
 801389e:	4638      	mov	r0, r7
 80138a0:	4622      	mov	r2, r4
 80138a2:	f000 f86d 	bl	8013980 <__swbuf_r>
 80138a6:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80138aa:	fab0 f080 	clz	r0, r0
 80138ae:	0940      	lsrs	r0, r0, #5
 80138b0:	2800      	cmp	r0, #0
 80138b2:	d0df      	beq.n	8013874 <_fputwc_r+0x54>
 80138b4:	f04f 30ff 	mov.w	r0, #4294967295
 80138b8:	b002      	add	sp, #8
 80138ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138be:	89a3      	ldrh	r3, [r4, #12]
 80138c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138c4:	81a3      	strh	r3, [r4, #12]
 80138c6:	b002      	add	sp, #8
 80138c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138cc:	1e73      	subs	r3, r6, #1
 80138ce:	2bfe      	cmp	r3, #254	; 0xfe
 80138d0:	d8ba      	bhi.n	8013848 <_fputwc_r+0x28>
 80138d2:	b2f1      	uxtb	r1, r6
 80138d4:	4680      	mov	r8, r0
 80138d6:	f88d 1004 	strb.w	r1, [sp, #4]
 80138da:	e7c4      	b.n	8013866 <_fputwc_r+0x46>
 80138dc:	4630      	mov	r0, r6
 80138de:	b002      	add	sp, #8
 80138e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080138e4 <_fstat_r>:
 80138e4:	b538      	push	{r3, r4, r5, lr}
 80138e6:	4c08      	ldr	r4, [pc, #32]	; (8013908 <_fstat_r+0x24>)
 80138e8:	2300      	movs	r3, #0
 80138ea:	4605      	mov	r5, r0
 80138ec:	4608      	mov	r0, r1
 80138ee:	4611      	mov	r1, r2
 80138f0:	6023      	str	r3, [r4, #0]
 80138f2:	f000 fa5f 	bl	8013db4 <_fstat>
 80138f6:	1c43      	adds	r3, r0, #1
 80138f8:	d000      	beq.n	80138fc <_fstat_r+0x18>
 80138fa:	bd38      	pop	{r3, r4, r5, pc}
 80138fc:	6823      	ldr	r3, [r4, #0]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d0fb      	beq.n	80138fa <_fstat_r+0x16>
 8013902:	602b      	str	r3, [r5, #0]
 8013904:	bd38      	pop	{r3, r4, r5, pc}
 8013906:	bf00      	nop
 8013908:	1fff0458 	.word	0x1fff0458

0801390c <_isatty_r>:
 801390c:	b538      	push	{r3, r4, r5, lr}
 801390e:	4c07      	ldr	r4, [pc, #28]	; (801392c <_isatty_r+0x20>)
 8013910:	2300      	movs	r3, #0
 8013912:	4605      	mov	r5, r0
 8013914:	4608      	mov	r0, r1
 8013916:	6023      	str	r3, [r4, #0]
 8013918:	f000 fa5a 	bl	8013dd0 <_isatty>
 801391c:	1c43      	adds	r3, r0, #1
 801391e:	d000      	beq.n	8013922 <_isatty_r+0x16>
 8013920:	bd38      	pop	{r3, r4, r5, pc}
 8013922:	6823      	ldr	r3, [r4, #0]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d0fb      	beq.n	8013920 <_isatty_r+0x14>
 8013928:	602b      	str	r3, [r5, #0]
 801392a:	bd38      	pop	{r3, r4, r5, pc}
 801392c:	1fff0458 	.word	0x1fff0458

08013930 <_lseek_r>:
 8013930:	b570      	push	{r4, r5, r6, lr}
 8013932:	4c08      	ldr	r4, [pc, #32]	; (8013954 <_lseek_r+0x24>)
 8013934:	4606      	mov	r6, r0
 8013936:	2500      	movs	r5, #0
 8013938:	4608      	mov	r0, r1
 801393a:	4611      	mov	r1, r2
 801393c:	461a      	mov	r2, r3
 801393e:	6025      	str	r5, [r4, #0]
 8013940:	f000 f99e 	bl	8013c80 <_lseek>
 8013944:	1c43      	adds	r3, r0, #1
 8013946:	d000      	beq.n	801394a <_lseek_r+0x1a>
 8013948:	bd70      	pop	{r4, r5, r6, pc}
 801394a:	6823      	ldr	r3, [r4, #0]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d0fb      	beq.n	8013948 <_lseek_r+0x18>
 8013950:	6033      	str	r3, [r6, #0]
 8013952:	bd70      	pop	{r4, r5, r6, pc}
 8013954:	1fff0458 	.word	0x1fff0458

08013958 <_read_r>:
 8013958:	b570      	push	{r4, r5, r6, lr}
 801395a:	4c08      	ldr	r4, [pc, #32]	; (801397c <_read_r+0x24>)
 801395c:	4606      	mov	r6, r0
 801395e:	2500      	movs	r5, #0
 8013960:	4608      	mov	r0, r1
 8013962:	4611      	mov	r1, r2
 8013964:	461a      	mov	r2, r3
 8013966:	6025      	str	r5, [r4, #0]
 8013968:	f000 f926 	bl	8013bb8 <_read>
 801396c:	1c43      	adds	r3, r0, #1
 801396e:	d000      	beq.n	8013972 <_read_r+0x1a>
 8013970:	bd70      	pop	{r4, r5, r6, pc}
 8013972:	6823      	ldr	r3, [r4, #0]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d0fb      	beq.n	8013970 <_read_r+0x18>
 8013978:	6033      	str	r3, [r6, #0]
 801397a:	bd70      	pop	{r4, r5, r6, pc}
 801397c:	1fff0458 	.word	0x1fff0458

08013980 <__swbuf_r>:
 8013980:	b570      	push	{r4, r5, r6, lr}
 8013982:	460d      	mov	r5, r1
 8013984:	4614      	mov	r4, r2
 8013986:	4606      	mov	r6, r0
 8013988:	b110      	cbz	r0, 8013990 <__swbuf_r+0x10>
 801398a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801398c:	2b00      	cmp	r3, #0
 801398e:	d048      	beq.n	8013a22 <__swbuf_r+0xa2>
 8013990:	89a2      	ldrh	r2, [r4, #12]
 8013992:	69a3      	ldr	r3, [r4, #24]
 8013994:	60a3      	str	r3, [r4, #8]
 8013996:	b291      	uxth	r1, r2
 8013998:	0708      	lsls	r0, r1, #28
 801399a:	d538      	bpl.n	8013a0e <__swbuf_r+0x8e>
 801399c:	6923      	ldr	r3, [r4, #16]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d035      	beq.n	8013a0e <__swbuf_r+0x8e>
 80139a2:	0489      	lsls	r1, r1, #18
 80139a4:	b2ed      	uxtb	r5, r5
 80139a6:	d515      	bpl.n	80139d4 <__swbuf_r+0x54>
 80139a8:	6822      	ldr	r2, [r4, #0]
 80139aa:	6961      	ldr	r1, [r4, #20]
 80139ac:	1ad3      	subs	r3, r2, r3
 80139ae:	428b      	cmp	r3, r1
 80139b0:	da1c      	bge.n	80139ec <__swbuf_r+0x6c>
 80139b2:	3301      	adds	r3, #1
 80139b4:	68a1      	ldr	r1, [r4, #8]
 80139b6:	1c50      	adds	r0, r2, #1
 80139b8:	3901      	subs	r1, #1
 80139ba:	60a1      	str	r1, [r4, #8]
 80139bc:	6020      	str	r0, [r4, #0]
 80139be:	7015      	strb	r5, [r2, #0]
 80139c0:	6962      	ldr	r2, [r4, #20]
 80139c2:	429a      	cmp	r2, r3
 80139c4:	d01a      	beq.n	80139fc <__swbuf_r+0x7c>
 80139c6:	89a3      	ldrh	r3, [r4, #12]
 80139c8:	07db      	lsls	r3, r3, #31
 80139ca:	d501      	bpl.n	80139d0 <__swbuf_r+0x50>
 80139cc:	2d0a      	cmp	r5, #10
 80139ce:	d015      	beq.n	80139fc <__swbuf_r+0x7c>
 80139d0:	4628      	mov	r0, r5
 80139d2:	bd70      	pop	{r4, r5, r6, pc}
 80139d4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80139d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80139da:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80139de:	81a2      	strh	r2, [r4, #12]
 80139e0:	6822      	ldr	r2, [r4, #0]
 80139e2:	6661      	str	r1, [r4, #100]	; 0x64
 80139e4:	6961      	ldr	r1, [r4, #20]
 80139e6:	1ad3      	subs	r3, r2, r3
 80139e8:	428b      	cmp	r3, r1
 80139ea:	dbe2      	blt.n	80139b2 <__swbuf_r+0x32>
 80139ec:	4630      	mov	r0, r6
 80139ee:	4621      	mov	r1, r4
 80139f0:	f7fe fa24 	bl	8011e3c <_fflush_r>
 80139f4:	b940      	cbnz	r0, 8013a08 <__swbuf_r+0x88>
 80139f6:	6822      	ldr	r2, [r4, #0]
 80139f8:	2301      	movs	r3, #1
 80139fa:	e7db      	b.n	80139b4 <__swbuf_r+0x34>
 80139fc:	4630      	mov	r0, r6
 80139fe:	4621      	mov	r1, r4
 8013a00:	f7fe fa1c 	bl	8011e3c <_fflush_r>
 8013a04:	2800      	cmp	r0, #0
 8013a06:	d0e3      	beq.n	80139d0 <__swbuf_r+0x50>
 8013a08:	f04f 30ff 	mov.w	r0, #4294967295
 8013a0c:	bd70      	pop	{r4, r5, r6, pc}
 8013a0e:	4630      	mov	r0, r6
 8013a10:	4621      	mov	r1, r4
 8013a12:	f7fd f929 	bl	8010c68 <__swsetup_r>
 8013a16:	2800      	cmp	r0, #0
 8013a18:	d1f6      	bne.n	8013a08 <__swbuf_r+0x88>
 8013a1a:	89a2      	ldrh	r2, [r4, #12]
 8013a1c:	6923      	ldr	r3, [r4, #16]
 8013a1e:	b291      	uxth	r1, r2
 8013a20:	e7bf      	b.n	80139a2 <__swbuf_r+0x22>
 8013a22:	f7fe fa9f 	bl	8011f64 <__sinit>
 8013a26:	e7b3      	b.n	8013990 <__swbuf_r+0x10>

08013a28 <_wcrtomb_r>:
 8013a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a2c:	4605      	mov	r5, r0
 8013a2e:	b086      	sub	sp, #24
 8013a30:	461e      	mov	r6, r3
 8013a32:	460c      	mov	r4, r1
 8013a34:	b1a1      	cbz	r1, 8013a60 <_wcrtomb_r+0x38>
 8013a36:	4b10      	ldr	r3, [pc, #64]	; (8013a78 <_wcrtomb_r+0x50>)
 8013a38:	4617      	mov	r7, r2
 8013a3a:	f8d3 8000 	ldr.w	r8, [r3]
 8013a3e:	f7fe fd77 	bl	8012530 <__locale_charset>
 8013a42:	9600      	str	r6, [sp, #0]
 8013a44:	4603      	mov	r3, r0
 8013a46:	4621      	mov	r1, r4
 8013a48:	463a      	mov	r2, r7
 8013a4a:	4628      	mov	r0, r5
 8013a4c:	47c0      	blx	r8
 8013a4e:	1c43      	adds	r3, r0, #1
 8013a50:	d103      	bne.n	8013a5a <_wcrtomb_r+0x32>
 8013a52:	2200      	movs	r2, #0
 8013a54:	238a      	movs	r3, #138	; 0x8a
 8013a56:	6032      	str	r2, [r6, #0]
 8013a58:	602b      	str	r3, [r5, #0]
 8013a5a:	b006      	add	sp, #24
 8013a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a60:	4b05      	ldr	r3, [pc, #20]	; (8013a78 <_wcrtomb_r+0x50>)
 8013a62:	681f      	ldr	r7, [r3, #0]
 8013a64:	f7fe fd64 	bl	8012530 <__locale_charset>
 8013a68:	9600      	str	r6, [sp, #0]
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	4622      	mov	r2, r4
 8013a6e:	4628      	mov	r0, r5
 8013a70:	a903      	add	r1, sp, #12
 8013a72:	47b8      	blx	r7
 8013a74:	e7eb      	b.n	8013a4e <_wcrtomb_r+0x26>
 8013a76:	bf00      	nop
 8013a78:	1ffe9120 	.word	0x1ffe9120

08013a7c <__ascii_wctomb>:
 8013a7c:	b121      	cbz	r1, 8013a88 <__ascii_wctomb+0xc>
 8013a7e:	2aff      	cmp	r2, #255	; 0xff
 8013a80:	d804      	bhi.n	8013a8c <__ascii_wctomb+0x10>
 8013a82:	700a      	strb	r2, [r1, #0]
 8013a84:	2001      	movs	r0, #1
 8013a86:	4770      	bx	lr
 8013a88:	4608      	mov	r0, r1
 8013a8a:	4770      	bx	lr
 8013a8c:	238a      	movs	r3, #138	; 0x8a
 8013a8e:	6003      	str	r3, [r0, #0]
 8013a90:	f04f 30ff 	mov.w	r0, #4294967295
 8013a94:	4770      	bx	lr
 8013a96:	bf00      	nop

08013a98 <findslot>:
 8013a98:	4b0b      	ldr	r3, [pc, #44]	; (8013ac8 <findslot+0x30>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	b510      	push	{r4, lr}
 8013a9e:	4604      	mov	r4, r0
 8013aa0:	b10b      	cbz	r3, 8013aa6 <findslot+0xe>
 8013aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013aa4:	b14a      	cbz	r2, 8013aba <findslot+0x22>
 8013aa6:	2c13      	cmp	r4, #19
 8013aa8:	d80c      	bhi.n	8013ac4 <findslot+0x2c>
 8013aaa:	4808      	ldr	r0, [pc, #32]	; (8013acc <findslot+0x34>)
 8013aac:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8013ab0:	3301      	adds	r3, #1
 8013ab2:	d007      	beq.n	8013ac4 <findslot+0x2c>
 8013ab4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8013ab8:	bd10      	pop	{r4, pc}
 8013aba:	4618      	mov	r0, r3
 8013abc:	f7fe fa52 	bl	8011f64 <__sinit>
 8013ac0:	2c13      	cmp	r4, #19
 8013ac2:	d9f2      	bls.n	8013aaa <findslot+0x12>
 8013ac4:	2000      	movs	r0, #0
 8013ac6:	bd10      	pop	{r4, pc}
 8013ac8:	1ffe8cb0 	.word	0x1ffe8cb0
 8013acc:	1ffe92f0 	.word	0x1ffe92f0

08013ad0 <checkerror.part.0>:
 8013ad0:	b570      	push	{r4, r5, r6, lr}
 8013ad2:	f7fb fb95 	bl	800f200 <__errno>
 8013ad6:	2413      	movs	r4, #19
 8013ad8:	4605      	mov	r5, r0
 8013ada:	2600      	movs	r6, #0
 8013adc:	4620      	mov	r0, r4
 8013ade:	4631      	mov	r1, r6
 8013ae0:	beab      	bkpt	0x00ab
 8013ae2:	4604      	mov	r4, r0
 8013ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ae8:	602c      	str	r4, [r5, #0]
 8013aea:	bd70      	pop	{r4, r5, r6, pc}

08013aec <initialise_monitor_handles>:
 8013aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013af0:	b084      	sub	sp, #16
 8013af2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8013b88 <initialise_monitor_handles+0x9c>
 8013af6:	f8cd 8004 	str.w	r8, [sp, #4]
 8013afa:	2703      	movs	r7, #3
 8013afc:	2300      	movs	r3, #0
 8013afe:	9703      	str	r7, [sp, #12]
 8013b00:	2401      	movs	r4, #1
 8013b02:	9302      	str	r3, [sp, #8]
 8013b04:	ae01      	add	r6, sp, #4
 8013b06:	4620      	mov	r0, r4
 8013b08:	4631      	mov	r1, r6
 8013b0a:	beab      	bkpt	0x00ab
 8013b0c:	4681      	mov	r9, r0
 8013b0e:	4d1b      	ldr	r5, [pc, #108]	; (8013b7c <initialise_monitor_handles+0x90>)
 8013b10:	f8cd 8004 	str.w	r8, [sp, #4]
 8013b14:	2304      	movs	r3, #4
 8013b16:	9703      	str	r7, [sp, #12]
 8013b18:	f8c5 9000 	str.w	r9, [r5]
 8013b1c:	9302      	str	r3, [sp, #8]
 8013b1e:	4620      	mov	r0, r4
 8013b20:	4631      	mov	r1, r6
 8013b22:	beab      	bkpt	0x00ab
 8013b24:	4682      	mov	sl, r0
 8013b26:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8013b8c <initialise_monitor_handles+0xa0>
 8013b2a:	f8cd 8004 	str.w	r8, [sp, #4]
 8013b2e:	2308      	movs	r3, #8
 8013b30:	9703      	str	r7, [sp, #12]
 8013b32:	f8c9 a000 	str.w	sl, [r9]
 8013b36:	9302      	str	r3, [sp, #8]
 8013b38:	4620      	mov	r0, r4
 8013b3a:	4631      	mov	r1, r6
 8013b3c:	beab      	bkpt	0x00ab
 8013b3e:	4604      	mov	r4, r0
 8013b40:	4b0f      	ldr	r3, [pc, #60]	; (8013b80 <initialise_monitor_handles+0x94>)
 8013b42:	f8d9 6000 	ldr.w	r6, [r9]
 8013b46:	480f      	ldr	r0, [pc, #60]	; (8013b84 <initialise_monitor_handles+0x98>)
 8013b48:	601c      	str	r4, [r3, #0]
 8013b4a:	1c62      	adds	r2, r4, #1
 8013b4c:	bf04      	itt	eq
 8013b4e:	601e      	streq	r6, [r3, #0]
 8013b50:	4634      	moveq	r4, r6
 8013b52:	2300      	movs	r3, #0
 8013b54:	f04f 31ff 	mov.w	r1, #4294967295
 8013b58:	f840 1033 	str.w	r1, [r0, r3, lsl #3]
 8013b5c:	3301      	adds	r3, #1
 8013b5e:	2b14      	cmp	r3, #20
 8013b60:	4a08      	ldr	r2, [pc, #32]	; (8013b84 <initialise_monitor_handles+0x98>)
 8013b62:	d1f9      	bne.n	8013b58 <initialise_monitor_handles+0x6c>
 8013b64:	682b      	ldr	r3, [r5, #0]
 8013b66:	6013      	str	r3, [r2, #0]
 8013b68:	2300      	movs	r3, #0
 8013b6a:	6096      	str	r6, [r2, #8]
 8013b6c:	6114      	str	r4, [r2, #16]
 8013b6e:	6053      	str	r3, [r2, #4]
 8013b70:	60d3      	str	r3, [r2, #12]
 8013b72:	6153      	str	r3, [r2, #20]
 8013b74:	b004      	add	sp, #16
 8013b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b7a:	bf00      	nop
 8013b7c:	1ffe92e8 	.word	0x1ffe92e8
 8013b80:	1ffe92ec 	.word	0x1ffe92ec
 8013b84:	1ffe92f0 	.word	0x1ffe92f0
 8013b88:	08014964 	.word	0x08014964
 8013b8c:	1ffe92e4 	.word	0x1ffe92e4

08013b90 <_swiread>:
 8013b90:	b530      	push	{r4, r5, lr}
 8013b92:	b085      	sub	sp, #20
 8013b94:	2406      	movs	r4, #6
 8013b96:	9001      	str	r0, [sp, #4]
 8013b98:	9102      	str	r1, [sp, #8]
 8013b9a:	9203      	str	r2, [sp, #12]
 8013b9c:	ad01      	add	r5, sp, #4
 8013b9e:	4620      	mov	r0, r4
 8013ba0:	4629      	mov	r1, r5
 8013ba2:	beab      	bkpt	0x00ab
 8013ba4:	4604      	mov	r4, r0
 8013ba6:	1c63      	adds	r3, r4, #1
 8013ba8:	d002      	beq.n	8013bb0 <_swiread+0x20>
 8013baa:	4620      	mov	r0, r4
 8013bac:	b005      	add	sp, #20
 8013bae:	bd30      	pop	{r4, r5, pc}
 8013bb0:	f7ff ff8e 	bl	8013ad0 <checkerror.part.0>
 8013bb4:	b005      	add	sp, #20
 8013bb6:	bd30      	pop	{r4, r5, pc}

08013bb8 <_read>:
 8013bb8:	b570      	push	{r4, r5, r6, lr}
 8013bba:	460e      	mov	r6, r1
 8013bbc:	4615      	mov	r5, r2
 8013bbe:	f7ff ff6b 	bl	8013a98 <findslot>
 8013bc2:	4604      	mov	r4, r0
 8013bc4:	b158      	cbz	r0, 8013bde <_read+0x26>
 8013bc6:	4631      	mov	r1, r6
 8013bc8:	6800      	ldr	r0, [r0, #0]
 8013bca:	462a      	mov	r2, r5
 8013bcc:	f7ff ffe0 	bl	8013b90 <_swiread>
 8013bd0:	1c43      	adds	r3, r0, #1
 8013bd2:	d003      	beq.n	8013bdc <_read+0x24>
 8013bd4:	6863      	ldr	r3, [r4, #4]
 8013bd6:	1a28      	subs	r0, r5, r0
 8013bd8:	4403      	add	r3, r0
 8013bda:	6063      	str	r3, [r4, #4]
 8013bdc:	bd70      	pop	{r4, r5, r6, pc}
 8013bde:	f7fb fb0f 	bl	800f200 <__errno>
 8013be2:	2309      	movs	r3, #9
 8013be4:	6003      	str	r3, [r0, #0]
 8013be6:	f04f 30ff 	mov.w	r0, #4294967295
 8013bea:	bd70      	pop	{r4, r5, r6, pc}

08013bec <_swilseek>:
 8013bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bee:	b083      	sub	sp, #12
 8013bf0:	460c      	mov	r4, r1
 8013bf2:	4615      	mov	r5, r2
 8013bf4:	f7ff ff50 	bl	8013a98 <findslot>
 8013bf8:	4606      	mov	r6, r0
 8013bfa:	2800      	cmp	r0, #0
 8013bfc:	d039      	beq.n	8013c72 <_swilseek+0x86>
 8013bfe:	2d02      	cmp	r5, #2
 8013c00:	d826      	bhi.n	8013c50 <_swilseek+0x64>
 8013c02:	2d01      	cmp	r5, #1
 8013c04:	d021      	beq.n	8013c4a <_swilseek+0x5e>
 8013c06:	2d02      	cmp	r5, #2
 8013c08:	d011      	beq.n	8013c2e <_swilseek+0x42>
 8013c0a:	466f      	mov	r7, sp
 8013c0c:	6833      	ldr	r3, [r6, #0]
 8013c0e:	250a      	movs	r5, #10
 8013c10:	e88d 0018 	stmia.w	sp, {r3, r4}
 8013c14:	4628      	mov	r0, r5
 8013c16:	4639      	mov	r1, r7
 8013c18:	beab      	bkpt	0x00ab
 8013c1a:	4605      	mov	r5, r0
 8013c1c:	1c6b      	adds	r3, r5, #1
 8013c1e:	d01e      	beq.n	8013c5e <_swilseek+0x72>
 8013c20:	4628      	mov	r0, r5
 8013c22:	2800      	cmp	r0, #0
 8013c24:	db22      	blt.n	8013c6c <_swilseek+0x80>
 8013c26:	6074      	str	r4, [r6, #4]
 8013c28:	4620      	mov	r0, r4
 8013c2a:	b003      	add	sp, #12
 8013c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c2e:	af02      	add	r7, sp, #8
 8013c30:	6803      	ldr	r3, [r0, #0]
 8013c32:	f847 3d08 	str.w	r3, [r7, #-8]!
 8013c36:	250c      	movs	r5, #12
 8013c38:	4628      	mov	r0, r5
 8013c3a:	4639      	mov	r1, r7
 8013c3c:	beab      	bkpt	0x00ab
 8013c3e:	4605      	mov	r5, r0
 8013c40:	1c69      	adds	r1, r5, #1
 8013c42:	d00f      	beq.n	8013c64 <_swilseek+0x78>
 8013c44:	4628      	mov	r0, r5
 8013c46:	4404      	add	r4, r0
 8013c48:	e7e0      	b.n	8013c0c <_swilseek+0x20>
 8013c4a:	6843      	ldr	r3, [r0, #4]
 8013c4c:	18e4      	adds	r4, r4, r3
 8013c4e:	d5dc      	bpl.n	8013c0a <_swilseek+0x1e>
 8013c50:	f7fb fad6 	bl	800f200 <__errno>
 8013c54:	2316      	movs	r3, #22
 8013c56:	6003      	str	r3, [r0, #0]
 8013c58:	f04f 30ff 	mov.w	r0, #4294967295
 8013c5c:	e7e5      	b.n	8013c2a <_swilseek+0x3e>
 8013c5e:	f7ff ff37 	bl	8013ad0 <checkerror.part.0>
 8013c62:	e7de      	b.n	8013c22 <_swilseek+0x36>
 8013c64:	f7ff ff34 	bl	8013ad0 <checkerror.part.0>
 8013c68:	1c42      	adds	r2, r0, #1
 8013c6a:	d1ec      	bne.n	8013c46 <_swilseek+0x5a>
 8013c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8013c70:	e7db      	b.n	8013c2a <_swilseek+0x3e>
 8013c72:	f7fb fac5 	bl	800f200 <__errno>
 8013c76:	2309      	movs	r3, #9
 8013c78:	6003      	str	r3, [r0, #0]
 8013c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8013c7e:	e7d4      	b.n	8013c2a <_swilseek+0x3e>

08013c80 <_lseek>:
 8013c80:	f7ff bfb4 	b.w	8013bec <_swilseek>

08013c84 <_swiwrite>:
 8013c84:	b530      	push	{r4, r5, lr}
 8013c86:	b085      	sub	sp, #20
 8013c88:	2405      	movs	r4, #5
 8013c8a:	9001      	str	r0, [sp, #4]
 8013c8c:	9102      	str	r1, [sp, #8]
 8013c8e:	9203      	str	r2, [sp, #12]
 8013c90:	ad01      	add	r5, sp, #4
 8013c92:	4620      	mov	r0, r4
 8013c94:	4629      	mov	r1, r5
 8013c96:	beab      	bkpt	0x00ab
 8013c98:	4604      	mov	r4, r0
 8013c9a:	1c63      	adds	r3, r4, #1
 8013c9c:	d002      	beq.n	8013ca4 <_swiwrite+0x20>
 8013c9e:	4620      	mov	r0, r4
 8013ca0:	b005      	add	sp, #20
 8013ca2:	bd30      	pop	{r4, r5, pc}
 8013ca4:	f7ff ff14 	bl	8013ad0 <checkerror.part.0>
 8013ca8:	b005      	add	sp, #20
 8013caa:	bd30      	pop	{r4, r5, pc}

08013cac <_write>:
 8013cac:	b570      	push	{r4, r5, r6, lr}
 8013cae:	460e      	mov	r6, r1
 8013cb0:	4615      	mov	r5, r2
 8013cb2:	f7ff fef1 	bl	8013a98 <findslot>
 8013cb6:	4604      	mov	r4, r0
 8013cb8:	b1e0      	cbz	r0, 8013cf4 <_write+0x48>
 8013cba:	462a      	mov	r2, r5
 8013cbc:	4631      	mov	r1, r6
 8013cbe:	6800      	ldr	r0, [r0, #0]
 8013cc0:	f7ff ffe0 	bl	8013c84 <_swiwrite>
 8013cc4:	1e02      	subs	r2, r0, #0
 8013cc6:	db12      	blt.n	8013cee <_write+0x42>
 8013cc8:	6863      	ldr	r3, [r4, #4]
 8013cca:	1aa8      	subs	r0, r5, r2
 8013ccc:	4403      	add	r3, r0
 8013cce:	4295      	cmp	r5, r2
 8013cd0:	6063      	str	r3, [r4, #4]
 8013cd2:	d000      	beq.n	8013cd6 <_write+0x2a>
 8013cd4:	bd70      	pop	{r4, r5, r6, pc}
 8013cd6:	f7fb fa93 	bl	800f200 <__errno>
 8013cda:	2513      	movs	r5, #19
 8013cdc:	4606      	mov	r6, r0
 8013cde:	2400      	movs	r4, #0
 8013ce0:	4628      	mov	r0, r5
 8013ce2:	4621      	mov	r1, r4
 8013ce4:	beab      	bkpt	0x00ab
 8013ce6:	4605      	mov	r5, r0
 8013ce8:	6035      	str	r5, [r6, #0]
 8013cea:	4620      	mov	r0, r4
 8013cec:	bd70      	pop	{r4, r5, r6, pc}
 8013cee:	f04f 30ff 	mov.w	r0, #4294967295
 8013cf2:	e7ef      	b.n	8013cd4 <_write+0x28>
 8013cf4:	f7fb fa84 	bl	800f200 <__errno>
 8013cf8:	2309      	movs	r3, #9
 8013cfa:	6003      	str	r3, [r0, #0]
 8013cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8013d00:	bd70      	pop	{r4, r5, r6, pc}
 8013d02:	bf00      	nop

08013d04 <_close>:
 8013d04:	b570      	push	{r4, r5, r6, lr}
 8013d06:	b082      	sub	sp, #8
 8013d08:	4604      	mov	r4, r0
 8013d0a:	f7ff fec5 	bl	8013a98 <findslot>
 8013d0e:	4606      	mov	r6, r0
 8013d10:	b318      	cbz	r0, 8013d5a <_close+0x56>
 8013d12:	3c01      	subs	r4, #1
 8013d14:	2c01      	cmp	r4, #1
 8013d16:	d911      	bls.n	8013d3c <_close+0x38>
 8013d18:	ad02      	add	r5, sp, #8
 8013d1a:	6833      	ldr	r3, [r6, #0]
 8013d1c:	f845 3d04 	str.w	r3, [r5, #-4]!
 8013d20:	2402      	movs	r4, #2
 8013d22:	4620      	mov	r0, r4
 8013d24:	4629      	mov	r1, r5
 8013d26:	beab      	bkpt	0x00ab
 8013d28:	4604      	mov	r4, r0
 8013d2a:	1c63      	adds	r3, r4, #1
 8013d2c:	d010      	beq.n	8013d50 <_close+0x4c>
 8013d2e:	4620      	mov	r0, r4
 8013d30:	b910      	cbnz	r0, 8013d38 <_close+0x34>
 8013d32:	f04f 33ff 	mov.w	r3, #4294967295
 8013d36:	6033      	str	r3, [r6, #0]
 8013d38:	b002      	add	sp, #8
 8013d3a:	bd70      	pop	{r4, r5, r6, pc}
 8013d3c:	4b0a      	ldr	r3, [pc, #40]	; (8013d68 <_close+0x64>)
 8013d3e:	689a      	ldr	r2, [r3, #8]
 8013d40:	691b      	ldr	r3, [r3, #16]
 8013d42:	429a      	cmp	r2, r3
 8013d44:	d1e8      	bne.n	8013d18 <_close+0x14>
 8013d46:	f04f 33ff 	mov.w	r3, #4294967295
 8013d4a:	6003      	str	r3, [r0, #0]
 8013d4c:	2000      	movs	r0, #0
 8013d4e:	e7f3      	b.n	8013d38 <_close+0x34>
 8013d50:	f7ff febe 	bl	8013ad0 <checkerror.part.0>
 8013d54:	2800      	cmp	r0, #0
 8013d56:	d1ef      	bne.n	8013d38 <_close+0x34>
 8013d58:	e7eb      	b.n	8013d32 <_close+0x2e>
 8013d5a:	f7fb fa51 	bl	800f200 <__errno>
 8013d5e:	2309      	movs	r3, #9
 8013d60:	6003      	str	r3, [r0, #0]
 8013d62:	f04f 30ff 	mov.w	r0, #4294967295
 8013d66:	e7e7      	b.n	8013d38 <_close+0x34>
 8013d68:	1ffe92f0 	.word	0x1ffe92f0

08013d6c <_swistat>:
 8013d6c:	b570      	push	{r4, r5, r6, lr}
 8013d6e:	460d      	mov	r5, r1
 8013d70:	f7ff fe92 	bl	8013a98 <findslot>
 8013d74:	4606      	mov	r6, r0
 8013d76:	b1b0      	cbz	r0, 8013da6 <_swistat+0x3a>
 8013d78:	686b      	ldr	r3, [r5, #4]
 8013d7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013d7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013d82:	606b      	str	r3, [r5, #4]
 8013d84:	62ea      	str	r2, [r5, #44]	; 0x2c
 8013d86:	240c      	movs	r4, #12
 8013d88:	4620      	mov	r0, r4
 8013d8a:	4631      	mov	r1, r6
 8013d8c:	beab      	bkpt	0x00ab
 8013d8e:	4604      	mov	r4, r0
 8013d90:	1c62      	adds	r2, r4, #1
 8013d92:	d003      	beq.n	8013d9c <_swistat+0x30>
 8013d94:	4620      	mov	r0, r4
 8013d96:	6128      	str	r0, [r5, #16]
 8013d98:	2000      	movs	r0, #0
 8013d9a:	bd70      	pop	{r4, r5, r6, pc}
 8013d9c:	f7ff fe98 	bl	8013ad0 <checkerror.part.0>
 8013da0:	1c43      	adds	r3, r0, #1
 8013da2:	d1f8      	bne.n	8013d96 <_swistat+0x2a>
 8013da4:	bd70      	pop	{r4, r5, r6, pc}
 8013da6:	f7fb fa2b 	bl	800f200 <__errno>
 8013daa:	2309      	movs	r3, #9
 8013dac:	6003      	str	r3, [r0, #0]
 8013dae:	f04f 30ff 	mov.w	r0, #4294967295
 8013db2:	bd70      	pop	{r4, r5, r6, pc}

08013db4 <_fstat>:
 8013db4:	b538      	push	{r3, r4, r5, lr}
 8013db6:	460c      	mov	r4, r1
 8013db8:	4605      	mov	r5, r0
 8013dba:	2100      	movs	r1, #0
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	223c      	movs	r2, #60	; 0x3c
 8013dc0:	f7fb fae2 	bl	800f388 <memset>
 8013dc4:	4628      	mov	r0, r5
 8013dc6:	4621      	mov	r1, r4
 8013dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013dcc:	f7ff bfce 	b.w	8013d6c <_swistat>

08013dd0 <_isatty>:
 8013dd0:	b570      	push	{r4, r5, r6, lr}
 8013dd2:	f7ff fe61 	bl	8013a98 <findslot>
 8013dd6:	4604      	mov	r4, r0
 8013dd8:	b190      	cbz	r0, 8013e00 <_isatty+0x30>
 8013dda:	2509      	movs	r5, #9
 8013ddc:	4628      	mov	r0, r5
 8013dde:	4621      	mov	r1, r4
 8013de0:	beab      	bkpt	0x00ab
 8013de2:	4604      	mov	r4, r0
 8013de4:	2c01      	cmp	r4, #1
 8013de6:	d009      	beq.n	8013dfc <_isatty+0x2c>
 8013de8:	f7fb fa0a 	bl	800f200 <__errno>
 8013dec:	2513      	movs	r5, #19
 8013dee:	4606      	mov	r6, r0
 8013df0:	2400      	movs	r4, #0
 8013df2:	4628      	mov	r0, r5
 8013df4:	4621      	mov	r1, r4
 8013df6:	beab      	bkpt	0x00ab
 8013df8:	4605      	mov	r5, r0
 8013dfa:	6035      	str	r5, [r6, #0]
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	bd70      	pop	{r4, r5, r6, pc}
 8013e00:	f7fb f9fe 	bl	800f200 <__errno>
 8013e04:	2309      	movs	r3, #9
 8013e06:	6003      	str	r3, [r0, #0]
 8013e08:	e7f8      	b.n	8013dfc <_isatty+0x2c>
 8013e0a:	bf00      	nop

08013e0c <errs>:
 8013e0c:	ff9c ff39 0020 ff38 fed5 0010 fed4 fe71     ..9. .8.......q.
 8013e1c:	0008 0001 7fff 0008 fe70 fe0d 0004 fe0c     ........p.......
 8013e2c:	fda9 0080 fda8 fd45 0040 fd44 fce1 0002     ......E.@.D.....
 8013e3c:	fce0 fc7d 0001 0000 6f4e 6520 7272 726f     ..}.....No error
 8013e4c:	0000 0000 6e49 6176 696c 2064 6863 7261     ....Invalid char
 8013e5c:	6361 6574 0072 0000 6e49 6176 696c 2064     acter...Invalid 
 8013e6c:	6573 6170 6172 6f74 0072 0000 6144 6174     separator...Data
 8013e7c:	7420 7079 2065 7265 6f72 0072 6150 6172      type error.Para
 8013e8c:	656d 6574 2072 6f6e 2074 6c61 6f6c 6577     meter not allowe
 8013e9c:	0064 0000 694d 7373 6e69 2067 6170 6172     d...Missing para
 8013eac:	656d 6574 0072 0000 6e55 6564 6966 656e     meter...Undefine
 8013ebc:	2064 6568 6461 7265 0000 0000 6e49 6176     d header....Inva
 8013ecc:	696c 2064 7573 6666 7869 0000 7553 6666     lid suffix..Suff
 8013edc:	7869 6e20 746f 6120 6c6c 776f 6465 0000     ix not allowed..
 8013eec:	6e49 6176 696c 2064 7473 6972 676e 6420     Invalid string d
 8013efc:	7461 0061 7845 7270 7365 6973 6e6f 6520     ata.Expression e
 8013f0c:	7272 726f 0000 0000 7845 6365 7475 6f69     rror....Executio
 8013f1c:	206e 7265 6f72 0072 6c49 656c 6167 206c     n error.Illegal 
 8013f2c:	6170 6172 656d 6574 2072 6176 756c 0065     parameter value.
 8013f3c:	7953 7473 6d65 6520 7272 726f 0000 0000     System error....
 8013f4c:	7551 7565 2065 766f 7265 6c66 776f 0000     Queue overflow..
 8013f5c:	6e49 7570 2074 7562 6666 7265 6f20 6576     Input buffer ove
 8013f6c:	7272 6e75 0000 0000 6e55 6e6b 776f 206e     rrun....Unknown 
 8013f7c:	7265 6f72 0072 0000                         error...

08013f84 <scpi_reg_details>:
 8013f84:	0000 0001 0102 0103 0202 0203 0204 0302     ................
 8013f94:	0303 0304                                   ....

08013f98 <scpi_reg_group_details>:
 8013f98:	0100 0b0b 0b0b 0000 0302 0b0b 000b 0020     .............. .
 8013fa8:	0504 0b06 000b 0080 0807 0b09 000b 0008     ................
 8013fb8:	0030 0000 3931 3939 302e 0000 002c 0000     0...1999.0..,...
 8013fc8:	0a0d 0000 003b 0000 4223 0000 5123 0000     ....;...#B..#Q..
 8013fd8:	4823 0000 0022 0000 464f 0046 4e4f 0000     #H.."...OFF.ON..

08013fe8 <scpi_bool_def>:
 8013fe8:	3fe0 0801 0000 0000 3fe4 0801 0001 0000     .?.......?......
 8013ff8:	0000 0000 ffff ffff 4650 0000 464e 0000     ........PF..NF..
 8014008:	4655 0000 464d 0000 0046 0000 4155 0000     UF..MF..F...UA..
 8014018:	414d 0000 0041 0000 414b 0000 5655 0000     MA..A...KA..UV..
 8014028:	564d 0000 0056 0000 564b 0000 484f 004d     MV..V...KV..OHM.
 8014038:	4f4b 4d48 0000 0000 4f4d 4d48 0000 0000     KOHM....MOHM....
 8014048:	4855 0000 484d 0000 0048 0000 5a48 0000     UH..MH..H...HZ..
 8014058:	484b 005a 484d 005a 4847 005a 0057 0000     KHZ.MHZ.GHZ.W...
 8014068:	4244 004d 4244 574d 0000 0000 494d 694e     DBM.DBMW....MINi
 8014078:	756d 006d 414d 6958 756d 006d 4544 6146     mum.MAXimum.DEFa
 8014088:	6c75 0074 5055 0000 4f44 4e57 0000 0000     ult.UP..DOWN....
 8014098:	414e 004e 4e49 6946 696e 7974 0000 0000     NAN.INFinity....
 80140a8:	494e 464e 0000 0000 5541 4f54 0000 0000     NINF....AUTO....
 80140b8:	0020 0000 0000 0000                          .......

080140c0 <scpi_units_def>:
 80140c0:	4000 0801 0011 0000 ea11 812d 9799 3d71     .@........-...q=
 80140d0:	4004 0801 0011 0000 d695 e826 2e0b 3e11     .@........&....>
 80140e0:	4008 0801 0011 0000 ed8d a0b5 c6f7 3eb0     .@.............>
 80140f0:	400c 0801 0011 0000 a9fc d2f1 624d 3f50     .@..........MbP?
 8014100:	4010 0801 0011 0000 0000 0000 0000 3ff0     .@.............?
 8014110:	4014 0801 0002 0000 ed8d a0b5 c6f7 3eb0     .@.............>
 8014120:	4018 0801 0002 0000 a9fc d2f1 624d 3f50     .@..........MbP?
 8014130:	401c 0801 0002 0000 0000 0000 0000 3ff0     .@.............?
 8014140:	4020 0801 0002 0000 0000 0000 4000 408f      @...........@.@
 8014150:	4024 0801 0001 0000 ed8d a0b5 c6f7 3eb0     $@.............>
 8014160:	4028 0801 0001 0000 a9fc d2f1 624d 3f50     (@..........MbP?
 8014170:	402c 0801 0001 0000 0000 0000 0000 3ff0     ,@.............?
 8014180:	4030 0801 0001 0000 0000 0000 4000 408f     0@...........@.@
 8014190:	4034 0801 0003 0000 0000 0000 0000 3ff0     4@.............?
 80141a0:	4038 0801 0003 0000 0000 0000 4000 408f     8@...........@.@
 80141b0:	4040 0801 0003 0000 0000 0000 8480 412e     @@.............A
 80141c0:	4048 0801 0018 0000 ed8d a0b5 c6f7 3eb0     H@.............>
 80141d0:	404c 0801 0018 0000 a9fc d2f1 624d 3f50     L@..........MbP?
 80141e0:	4050 0801 0018 0000 0000 0000 0000 3ff0     P@.............?
 80141f0:	4054 0801 0004 0000 0000 0000 0000 3ff0     T@.............?
 8014200:	4058 0801 0004 0000 0000 0000 4000 408f     X@...........@.@
 8014210:	405c 0801 0004 0000 0000 0000 8480 412e     \@.............A
 8014220:	4060 0801 0004 0000 0000 0000 cd65 41cd     `@..........e..A
 8014230:	4064 0801 0025 0000 0000 0000 0000 3ff0     d@..%..........?
 8014240:	4068 0801 0026 0000 0000 0000 0000 3ff0     h@..&..........?
 8014250:	406c 0801 0026 0000 0000 0000 0000 3ff0     l@..&..........?
	...
 8014270:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 8014280:	0000 0000 6725 0000 2e25 3531 676c 0000     ....%g..%.15lg..
 8014290:	3a3f 5d5b 0000 0000 3f3a 0000 414e 004e     ?:[]....:?..NAN.
 80142a0:	616e 006e 4e49 0046 6e69 0066 5953 5453     nan.INF.inf.SYST
 80142b0:	4d49 5245 495f 696e 3a74 5420 6d69 7265     IMER_Init: Timer
 80142c0:	7220 6c65 616f 2064 6176 756c 2065 756f      reload value ou
 80142d0:	2074 666f 7220 6e61 6567 0000               t of range..

080142dc <eth_phy_config>:
 80142dc:	0001 0000 0000 0001                         ........

080142e4 <ethbroadcast>:
 80142e4:	ffff ffff ffff 0000                         ........

080142ec <ethzero>:
	...

080142f4 <ip_addr_any>:
 80142f4:	0000 0000                                   ....

080142f8 <memp_RAW_PCB>:
 80142f8:	001c 0004 9b1c 1ffe 9238 1ffe               ........8...

08014304 <memp_TCP_PCB>:
 8014304:	009c 0005 fec0 1ffe 923c 1ffe               ........<...

08014310 <memp_TCP_PCB_LISTEN>:
 8014310:	0020 0005 fe1c 1ffe 9240 1ffe                .......@...

0801431c <memp_TCP_SEG>:
 801431c:	0010 0008 9b90 1ffe 9244 1ffe               ........D...

08014328 <memp_SYS_TIMEOUT>:
 8014328:	0010 000a 01d0 1fff 9248 1ffe               ........H...

08014334 <memp_PBUF>:
 8014334:	0010 0010 fd18 1ffe 924c 1ffe               ........L...

08014340 <memp_PBUF_POOL>:
 8014340:	0610 0010 9c14 1ffe 9250 1ffe               ........P...

0801434c <memp_pools>:
 801434c:	42f8 0801 4304 0801 4310 0801 431c 0801     .B...C...C...C..
 801435c:	4328 0801 4334 0801 4340 0801               (C..4C..@C..

08014368 <tcp_backoff>:
 8014368:	0201 0403 0605 0707 0707 0707 0007 0000     ................

08014378 <tcp_persist_backoff>:
 8014378:	0603 180c 6030 0078                         ....0`x.

08014380 <tcp_pcb_lists>:
 8014380:	028c 1fff 0290 1fff 0284 1fff 0294 1fff     ................
 8014390:	6e75 6361 656b 0064 6e75 6573 746e 0000     unacked.unsent..

080143a0 <lwip_cyclic_timers>:
 80143a0:	00fa 0000 8931 0800 03e8 0000 5f09 0800     ....1........_..

080143b0 <LED2>:
 80143b0:	8500 4802 0080 0000 0000 0001 0002 0000     ...H............
 80143c0:	0008 0000                                   ....

080143c4 <BUTTON1>:
 80143c4:	8f00 4802 0000 0000 0000 0000 0000 0000     ...H............
 80143d4:	000d 0000 0230 0101 0000 0001 0000 0000     ....0...........
 80143e4:	0000 0001 0102 0101 5245 4f52 2152 000d     ........ERROR!..
 80143f4:	2a2a 5220 5345 5445 4320 4d4f 414d 444e     ** RESET COMMAND
 8014404:	000d 0000 2a2a 4e20 5745 4320 4e4f 454e     ....** NEW CONNE
 8014414:	5443 4f49 0d4e 0000 5453 5241 5554 0d50     CTION...STARTUP.
 8014424:	0000 0000 4144 4556 4120 5050 2073 6e69     ....DAVE APPs in
 8014434:	7469 6169 696c 617a 6974 6e6f 6620 6961     itialization fai
 8014444:	656c 0064 524f 4749 4e49 4c41 4943 4352     led.ORIGINALCIRC
 8014454:	4955 0054 4552 414c 4b58 5449 0000 0000     UIT.RELAXKIT....
 8014464:	3130 302d 0032 0000 2323 4920 5f4f 5442     01-02...## IO_BT
 8014474:	0d4e 0000 2323 4920 5f4f 454c 0d44 0000     N...## IO_LED...
 8014484:	2d20 4c20 4445 4f20 0d4e 0000 2d20 4c20      - LED ON... - L
 8014494:	4445 4f20 4646 000d 432a 534c 0000 0000     ED OFF..*CLS....
 80144a4:	452a 4553 0000 0000 452a 4553 003f 0000     *ESE....*ESE?...
 80144b4:	452a 5253 003f 0000 492a 4e44 003f 0000     *ESR?...*IDN?...
 80144c4:	4f2a 4350 0000 0000 4f2a 4350 003f 0000     *OPC....*OPC?...
 80144d4:	522a 5453 0000 0000 532a 4552 0000 0000     *RST....*SRE....
 80144e4:	532a 4552 003f 0000 532a 4254 003f 0000     *SRE?...*STB?...
 80144f4:	542a 5453 003f 0000 572a 4941 0000 0000     *TST?...*WAI....
 8014504:	5953 5453 6d65 453a 5252 726f 3a5b 454e     SYSTem:ERRor[:NE
 8014514:	5458 3f5d 0000 0000 5953 5453 6d65 453a     XT]?....SYSTem:E
 8014524:	5252 726f 433a 554f 744e 003f 5953 5453     RRor:COUNt?.SYST
 8014534:	6d65 563a 5245 6953 6e6f 003f 5453 5441     em:VERSion?.STAT
 8014544:	7375 513a 4555 7453 6f69 616e 6c62 5b65     us:QUEStionable[
 8014554:	453a 4556 744e 3f5d 0000 0000 5453 5441     :EVENt]?....STAT
 8014564:	7375 513a 4555 7453 6f69 616e 6c62 3a65     us:QUEStionable:
 8014574:	4e45 4241 656c 0000 5453 5441 7375 513a     ENABle..STATus:Q
 8014584:	4555 7453 6f69 616e 6c62 3a65 4e45 4241     UEStionable:ENAB
 8014594:	656c 003f 5453 5441 7375 503a 4552 6553     le?.STATus:PRESe
 80145a4:	0074 0000 4e49 7550 5b74 423a 5455 4f54     t...INPut[:BUTTO
 80145b4:	314e 005d 554f 5054 7475 3a5b 454c 3144     N1].OUTPut[:LED1
 80145c4:	005d 0000                                   ]...

080145c8 <scpi_commands>:
 80145c8:	449c 0801 0ca9 0800 0000 0000 44a4 0801     .D...........D..
 80145d8:	0cf5 0800 0000 0000 44ac 0801 0d31 0800     .........D..1...
 80145e8:	0000 0000 44b4 0801 0d59 0800 0000 0000     .....D..Y.......
 80145f8:	44bc 0801 0d89 0800 0000 0000 44c4 0801     .D...........D..
 8014608:	0df9 0800 0000 0000 44cc 0801 0e19 0800     .........D......
 8014618:	0000 0000 44d4 0801 0e35 0800 0000 0000     .....D..5.......
 8014628:	44dc 0801 0e71 0800 0000 0000 44e4 0801     .D..q........D..
 8014638:	0ead 0800 0000 0000 44ec 0801 0ed5 0800     .........D......
 8014648:	0000 0000 44f4 0801 e301 0800 0000 0000     .....D..........
 8014658:	44fc 0801 0efd 0800 0000 0000 4504 0801     .D...........E..
 8014668:	2031 0800 0000 0000 451c 0801 205d 0800     1 .......E..] ..
 8014678:	0000 0000 4530 0801 200d 0800 0000 0000     ....0E... ......
 8014688:	4540 0801 2081 0800 0000 0000 4560 0801     @E... ......`E..
 8014698:	20d9 0800 0000 0000 457c 0801 20b1 0800     . ......|E... ..
 80146a8:	0000 0000 4598 0801 2111 0800 0000 0000     .....E...!......
 80146b8:	45a8 0801 e259 0800 0000 0000 45b8 0801     .E..Y........E..
 80146c8:	e29d 0800 0000 0000 0000 0000 0000 0000     ................
 80146d8:	0000 0000                                   ....

080146dc <_ctype_>:
 80146dc:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80146ec:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80146fc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 801470c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 801471c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 801472c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 801473c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 801474c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 801475c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 80147e0:	0043 0000 000a 0000                         C.......

080147e8 <zeroes.6810>:
 80147e8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 80147f8:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
 8014808:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 8014818:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
 8014828:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
 8014838:	0030 0000                                   0...

0801483c <blanks.6809>:
 801483c:	2020 2020 2020 2020 2020 2020 2020 2020                     
 801484c:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
 801485c:	4f50 4953 0058 0000 002e 0000               POSIX.......

08014868 <__mprec_tens>:
 8014868:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8014878:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8014888:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8014898:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80148a8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80148b8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80148c8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80148d8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80148e8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80148f8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8014908:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8014918:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8014928:	9db4 79d9 7843 44ea                         ...yCx.D

08014930 <__mprec_bigtens>:
 8014930:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8014940:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8014950:	bf3c 7f73 4fdd 7515                         <.s..O.u

08014958 <p05.5265>:
 8014958:	0005 0000 0019 0000 007d 0000 743a 0074     ........}...:tt.
