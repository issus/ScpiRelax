   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "ethernet.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .global ethbroadcast
  20              	 .section .rodata.ethbroadcast,"a",%progbits
  21              	 .align 2
  24              	ethbroadcast:
  25 0000 FF       	 .byte -1
  26 0001 FF       	 .byte -1
  27 0002 FF       	 .byte -1
  28 0003 FF       	 .byte -1
  29 0004 FF       	 .byte -1
  30 0005 FF       	 .byte -1
  31              	 .global ethzero
  32 0006 0000     	 .section .rodata.ethzero,"a",%progbits
  33              	 .align 2
  36              	ethzero:
  37 0000 00000000 	 .space 6
  37      0000
  38 0006 0000     	 .section .text.ethernet_input,"ax",%progbits
  39              	 .align 2
  40              	 .global ethernet_input
  41              	 .thumb
  42              	 .thumb_func
  44              	ethernet_input:
  45              	.LFB133:
  46              	 .file 1 "../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c"
   1:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** /**
   2:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @file
   3:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * Ethernet common functions
   4:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  *
   5:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @defgroup ethernet Ethernet
   6:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @ingroup callbackstyle_api
   7:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  */
   8:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
   9:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** /*
  10:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * Copyright (c) 2001-2003 Swedish Institute of Computer Science.
  11:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * Copyright (c) 2003-2004 Leon Woestenberg <leon.woestenberg@axon.tv>
  12:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * Copyright (c) 2003-2004 Axon Digital Design B.V., The Netherlands.
  13:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * All rights reserved.
  14:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  *
  15:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * Redistribution and use in source and binary forms, with or without modification,
  16:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * are permitted provided that the following conditions are met:
  17:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  *
  18:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  19:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  *    this list of conditions and the following disclaimer.
  20:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  *    this list of conditions and the following disclaimer in the documentation
  22:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  *    and/or other materials provided with the distribution.
  23:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * 3. The name of the author may not be used to endorse or promote products
  24:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  *    derived from this software without specific prior written permission.
  25:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  *
  26:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  27:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  28:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  29:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  30:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  31:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  32:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  33:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  34:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  35:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * OF SUCH DAMAGE.
  36:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  *
  37:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * This file is part of the lwIP TCP/IP stack.
  38:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  *
  39:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  */
  40:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
  41:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #include "ETH_LWIP/lwip/include/lwip/opt.h"
  42:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
  43:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #if LWIP_ARP || LWIP_ETHERNET
  44:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
  45:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #include "ETH_LWIP/lwip/include/netif/ethernet.h"
  46:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #include "ETH_LWIP/lwip/include/lwip/def.h"
  47:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #include "ETH_LWIP/lwip/include/lwip/stats.h"
  48:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #include "ETH_LWIP/lwip/include/lwip/etharp.h"
  49:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #include "ETH_LWIP/lwip/include/lwip/ip.h"
  50:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #include "ETH_LWIP/lwip/include/lwip/snmp.h"
  51:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
  52:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #include <string.h>
  53:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
  54:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #include "ETH_LWIP/lwip/include/netif/ppp/ppp_opts.h"
  55:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #if PPPOE_SUPPORT
  56:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #include "ETH_LWIP/lwip/include/netif/ppp/pppoe.h"
  57:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #endif /* PPPOE_SUPPORT */
  58:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
  59:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #ifdef LWIP_HOOK_FILENAME
  60:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #include LWIP_HOOK_FILENAME
  61:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #endif
  62:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
  63:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** const struct eth_addr ethbroadcast = {{0xff, 0xff, 0xff, 0xff, 0xff, 0xff}};
  64:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** const struct eth_addr ethzero = {{0, 0, 0, 0, 0, 0}};
  65:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
  66:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** /**
  67:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @ingroup lwip_nosys
  68:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * Process received ethernet frames. Using this function instead of directly
  69:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * calling ip_input and passing ARP frames through etharp in ethernetif_input,
  70:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * the ARP cache is protected from concurrent access.\n
  71:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * Don't call directly, pass to netif_add() and call netif->input().
  72:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  *
  73:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @param p the received packet, p->payload pointing to the ethernet header
  74:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @param netif the network interface on which the packet was received
  75:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  *
  76:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @see LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
  77:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @see ETHARP_SUPPORT_VLAN
  78:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @see LWIP_HOOK_VLAN_CHECK
  79:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  */
  80:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** err_t
  81:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** ethernet_input(struct pbuf *p, struct netif *netif)
  82:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** {
  47              	 .loc 1 82 0
  48              	 .cfi_startproc
  49              	 
  50              	 
  51 0000 80B5     	 push {r7,lr}
  52              	.LCFI0:
  53              	 .cfi_def_cfa_offset 8
  54              	 .cfi_offset 7,-8
  55              	 .cfi_offset 14,-4
  56 0002 86B0     	 sub sp,sp,#24
  57              	.LCFI1:
  58              	 .cfi_def_cfa_offset 32
  59 0004 00AF     	 add r7,sp,#0
  60              	.LCFI2:
  61              	 .cfi_def_cfa_register 7
  62 0006 7860     	 str r0,[r7,#4]
  63 0008 3960     	 str r1,[r7]
  83:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   struct eth_hdr *ethhdr;
  84:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   u16_t type;
  85:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  86:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   u16_t next_hdr_offset = SIZEOF_ETH_HDR;
  64              	 .loc 1 86 0
  65 000a 1023     	 movs r3,#16
  66 000c FB82     	 strh r3,[r7,#22]
  87:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */
  88:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
  89:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   LWIP_ASSERT_CORE_LOCKED();
  90:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
  91:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   if (p->len <= SIZEOF_ETH_HDR) {
  67              	 .loc 1 91 0
  68 000e 7B68     	 ldr r3,[r7,#4]
  69 0010 5B89     	 ldrh r3,[r3,#10]
  70 0012 102B     	 cmp r3,#16
  71 0014 00D8     	 bhi .L2
  92:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     /* a packet with only an ethernet header (or less) is not valid for us */
  93:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     ETHARP_STATS_INC(etharp.proterr);
  94:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     ETHARP_STATS_INC(etharp.drop);
  95:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     MIB2_STATS_NETIF_INC(netif, ifinerrors);
  96:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     goto free_and_return;
  72              	 .loc 1 96 0
  73 0016 73E0     	 b .L3
  74              	.L2:
  97:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   }
  98:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
  99:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   if (p->if_idx == NETIF_NO_INDEX) {
  75              	 .loc 1 99 0
  76 0018 7B68     	 ldr r3,[r7,#4]
  77 001a DB7B     	 ldrb r3,[r3,#15]
  78 001c 002B     	 cmp r3,#0
  79 001e 06D1     	 bne .L4
 100:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     p->if_idx = netif_get_index(netif);
  80              	 .loc 1 100 0
  81 0020 3B68     	 ldr r3,[r7]
  82 0022 93F83030 	 ldrb r3,[r3,#48]
  83 0026 0133     	 adds r3,r3,#1
  84 0028 DAB2     	 uxtb r2,r3
  85 002a 7B68     	 ldr r3,[r7,#4]
  86 002c DA73     	 strb r2,[r3,#15]
  87              	.L4:
 101:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   }
 102:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 103:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   /* points to packet payload, which starts with an Ethernet header */
 104:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   ethhdr = (struct eth_hdr *)p->payload;
  88              	 .loc 1 104 0
  89 002e 7B68     	 ldr r3,[r7,#4]
  90 0030 5B68     	 ldr r3,[r3,#4]
  91 0032 3B61     	 str r3,[r7,#16]
 105:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 106:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****               ("ethernet_input: dest:%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F", src:%"X8_F":%
 107:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****                (unsigned char)ethhdr->dest.addr[0], (unsigned char)ethhdr->dest.addr[1], (unsigned 
 108:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****                (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned 
 109:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****                (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned 
 110:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****                (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned 
 111:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****                lwip_htons(ethhdr->type)));
 112:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 113:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   type = ethhdr->type;
  92              	 .loc 1 113 0
  93 0034 3B69     	 ldr r3,[r7,#16]
  94 0036 9A7B     	 ldrb r2,[r3,#14]
  95 0038 DB7B     	 ldrb r3,[r3,#15]
  96 003a 1B02     	 lsls r3,r3,#8
  97 003c 1343     	 orrs r3,r3,r2
  98 003e FB81     	 strh r3,[r7,#14]
 114:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #if ETHARP_SUPPORT_VLAN
 115:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   if (type == PP_HTONS(ETHTYPE_VLAN)) {
 116:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     struct eth_vlan_hdr *vlan = (struct eth_vlan_hdr *)(((char *)ethhdr) + SIZEOF_ETH_HDR);
 117:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     next_hdr_offset = SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR;
 118:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     if (p->len <= SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR) {
 119:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       /* a packet with only an ethernet/vlan header (or less) is not valid for us */
 120:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       ETHARP_STATS_INC(etharp.proterr);
 121:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       ETHARP_STATS_INC(etharp.drop);
 122:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       MIB2_STATS_NETIF_INC(netif, ifinerrors);
 123:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       goto free_and_return;
 124:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     }
 125:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #if defined(LWIP_HOOK_VLAN_CHECK) || defined(ETHARP_VLAN_CHECK) || defined(ETHARP_VLAN_CHECK_FN) /*
 126:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #ifdef LWIP_HOOK_VLAN_CHECK
 127:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     if (!LWIP_HOOK_VLAN_CHECK(netif, ethhdr, vlan)) {
 128:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #elif defined(ETHARP_VLAN_CHECK_FN)
 129:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     if (!ETHARP_VLAN_CHECK_FN(ethhdr, vlan)) {
 130:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #elif defined(ETHARP_VLAN_CHECK)
 131:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     if (VLAN_ID(vlan) != ETHARP_VLAN_CHECK) {
 132:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #endif
 133:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       /* silently ignore this packet: not for our VLAN */
 134:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       pbuf_free(p);
 135:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       return ERR_OK;
 136:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     }
 137:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #endif /* defined(LWIP_HOOK_VLAN_CHECK) || defined(ETHARP_VLAN_CHECK) || defined(ETHARP_VLAN_CHECK_
 138:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     type = vlan->tpid;
 139:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   }
 140:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #endif /* ETHARP_SUPPORT_VLAN */
 141:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 142:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #if LWIP_ARP_FILTER_NETIF
 143:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
 144:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #endif /* LWIP_ARP_FILTER_NETIF*/
 145:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 146:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   if (ethhdr->dest.addr[0] & 1) {
  99              	 .loc 1 146 0
 100 0040 3B69     	 ldr r3,[r7,#16]
 101 0042 9B78     	 ldrb r3,[r3,#2]
 102 0044 03F00103 	 and r3,r3,#1
 103 0048 002B     	 cmp r3,#0
 104 004a 24D0     	 beq .L5
 147:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     /* this might be a multicast or broadcast packet */
 148:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 105              	 .loc 1 148 0
 106 004c 3B69     	 ldr r3,[r7,#16]
 107 004e 9B78     	 ldrb r3,[r3,#2]
 108 0050 012B     	 cmp r3,#1
 109 0052 0FD1     	 bne .L6
 149:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #if LWIP_IPV4
 150:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 110              	 .loc 1 150 0
 111 0054 3B69     	 ldr r3,[r7,#16]
 112 0056 DB78     	 ldrb r3,[r3,#3]
 113 0058 002B     	 cmp r3,#0
 114 005a 1CD1     	 bne .L5
 151:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****           (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 115              	 .loc 1 151 0 discriminator 1
 116 005c 3B69     	 ldr r3,[r7,#16]
 117 005e 1B79     	 ldrb r3,[r3,#4]
 150:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****           (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 118              	 .loc 1 150 0 discriminator 1
 119 0060 5E2B     	 cmp r3,#94
 120 0062 18D1     	 bne .L5
 152:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         /* mark the pbuf as link-layer multicast */
 153:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         p->flags |= PBUF_FLAG_LLMCAST;
 121              	 .loc 1 153 0
 122 0064 7B68     	 ldr r3,[r7,#4]
 123 0066 5B7B     	 ldrb r3,[r3,#13]
 124 0068 43F01003 	 orr r3,r3,#16
 125 006c DAB2     	 uxtb r2,r3
 126 006e 7B68     	 ldr r3,[r7,#4]
 127 0070 5A73     	 strb r2,[r3,#13]
 128 0072 10E0     	 b .L5
 129              	.L6:
 154:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       }
 155:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #endif /* LWIP_IPV4 */
 156:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     }
 157:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #if LWIP_IPV6
 158:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     else if ((ethhdr->dest.addr[0] == LL_IP6_MULTICAST_ADDR_0) &&
 159:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****              (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
 160:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       /* mark the pbuf as link-layer multicast */
 161:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       p->flags |= PBUF_FLAG_LLMCAST;
 162:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     }
 163:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #endif /* LWIP_IPV6 */
 164:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 130              	 .loc 1 164 0
 131 0074 3B69     	 ldr r3,[r7,#16]
 132 0076 0233     	 adds r3,r3,#2
 133 0078 1846     	 mov r0,r3
 134 007a 2649     	 ldr r1,.L17
 135 007c 0622     	 movs r2,#6
 136 007e FFF7FEFF 	 bl memcmp
 137 0082 0346     	 mov r3,r0
 138 0084 002B     	 cmp r3,#0
 139 0086 06D1     	 bne .L5
 165:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       /* mark the pbuf as link-layer broadcast */
 166:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       p->flags |= PBUF_FLAG_LLBCAST;
 140              	 .loc 1 166 0
 141 0088 7B68     	 ldr r3,[r7,#4]
 142 008a 5B7B     	 ldrb r3,[r3,#13]
 143 008c 43F00803 	 orr r3,r3,#8
 144 0090 DAB2     	 uxtb r2,r3
 145 0092 7B68     	 ldr r3,[r7,#4]
 146 0094 5A73     	 strb r2,[r3,#13]
 147              	.L5:
 167:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     }
 168:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   }
 169:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 170:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   switch (type) {
 148              	 .loc 1 170 0
 149 0096 FB89     	 ldrh r3,[r7,#14]
 150 0098 082B     	 cmp r3,#8
 151 009a 03D0     	 beq .L9
 152 009c B3F5C16F 	 cmp r3,#1544
 153 00a0 16D0     	 beq .L10
 171:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #if LWIP_IPV4 && LWIP_ARP
 172:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     /* IP packet? */
 173:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     case PP_HTONS(ETHTYPE_IP):
 174:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 175:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         goto free_and_return;
 176:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       }
 177:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       /* skip Ethernet header (min. size checked above) */
 178:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       if (pbuf_remove_header(p, next_hdr_offset)) {
 179:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 180:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****                     ("ethernet_input: IPv4 packet dropped, too short (%"U16_F"/%"U16_F")\n",
 181:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****                      p->tot_len, next_hdr_offset));
 182:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 183:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         goto free_and_return;
 184:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       } else {
 185:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         /* pass to IP layer */
 186:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         ip4_input(p, netif);
 187:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       }
 188:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       break;
 189:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 190:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     case PP_HTONS(ETHTYPE_ARP):
 191:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 192:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         goto free_and_return;
 193:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       }
 194:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       /* skip Ethernet header (min. size checked above) */
 195:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       if (pbuf_remove_header(p, next_hdr_offset)) {
 196:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 197:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****                     ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n"
 198:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****                      p->tot_len, next_hdr_offset));
 199:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 200:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         ETHARP_STATS_INC(etharp.lenerr);
 201:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         ETHARP_STATS_INC(etharp.drop);
 202:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         goto free_and_return;
 203:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       } else {
 204:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         /* pass p to ARP module */
 205:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         etharp_input(p, netif);
 206:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       }
 207:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       break;
 208:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #endif /* LWIP_IPV4 && LWIP_ARP */
 209:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #if PPPOE_SUPPORT
 210:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     case PP_HTONS(ETHTYPE_PPPOEDISC): /* PPP Over Ethernet Discovery Stage */
 211:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       pppoe_disc_input(netif, p);
 212:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       break;
 213:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 214:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     case PP_HTONS(ETHTYPE_PPPOE): /* PPP Over Ethernet Session Stage */
 215:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       pppoe_data_input(netif, p);
 216:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       break;
 217:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #endif /* PPPOE_SUPPORT */
 218:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 219:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #if LWIP_IPV6
 220:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     case PP_HTONS(ETHTYPE_IPV6): /* IPv6 */
 221:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       /* skip Ethernet header */
 222:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       if ((p->len < next_hdr_offset) || pbuf_remove_header(p, next_hdr_offset)) {
 223:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 224:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****                     ("ethernet_input: IPv6 packet dropped, too short (%"U16_F"/%"U16_F")\n",
 225:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****                      p->tot_len, next_hdr_offset));
 226:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         goto free_and_return;
 227:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       } else {
 228:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         /* pass to IPv6 layer */
 229:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         ip6_input(p, netif);
 230:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       }
 231:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       break;
 232:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #endif /* LWIP_IPV6 */
 233:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 234:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     default:
 235:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
 236:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
 237:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         break;
 238:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       }
 239:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #endif
 240:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       ETHARP_STATS_INC(etharp.proterr);
 241:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       ETHARP_STATS_INC(etharp.drop);
 242:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
 243:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       goto free_and_return;
 154              	 .loc 1 243 0
 155 00a2 2DE0     	 b .L3
 156              	.L9:
 174:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         goto free_and_return;
 157              	 .loc 1 174 0
 158 00a4 3B68     	 ldr r3,[r7]
 159 00a6 93F82D30 	 ldrb r3,[r3,#45]
 160 00aa 03F00803 	 and r3,r3,#8
 161 00ae 002B     	 cmp r3,#0
 162 00b0 00D1     	 bne .L11
 175:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       }
 163              	 .loc 1 175 0
 164 00b2 25E0     	 b .L3
 165              	.L11:
 178:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 166              	 .loc 1 178 0
 167 00b4 FB8A     	 ldrh r3,[r7,#22]
 168 00b6 7868     	 ldr r0,[r7,#4]
 169 00b8 1946     	 mov r1,r3
 170 00ba FFF7FEFF 	 bl pbuf_remove_header
 171 00be 0346     	 mov r3,r0
 172 00c0 002B     	 cmp r3,#0
 173 00c2 00D0     	 beq .L12
 183:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       } else {
 174              	 .loc 1 183 0
 175 00c4 1CE0     	 b .L3
 176              	.L12:
 186:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       }
 177              	 .loc 1 186 0
 178 00c6 7868     	 ldr r0,[r7,#4]
 179 00c8 3968     	 ldr r1,[r7]
 180 00ca FFF7FEFF 	 bl ip4_input
 188:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 181              	 .loc 1 188 0
 182 00ce 15E0     	 b .L13
 183              	.L10:
 191:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         goto free_and_return;
 184              	 .loc 1 191 0
 185 00d0 3B68     	 ldr r3,[r7]
 186 00d2 93F82D30 	 ldrb r3,[r3,#45]
 187 00d6 03F00803 	 and r3,r3,#8
 188 00da 002B     	 cmp r3,#0
 189 00dc 00D1     	 bne .L14
 192:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       }
 190              	 .loc 1 192 0
 191 00de 0FE0     	 b .L3
 192              	.L14:
 195:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 193              	 .loc 1 195 0
 194 00e0 FB8A     	 ldrh r3,[r7,#22]
 195 00e2 7868     	 ldr r0,[r7,#4]
 196 00e4 1946     	 mov r1,r3
 197 00e6 FFF7FEFF 	 bl pbuf_remove_header
 198 00ea 0346     	 mov r3,r0
 199 00ec 002B     	 cmp r3,#0
 200 00ee 00D0     	 beq .L15
 202:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       } else {
 201              	 .loc 1 202 0
 202 00f0 06E0     	 b .L3
 203              	.L15:
 205:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       }
 204              	 .loc 1 205 0
 205 00f2 7868     	 ldr r0,[r7,#4]
 206 00f4 3968     	 ldr r1,[r7]
 207 00f6 FFF7FEFF 	 bl etharp_input
 207:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #endif /* LWIP_IPV4 && LWIP_ARP */
 208              	 .loc 1 207 0
 209 00fa 00BF     	 nop
 210              	.L13:
 244:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   }
 245:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 246:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   /* This means the pbuf is freed or consumed,
 247:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****      so the caller doesn't have to free it again */
 248:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   return ERR_OK;
 211              	 .loc 1 248 0
 212 00fc 0023     	 movs r3,#0
 213 00fe 03E0     	 b .L16
 214              	.L3:
 249:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 250:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** free_and_return:
 251:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   pbuf_free(p);
 215              	 .loc 1 251 0
 216 0100 7868     	 ldr r0,[r7,#4]
 217 0102 FFF7FEFF 	 bl pbuf_free
 252:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   return ERR_OK;
 218              	 .loc 1 252 0
 219 0106 0023     	 movs r3,#0
 220              	.L16:
 221 0108 5BB2     	 sxtb r3,r3
 253:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** }
 222              	 .loc 1 253 0
 223 010a 1846     	 mov r0,r3
 224 010c 1837     	 adds r7,r7,#24
 225              	.LCFI3:
 226              	 .cfi_def_cfa_offset 8
 227 010e BD46     	 mov sp,r7
 228              	.LCFI4:
 229              	 .cfi_def_cfa_register 13
 230              	 
 231 0110 80BD     	 pop {r7,pc}
 232              	.L18:
 233 0112 00BF     	 .align 2
 234              	.L17:
 235 0114 00000000 	 .word ethbroadcast
 236              	 .cfi_endproc
 237              	.LFE133:
 239              	 .section .text.ethernet_output,"ax",%progbits
 240              	 .align 2
 241              	 .global ethernet_output
 242              	 .thumb
 243              	 .thumb_func
 245              	ethernet_output:
 246              	.LFB134:
 254:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 255:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** /**
 256:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @ingroup ethernet
 257:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * Send an ethernet packet on the network using netif->linkoutput().
 258:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * The ethernet header is filled in before sending.
 259:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  *
 260:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @see LWIP_HOOK_VLAN_SET
 261:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  *
 262:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @param netif the lwIP network interface on which to send the packet
 263:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @param p the packet to send. pbuf layer must be @ref PBUF_LINK.
 264:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @param src the source MAC address to be copied into the ethernet header
 265:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @param dst the destination MAC address to be copied into the ethernet header
 266:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @param eth_type ethernet type (@ref lwip_ieee_eth_type)
 267:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  * @return ERR_OK if the packet was sent, any other err_t on failure
 268:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****  */
 269:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** err_t
 270:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** ethernet_output(struct netif * netif, struct pbuf * p,
 271:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****                 const struct eth_addr * src, const struct eth_addr * dst,
 272:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****                 u16_t eth_type) {
 247              	 .loc 1 272 0
 248              	 .cfi_startproc
 249              	 
 250              	 
 251 0000 80B5     	 push {r7,lr}
 252              	.LCFI5:
 253              	 .cfi_def_cfa_offset 8
 254              	 .cfi_offset 7,-8
 255              	 .cfi_offset 14,-4
 256 0002 86B0     	 sub sp,sp,#24
 257              	.LCFI6:
 258              	 .cfi_def_cfa_offset 32
 259 0004 00AF     	 add r7,sp,#0
 260              	.LCFI7:
 261              	 .cfi_def_cfa_register 7
 262 0006 F860     	 str r0,[r7,#12]
 263 0008 B960     	 str r1,[r7,#8]
 264 000a 7A60     	 str r2,[r7,#4]
 265 000c 3B60     	 str r3,[r7]
 273:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   struct eth_hdr *ethhdr;
 274:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   u16_t eth_type_be = lwip_htons(eth_type);
 266              	 .loc 1 274 0
 267 000e 3B8C     	 ldrh r3,[r7,#32]
 268 0010 1846     	 mov r0,r3
 269 0012 FFF7FEFF 	 bl lwip_htons
 270 0016 0346     	 mov r3,r0
 271 0018 FB82     	 strh r3,[r7,#22]
 275:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 276:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #if ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET)
 277:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   s32_t vlan_prio_vid = LWIP_HOOK_VLAN_SET(netif, p, src, dst, eth_type);
 278:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   if (vlan_prio_vid >= 0) {
 279:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     struct eth_vlan_hdr *vlanhdr;
 280:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 281:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     LWIP_ASSERT("prio_vid must be <= 0xFFFF", vlan_prio_vid <= 0xFFFF);
 282:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 283:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     if (pbuf_add_header(p, SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR) != 0) {
 284:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       goto pbuf_header_failed;
 285:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     }
 286:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     vlanhdr = (struct eth_vlan_hdr *)(((u8_t *)p->payload) + SIZEOF_ETH_HDR);
 287:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     vlanhdr->tpid     = eth_type_be;
 288:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     vlanhdr->prio_vid = lwip_htons((u16_t)vlan_prio_vid);
 289:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 290:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     eth_type_be = PP_HTONS(ETHTYPE_VLAN);
 291:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   } else
 292:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** #endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
 293:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   {
 294:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 272              	 .loc 1 294 0
 273 001a B868     	 ldr r0,[r7,#8]
 274 001c 1021     	 movs r1,#16
 275 001e FFF7FEFF 	 bl pbuf_add_header
 276 0022 0346     	 mov r3,r0
 277 0024 002B     	 cmp r3,#0
 278 0026 02D0     	 beq .L20
 295:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****       goto pbuf_header_failed;
 279              	 .loc 1 295 0
 280 0028 00BF     	 nop
 281              	.L21:
 296:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****     }
 297:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   }
 298:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 299:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   LWIP_ASSERT_CORE_LOCKED();
 300:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 301:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   ethhdr = (struct eth_hdr *)p->payload;
 302:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   ethhdr->type = eth_type_be;
 303:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 304:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 305:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 306:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 307:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****               (netif->hwaddr_len == ETH_HWADDR_LEN));
 308:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 309:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****               ("ethernet_output: sending packet %p\n", (void *)p));
 310:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 311:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   /* send the packet */
 312:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   return netif->linkoutput(netif, p);
 313:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 314:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** pbuf_header_failed:
 315:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 316:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****               ("ethernet_output: could not allocate room for header.\n"));
 317:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   LINK_STATS_INC(link.lenerr);
 318:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   return ERR_BUF;
 282              	 .loc 1 318 0
 283 002a FE23     	 movs r3,#254
 284 002c 19E0     	 b .L22
 285              	.L20:
 301:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   ethhdr->type = eth_type_be;
 286              	 .loc 1 301 0
 287 002e BB68     	 ldr r3,[r7,#8]
 288 0030 5B68     	 ldr r3,[r3,#4]
 289 0032 3B61     	 str r3,[r7,#16]
 302:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 290              	 .loc 1 302 0
 291 0034 3B69     	 ldr r3,[r7,#16]
 292 0036 FA8A     	 ldrh r2,[r7,#22]
 293 0038 DA81     	 strh r2,[r3,#14]
 303:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c ****   SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 294              	 .loc 1 303 0
 295 003a 3B69     	 ldr r3,[r7,#16]
 296 003c 0233     	 adds r3,r3,#2
 297 003e 1846     	 mov r0,r3
 298 0040 3968     	 ldr r1,[r7]
 299 0042 0622     	 movs r2,#6
 300 0044 FFF7FEFF 	 bl memcpy
 304:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 301              	 .loc 1 304 0
 302 0048 3B69     	 ldr r3,[r7,#16]
 303 004a 0833     	 adds r3,r3,#8
 304 004c 1846     	 mov r0,r3
 305 004e 7968     	 ldr r1,[r7,#4]
 306 0050 0622     	 movs r2,#6
 307 0052 FFF7FEFF 	 bl memcpy
 312:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** 
 308              	 .loc 1 312 0
 309 0056 FB68     	 ldr r3,[r7,#12]
 310 0058 9B69     	 ldr r3,[r3,#24]
 311 005a F868     	 ldr r0,[r7,#12]
 312 005c B968     	 ldr r1,[r7,#8]
 313 005e 9847     	 blx r3
 314 0060 0346     	 mov r3,r0
 315              	.L22:
 316 0062 5BB2     	 sxtb r3,r3
 319:../Dave/Generated/ETH_LWIP/lwip/netif/ethernet.c **** }
 317              	 .loc 1 319 0
 318 0064 1846     	 mov r0,r3
 319 0066 1837     	 adds r7,r7,#24
 320              	.LCFI8:
 321              	 .cfi_def_cfa_offset 8
 322 0068 BD46     	 mov sp,r7
 323              	.LCFI9:
 324              	 .cfi_def_cfa_register 13
 325              	 
 326 006a 80BD     	 pop {r7,pc}
 327              	 .cfi_endproc
 328              	.LFE134:
 330              	 .text
 331              	.Letext0:
 332              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 333              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 334              	 .file 4 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/arch.h"
 335              	 .file 5 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/err.h"
 336              	 .file 6 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/pbuf.h"
 337              	 .file 7 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/ip4_addr.h"
 338              	 .file 8 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/ip_addr.h"
 339              	 .file 9 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/memp.h"
 340              	 .file 10 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/netif.h"
 341              	 .file 11 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/prot/ethernet.h"
 342              	 .file 12 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Libraries/CMSIS/Include/cmsis_gcc.h"
 343              	 .file 13 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Libraries/CMSIS/Include/core_cm4.h"
 344              	 .file 14 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/prot/ieee.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ethernet.c
    {standard input}:24     .rodata.ethbroadcast:00000000 ethbroadcast
    {standard input}:21     .rodata.ethbroadcast:00000000 $d
    {standard input}:36     .rodata.ethzero:00000000 ethzero
    {standard input}:33     .rodata.ethzero:00000000 $d
    {standard input}:39     .text.ethernet_input:00000000 $t
    {standard input}:44     .text.ethernet_input:00000000 ethernet_input
    {standard input}:235    .text.ethernet_input:00000114 $d
    {standard input}:240    .text.ethernet_output:00000000 $t
    {standard input}:245    .text.ethernet_output:00000000 ethernet_output
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memcmp
pbuf_remove_header
ip4_input
etharp_input
pbuf_free
lwip_htons
pbuf_add_header
memcpy
