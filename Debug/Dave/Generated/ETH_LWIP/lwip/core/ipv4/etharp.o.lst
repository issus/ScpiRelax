   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "etharp.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .bss.arp_table,"aw",%nobits
  20              	 .align 2
  23              	arp_table:
  24 0000 00000000 	 .space 240
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              	 .section .bss.etharp_cached_entry,"aw",%nobits
  28              	etharp_cached_entry:
  29 0000 00       	 .space 1
  30              	 .section .text.etharp_free_entry,"ax",%progbits
  31              	 .align 2
  32              	 .thumb
  33              	 .thumb_func
  35              	etharp_free_entry:
  36              	.LFB133:
  37              	 .file 1 "../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c"
   1:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /**
   2:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @file
   3:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Address Resolution Protocol module for IP over Ethernet
   4:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
   5:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Functionally, ARP is divided into two parts. The first maps an IP address
   6:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * to a physical address when sending a packet, and the second part answers
   7:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * requests from other machines for our physical address.
   8:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
   9:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * This implementation complies with RFC 826 (Ethernet ARP). It supports
  10:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Gratuitious ARP from RFC3220 (IP Mobility Support for IPv4) section 4.6
  11:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * if an interface calls etharp_gratuitous(our_netif) upon address change.
  12:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
  13:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
  14:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /*
  15:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Copyright (c) 2001-2003 Swedish Institute of Computer Science.
  16:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Copyright (c) 2003-2004 Leon Woestenberg <leon.woestenberg@axon.tv>
  17:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Copyright (c) 2003-2004 Axon Digital Design B.V., The Netherlands.
  18:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * All rights reserved.
  19:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
  20:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Redistribution and use in source and binary forms, with or without modification,
  21:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * are permitted provided that the following conditions are met:
  22:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
  23:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  24:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *    this list of conditions and the following disclaimer.
  25:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  26:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *    this list of conditions and the following disclaimer in the documentation
  27:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *    and/or other materials provided with the distribution.
  28:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * 3. The name of the author may not be used to endorse or promote products
  29:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *    derived from this software without specific prior written permission.
  30:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
  31:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  32:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  33:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  34:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  35:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  36:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  37:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  38:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  39:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  40:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * OF SUCH DAMAGE.
  41:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
  42:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * This file is part of the lwIP TCP/IP stack.
  43:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
  44:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
  45:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
  46:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #include "ETH_LWIP/lwip/include/lwip/opt.h"
  47:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
  48:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if LWIP_IPV4 && LWIP_ARP /* don't build if not configured for use in lwipopts.h */
  49:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
  50:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #include "ETH_LWIP/lwip/include/lwip/etharp.h"
  51:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #include "ETH_LWIP/lwip/include/lwip/stats.h"
  52:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #include "ETH_LWIP/lwip/include/lwip/snmp.h"
  53:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #include "ETH_LWIP/lwip/include/lwip/dhcp.h"
  54:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #include "ETH_LWIP/lwip/include/lwip/autoip.h"
  55:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #include "ETH_LWIP/lwip/include/lwip/prot/iana.h"
  56:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #include "ETH_LWIP/lwip/include/netif/ethernet.h"
  57:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
  58:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #include <string.h>
  59:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
  60:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #ifdef LWIP_HOOK_FILENAME
  61:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #include LWIP_HOOK_FILENAME
  62:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif
  63:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
  64:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /** Re-request a used ARP entry 1 minute before it would expire to prevent
  65:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *  breaking a steadily used connection because the ARP entry timed out. */
  66:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #define ARP_AGE_REREQUEST_USED_UNICAST   (ARP_MAXAGE - 30)
  67:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #define ARP_AGE_REREQUEST_USED_BROADCAST (ARP_MAXAGE - 15)
  68:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
  69:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /** the time an ARP entry stays pending after first request,
  70:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *  for ARP_TMR_INTERVAL = 1000, this is
  71:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *  10 seconds.
  72:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
  73:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *  @internal Keep this number at least 2, otherwise it might
  74:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *  run out instantly if the timeout occurs directly after a request.
  75:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
  76:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #define ARP_MAXPENDING 5
  77:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
  78:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /** ARP states */
  79:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** enum etharp_state {
  80:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   ETHARP_STATE_EMPTY = 0,
  81:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   ETHARP_STATE_PENDING,
  82:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   ETHARP_STATE_STABLE,
  83:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   ETHARP_STATE_STABLE_REREQUESTING_1,
  84:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   ETHARP_STATE_STABLE_REREQUESTING_2
  85:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if ETHARP_SUPPORT_STATIC_ENTRIES
  86:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   , ETHARP_STATE_STATIC
  87:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  88:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** };
  89:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
  90:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** struct etharp_entry {
  91:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if ARP_QUEUEING
  92:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /** Pointer to queue of pending outgoing packets on this ARP entry. */
  93:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   struct etharp_q_entry *q;
  94:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #else /* ARP_QUEUEING */
  95:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /** Pointer to a single pending outgoing packet on this ARP entry. */
  96:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   struct pbuf *q;
  97:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* ARP_QUEUEING */
  98:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   ip4_addr_t ipaddr;
  99:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   struct netif *netif;
 100:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   struct eth_addr ethaddr;
 101:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   u16_t ctime;
 102:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   u8_t state;
 103:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** };
 104:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 105:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** static struct etharp_entry arp_table[ARP_TABLE_SIZE];
 106:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 107:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if !LWIP_NETIF_HWADDRHINT
 108:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** static netif_addr_idx_t etharp_cached_entry;
 109:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* !LWIP_NETIF_HWADDRHINT */
 110:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 111:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /** Try hard to create a new entry - we want the IP address to appear in
 112:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     the cache (even if this means removing an active entry or so). */
 113:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #define ETHARP_FLAG_TRY_HARD     1
 114:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #define ETHARP_FLAG_FIND_ONLY    2
 115:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if ETHARP_SUPPORT_STATIC_ENTRIES
 116:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #define ETHARP_FLAG_STATIC_ENTRY 4
 117:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
 118:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 119:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 120:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #define ETHARP_SET_ADDRHINT(netif, addrhint)  do { if (((netif) != NULL) && ((netif)->hints != NULL
 121:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                                               (netif)->hints->addr_hint = (addrhint); }} while(0)
 122:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #else /* LWIP_NETIF_HWADDRHINT */
 123:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #define ETHARP_SET_ADDRHINT(netif, addrhint)  (etharp_cached_entry = (addrhint))
 124:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* LWIP_NETIF_HWADDRHINT */
 125:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 126:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 127:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /* Check for maximum ARP_TABLE_SIZE */
 128:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if (ARP_TABLE_SIZE > NETIF_ADDR_IDX_MAX)
 129:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #error "ARP_TABLE_SIZE must fit in an s16_t, you have to reduce it in your lwipopts.h"
 130:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif
 131:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 132:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 133:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** static err_t etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_add
 134:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** static err_t etharp_raw(struct netif *netif,
 135:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                         const struct eth_addr *ethsrc_addr, const struct eth_addr *ethdst_addr,
 136:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                         const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
 137:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                         const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
 138:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                         const u16_t opcode);
 139:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 140:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if ARP_QUEUEING
 141:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /**
 142:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Free a complete queue of etharp entries
 143:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 144:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param q a qeueue of etharp_q_entry's to free
 145:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
 146:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** static void
 147:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** free_etharp_q(struct etharp_q_entry *q)
 148:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
 149:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   struct etharp_q_entry *r;
 150:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("q != NULL", q != NULL);
 151:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   while (q) {
 152:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     r = q;
 153:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     q = q->next;
 154:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 155:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     pbuf_free(r->p);
 156:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     memp_free(MEMP_ARP_QUEUE, r);
 157:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 158:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
 159:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #else /* ARP_QUEUEING */
 160:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 161:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /** Compatibility define: free the queued pbuf */
 162:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #define free_etharp_q(q) pbuf_free(q)
 163:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 164:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* ARP_QUEUEING */
 165:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 166:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /** Clean up ARP table entries */
 167:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** static void
 168:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** etharp_free_entry(int i)
 169:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
  38              	 .loc 1 169 0
  39              	 .cfi_startproc
  40              	 
  41              	 
  42 0000 80B5     	 push {r7,lr}
  43              	.LCFI0:
  44              	 .cfi_def_cfa_offset 8
  45              	 .cfi_offset 7,-8
  46              	 .cfi_offset 14,-4
  47 0002 82B0     	 sub sp,sp,#8
  48              	.LCFI1:
  49              	 .cfi_def_cfa_offset 16
  50 0004 00AF     	 add r7,sp,#0
  51              	.LCFI2:
  52              	 .cfi_def_cfa_register 7
  53 0006 7860     	 str r0,[r7,#4]
 170:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* remove from SNMP ARP index tree */
 171:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
 172:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* and empty packet queue */
 173:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (arp_table[i].q != NULL) {
  54              	 .loc 1 173 0
  55 0008 1549     	 ldr r1,.L3
  56 000a 7A68     	 ldr r2,[r7,#4]
  57 000c 1346     	 mov r3,r2
  58 000e 5B00     	 lsls r3,r3,#1
  59 0010 1344     	 add r3,r3,r2
  60 0012 DB00     	 lsls r3,r3,#3
  61 0014 0B44     	 add r3,r3,r1
  62 0016 1B68     	 ldr r3,[r3]
  63 0018 002B     	 cmp r3,#0
  64 001a 13D0     	 beq .L2
 174:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* remove all queued packets */
 175:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u1
 176:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     free_etharp_q(arp_table[i].q);
  65              	 .loc 1 176 0
  66 001c 1049     	 ldr r1,.L3
  67 001e 7A68     	 ldr r2,[r7,#4]
  68 0020 1346     	 mov r3,r2
  69 0022 5B00     	 lsls r3,r3,#1
  70 0024 1344     	 add r3,r3,r2
  71 0026 DB00     	 lsls r3,r3,#3
  72 0028 0B44     	 add r3,r3,r1
  73 002a 1B68     	 ldr r3,[r3]
  74 002c 1846     	 mov r0,r3
  75 002e FFF7FEFF 	 bl pbuf_free
 177:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     arp_table[i].q = NULL;
  76              	 .loc 1 177 0
  77 0032 0B49     	 ldr r1,.L3
  78 0034 7A68     	 ldr r2,[r7,#4]
  79 0036 1346     	 mov r3,r2
  80 0038 5B00     	 lsls r3,r3,#1
  81 003a 1344     	 add r3,r3,r2
  82 003c DB00     	 lsls r3,r3,#3
  83 003e 0B44     	 add r3,r3,r1
  84 0040 0022     	 movs r2,#0
  85 0042 1A60     	 str r2,[r3]
  86              	.L2:
 178:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 179:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* recycle entry for re-use */
 180:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   arp_table[i].state = ETHARP_STATE_EMPTY;
  87              	 .loc 1 180 0
  88 0044 0649     	 ldr r1,.L3
  89 0046 7A68     	 ldr r2,[r7,#4]
  90 0048 1346     	 mov r3,r2
  91 004a 5B00     	 lsls r3,r3,#1
  92 004c 1344     	 add r3,r3,r2
  93 004e DB00     	 lsls r3,r3,#3
  94 0050 0B44     	 add r3,r3,r1
  95 0052 1033     	 adds r3,r3,#16
  96 0054 0022     	 movs r2,#0
  97 0056 1A71     	 strb r2,[r3,#4]
 181:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #ifdef LWIP_DEBUG
 182:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* for debugging, clean out the complete entry */
 183:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   arp_table[i].ctime = 0;
 184:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   arp_table[i].netif = NULL;
 185:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   ip4_addr_set_zero(&arp_table[i].ipaddr);
 186:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   arp_table[i].ethaddr = ethzero;
 187:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* LWIP_DEBUG */
 188:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
  98              	 .loc 1 188 0
  99 0058 0837     	 adds r7,r7,#8
 100              	.LCFI3:
 101              	 .cfi_def_cfa_offset 8
 102 005a BD46     	 mov sp,r7
 103              	.LCFI4:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 005c 80BD     	 pop {r7,pc}
 107              	.L4:
 108 005e 00BF     	 .align 2
 109              	.L3:
 110 0060 00000000 	 .word arp_table
 111              	 .cfi_endproc
 112              	.LFE133:
 114              	 .section .text.etharp_tmr,"ax",%progbits
 115              	 .align 2
 116              	 .global etharp_tmr
 117              	 .thumb
 118              	 .thumb_func
 120              	etharp_tmr:
 121              	.LFB134:
 189:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 190:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /**
 191:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Clears expired entries in the ARP table.
 192:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 193:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 194:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * in order to expire entries in the ARP table.
 195:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
 196:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** void
 197:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** etharp_tmr(void)
 198:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
 122              	 .loc 1 198 0
 123              	 .cfi_startproc
 124              	 
 125              	 
 126 0000 80B5     	 push {r7,lr}
 127              	.LCFI5:
 128              	 .cfi_def_cfa_offset 8
 129              	 .cfi_offset 7,-8
 130              	 .cfi_offset 14,-4
 131 0002 82B0     	 sub sp,sp,#8
 132              	.LCFI6:
 133              	 .cfi_def_cfa_offset 16
 134 0004 00AF     	 add r7,sp,#0
 135              	.LCFI7:
 136              	 .cfi_def_cfa_register 7
 199:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   int i;
 200:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 201:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
 202:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* remove expired entries from the ARP table */
 203:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 137              	 .loc 1 203 0
 138 0006 0023     	 movs r3,#0
 139 0008 7B60     	 str r3,[r7,#4]
 140 000a 97E0     	 b .L6
 141              	.L12:
 142              	.LBB2:
 204:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     u8_t state = arp_table[i].state;
 143              	 .loc 1 204 0
 144 000c 4F49     	 ldr r1,.L13
 145 000e 7A68     	 ldr r2,[r7,#4]
 146 0010 1346     	 mov r3,r2
 147 0012 5B00     	 lsls r3,r3,#1
 148 0014 1344     	 add r3,r3,r2
 149 0016 DB00     	 lsls r3,r3,#3
 150 0018 0B44     	 add r3,r3,r1
 151 001a 1033     	 adds r3,r3,#16
 152 001c 1B79     	 ldrb r3,[r3,#4]
 153 001e FB70     	 strb r3,[r7,#3]
 205:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     if (state != ETHARP_STATE_EMPTY
 154              	 .loc 1 205 0
 155 0020 FB78     	 ldrb r3,[r7,#3]
 156 0022 002B     	 cmp r3,#0
 157 0024 00F08780 	 beq .L7
 206:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if ETHARP_SUPPORT_STATIC_ENTRIES
 207:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         && (state != ETHARP_STATE_STATIC)
 208:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
 209:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****        ) {
 210:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       arp_table[i].ctime++;
 158              	 .loc 1 210 0
 159 0028 4849     	 ldr r1,.L13
 160 002a 7A68     	 ldr r2,[r7,#4]
 161 002c 1346     	 mov r3,r2
 162 002e 5B00     	 lsls r3,r3,#1
 163 0030 1344     	 add r3,r3,r2
 164 0032 DB00     	 lsls r3,r3,#3
 165 0034 0B44     	 add r3,r3,r1
 166 0036 1033     	 adds r3,r3,#16
 167 0038 5B88     	 ldrh r3,[r3,#2]
 168 003a 0133     	 adds r3,r3,#1
 169 003c 98B2     	 uxth r0,r3
 170 003e 4349     	 ldr r1,.L13
 171 0040 7A68     	 ldr r2,[r7,#4]
 172 0042 1346     	 mov r3,r2
 173 0044 5B00     	 lsls r3,r3,#1
 174 0046 1344     	 add r3,r3,r2
 175 0048 DB00     	 lsls r3,r3,#3
 176 004a 0B44     	 add r3,r3,r1
 177 004c 1033     	 adds r3,r3,#16
 178 004e 0246     	 mov r2,r0
 179 0050 5A80     	 strh r2,[r3,#2]
 211:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 180              	 .loc 1 211 0
 181 0052 3E49     	 ldr r1,.L13
 182 0054 7A68     	 ldr r2,[r7,#4]
 183 0056 1346     	 mov r3,r2
 184 0058 5B00     	 lsls r3,r3,#1
 185 005a 1344     	 add r3,r3,r2
 186 005c DB00     	 lsls r3,r3,#3
 187 005e 0B44     	 add r3,r3,r1
 188 0060 1033     	 adds r3,r3,#16
 189 0062 5B88     	 ldrh r3,[r3,#2]
 190 0064 B3F5967F 	 cmp r3,#300
 191 0068 15D2     	 bcs .L8
 212:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 192              	 .loc 1 212 0 discriminator 1
 193 006a 3849     	 ldr r1,.L13
 194 006c 7A68     	 ldr r2,[r7,#4]
 195 006e 1346     	 mov r3,r2
 196 0070 5B00     	 lsls r3,r3,#1
 197 0072 1344     	 add r3,r3,r2
 198 0074 DB00     	 lsls r3,r3,#3
 199 0076 0B44     	 add r3,r3,r1
 200 0078 1033     	 adds r3,r3,#16
 201 007a 1B79     	 ldrb r3,[r3,#4]
 211:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 202              	 .loc 1 211 0 discriminator 1
 203 007c 012B     	 cmp r3,#1
 204 007e 0ED1     	 bne .L9
 213:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****            (arp_table[i].ctime >= ARP_MAXPENDING))) {
 205              	 .loc 1 213 0
 206 0080 3249     	 ldr r1,.L13
 207 0082 7A68     	 ldr r2,[r7,#4]
 208 0084 1346     	 mov r3,r2
 209 0086 5B00     	 lsls r3,r3,#1
 210 0088 1344     	 add r3,r3,r2
 211 008a DB00     	 lsls r3,r3,#3
 212 008c 0B44     	 add r3,r3,r1
 213 008e 1033     	 adds r3,r3,#16
 214 0090 5B88     	 ldrh r3,[r3,#2]
 212:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 215              	 .loc 1 212 0
 216 0092 042B     	 cmp r3,#4
 217 0094 03D9     	 bls .L9
 218              	.L8:
 214:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* pending or stable entry has become old! */
 215:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
 216:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                                    arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending"
 217:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* clean up entries that have just been expired */
 218:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         etharp_free_entry(i);
 219              	 .loc 1 218 0
 220 0096 7868     	 ldr r0,[r7,#4]
 221 0098 FFF7FEFF 	 bl etharp_free_entry
 222 009c 4BE0     	 b .L7
 223              	.L9:
 219:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 224              	 .loc 1 219 0
 225 009e 2B49     	 ldr r1,.L13
 226 00a0 7A68     	 ldr r2,[r7,#4]
 227 00a2 1346     	 mov r3,r2
 228 00a4 5B00     	 lsls r3,r3,#1
 229 00a6 1344     	 add r3,r3,r2
 230 00a8 DB00     	 lsls r3,r3,#3
 231 00aa 0B44     	 add r3,r3,r1
 232 00ac 1033     	 adds r3,r3,#16
 233 00ae 1B79     	 ldrb r3,[r3,#4]
 234 00b0 032B     	 cmp r3,#3
 235 00b2 0AD1     	 bne .L10
 220:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* Don't send more than one request every 2 seconds. */
 221:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 236              	 .loc 1 221 0
 237 00b4 2549     	 ldr r1,.L13
 238 00b6 7A68     	 ldr r2,[r7,#4]
 239 00b8 1346     	 mov r3,r2
 240 00ba 5B00     	 lsls r3,r3,#1
 241 00bc 1344     	 add r3,r3,r2
 242 00be DB00     	 lsls r3,r3,#3
 243 00c0 0B44     	 add r3,r3,r1
 244 00c2 1033     	 adds r3,r3,#16
 245 00c4 0422     	 movs r2,#4
 246 00c6 1A71     	 strb r2,[r3,#4]
 247 00c8 35E0     	 b .L7
 248              	.L10:
 222:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 249              	 .loc 1 222 0
 250 00ca 2049     	 ldr r1,.L13
 251 00cc 7A68     	 ldr r2,[r7,#4]
 252 00ce 1346     	 mov r3,r2
 253 00d0 5B00     	 lsls r3,r3,#1
 254 00d2 1344     	 add r3,r3,r2
 255 00d4 DB00     	 lsls r3,r3,#3
 256 00d6 0B44     	 add r3,r3,r1
 257 00d8 1033     	 adds r3,r3,#16
 258 00da 1B79     	 ldrb r3,[r3,#4]
 259 00dc 042B     	 cmp r3,#4
 260 00de 0AD1     	 bne .L11
 223:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* Reset state to stable, so that the next transmitted packet will
 224:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****            re-send an ARP request. */
 225:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         arp_table[i].state = ETHARP_STATE_STABLE;
 261              	 .loc 1 225 0
 262 00e0 1A49     	 ldr r1,.L13
 263 00e2 7A68     	 ldr r2,[r7,#4]
 264 00e4 1346     	 mov r3,r2
 265 00e6 5B00     	 lsls r3,r3,#1
 266 00e8 1344     	 add r3,r3,r2
 267 00ea DB00     	 lsls r3,r3,#3
 268 00ec 0B44     	 add r3,r3,r1
 269 00ee 1033     	 adds r3,r3,#16
 270 00f0 0222     	 movs r2,#2
 271 00f2 1A71     	 strb r2,[r3,#4]
 272 00f4 1FE0     	 b .L7
 273              	.L11:
 226:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 274              	 .loc 1 226 0
 275 00f6 1549     	 ldr r1,.L13
 276 00f8 7A68     	 ldr r2,[r7,#4]
 277 00fa 1346     	 mov r3,r2
 278 00fc 5B00     	 lsls r3,r3,#1
 279 00fe 1344     	 add r3,r3,r2
 280 0100 DB00     	 lsls r3,r3,#3
 281 0102 0B44     	 add r3,r3,r1
 282 0104 1033     	 adds r3,r3,#16
 283 0106 1B79     	 ldrb r3,[r3,#4]
 284 0108 012B     	 cmp r3,#1
 285 010a 14D1     	 bne .L7
 227:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* still pending, resend an ARP query */
 228:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 286              	 .loc 1 228 0
 287 010c 0F49     	 ldr r1,.L13
 288 010e 7A68     	 ldr r2,[r7,#4]
 289 0110 1346     	 mov r3,r2
 290 0112 5B00     	 lsls r3,r3,#1
 291 0114 1344     	 add r3,r3,r2
 292 0116 DB00     	 lsls r3,r3,#3
 293 0118 0B44     	 add r3,r3,r1
 294 011a 0833     	 adds r3,r3,#8
 295 011c 1968     	 ldr r1,[r3]
 296 011e 7A68     	 ldr r2,[r7,#4]
 297 0120 1346     	 mov r3,r2
 298 0122 5B00     	 lsls r3,r3,#1
 299 0124 1344     	 add r3,r3,r2
 300 0126 DB00     	 lsls r3,r3,#3
 301 0128 084A     	 ldr r2,.L13
 302 012a 1344     	 add r3,r3,r2
 303 012c 0433     	 adds r3,r3,#4
 304 012e 0846     	 mov r0,r1
 305 0130 1946     	 mov r1,r3
 306 0132 FFF7FEFF 	 bl etharp_request
 307              	.L7:
 308              	.LBE2:
 203:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     u8_t state = arp_table[i].state;
 309              	 .loc 1 203 0 discriminator 2
 310 0136 7B68     	 ldr r3,[r7,#4]
 311 0138 0133     	 adds r3,r3,#1
 312 013a 7B60     	 str r3,[r7,#4]
 313              	.L6:
 203:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     u8_t state = arp_table[i].state;
 314              	 .loc 1 203 0 is_stmt 0 discriminator 1
 315 013c 7B68     	 ldr r3,[r7,#4]
 316 013e 092B     	 cmp r3,#9
 317 0140 7FF764AF 	 ble .L12
 229:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       }
 230:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     }
 231:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 232:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
 318              	 .loc 1 232 0 is_stmt 1
 319 0144 0837     	 adds r7,r7,#8
 320              	.LCFI8:
 321              	 .cfi_def_cfa_offset 8
 322 0146 BD46     	 mov sp,r7
 323              	.LCFI9:
 324              	 .cfi_def_cfa_register 13
 325              	 
 326 0148 80BD     	 pop {r7,pc}
 327              	.L14:
 328 014a 00BF     	 .align 2
 329              	.L13:
 330 014c 00000000 	 .word arp_table
 331              	 .cfi_endproc
 332              	.LFE134:
 334              	 .section .text.etharp_find_entry,"ax",%progbits
 335              	 .align 2
 336              	 .thumb
 337              	 .thumb_func
 339              	etharp_find_entry:
 340              	.LFB135:
 233:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 234:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /**
 235:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Search the ARP table for a matching or new entry.
 236:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 237:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * If an IP address is given, return a pending or stable ARP entry that matches
 238:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * the address. If no match is found, create a new entry with this address set,
 239:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * but in state ETHARP_EMPTY. The caller must check and possibly change the
 240:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * state of the returned entry.
 241:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 242:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * If ipaddr is NULL, return a initialized new entry in state ETHARP_EMPTY.
 243:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 244:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * In all cases, attempt to create new entries from an empty entry. If no
 245:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * empty entries are available and ETHARP_FLAG_TRY_HARD flag is set, recycle
 246:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * old entries. Heuristic choose the least important entry for recycling.
 247:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 248:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ipaddr IP address to find in ARP cache, or to add if not found.
 249:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param flags See @ref etharp_state
 250:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param netif netif related to this address (used for NETIF_HWADDRHINT)
 251:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 252:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @return The ARP entry index that matched or is created, ERR_MEM if no
 253:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * entry is found or could be recycled.
 254:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
 255:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** static s16_t
 256:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
 257:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
 341              	 .loc 1 257 0
 342              	 .cfi_startproc
 343              	 
 344              	 
 345 0000 80B5     	 push {r7,lr}
 346              	.LCFI10:
 347              	 .cfi_def_cfa_offset 8
 348              	 .cfi_offset 7,-8
 349              	 .cfi_offset 14,-4
 350 0002 8AB0     	 sub sp,sp,#40
 351              	.LCFI11:
 352              	 .cfi_def_cfa_offset 48
 353 0004 00AF     	 add r7,sp,#0
 354              	.LCFI12:
 355              	 .cfi_def_cfa_register 7
 356 0006 F860     	 str r0,[r7,#12]
 357 0008 0B46     	 mov r3,r1
 358 000a 7A60     	 str r2,[r7,#4]
 359 000c FB72     	 strb r3,[r7,#11]
 258:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 360              	 .loc 1 258 0
 361 000e 0A23     	 movs r3,#10
 362 0010 FB84     	 strh r3,[r7,#38]
 363 0012 0A23     	 movs r3,#10
 364 0014 BB84     	 strh r3,[r7,#36]
 259:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   s16_t empty = ARP_TABLE_SIZE;
 365              	 .loc 1 259 0
 366 0016 0A23     	 movs r3,#10
 367 0018 7B84     	 strh r3,[r7,#34]
 260:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   s16_t i = 0;
 368              	 .loc 1 260 0
 369 001a 0023     	 movs r3,#0
 370 001c 3B84     	 strh r3,[r7,#32]
 261:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* oldest entry with packets on queue */
 262:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   s16_t old_queue = ARP_TABLE_SIZE;
 371              	 .loc 1 262 0
 372 001e 0A23     	 movs r3,#10
 373 0020 FB83     	 strh r3,[r7,#30]
 263:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* its age */
 264:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 374              	 .loc 1 264 0
 375 0022 0023     	 movs r3,#0
 376 0024 BB83     	 strh r3,[r7,#28]
 377 0026 0023     	 movs r3,#0
 378 0028 7B83     	 strh r3,[r7,#26]
 379 002a 0023     	 movs r3,#0
 380 002c 3B83     	 strh r3,[r7,#24]
 265:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 266:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_UNUSED_ARG(netif);
 267:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 268:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /**
 269:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * a) do a search through the cache, remember candidates
 270:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * b) select candidate entry
 271:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * c) create new entry
 272:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    */
 273:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 274:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* a) in a single search sweep, do all of this
 275:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * 1) remember the first empty entry (if any)
 276:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * 2) remember the oldest stable entry (if any)
 277:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * 3) remember the oldest pending entry without queued packets (if any)
 278:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * 4) remember the oldest pending entry with queued packets (if any)
 279:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * 5) search for a matching IP entry, either pending or stable
 280:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    *    until 5 matches, or all entries are searched for.
 281:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    */
 282:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 283:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 381              	 .loc 1 283 0
 382 002e 0023     	 movs r3,#0
 383 0030 3B84     	 strh r3,[r7,#32]
 384 0032 9FE0     	 b .L16
 385              	.L26:
 386              	.LBB3:
 284:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     u8_t state = arp_table[i].state;
 387              	 .loc 1 284 0
 388 0034 B7F92020 	 ldrsh r2,[r7,#32]
 389 0038 8049     	 ldr r1,.L36
 390 003a 1346     	 mov r3,r2
 391 003c 5B00     	 lsls r3,r3,#1
 392 003e 1344     	 add r3,r3,r2
 393 0040 DB00     	 lsls r3,r3,#3
 394 0042 0B44     	 add r3,r3,r1
 395 0044 1033     	 adds r3,r3,#16
 396 0046 1B79     	 ldrb r3,[r3,#4]
 397 0048 FB75     	 strb r3,[r7,#23]
 285:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* no empty entry found yet and now we do find one? */
 286:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 398              	 .loc 1 286 0
 399 004a B7F92230 	 ldrsh r3,[r7,#34]
 400 004e 0A2B     	 cmp r3,#10
 401 0050 05D1     	 bne .L17
 402              	 .loc 1 286 0 is_stmt 0 discriminator 1
 403 0052 FB7D     	 ldrb r3,[r7,#23]
 404 0054 002B     	 cmp r3,#0
 405 0056 02D1     	 bne .L17
 287:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
 288:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* remember first empty entry */
 289:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       empty = i;
 406              	 .loc 1 289 0 is_stmt 1
 407 0058 3B8C     	 ldrh r3,[r7,#32]
 408 005a 7B84     	 strh r3,[r7,#34]
 409 005c 86E0     	 b .L18
 410              	.L17:
 290:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     } else if (state != ETHARP_STATE_EMPTY) {
 411              	 .loc 1 290 0
 412 005e FB7D     	 ldrb r3,[r7,#23]
 413 0060 002B     	 cmp r3,#0
 414 0062 00F08380 	 beq .L18
 291:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 292:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                   state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
 293:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* if given, does IP address match IP address in ARP entry? */
 294:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 415              	 .loc 1 294 0
 416 0066 FB68     	 ldr r3,[r7,#12]
 417 0068 002B     	 cmp r3,#0
 418 006a 1ED0     	 beq .L19
 419              	 .loc 1 294 0 is_stmt 0 discriminator 1
 420 006c FB68     	 ldr r3,[r7,#12]
 421 006e 1968     	 ldr r1,[r3]
 422 0070 B7F92020 	 ldrsh r2,[r7,#32]
 423 0074 7148     	 ldr r0,.L36
 424 0076 1346     	 mov r3,r2
 425 0078 5B00     	 lsls r3,r3,#1
 426 007a 1344     	 add r3,r3,r2
 427 007c DB00     	 lsls r3,r3,#3
 428 007e 0344     	 add r3,r3,r0
 429 0080 5B68     	 ldr r3,[r3,#4]
 430 0082 9942     	 cmp r1,r3
 431 0084 11D1     	 bne .L19
 295:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if ETHARP_TABLE_MATCH_NETIF
 296:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           && ((netif == NULL) || (netif == arp_table[i].netif))
 432              	 .loc 1 296 0 is_stmt 1
 433 0086 7B68     	 ldr r3,[r7,#4]
 434 0088 002B     	 cmp r3,#0
 435 008a 0CD0     	 beq .L20
 436              	 .loc 1 296 0 is_stmt 0 discriminator 1
 437 008c B7F92020 	 ldrsh r2,[r7,#32]
 438 0090 6A49     	 ldr r1,.L36
 439 0092 1346     	 mov r3,r2
 440 0094 5B00     	 lsls r3,r3,#1
 441 0096 1344     	 add r3,r3,r2
 442 0098 DB00     	 lsls r3,r3,#3
 443 009a 0B44     	 add r3,r3,r1
 444 009c 0833     	 adds r3,r3,#8
 445 009e 1A68     	 ldr r2,[r3]
 446 00a0 7B68     	 ldr r3,[r7,#4]
 447 00a2 9A42     	 cmp r2,r3
 448 00a4 01D1     	 bne .L19
 449              	.L20:
 297:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* ETHARP_TABLE_MATCH_NETIF */
 298:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****          ) {
 299:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n",
 300:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* found exact IP address match, simply bail out */
 301:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         return i;
 450              	 .loc 1 301 0 is_stmt 1
 451 00a6 3B8C     	 ldrh r3,[r7,#32]
 452 00a8 C3E0     	 b .L21
 453              	.L19:
 302:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       }
 303:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* pending entry? */
 304:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       if (state == ETHARP_STATE_PENDING) {
 454              	 .loc 1 304 0
 455 00aa FB7D     	 ldrb r3,[r7,#23]
 456 00ac 012B     	 cmp r3,#1
 457 00ae 40D1     	 bne .L22
 305:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* pending with queued packets? */
 306:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         if (arp_table[i].q != NULL) {
 458              	 .loc 1 306 0
 459 00b0 B7F92020 	 ldrsh r2,[r7,#32]
 460 00b4 6149     	 ldr r1,.L36
 461 00b6 1346     	 mov r3,r2
 462 00b8 5B00     	 lsls r3,r3,#1
 463 00ba 1344     	 add r3,r3,r2
 464 00bc DB00     	 lsls r3,r3,#3
 465 00be 0B44     	 add r3,r3,r1
 466 00c0 1B68     	 ldr r3,[r3]
 467 00c2 002B     	 cmp r3,#0
 468 00c4 1AD0     	 beq .L23
 307:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           if (arp_table[i].ctime >= age_queue) {
 469              	 .loc 1 307 0
 470 00c6 B7F92020 	 ldrsh r2,[r7,#32]
 471 00ca 5C49     	 ldr r1,.L36
 472 00cc 1346     	 mov r3,r2
 473 00ce 5B00     	 lsls r3,r3,#1
 474 00d0 1344     	 add r3,r3,r2
 475 00d2 DB00     	 lsls r3,r3,#3
 476 00d4 0B44     	 add r3,r3,r1
 477 00d6 1033     	 adds r3,r3,#16
 478 00d8 5B88     	 ldrh r3,[r3,#2]
 479 00da BA8B     	 ldrh r2,[r7,#28]
 480 00dc 9A42     	 cmp r2,r3
 481 00de 45D8     	 bhi .L18
 308:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****             old_queue = i;
 482              	 .loc 1 308 0
 483 00e0 3B8C     	 ldrh r3,[r7,#32]
 484 00e2 FB83     	 strh r3,[r7,#30]
 309:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****             age_queue = arp_table[i].ctime;
 485              	 .loc 1 309 0
 486 00e4 B7F92020 	 ldrsh r2,[r7,#32]
 487 00e8 5449     	 ldr r1,.L36
 488 00ea 1346     	 mov r3,r2
 489 00ec 5B00     	 lsls r3,r3,#1
 490 00ee 1344     	 add r3,r3,r2
 491 00f0 DB00     	 lsls r3,r3,#3
 492 00f2 0B44     	 add r3,r3,r1
 493 00f4 1033     	 adds r3,r3,#16
 494 00f6 5B88     	 ldrh r3,[r3,#2]
 495 00f8 BB83     	 strh r3,[r7,#28]
 496 00fa 37E0     	 b .L18
 497              	.L23:
 310:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           }
 311:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         } else
 312:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           /* pending without queued packets? */
 313:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         {
 314:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           if (arp_table[i].ctime >= age_pending) {
 498              	 .loc 1 314 0
 499 00fc B7F92020 	 ldrsh r2,[r7,#32]
 500 0100 4E49     	 ldr r1,.L36
 501 0102 1346     	 mov r3,r2
 502 0104 5B00     	 lsls r3,r3,#1
 503 0106 1344     	 add r3,r3,r2
 504 0108 DB00     	 lsls r3,r3,#3
 505 010a 0B44     	 add r3,r3,r1
 506 010c 1033     	 adds r3,r3,#16
 507 010e 5B88     	 ldrh r3,[r3,#2]
 508 0110 7A8B     	 ldrh r2,[r7,#26]
 509 0112 9A42     	 cmp r2,r3
 510 0114 2AD8     	 bhi .L18
 315:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****             old_pending = i;
 511              	 .loc 1 315 0
 512 0116 3B8C     	 ldrh r3,[r7,#32]
 513 0118 FB84     	 strh r3,[r7,#38]
 316:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****             age_pending = arp_table[i].ctime;
 514              	 .loc 1 316 0
 515 011a B7F92020 	 ldrsh r2,[r7,#32]
 516 011e 4749     	 ldr r1,.L36
 517 0120 1346     	 mov r3,r2
 518 0122 5B00     	 lsls r3,r3,#1
 519 0124 1344     	 add r3,r3,r2
 520 0126 DB00     	 lsls r3,r3,#3
 521 0128 0B44     	 add r3,r3,r1
 522 012a 1033     	 adds r3,r3,#16
 523 012c 5B88     	 ldrh r3,[r3,#2]
 524 012e 7B83     	 strh r3,[r7,#26]
 525 0130 1CE0     	 b .L18
 526              	.L22:
 317:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           }
 318:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         }
 319:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* stable entry? */
 320:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       } else if (state >= ETHARP_STATE_STABLE) {
 527              	 .loc 1 320 0
 528 0132 FB7D     	 ldrb r3,[r7,#23]
 529 0134 012B     	 cmp r3,#1
 530 0136 19D9     	 bls .L18
 321:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if ETHARP_SUPPORT_STATIC_ENTRIES
 322:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* don't record old_stable for static entries since they never expire */
 323:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         if (state < ETHARP_STATE_STATIC)
 324:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
 325:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         {
 326:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           /* remember entry with oldest stable entry in oldest, its age in maxtime */
 327:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           if (arp_table[i].ctime >= age_stable) {
 531              	 .loc 1 327 0
 532 0138 B7F92020 	 ldrsh r2,[r7,#32]
 533 013c 3F49     	 ldr r1,.L36
 534 013e 1346     	 mov r3,r2
 535 0140 5B00     	 lsls r3,r3,#1
 536 0142 1344     	 add r3,r3,r2
 537 0144 DB00     	 lsls r3,r3,#3
 538 0146 0B44     	 add r3,r3,r1
 539 0148 1033     	 adds r3,r3,#16
 540 014a 5B88     	 ldrh r3,[r3,#2]
 541 014c 3A8B     	 ldrh r2,[r7,#24]
 542 014e 9A42     	 cmp r2,r3
 543 0150 0CD8     	 bhi .L18
 328:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****             old_stable = i;
 544              	 .loc 1 328 0
 545 0152 3B8C     	 ldrh r3,[r7,#32]
 546 0154 BB84     	 strh r3,[r7,#36]
 329:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****             age_stable = arp_table[i].ctime;
 547              	 .loc 1 329 0
 548 0156 B7F92020 	 ldrsh r2,[r7,#32]
 549 015a 3849     	 ldr r1,.L36
 550 015c 1346     	 mov r3,r2
 551 015e 5B00     	 lsls r3,r3,#1
 552 0160 1344     	 add r3,r3,r2
 553 0162 DB00     	 lsls r3,r3,#3
 554 0164 0B44     	 add r3,r3,r1
 555 0166 1033     	 adds r3,r3,#16
 556 0168 5B88     	 ldrh r3,[r3,#2]
 557 016a 3B83     	 strh r3,[r7,#24]
 558              	.L18:
 559              	.LBE3:
 283:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     u8_t state = arp_table[i].state;
 560              	 .loc 1 283 0 discriminator 2
 561 016c 3B8C     	 ldrh r3,[r7,#32]
 562 016e 0133     	 adds r3,r3,#1
 563 0170 9BB2     	 uxth r3,r3
 564 0172 3B84     	 strh r3,[r7,#32]
 565              	.L16:
 283:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     u8_t state = arp_table[i].state;
 566              	 .loc 1 283 0 is_stmt 0 discriminator 1
 567 0174 B7F92030 	 ldrsh r3,[r7,#32]
 568 0178 092B     	 cmp r3,#9
 569 017a 7FF75BAF 	 ble .L26
 330:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           }
 331:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         }
 332:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       }
 333:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     }
 334:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 335:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* { we have no match } => try to create a new entry */
 336:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 337:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* don't create new entry, only search? */
 338:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 570              	 .loc 1 338 0 is_stmt 1
 571 017e FB7A     	 ldrb r3,[r7,#11]
 572 0180 03F00203 	 and r3,r3,#2
 573 0184 002B     	 cmp r3,#0
 574 0186 08D1     	 bne .L27
 575              	 .loc 1 338 0 is_stmt 0 discriminator 1
 576 0188 B7F92230 	 ldrsh r3,[r7,#34]
 577 018c 0A2B     	 cmp r3,#10
 578 018e 07D1     	 bne .L28
 339:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* or no empty entry found and not allowed to recycle? */
 340:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 579              	 .loc 1 340 0 is_stmt 1
 580 0190 FB7A     	 ldrb r3,[r7,#11]
 581 0192 03F00103 	 and r3,r3,#1
 582 0196 002B     	 cmp r3,#0
 583 0198 02D1     	 bne .L28
 584              	.L27:
 341:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not al
 342:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     return (s16_t)ERR_MEM;
 585              	 .loc 1 342 0
 586 019a 4FF6FF73 	 movw r3,#65535
 587 019e 48E0     	 b .L21
 588              	.L28:
 343:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 344:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 345:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* b) choose the least destructive entry to recycle:
 346:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * 1) empty entry
 347:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * 2) oldest stable entry
 348:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * 3) oldest pending entry without queued packets
 349:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * 4) oldest pending entry with queued packets
 350:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    *
 351:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * { ETHARP_FLAG_TRY_HARD is set at this point }
 352:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    */
 353:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 354:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* 1) empty entry available? */
 355:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (empty < ARP_TABLE_SIZE) {
 589              	 .loc 1 355 0
 590 01a0 B7F92230 	 ldrsh r3,[r7,#34]
 591 01a4 092B     	 cmp r3,#9
 592 01a6 02DC     	 bgt .L29
 356:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     i = empty;
 593              	 .loc 1 356 0
 594 01a8 7B8C     	 ldrh r3,[r7,#34]
 595 01aa 3B84     	 strh r3,[r7,#32]
 596 01ac 1CE0     	 b .L30
 597              	.L29:
 357:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (i
 358:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   } else {
 359:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* 2) found recyclable stable entry? */
 360:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     if (old_stable < ARP_TABLE_SIZE) {
 598              	 .loc 1 360 0
 599 01ae B7F92430 	 ldrsh r3,[r7,#36]
 600 01b2 092B     	 cmp r3,#9
 601 01b4 02DC     	 bgt .L31
 361:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* recycle oldest stable*/
 362:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       i = old_stable;
 602              	 .loc 1 362 0
 603 01b6 BB8C     	 ldrh r3,[r7,#36]
 604 01b8 3B84     	 strh r3,[r7,#32]
 605 01ba 10E0     	 b .L32
 606              	.L31:
 363:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry
 364:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* no queued packets should exist on stable entries */
 365:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 366:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* 3) found recyclable pending entry without queued packets? */
 367:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     } else if (old_pending < ARP_TABLE_SIZE) {
 607              	 .loc 1 367 0
 608 01bc B7F92630 	 ldrsh r3,[r7,#38]
 609 01c0 092B     	 cmp r3,#9
 610 01c2 02DC     	 bgt .L33
 368:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* recycle oldest pending */
 369:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       i = old_pending;
 611              	 .loc 1 369 0
 612 01c4 FB8C     	 ldrh r3,[r7,#38]
 613 01c6 3B84     	 strh r3,[r7,#32]
 614 01c8 09E0     	 b .L32
 615              	.L33:
 370:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entr
 371:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* 4) found recyclable pending entry with queued packets? */
 372:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     } else if (old_queue < ARP_TABLE_SIZE) {
 616              	 .loc 1 372 0
 617 01ca B7F91E30 	 ldrsh r3,[r7,#30]
 618 01ce 092B     	 cmp r3,#9
 619 01d0 02DC     	 bgt .L34
 373:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* recycle oldest pending (queued packets are free in etharp_free_entry) */
 374:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       i = old_queue;
 620              	 .loc 1 374 0
 621 01d2 FB8B     	 ldrh r3,[r7,#30]
 622 01d4 3B84     	 strh r3,[r7,#32]
 623 01d6 02E0     	 b .L32
 624              	.L34:
 375:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entr
 376:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* no empty or recyclable entries found */
 377:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     } else {
 378:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entrie
 379:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       return (s16_t)ERR_MEM;
 625              	 .loc 1 379 0
 626 01d8 4FF6FF73 	 movw r3,#65535
 627 01dc 29E0     	 b .L21
 628              	.L32:
 380:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     }
 381:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 382:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* { empty or recyclable entry found } */
 383:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 384:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     etharp_free_entry(i);
 629              	 .loc 1 384 0
 630 01de B7F92030 	 ldrsh r3,[r7,#32]
 631 01e2 1846     	 mov r0,r3
 632 01e4 FFF7FEFF 	 bl etharp_free_entry
 633              	.L30:
 385:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 386:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 387:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 388:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 389:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****               arp_table[i].state == ETHARP_STATE_EMPTY);
 390:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 391:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* IP address given? */
 392:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (ipaddr != NULL) {
 634              	 .loc 1 392 0
 635 01e8 FB68     	 ldr r3,[r7,#12]
 636 01ea 002B     	 cmp r3,#0
 637 01ec 0AD0     	 beq .L35
 393:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* set IP address */
 394:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 638              	 .loc 1 394 0
 639 01ee B7F92020 	 ldrsh r2,[r7,#32]
 640 01f2 FB68     	 ldr r3,[r7,#12]
 641 01f4 1968     	 ldr r1,[r3]
 642 01f6 1148     	 ldr r0,.L36
 643 01f8 1346     	 mov r3,r2
 644 01fa 5B00     	 lsls r3,r3,#1
 645 01fc 1344     	 add r3,r3,r2
 646 01fe DB00     	 lsls r3,r3,#3
 647 0200 0344     	 add r3,r3,r0
 648 0202 5960     	 str r1,[r3,#4]
 649              	.L35:
 395:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 396:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   arp_table[i].ctime = 0;
 650              	 .loc 1 396 0
 651 0204 B7F92020 	 ldrsh r2,[r7,#32]
 652 0208 0C49     	 ldr r1,.L36
 653 020a 1346     	 mov r3,r2
 654 020c 5B00     	 lsls r3,r3,#1
 655 020e 1344     	 add r3,r3,r2
 656 0210 DB00     	 lsls r3,r3,#3
 657 0212 0B44     	 add r3,r3,r1
 658 0214 1033     	 adds r3,r3,#16
 659 0216 0022     	 movs r2,#0
 660 0218 5A80     	 strh r2,[r3,#2]
 397:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if ETHARP_TABLE_MATCH_NETIF
 398:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   arp_table[i].netif = netif;
 661              	 .loc 1 398 0
 662 021a B7F92020 	 ldrsh r2,[r7,#32]
 663 021e 0749     	 ldr r1,.L36
 664 0220 1346     	 mov r3,r2
 665 0222 5B00     	 lsls r3,r3,#1
 666 0224 1344     	 add r3,r3,r2
 667 0226 DB00     	 lsls r3,r3,#3
 668 0228 0B44     	 add r3,r3,r1
 669 022a 0833     	 adds r3,r3,#8
 670 022c 7A68     	 ldr r2,[r7,#4]
 671 022e 1A60     	 str r2,[r3]
 399:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* ETHARP_TABLE_MATCH_NETIF */
 400:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   return (s16_t)i;
 672              	 .loc 1 400 0
 673 0230 3B8C     	 ldrh r3,[r7,#32]
 674              	.L21:
 675 0232 1BB2     	 sxth r3,r3
 401:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
 676              	 .loc 1 401 0
 677 0234 1846     	 mov r0,r3
 678 0236 2837     	 adds r7,r7,#40
 679              	.LCFI13:
 680              	 .cfi_def_cfa_offset 8
 681 0238 BD46     	 mov sp,r7
 682              	.LCFI14:
 683              	 .cfi_def_cfa_register 13
 684              	 
 685 023a 80BD     	 pop {r7,pc}
 686              	.L37:
 687              	 .align 2
 688              	.L36:
 689 023c 00000000 	 .word arp_table
 690              	 .cfi_endproc
 691              	.LFE135:
 693              	 .section .text.etharp_update_arp_entry,"ax",%progbits
 694              	 .align 2
 695              	 .thumb
 696              	 .thumb_func
 698              	etharp_update_arp_entry:
 699              	.LFB136:
 402:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 403:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /**
 404:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Update (or insert) a IP/MAC address pair in the ARP cache.
 405:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 406:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * If a pending entry is resolved, any queued packets will be sent
 407:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * at this point.
 408:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 409:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param netif netif related to this entry (used for NETIF_ADDRHINT)
 410:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ipaddr IP address of the inserted ARP entry.
 411:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ethaddr Ethernet address of the inserted ARP entry.
 412:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param flags See @ref etharp_state
 413:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 414:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @return
 415:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * - ERR_OK Successfully updated ARP cache.
 416:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * - ERR_MEM If we could not add a new ARP entry when ETHARP_FLAG_TRY_HARD was set.
 417:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 418:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 419:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @see pbuf_free()
 420:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
 421:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** static err_t
 422:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8
 423:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
 700              	 .loc 1 423 0
 701              	 .cfi_startproc
 702              	 
 703              	 
 704 0000 80B5     	 push {r7,lr}
 705              	.LCFI15:
 706              	 .cfi_def_cfa_offset 8
 707              	 .cfi_offset 7,-8
 708              	 .cfi_offset 14,-4
 709 0002 88B0     	 sub sp,sp,#32
 710              	.LCFI16:
 711              	 .cfi_def_cfa_offset 40
 712 0004 02AF     	 add r7,sp,#8
 713              	.LCFI17:
 714              	 .cfi_def_cfa 7,32
 715 0006 F860     	 str r0,[r7,#12]
 716 0008 B960     	 str r1,[r7,#8]
 717 000a 7A60     	 str r2,[r7,#4]
 718 000c FB70     	 strb r3,[r7,#3]
 424:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   s16_t i;
 425:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 426:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".
 427:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****               ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr
 428:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****               (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
 429:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****               (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
 430:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* non-unicast address? */
 431:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (ip4_addr_isany(ipaddr) ||
 719              	 .loc 1 431 0
 720 000e BB68     	 ldr r3,[r7,#8]
 721 0010 002B     	 cmp r3,#0
 722 0012 12D0     	 beq .L39
 723              	 .loc 1 431 0 is_stmt 0 discriminator 1
 724 0014 BB68     	 ldr r3,[r7,#8]
 725 0016 1B68     	 ldr r3,[r3]
 726 0018 002B     	 cmp r3,#0
 727 001a 0ED0     	 beq .L39
 432:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       ip4_addr_isbroadcast(ipaddr, netif) ||
 728              	 .loc 1 432 0 is_stmt 1 discriminator 2
 729 001c BB68     	 ldr r3,[r7,#8]
 730 001e 1B68     	 ldr r3,[r3]
 731 0020 1846     	 mov r0,r3
 732 0022 F968     	 ldr r1,[r7,#12]
 733 0024 FFF7FEFF 	 bl ip4_addr_isbroadcast_u32
 734 0028 0346     	 mov r3,r0
 431:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       ip4_addr_isbroadcast(ipaddr, netif) ||
 735              	 .loc 1 431 0 discriminator 2
 736 002a 002B     	 cmp r3,#0
 737 002c 05D1     	 bne .L39
 433:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       ip4_addr_ismulticast(ipaddr)) {
 738              	 .loc 1 433 0
 739 002e BB68     	 ldr r3,[r7,#8]
 740 0030 1B68     	 ldr r3,[r3]
 741 0032 03F0F003 	 and r3,r3,#240
 432:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       ip4_addr_isbroadcast(ipaddr, netif) ||
 742              	 .loc 1 432 0
 743 0036 E02B     	 cmp r3,#224
 744 0038 01D1     	 bne .L40
 745              	.L39:
 434:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast 
 435:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     return ERR_ARG;
 746              	 .loc 1 435 0
 747 003a F023     	 movs r3,#240
 748 003c 6CE0     	 b .L41
 749              	.L40:
 436:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 437:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* find or create ARP entry */
 438:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   i = etharp_find_entry(ipaddr, flags, netif);
 750              	 .loc 1 438 0
 751 003e FB78     	 ldrb r3,[r7,#3]
 752 0040 B868     	 ldr r0,[r7,#8]
 753 0042 1946     	 mov r1,r3
 754 0044 FA68     	 ldr r2,[r7,#12]
 755 0046 FFF7FEFF 	 bl etharp_find_entry
 756 004a 0346     	 mov r3,r0
 757 004c FB82     	 strh r3,[r7,#22]
 439:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* bail out if no entry could be found */
 440:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (i < 0) {
 758              	 .loc 1 440 0
 759 004e B7F91630 	 ldrsh r3,[r7,#22]
 760 0052 002B     	 cmp r3,#0
 761 0054 02DA     	 bge .L42
 441:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     return (err_t)i;
 762              	 .loc 1 441 0
 763 0056 FB8A     	 ldrh r3,[r7,#22]
 764 0058 DBB2     	 uxtb r3,r3
 765 005a 5DE0     	 b .L41
 766              	.L42:
 442:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 443:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 444:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if ETHARP_SUPPORT_STATIC_ENTRIES
 445:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 446:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* record static type */
 447:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     arp_table[i].state = ETHARP_STATE_STATIC;
 448:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 449:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* found entry is a static type, don't overwrite it */
 450:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     return ERR_VAL;
 451:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   } else
 452:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
 453:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   {
 454:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* mark it stable */
 455:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     arp_table[i].state = ETHARP_STATE_STABLE;
 767              	 .loc 1 455 0
 768 005c B7F91620 	 ldrsh r2,[r7,#22]
 769 0060 3049     	 ldr r1,.L44
 770 0062 1346     	 mov r3,r2
 771 0064 5B00     	 lsls r3,r3,#1
 772 0066 1344     	 add r3,r3,r2
 773 0068 DB00     	 lsls r3,r3,#3
 774 006a 0B44     	 add r3,r3,r1
 775 006c 1033     	 adds r3,r3,#16
 776 006e 0222     	 movs r2,#2
 777 0070 1A71     	 strb r2,[r3,#4]
 456:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 457:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 458:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* record network interface */
 459:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   arp_table[i].netif = netif;
 778              	 .loc 1 459 0
 779 0072 B7F91620 	 ldrsh r2,[r7,#22]
 780 0076 2B49     	 ldr r1,.L44
 781 0078 1346     	 mov r3,r2
 782 007a 5B00     	 lsls r3,r3,#1
 783 007c 1344     	 add r3,r3,r2
 784 007e DB00     	 lsls r3,r3,#3
 785 0080 0B44     	 add r3,r3,r1
 786 0082 0833     	 adds r3,r3,#8
 787 0084 FA68     	 ldr r2,[r7,#12]
 788 0086 1A60     	 str r2,[r3]
 460:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* insert in SNMP ARP index tree */
 461:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   mib2_add_arp_entry(netif, &arp_table[i].ipaddr);
 462:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 463:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16
 464:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* update address */
 465:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 789              	 .loc 1 465 0
 790 0088 B7F91620 	 ldrsh r2,[r7,#22]
 791 008c 1346     	 mov r3,r2
 792 008e 5B00     	 lsls r3,r3,#1
 793 0090 1344     	 add r3,r3,r2
 794 0092 DB00     	 lsls r3,r3,#3
 795 0094 0833     	 adds r3,r3,#8
 796 0096 234A     	 ldr r2,.L44
 797 0098 1344     	 add r3,r3,r2
 798 009a 0433     	 adds r3,r3,#4
 799 009c 7A68     	 ldr r2,[r7,#4]
 800 009e 1168     	 ldr r1,[r2]
 801 00a0 1960     	 str r1,[r3]
 802 00a2 9288     	 ldrh r2,[r2,#4]
 803 00a4 9A80     	 strh r2,[r3,#4]
 466:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* reset time stamp */
 467:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   arp_table[i].ctime = 0;
 804              	 .loc 1 467 0
 805 00a6 B7F91620 	 ldrsh r2,[r7,#22]
 806 00aa 1E49     	 ldr r1,.L44
 807 00ac 1346     	 mov r3,r2
 808 00ae 5B00     	 lsls r3,r3,#1
 809 00b0 1344     	 add r3,r3,r2
 810 00b2 DB00     	 lsls r3,r3,#3
 811 00b4 0B44     	 add r3,r3,r1
 812 00b6 1033     	 adds r3,r3,#16
 813 00b8 0022     	 movs r2,#0
 814 00ba 5A80     	 strh r2,[r3,#2]
 468:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* this is where we will send out queued packets! */
 469:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if ARP_QUEUEING
 470:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   while (arp_table[i].q != NULL) {
 471:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     struct pbuf *p;
 472:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* remember remainder of queue */
 473:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     struct etharp_q_entry *q = arp_table[i].q;
 474:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* pop first item off the queue */
 475:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     arp_table[i].q = q->next;
 476:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* get the packet pointer */
 477:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     p = q->p;
 478:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* now queue entry can be freed */
 479:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     memp_free(MEMP_ARP_QUEUE, q);
 480:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #else /* ARP_QUEUEING */
 481:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (arp_table[i].q != NULL) {
 815              	 .loc 1 481 0
 816 00bc B7F91620 	 ldrsh r2,[r7,#22]
 817 00c0 1849     	 ldr r1,.L44
 818 00c2 1346     	 mov r3,r2
 819 00c4 5B00     	 lsls r3,r3,#1
 820 00c6 1344     	 add r3,r3,r2
 821 00c8 DB00     	 lsls r3,r3,#3
 822 00ca 0B44     	 add r3,r3,r1
 823 00cc 1B68     	 ldr r3,[r3]
 824 00ce 002B     	 cmp r3,#0
 825 00d0 21D0     	 beq .L43
 826              	.LBB4:
 482:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     struct pbuf *p = arp_table[i].q;
 827              	 .loc 1 482 0
 828 00d2 B7F91620 	 ldrsh r2,[r7,#22]
 829 00d6 1349     	 ldr r1,.L44
 830 00d8 1346     	 mov r3,r2
 831 00da 5B00     	 lsls r3,r3,#1
 832 00dc 1344     	 add r3,r3,r2
 833 00de DB00     	 lsls r3,r3,#3
 834 00e0 0B44     	 add r3,r3,r1
 835 00e2 1B68     	 ldr r3,[r3]
 836 00e4 3B61     	 str r3,[r7,#16]
 483:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     arp_table[i].q = NULL;
 837              	 .loc 1 483 0
 838 00e6 B7F91620 	 ldrsh r2,[r7,#22]
 839 00ea 0E49     	 ldr r1,.L44
 840 00ec 1346     	 mov r3,r2
 841 00ee 5B00     	 lsls r3,r3,#1
 842 00f0 1344     	 add r3,r3,r2
 843 00f2 DB00     	 lsls r3,r3,#3
 844 00f4 0B44     	 add r3,r3,r1
 845 00f6 0022     	 movs r2,#0
 846 00f8 1A60     	 str r2,[r3]
 484:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* ARP_QUEUEING */
 485:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* send the queued IP packet */
 486:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 847              	 .loc 1 486 0
 848 00fa FB68     	 ldr r3,[r7,#12]
 849 00fc 03F12602 	 add r2,r3,#38
 850 0100 4FF40063 	 mov r3,#2048
 851 0104 0093     	 str r3,[sp]
 852 0106 F868     	 ldr r0,[r7,#12]
 853 0108 3969     	 ldr r1,[r7,#16]
 854 010a 7B68     	 ldr r3,[r7,#4]
 855 010c FFF7FEFF 	 bl ethernet_output
 487:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* free the queued IP packet */
 488:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     pbuf_free(p);
 856              	 .loc 1 488 0
 857 0110 3869     	 ldr r0,[r7,#16]
 858 0112 FFF7FEFF 	 bl pbuf_free
 859              	.L43:
 860              	.LBE4:
 489:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 490:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   return ERR_OK;
 861              	 .loc 1 490 0
 862 0116 0023     	 movs r3,#0
 863              	.L41:
 864 0118 5BB2     	 sxtb r3,r3
 491:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
 865              	 .loc 1 491 0
 866 011a 1846     	 mov r0,r3
 867 011c 1837     	 adds r7,r7,#24
 868              	.LCFI18:
 869              	 .cfi_def_cfa_offset 8
 870 011e BD46     	 mov sp,r7
 871              	.LCFI19:
 872              	 .cfi_def_cfa_register 13
 873              	 
 874 0120 80BD     	 pop {r7,pc}
 875              	.L45:
 876 0122 00BF     	 .align 2
 877              	.L44:
 878 0124 00000000 	 .word arp_table
 879              	 .cfi_endproc
 880              	.LFE136:
 882              	 .section .text.etharp_cleanup_netif,"ax",%progbits
 883              	 .align 2
 884              	 .global etharp_cleanup_netif
 885              	 .thumb
 886              	 .thumb_func
 888              	etharp_cleanup_netif:
 889              	.LFB137:
 492:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 493:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if ETHARP_SUPPORT_STATIC_ENTRIES
 494:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /** Add a new static entry to the ARP table. If an entry exists for the
 495:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * specified IP address, this entry is overwritten.
 496:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * If packets are queued for the specified IP address, they are sent out.
 497:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 498:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ipaddr IP address for the new static entry
 499:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ethaddr ethernet address for the new static entry
 500:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @return See return values of etharp_add_static_entry
 501:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
 502:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** err_t
 503:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
 504:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
 505:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   struct netif *netif;
 506:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT_CORE_LOCKED();
 507:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".
 508:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****               ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr
 509:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****               (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
 510:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****               (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
 511:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 512:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   netif = ip4_route(ipaddr);
 513:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (netif == NULL) {
 514:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     return ERR_RTE;
 515:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 516:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 517:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_
 518:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
 519:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 520:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /** Remove a static entry from the ARP table previously added with a call to
 521:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * etharp_add_static_entry.
 522:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 523:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ipaddr IP address of the static entry to remove
 524:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @return ERR_OK: entry removed
 525:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *         ERR_MEM: entry wasn't found
 526:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *         ERR_ARG: entry wasn't a static entry but a dynamic one
 527:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
 528:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** err_t
 529:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** etharp_remove_static_entry(const ip4_addr_t *ipaddr)
 530:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
 531:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   s16_t i;
 532:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT_CORE_LOCKED();
 533:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_remove_static_entry: %"U16_F".%"U16_F".%"U16_
 534:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****               ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr
 535:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 536:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* find or create ARP entry */
 537:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY, NULL);
 538:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* bail out if no entry could be found */
 539:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (i < 0) {
 540:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     return (err_t)i;
 541:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 542:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 543:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (arp_table[i].state != ETHARP_STATE_STATIC) {
 544:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* entry wasn't a static entry, cannot remove it */
 545:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     return ERR_ARG;
 546:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 547:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* entry found, free it */
 548:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   etharp_free_entry(i);
 549:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   return ERR_OK;
 550:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
 551:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
 552:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 553:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /**
 554:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Remove all ARP table entries of the specified netif.
 555:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 556:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param netif points to a network interface
 557:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
 558:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** void
 559:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** etharp_cleanup_netif(struct netif *netif)
 560:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
 890              	 .loc 1 560 0
 891              	 .cfi_startproc
 892              	 
 893              	 
 894 0000 80B5     	 push {r7,lr}
 895              	.LCFI20:
 896              	 .cfi_def_cfa_offset 8
 897              	 .cfi_offset 7,-8
 898              	 .cfi_offset 14,-4
 899 0002 84B0     	 sub sp,sp,#16
 900              	.LCFI21:
 901              	 .cfi_def_cfa_offset 24
 902 0004 00AF     	 add r7,sp,#0
 903              	.LCFI22:
 904              	 .cfi_def_cfa_register 7
 905 0006 7860     	 str r0,[r7,#4]
 561:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   int i;
 562:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 563:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 906              	 .loc 1 563 0
 907 0008 0023     	 movs r3,#0
 908 000a FB60     	 str r3,[r7,#12]
 909 000c 1EE0     	 b .L47
 910              	.L49:
 911              	.LBB5:
 564:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     u8_t state = arp_table[i].state;
 912              	 .loc 1 564 0
 913 000e 1249     	 ldr r1,.L50
 914 0010 FA68     	 ldr r2,[r7,#12]
 915 0012 1346     	 mov r3,r2
 916 0014 5B00     	 lsls r3,r3,#1
 917 0016 1344     	 add r3,r3,r2
 918 0018 DB00     	 lsls r3,r3,#3
 919 001a 0B44     	 add r3,r3,r1
 920 001c 1033     	 adds r3,r3,#16
 921 001e 1B79     	 ldrb r3,[r3,#4]
 922 0020 FB72     	 strb r3,[r7,#11]
 565:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 923              	 .loc 1 565 0
 924 0022 FB7A     	 ldrb r3,[r7,#11]
 925 0024 002B     	 cmp r3,#0
 926 0026 0ED0     	 beq .L48
 927              	 .loc 1 565 0 is_stmt 0 discriminator 1
 928 0028 0B49     	 ldr r1,.L50
 929 002a FA68     	 ldr r2,[r7,#12]
 930 002c 1346     	 mov r3,r2
 931 002e 5B00     	 lsls r3,r3,#1
 932 0030 1344     	 add r3,r3,r2
 933 0032 DB00     	 lsls r3,r3,#3
 934 0034 0B44     	 add r3,r3,r1
 935 0036 0833     	 adds r3,r3,#8
 936 0038 1A68     	 ldr r2,[r3]
 937 003a 7B68     	 ldr r3,[r7,#4]
 938 003c 9A42     	 cmp r2,r3
 939 003e 02D1     	 bne .L48
 566:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       etharp_free_entry(i);
 940              	 .loc 1 566 0 is_stmt 1
 941 0040 F868     	 ldr r0,[r7,#12]
 942 0042 FFF7FEFF 	 bl etharp_free_entry
 943              	.L48:
 944              	.LBE5:
 563:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     u8_t state = arp_table[i].state;
 945              	 .loc 1 563 0 discriminator 2
 946 0046 FB68     	 ldr r3,[r7,#12]
 947 0048 0133     	 adds r3,r3,#1
 948 004a FB60     	 str r3,[r7,#12]
 949              	.L47:
 563:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     u8_t state = arp_table[i].state;
 950              	 .loc 1 563 0 is_stmt 0 discriminator 1
 951 004c FB68     	 ldr r3,[r7,#12]
 952 004e 092B     	 cmp r3,#9
 953 0050 DDDD     	 ble .L49
 567:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     }
 568:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 569:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
 954              	 .loc 1 569 0 is_stmt 1
 955 0052 1037     	 adds r7,r7,#16
 956              	.LCFI23:
 957              	 .cfi_def_cfa_offset 8
 958 0054 BD46     	 mov sp,r7
 959              	.LCFI24:
 960              	 .cfi_def_cfa_register 13
 961              	 
 962 0056 80BD     	 pop {r7,pc}
 963              	.L51:
 964              	 .align 2
 965              	.L50:
 966 0058 00000000 	 .word arp_table
 967              	 .cfi_endproc
 968              	.LFE137:
 970              	 .section .text.etharp_find_addr,"ax",%progbits
 971              	 .align 2
 972              	 .global etharp_find_addr
 973              	 .thumb
 974              	 .thumb_func
 976              	etharp_find_addr:
 977              	.LFB138:
 570:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 571:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /**
 572:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Finds (stable) ethernet/IP address pair from ARP table
 573:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * using interface and IP address index.
 574:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @note the addresses in the ARP table are in network order!
 575:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 576:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param netif points to interface index
 577:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ipaddr points to the (network order) IP address index
 578:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param eth_ret points to return pointer
 579:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ip_ret points to return pointer
 580:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @return table index if found, -1 otherwise
 581:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
 582:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** ssize_t
 583:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** etharp_find_addr(struct netif *netif, const ip4_addr_t *ipaddr,
 584:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                  struct eth_addr **eth_ret, const ip4_addr_t **ip_ret)
 585:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
 978              	 .loc 1 585 0
 979              	 .cfi_startproc
 980              	 
 981              	 
 982 0000 80B5     	 push {r7,lr}
 983              	.LCFI25:
 984              	 .cfi_def_cfa_offset 8
 985              	 .cfi_offset 7,-8
 986              	 .cfi_offset 14,-4
 987 0002 86B0     	 sub sp,sp,#24
 988              	.LCFI26:
 989              	 .cfi_def_cfa_offset 32
 990 0004 00AF     	 add r7,sp,#0
 991              	.LCFI27:
 992              	 .cfi_def_cfa_register 7
 993 0006 F860     	 str r0,[r7,#12]
 994 0008 B960     	 str r1,[r7,#8]
 995 000a 7A60     	 str r2,[r7,#4]
 996 000c 3B60     	 str r3,[r7]
 586:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   s16_t i;
 587:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 588:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
 589:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****               eth_ret != NULL && ip_ret != NULL);
 590:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 591:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_UNUSED_ARG(netif);
 592:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 593:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY, netif);
 997              	 .loc 1 593 0
 998 000e B868     	 ldr r0,[r7,#8]
 999 0010 0221     	 movs r1,#2
 1000 0012 FA68     	 ldr r2,[r7,#12]
 1001 0014 FFF7FEFF 	 bl etharp_find_entry
 1002 0018 0346     	 mov r3,r0
 1003 001a FB82     	 strh r3,[r7,#22]
 594:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if ((i >= 0) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
 1004              	 .loc 1 594 0
 1005 001c B7F91630 	 ldrsh r3,[r7,#22]
 1006 0020 002B     	 cmp r3,#0
 1007 0022 25DB     	 blt .L53
 1008              	 .loc 1 594 0 is_stmt 0 discriminator 1
 1009 0024 B7F91620 	 ldrsh r2,[r7,#22]
 1010 0028 1449     	 ldr r1,.L55
 1011 002a 1346     	 mov r3,r2
 1012 002c 5B00     	 lsls r3,r3,#1
 1013 002e 1344     	 add r3,r3,r2
 1014 0030 DB00     	 lsls r3,r3,#3
 1015 0032 0B44     	 add r3,r3,r1
 1016 0034 1033     	 adds r3,r3,#16
 1017 0036 1B79     	 ldrb r3,[r3,#4]
 1018 0038 012B     	 cmp r3,#1
 1019 003a 19D9     	 bls .L53
 595:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     *eth_ret = &arp_table[i].ethaddr;
 1020              	 .loc 1 595 0 is_stmt 1
 1021 003c B7F91620 	 ldrsh r2,[r7,#22]
 1022 0040 1346     	 mov r3,r2
 1023 0042 5B00     	 lsls r3,r3,#1
 1024 0044 1344     	 add r3,r3,r2
 1025 0046 DB00     	 lsls r3,r3,#3
 1026 0048 0833     	 adds r3,r3,#8
 1027 004a 0C4A     	 ldr r2,.L55
 1028 004c 1344     	 add r3,r3,r2
 1029 004e 1A1D     	 adds r2,r3,#4
 1030 0050 7B68     	 ldr r3,[r7,#4]
 1031 0052 1A60     	 str r2,[r3]
 596:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     *ip_ret = &arp_table[i].ipaddr;
 1032              	 .loc 1 596 0
 1033 0054 B7F91620 	 ldrsh r2,[r7,#22]
 1034 0058 1346     	 mov r3,r2
 1035 005a 5B00     	 lsls r3,r3,#1
 1036 005c 1344     	 add r3,r3,r2
 1037 005e DB00     	 lsls r3,r3,#3
 1038 0060 064A     	 ldr r2,.L55
 1039 0062 1344     	 add r3,r3,r2
 1040 0064 1A1D     	 adds r2,r3,#4
 1041 0066 3B68     	 ldr r3,[r7]
 1042 0068 1A60     	 str r2,[r3]
 597:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     return i;
 1043              	 .loc 1 597 0
 1044 006a B7F91630 	 ldrsh r3,[r7,#22]
 1045 006e 01E0     	 b .L54
 1046              	.L53:
 598:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 599:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   return -1;
 1047              	 .loc 1 599 0
 1048 0070 4FF0FF33 	 mov r3,#-1
 1049              	.L54:
 600:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
 1050              	 .loc 1 600 0
 1051 0074 1846     	 mov r0,r3
 1052 0076 1837     	 adds r7,r7,#24
 1053              	.LCFI28:
 1054              	 .cfi_def_cfa_offset 8
 1055 0078 BD46     	 mov sp,r7
 1056              	.LCFI29:
 1057              	 .cfi_def_cfa_register 13
 1058              	 
 1059 007a 80BD     	 pop {r7,pc}
 1060              	.L56:
 1061              	 .align 2
 1062              	.L55:
 1063 007c 00000000 	 .word arp_table
 1064              	 .cfi_endproc
 1065              	.LFE138:
 1067              	 .section .text.etharp_get_entry,"ax",%progbits
 1068              	 .align 2
 1069              	 .global etharp_get_entry
 1070              	 .thumb
 1071              	 .thumb_func
 1073              	etharp_get_entry:
 1074              	.LFB139:
 601:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 602:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /**
 603:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Possibility to iterate over stable ARP table entries
 604:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 605:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param i entry number, 0 to ARP_TABLE_SIZE
 606:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ipaddr return value: IP address
 607:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param netif return value: points to interface
 608:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param eth_ret return value: ETH address
 609:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @return 1 on valid index, 0 otherwise
 610:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
 611:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** int
 612:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** etharp_get_entry(size_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
 613:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
 1075              	 .loc 1 613 0
 1076              	 .cfi_startproc
 1077              	 
 1078              	 
 1079              	 
 1080 0000 80B4     	 push {r7}
 1081              	.LCFI30:
 1082              	 .cfi_def_cfa_offset 4
 1083              	 .cfi_offset 7,-4
 1084 0002 85B0     	 sub sp,sp,#20
 1085              	.LCFI31:
 1086              	 .cfi_def_cfa_offset 24
 1087 0004 00AF     	 add r7,sp,#0
 1088              	.LCFI32:
 1089              	 .cfi_def_cfa_register 7
 1090 0006 F860     	 str r0,[r7,#12]
 1091 0008 B960     	 str r1,[r7,#8]
 1092 000a 7A60     	 str r2,[r7,#4]
 1093 000c 3B60     	 str r3,[r7]
 614:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 615:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("netif != NULL", netif != NULL);
 616:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
 617:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 618:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if ((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
 1094              	 .loc 1 618 0
 1095 000e FB68     	 ldr r3,[r7,#12]
 1096 0010 092B     	 cmp r3,#9
 1097 0012 2CD8     	 bhi .L58
 1098              	 .loc 1 618 0 is_stmt 0 discriminator 1
 1099 0014 1949     	 ldr r1,.L60
 1100 0016 FA68     	 ldr r2,[r7,#12]
 1101 0018 1346     	 mov r3,r2
 1102 001a 5B00     	 lsls r3,r3,#1
 1103 001c 1344     	 add r3,r3,r2
 1104 001e DB00     	 lsls r3,r3,#3
 1105 0020 0B44     	 add r3,r3,r1
 1106 0022 1033     	 adds r3,r3,#16
 1107 0024 1B79     	 ldrb r3,[r3,#4]
 1108 0026 012B     	 cmp r3,#1
 1109 0028 21D9     	 bls .L58
 619:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     *ipaddr  = &arp_table[i].ipaddr;
 1110              	 .loc 1 619 0 is_stmt 1
 1111 002a FA68     	 ldr r2,[r7,#12]
 1112 002c 1346     	 mov r3,r2
 1113 002e 5B00     	 lsls r3,r3,#1
 1114 0030 1344     	 add r3,r3,r2
 1115 0032 DB00     	 lsls r3,r3,#3
 1116 0034 114A     	 ldr r2,.L60
 1117 0036 1344     	 add r3,r3,r2
 1118 0038 1A1D     	 adds r2,r3,#4
 1119 003a BB68     	 ldr r3,[r7,#8]
 1120 003c 1A60     	 str r2,[r3]
 620:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     *netif   = arp_table[i].netif;
 1121              	 .loc 1 620 0
 1122 003e 0F49     	 ldr r1,.L60
 1123 0040 FA68     	 ldr r2,[r7,#12]
 1124 0042 1346     	 mov r3,r2
 1125 0044 5B00     	 lsls r3,r3,#1
 1126 0046 1344     	 add r3,r3,r2
 1127 0048 DB00     	 lsls r3,r3,#3
 1128 004a 0B44     	 add r3,r3,r1
 1129 004c 0833     	 adds r3,r3,#8
 1130 004e 1A68     	 ldr r2,[r3]
 1131 0050 7B68     	 ldr r3,[r7,#4]
 1132 0052 1A60     	 str r2,[r3]
 621:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     *eth_ret = &arp_table[i].ethaddr;
 1133              	 .loc 1 621 0
 1134 0054 FA68     	 ldr r2,[r7,#12]
 1135 0056 1346     	 mov r3,r2
 1136 0058 5B00     	 lsls r3,r3,#1
 1137 005a 1344     	 add r3,r3,r2
 1138 005c DB00     	 lsls r3,r3,#3
 1139 005e 0833     	 adds r3,r3,#8
 1140 0060 064A     	 ldr r2,.L60
 1141 0062 1344     	 add r3,r3,r2
 1142 0064 1A1D     	 adds r2,r3,#4
 1143 0066 3B68     	 ldr r3,[r7]
 1144 0068 1A60     	 str r2,[r3]
 622:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     return 1;
 1145              	 .loc 1 622 0
 1146 006a 0123     	 movs r3,#1
 1147 006c 00E0     	 b .L59
 1148              	.L58:
 623:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   } else {
 624:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     return 0;
 1149              	 .loc 1 624 0
 1150 006e 0023     	 movs r3,#0
 1151              	.L59:
 625:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 626:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
 1152              	 .loc 1 626 0
 1153 0070 1846     	 mov r0,r3
 1154 0072 1437     	 adds r7,r7,#20
 1155              	.LCFI33:
 1156              	 .cfi_def_cfa_offset 4
 1157 0074 BD46     	 mov sp,r7
 1158              	.LCFI34:
 1159              	 .cfi_def_cfa_register 13
 1160              	 
 1161 0076 5DF8047B 	 ldr r7,[sp],#4
 1162              	.LCFI35:
 1163              	 .cfi_restore 7
 1164              	 .cfi_def_cfa_offset 0
 1165 007a 7047     	 bx lr
 1166              	.L61:
 1167              	 .align 2
 1168              	.L60:
 1169 007c 00000000 	 .word arp_table
 1170              	 .cfi_endproc
 1171              	.LFE139:
 1173              	 .section .text.etharp_input,"ax",%progbits
 1174              	 .align 2
 1175              	 .global etharp_input
 1176              	 .thumb
 1177              	 .thumb_func
 1179              	etharp_input:
 1180              	.LFB140:
 627:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 628:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /**
 629:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Responds to ARP requests to us. Upon ARP replies to us, add entry to cache
 630:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * send out queued IP packets. Updates cache with snooped address pairs.
 631:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 632:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Should be called for incoming ARP packets. The pbuf in the argument
 633:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * is freed by this function.
 634:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 635:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param p The ARP packet that arrived on netif. Is freed by this function.
 636:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param netif The lwIP network interface on which the ARP packet pbuf arrived.
 637:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 638:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @see pbuf_free()
 639:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
 640:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** void
 641:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** etharp_input(struct pbuf *p, struct netif *netif)
 642:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
 1181              	 .loc 1 642 0
 1182              	 .cfi_startproc
 1183              	 
 1184              	 
 1185 0000 B0B5     	 push {r4,r5,r7,lr}
 1186              	.LCFI36:
 1187              	 .cfi_def_cfa_offset 16
 1188              	 .cfi_offset 4,-16
 1189              	 .cfi_offset 5,-12
 1190              	 .cfi_offset 7,-8
 1191              	 .cfi_offset 14,-4
 1192 0002 8AB0     	 sub sp,sp,#40
 1193              	.LCFI37:
 1194              	 .cfi_def_cfa_offset 56
 1195 0004 04AF     	 add r7,sp,#16
 1196              	.LCFI38:
 1197              	 .cfi_def_cfa 7,40
 1198 0006 7860     	 str r0,[r7,#4]
 1199 0008 3960     	 str r1,[r7]
 643:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   struct etharp_hdr *hdr;
 644:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* these are aligned properly, whereas the ARP header fields might not be */
 645:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   ip4_addr_t sipaddr, dipaddr;
 646:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   u8_t for_us;
 647:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 648:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT_CORE_LOCKED();
 649:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 650:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 1200              	 .loc 1 650 0
 1201 000a 3B68     	 ldr r3,[r7]
 1202 000c 002B     	 cmp r3,#0
 1203 000e 00D1     	 bne .L63
 1204 0010 76E0     	 b .L62
 1205              	.L63:
 651:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 652:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   hdr = (struct etharp_hdr *)p->payload;
 1206              	 .loc 1 652 0
 1207 0012 7B68     	 ldr r3,[r7,#4]
 1208 0014 5B68     	 ldr r3,[r3,#4]
 1209 0016 3B61     	 str r3,[r7,#16]
 653:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 654:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* RFC 826 "Packet Reception": */
 655:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 1210              	 .loc 1 655 0
 1211 0018 3B69     	 ldr r3,[r7,#16]
 1212 001a 1B88     	 ldrh r3,[r3]
 1213 001c 9BB2     	 uxth r3,r3
 1214 001e B3F5807F 	 cmp r3,#256
 1215 0022 0CD1     	 bne .L65
 656:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       (hdr->hwlen != ETH_HWADDR_LEN) ||
 1216              	 .loc 1 656 0 discriminator 1
 1217 0024 3B69     	 ldr r3,[r7,#16]
 1218 0026 1B79     	 ldrb r3,[r3,#4]
 655:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       (hdr->hwlen != ETH_HWADDR_LEN) ||
 1219              	 .loc 1 655 0 discriminator 1
 1220 0028 062B     	 cmp r3,#6
 1221 002a 08D1     	 bne .L65
 657:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       (hdr->protolen != sizeof(ip4_addr_t)) ||
 1222              	 .loc 1 657 0
 1223 002c 3B69     	 ldr r3,[r7,#16]
 1224 002e 5B79     	 ldrb r3,[r3,#5]
 656:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       (hdr->hwlen != ETH_HWADDR_LEN) ||
 1225              	 .loc 1 656 0
 1226 0030 042B     	 cmp r3,#4
 1227 0032 04D1     	 bne .L65
 658:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 1228              	 .loc 1 658 0
 1229 0034 3B69     	 ldr r3,[r7,#16]
 1230 0036 5B88     	 ldrh r3,[r3,#2]
 1231 0038 9BB2     	 uxth r3,r3
 657:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       (hdr->protolen != sizeof(ip4_addr_t)) ||
 1232              	 .loc 1 657 0
 1233 003a 082B     	 cmp r3,#8
 1234 003c 03D0     	 beq .L66
 1235              	.L65:
 659:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 660:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                 ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet t
 661:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                  hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
 662:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     ETHARP_STATS_INC(etharp.proterr);
 663:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     ETHARP_STATS_INC(etharp.drop);
 664:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     pbuf_free(p);
 1236              	 .loc 1 664 0
 1237 003e 7868     	 ldr r0,[r7,#4]
 1238 0040 FFF7FEFF 	 bl pbuf_free
 665:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     return;
 1239              	 .loc 1 665 0
 1240 0044 5CE0     	 b .L62
 1241              	.L66:
 666:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 667:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   ETHARP_STATS_INC(etharp.recv);
 668:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 669:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if LWIP_AUTOIP
 670:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* We have to check if a host already has configured our random
 671:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * created link local address and continuously check if there is
 672:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * a host with this IP-address so we can detect collisions */
 673:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   autoip_arp_reply(netif, hdr);
 674:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* LWIP_AUTOIP */
 675:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 676:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
 677:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * structure packing (not using structure copy which breaks strict-aliasing rules). */
 678:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 1242              	 .loc 1 678 0
 1243 0046 3B69     	 ldr r3,[r7,#16]
 1244 0048 0E33     	 adds r3,r3,#14
 1245 004a 07F10C02 	 add r2,r7,#12
 1246 004e 1046     	 mov r0,r2
 1247 0050 1946     	 mov r1,r3
 1248 0052 0422     	 movs r2,#4
 1249 0054 FFF7FEFF 	 bl memcpy
 679:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 1250              	 .loc 1 679 0
 1251 0058 3B69     	 ldr r3,[r7,#16]
 1252 005a 1833     	 adds r3,r3,#24
 1253 005c 07F10802 	 add r2,r7,#8
 1254 0060 1046     	 mov r0,r2
 1255 0062 1946     	 mov r1,r3
 1256 0064 0422     	 movs r2,#4
 1257 0066 FFF7FEFF 	 bl memcpy
 680:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 681:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* this interface is not configured? */
 682:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 1258              	 .loc 1 682 0
 1259 006a 3B68     	 ldr r3,[r7]
 1260 006c 0433     	 adds r3,r3,#4
 1261 006e 1B68     	 ldr r3,[r3]
 1262 0070 002B     	 cmp r3,#0
 1263 0072 02D1     	 bne .L67
 683:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     for_us = 0;
 1264              	 .loc 1 683 0
 1265 0074 0023     	 movs r3,#0
 1266 0076 FB75     	 strb r3,[r7,#23]
 1267 0078 09E0     	 b .L68
 1268              	.L67:
 684:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   } else {
 685:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* ARP packet directed to us? */
 686:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 1269              	 .loc 1 686 0
 1270 007a BA68     	 ldr r2,[r7,#8]
 1271 007c 3B68     	 ldr r3,[r7]
 1272 007e 0433     	 adds r3,r3,#4
 1273 0080 1B68     	 ldr r3,[r3]
 1274 0082 9A42     	 cmp r2,r3
 1275 0084 0CBF     	 ite eq
 1276 0086 0123     	 moveq r3,#1
 1277 0088 0023     	 movne r3,#0
 1278 008a DBB2     	 uxtb r3,r3
 1279 008c FB75     	 strb r3,[r7,#23]
 1280              	.L68:
 687:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 688:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 689:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* ARP message directed to us?
 690:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       -> add IP address in ARP cache; assume requester wants to talk to us,
 691:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****          can result in directly sending the queued packets for this host.
 692:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****      ARP message not directed to us?
 693:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       ->  update the source IP address in the cache, if present */
 694:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 1281              	 .loc 1 694 0
 1282 008e 3B69     	 ldr r3,[r7,#16]
 1283 0090 03F10802 	 add r2,r3,#8
 1284 0094 FB7D     	 ldrb r3,[r7,#23]
 1285 0096 002B     	 cmp r3,#0
 1286 0098 01D0     	 beq .L69
 1287              	 .loc 1 694 0 is_stmt 0 discriminator 1
 1288 009a 0123     	 movs r3,#1
 1289 009c 00E0     	 b .L70
 1290              	.L69:
 1291              	 .loc 1 694 0 discriminator 2
 1292 009e 0223     	 movs r3,#2
 1293              	.L70:
 1294              	 .loc 1 694 0 discriminator 4
 1295 00a0 07F10C01 	 add r1,r7,#12
 1296 00a4 3868     	 ldr r0,[r7]
 1297 00a6 FFF7FEFF 	 bl etharp_update_arp_entry
 695:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                           for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);
 696:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 697:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* now act on the message itself */
 698:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   switch (hdr->opcode) {
 1298              	 .loc 1 698 0 is_stmt 1 discriminator 4
 1299 00aa 3B69     	 ldr r3,[r7,#16]
 1300 00ac DB88     	 ldrh r3,[r3,#6]
 1301 00ae 9BB2     	 uxth r3,r3
 1302 00b0 B3F5807F 	 cmp r3,#256
 1303 00b4 03D0     	 beq .L72
 1304 00b6 B3F5007F 	 cmp r3,#512
 1305 00ba 1DD0     	 beq .L78
 699:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* ARP request? */
 700:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     case PP_HTONS(ARP_REQUEST):
 701:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* ARP request. If it asked for our address, we send out a
 702:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****        * reply. In any case, we time-stamp any existing ARP entry,
 703:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****        * and possibly send out an IP packet that was queued on it. */
 704:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 705:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
 706:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* ARP request for our address? */
 707:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       if (for_us) {
 708:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* send ARP response */
 709:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         etharp_raw(netif,
 710:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                    (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 711:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 712:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                    &hdr->shwaddr, &sipaddr,
 713:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                    ARP_REPLY);
 714:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* we are not configured? */
 715:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       } else if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 716:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* { for_us == 0 and netif->ip_addr.addr == 0 } */
 717:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: we are unconfigured, ARP request
 718:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* request was not directed to us */
 719:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       } else {
 720:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* { for_us == 0 and netif->ip_addr.addr != 0 } */
 721:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"))
 722:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       }
 723:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       break;
 724:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     case PP_HTONS(ARP_REPLY):
 725:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* ARP reply. We already updated the ARP cache earlier. */
 726:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP reply\n"));
 727:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
 728:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* DHCP wants to know about ARP replies from any host with an
 729:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****        * IP address also offered to us by the DHCP server. We do not
 730:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****        * want to take a duplicate IP address on a single network.
 731:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****        * @todo How should we handle redundant (fail-over) interfaces? */
 732:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       dhcp_arp_reply(netif, &sipaddr);
 733:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
 734:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       break;
 735:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     default:
 736:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n
 737:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       ETHARP_STATS_INC(etharp.err);
 738:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       break;
 1306              	 .loc 1 738 0 discriminator 4
 1307 00bc 1DE0     	 b .L76
 1308              	.L72:
 707:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* send ARP response */
 1309              	 .loc 1 707 0
 1310 00be FB7D     	 ldrb r3,[r7,#23]
 1311 00c0 002B     	 cmp r3,#0
 1312 00c2 18D0     	 beq .L75
 710:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 1313              	 .loc 1 710 0
 1314 00c4 3B68     	 ldr r3,[r7]
 1315 00c6 03F12601 	 add r1,r3,#38
 1316 00ca 3B69     	 ldr r3,[r7,#16]
 1317 00cc 03F10805 	 add r5,r3,#8
 711:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                    &hdr->shwaddr, &sipaddr,
 1318              	 .loc 1 711 0
 1319 00d0 3B68     	 ldr r3,[r7]
 1320 00d2 03F12604 	 add r4,r3,#38
 1321 00d6 3B68     	 ldr r3,[r7]
 1322 00d8 1A1D     	 adds r2,r3,#4
 712:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                    ARP_REPLY);
 1323              	 .loc 1 712 0
 1324 00da 3B69     	 ldr r3,[r7,#16]
 1325 00dc 0833     	 adds r3,r3,#8
 709:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                    (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 1326              	 .loc 1 709 0
 1327 00de 0092     	 str r2,[sp]
 1328 00e0 0193     	 str r3,[sp,#4]
 1329 00e2 07F10C03 	 add r3,r7,#12
 1330 00e6 0293     	 str r3,[sp,#8]
 1331 00e8 0223     	 movs r3,#2
 1332 00ea 0393     	 str r3,[sp,#12]
 1333 00ec 3868     	 ldr r0,[r7]
 1334 00ee 2A46     	 mov r2,r5
 1335 00f0 2346     	 mov r3,r4
 1336 00f2 FFF7FEFF 	 bl etharp_raw
 1337              	.L75:
 723:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     case PP_HTONS(ARP_REPLY):
 1338              	 .loc 1 723 0 discriminator 1
 1339 00f6 00E0     	 b .L76
 1340              	.L78:
 734:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     default:
 1341              	 .loc 1 734 0
 1342 00f8 00BF     	 nop
 1343              	.L76:
 739:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 740:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* free ARP packet */
 741:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   pbuf_free(p);
 1344              	 .loc 1 741 0 discriminator 2
 1345 00fa 7868     	 ldr r0,[r7,#4]
 1346 00fc FFF7FEFF 	 bl pbuf_free
 1347              	.L62:
 742:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
 1348              	 .loc 1 742 0
 1349 0100 1837     	 adds r7,r7,#24
 1350              	.LCFI39:
 1351              	 .cfi_def_cfa_offset 16
 1352 0102 BD46     	 mov sp,r7
 1353              	.LCFI40:
 1354              	 .cfi_def_cfa_register 13
 1355              	 
 1356 0104 B0BD     	 pop {r4,r5,r7,pc}
 1357              	 .cfi_endproc
 1358              	.LFE140:
 1360              	 .section .text.etharp_output_to_arp_index,"ax",%progbits
 1361              	 .align 2
 1362              	 .thumb
 1363              	 .thumb_func
 1365              	etharp_output_to_arp_index:
 1366              	.LFB141:
 743:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 744:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /** Just a small helper function that sends a pbuf to an ethernet address
 745:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * in the arp_table specified by the index 'arp_idx'.
 746:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
 747:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** static err_t
 748:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
 749:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
 1367              	 .loc 1 749 0
 1368              	 .cfi_startproc
 1369              	 
 1370              	 
 1371 0000 B0B5     	 push {r4,r5,r7,lr}
 1372              	.LCFI41:
 1373              	 .cfi_def_cfa_offset 16
 1374              	 .cfi_offset 4,-16
 1375              	 .cfi_offset 5,-12
 1376              	 .cfi_offset 7,-8
 1377              	 .cfi_offset 14,-4
 1378 0002 86B0     	 sub sp,sp,#24
 1379              	.LCFI42:
 1380              	 .cfi_def_cfa_offset 40
 1381 0004 02AF     	 add r7,sp,#8
 1382              	.LCFI43:
 1383              	 .cfi_def_cfa 7,32
 1384 0006 F860     	 str r0,[r7,#12]
 1385 0008 B960     	 str r1,[r7,#8]
 1386 000a 1346     	 mov r3,r2
 1387 000c FB71     	 strb r3,[r7,#7]
 750:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 751:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****               arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
 752:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* if arp table entry is about to expire: re-request it,
 753:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****      but only if its state is ETHARP_STATE_STABLE to prevent flooding the
 754:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****      network with ARP requests if this address is used frequently. */
 755:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 1388              	 .loc 1 755 0
 1389 000e FA79     	 ldrb r2,[r7,#7]
 1390 0010 3B49     	 ldr r1,.L84
 1391 0012 1346     	 mov r3,r2
 1392 0014 5B00     	 lsls r3,r3,#1
 1393 0016 1344     	 add r3,r3,r2
 1394 0018 DB00     	 lsls r3,r3,#3
 1395 001a 0B44     	 add r3,r3,r1
 1396 001c 1033     	 adds r3,r3,#16
 1397 001e 1B79     	 ldrb r3,[r3,#4]
 1398 0020 022B     	 cmp r3,#2
 1399 0022 53D1     	 bne .L80
 756:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 1400              	 .loc 1 756 0
 1401 0024 FA79     	 ldrb r2,[r7,#7]
 1402 0026 3649     	 ldr r1,.L84
 1403 0028 1346     	 mov r3,r2
 1404 002a 5B00     	 lsls r3,r3,#1
 1405 002c 1344     	 add r3,r3,r2
 1406 002e DB00     	 lsls r3,r3,#3
 1407 0030 0B44     	 add r3,r3,r1
 1408 0032 1033     	 adds r3,r3,#16
 1409 0034 5B88     	 ldrh r3,[r3,#2]
 1410 0036 B3F58E7F 	 cmp r3,#284
 1411 003a 19D9     	 bls .L81
 757:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* issue a standard request using broadcast */
 758:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 1412              	 .loc 1 758 0
 1413 003c FA79     	 ldrb r2,[r7,#7]
 1414 003e 1346     	 mov r3,r2
 1415 0040 5B00     	 lsls r3,r3,#1
 1416 0042 1344     	 add r3,r3,r2
 1417 0044 DB00     	 lsls r3,r3,#3
 1418 0046 2E4A     	 ldr r2,.L84
 1419 0048 1344     	 add r3,r3,r2
 1420 004a 0433     	 adds r3,r3,#4
 1421 004c F868     	 ldr r0,[r7,#12]
 1422 004e 1946     	 mov r1,r3
 1423 0050 FFF7FEFF 	 bl etharp_request
 1424 0054 0346     	 mov r3,r0
 1425 0056 002B     	 cmp r3,#0
 1426 0058 38D1     	 bne .L80
 759:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 1427              	 .loc 1 759 0
 1428 005a FA79     	 ldrb r2,[r7,#7]
 1429 005c 2849     	 ldr r1,.L84
 1430 005e 1346     	 mov r3,r2
 1431 0060 5B00     	 lsls r3,r3,#1
 1432 0062 1344     	 add r3,r3,r2
 1433 0064 DB00     	 lsls r3,r3,#3
 1434 0066 0B44     	 add r3,r3,r1
 1435 0068 1033     	 adds r3,r3,#16
 1436 006a 0322     	 movs r2,#3
 1437 006c 1A71     	 strb r2,[r3,#4]
 1438 006e 2DE0     	 b .L80
 1439              	.L81:
 760:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       }
 761:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 1440              	 .loc 1 761 0
 1441 0070 FA79     	 ldrb r2,[r7,#7]
 1442 0072 2349     	 ldr r1,.L84
 1443 0074 1346     	 mov r3,r2
 1444 0076 5B00     	 lsls r3,r3,#1
 1445 0078 1344     	 add r3,r3,r2
 1446 007a DB00     	 lsls r3,r3,#3
 1447 007c 0B44     	 add r3,r3,r1
 1448 007e 1033     	 adds r3,r3,#16
 1449 0080 5B88     	 ldrh r3,[r3,#2]
 1450 0082 B3F5877F 	 cmp r3,#270
 1451 0086 21D3     	 bcc .L80
 762:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
 763:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR
 1452              	 .loc 1 763 0
 1453 0088 FA79     	 ldrb r2,[r7,#7]
 1454 008a 1346     	 mov r3,r2
 1455 008c 5B00     	 lsls r3,r3,#1
 1456 008e 1344     	 add r3,r3,r2
 1457 0090 DB00     	 lsls r3,r3,#3
 1458 0092 1B4A     	 ldr r2,.L84
 1459 0094 1344     	 add r3,r3,r2
 1460 0096 191D     	 adds r1,r3,#4
 1461 0098 FA79     	 ldrb r2,[r7,#7]
 1462 009a 1346     	 mov r3,r2
 1463 009c 5B00     	 lsls r3,r3,#1
 1464 009e 1344     	 add r3,r3,r2
 1465 00a0 DB00     	 lsls r3,r3,#3
 1466 00a2 0833     	 adds r3,r3,#8
 1467 00a4 164A     	 ldr r2,.L84
 1468 00a6 1344     	 add r3,r3,r2
 1469 00a8 0433     	 adds r3,r3,#4
 1470 00aa F868     	 ldr r0,[r7,#12]
 1471 00ac 1A46     	 mov r2,r3
 1472 00ae FFF7FEFF 	 bl etharp_request_dst
 1473 00b2 0346     	 mov r3,r0
 1474 00b4 002B     	 cmp r3,#0
 1475 00b6 09D1     	 bne .L80
 764:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 1476              	 .loc 1 764 0
 1477 00b8 FA79     	 ldrb r2,[r7,#7]
 1478 00ba 1149     	 ldr r1,.L84
 1479 00bc 1346     	 mov r3,r2
 1480 00be 5B00     	 lsls r3,r3,#1
 1481 00c0 1344     	 add r3,r3,r2
 1482 00c2 DB00     	 lsls r3,r3,#3
 1483 00c4 0B44     	 add r3,r3,r1
 1484 00c6 1033     	 adds r3,r3,#16
 1485 00c8 0322     	 movs r2,#3
 1486 00ca 1A71     	 strb r2,[r3,#4]
 1487              	.L80:
 765:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       }
 766:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     }
 767:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 768:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 769:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr,
 1488              	 .loc 1 769 0
 1489 00cc FB68     	 ldr r3,[r7,#12]
 1490 00ce 03F12605 	 add r5,r3,#38
 1491 00d2 FA79     	 ldrb r2,[r7,#7]
 1492 00d4 1346     	 mov r3,r2
 1493 00d6 5B00     	 lsls r3,r3,#1
 1494 00d8 1344     	 add r3,r3,r2
 1495 00da DB00     	 lsls r3,r3,#3
 1496 00dc 0833     	 adds r3,r3,#8
 1497 00de 084A     	 ldr r2,.L84
 1498 00e0 1344     	 add r3,r3,r2
 1499 00e2 1C1D     	 adds r4,r3,#4
 1500 00e4 4FF40063 	 mov r3,#2048
 1501 00e8 0093     	 str r3,[sp]
 1502 00ea F868     	 ldr r0,[r7,#12]
 1503 00ec B968     	 ldr r1,[r7,#8]
 1504 00ee 2A46     	 mov r2,r5
 1505 00f0 2346     	 mov r3,r4
 1506 00f2 FFF7FEFF 	 bl ethernet_output
 1507 00f6 0346     	 mov r3,r0
 770:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
 1508              	 .loc 1 770 0
 1509 00f8 1846     	 mov r0,r3
 1510 00fa 1037     	 adds r7,r7,#16
 1511              	.LCFI44:
 1512              	 .cfi_def_cfa_offset 16
 1513 00fc BD46     	 mov sp,r7
 1514              	.LCFI45:
 1515              	 .cfi_def_cfa_register 13
 1516              	 
 1517 00fe B0BD     	 pop {r4,r5,r7,pc}
 1518              	.L85:
 1519              	 .align 2
 1520              	.L84:
 1521 0100 00000000 	 .word arp_table
 1522              	 .cfi_endproc
 1523              	.LFE141:
 1525              	 .section .text.etharp_output,"ax",%progbits
 1526              	 .align 2
 1527              	 .global etharp_output
 1528              	 .thumb
 1529              	 .thumb_func
 1531              	etharp_output:
 1532              	.LFB142:
 771:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 772:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /**
 773:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Resolve and fill-in Ethernet address header for outgoing IP packet.
 774:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 775:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * For IP multicast and broadcast, corresponding Ethernet addresses
 776:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * are selected and the packet is transmitted on the link.
 777:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 778:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * For unicast addresses, the packet is submitted to etharp_query(). In
 779:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * case the IP address is outside the local network, the IP address of
 780:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * the gateway is used.
 781:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 782:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param netif The lwIP network interface which the IP packet will be sent on.
 783:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param q The pbuf(s) containing the IP packet to be sent.
 784:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ipaddr The IP address of the packet destination.
 785:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 786:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @return
 787:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * - ERR_RTE No route to destination (no gateway to external networks),
 788:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * or the return type of either etharp_query() or ethernet_output().
 789:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
 790:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** err_t
 791:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
 792:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
 1533              	 .loc 1 792 0
 1534              	 .cfi_startproc
 1535              	 
 1536              	 
 1537 0000 80B5     	 push {r7,lr}
 1538              	.LCFI46:
 1539              	 .cfi_def_cfa_offset 8
 1540              	 .cfi_offset 7,-8
 1541              	 .cfi_offset 14,-4
 1542 0002 8AB0     	 sub sp,sp,#40
 1543              	.LCFI47:
 1544              	 .cfi_def_cfa_offset 48
 1545 0004 02AF     	 add r7,sp,#8
 1546              	.LCFI48:
 1547              	 .cfi_def_cfa 7,40
 1548 0006 F860     	 str r0,[r7,#12]
 1549 0008 B960     	 str r1,[r7,#8]
 1550 000a 7A60     	 str r2,[r7,#4]
 793:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   const struct eth_addr *dest;
 794:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   struct eth_addr mcastaddr;
 795:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   const ip4_addr_t *dst_addr = ipaddr;
 1551              	 .loc 1 795 0
 1552 000c 7B68     	 ldr r3,[r7,#4]
 1553 000e BB61     	 str r3,[r7,#24]
 796:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 797:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT_CORE_LOCKED();
 798:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("netif != NULL", netif != NULL);
 799:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("q != NULL", q != NULL);
 800:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 802:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* Determine on destination hardware address. Broadcasts and multicasts
 803:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * are special, other IP addresses are looked up in the ARP table. */
 804:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 805:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* broadcast destination IP address? */
 806:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (ip4_addr_isbroadcast(ipaddr, netif)) {
 1554              	 .loc 1 806 0
 1555 0010 7B68     	 ldr r3,[r7,#4]
 1556 0012 1B68     	 ldr r3,[r3]
 1557 0014 1846     	 mov r0,r3
 1558 0016 F968     	 ldr r1,[r7,#12]
 1559 0018 FFF7FEFF 	 bl ip4_addr_isbroadcast_u32
 1560 001c 0346     	 mov r3,r0
 1561 001e 002B     	 cmp r3,#0
 1562 0020 02D0     	 beq .L87
 807:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* broadcast on Ethernet also */
 808:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     dest = (const struct eth_addr *)&ethbroadcast;
 1563              	 .loc 1 808 0
 1564 0022 604B     	 ldr r3,.L98
 1565 0024 FB61     	 str r3,[r7,#28]
 1566 0026 ACE0     	 b .L88
 1567              	.L87:
 809:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* multicast destination IP address? */
 810:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   } else if (ip4_addr_ismulticast(ipaddr)) {
 1568              	 .loc 1 810 0
 1569 0028 7B68     	 ldr r3,[r7,#4]
 1570 002a 1B68     	 ldr r3,[r3]
 1571 002c 03F0F003 	 and r3,r3,#240
 1572 0030 E02B     	 cmp r3,#224
 1573 0032 18D1     	 bne .L89
 811:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* Hash IP multicast address to MAC address.*/
 812:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 1574              	 .loc 1 812 0
 1575 0034 0123     	 movs r3,#1
 1576 0036 3B74     	 strb r3,[r7,#16]
 813:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 1577              	 .loc 1 813 0
 1578 0038 0023     	 movs r3,#0
 1579 003a 7B74     	 strb r3,[r7,#17]
 814:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 1580              	 .loc 1 814 0
 1581 003c 5E23     	 movs r3,#94
 1582 003e BB74     	 strb r3,[r7,#18]
 815:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 1583              	 .loc 1 815 0
 1584 0040 7B68     	 ldr r3,[r7,#4]
 1585 0042 0133     	 adds r3,r3,#1
 1586 0044 1B78     	 ldrb r3,[r3]
 1587 0046 03F07F03 	 and r3,r3,#127
 1588 004a DBB2     	 uxtb r3,r3
 1589 004c FB74     	 strb r3,[r7,#19]
 816:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     mcastaddr.addr[4] = ip4_addr3(ipaddr);
 1590              	 .loc 1 816 0
 1591 004e 7B68     	 ldr r3,[r7,#4]
 1592 0050 0233     	 adds r3,r3,#2
 1593 0052 1B78     	 ldrb r3,[r3]
 1594 0054 3B75     	 strb r3,[r7,#20]
 817:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     mcastaddr.addr[5] = ip4_addr4(ipaddr);
 1595              	 .loc 1 817 0
 1596 0056 7B68     	 ldr r3,[r7,#4]
 1597 0058 0333     	 adds r3,r3,#3
 1598 005a 1B78     	 ldrb r3,[r3]
 1599 005c 7B75     	 strb r3,[r7,#21]
 818:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* destination Ethernet address is multicast */
 819:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     dest = &mcastaddr;
 1600              	 .loc 1 819 0
 1601 005e 07F11003 	 add r3,r7,#16
 1602 0062 FB61     	 str r3,[r7,#28]
 1603 0064 8DE0     	 b .L88
 1604              	.L89:
 1605              	.LBB6:
 820:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* unicast destination IP address? */
 821:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   } else {
 822:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     netif_addr_idx_t i;
 823:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* outside local network? if so, this can neither be a global broadcast nor
 824:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****        a subnet broadcast. */
 825:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 1606              	 .loc 1 825 0
 1607 0066 7B68     	 ldr r3,[r7,#4]
 1608 0068 1A68     	 ldr r2,[r3]
 1609 006a FB68     	 ldr r3,[r7,#12]
 1610 006c 0433     	 adds r3,r3,#4
 1611 006e 1B68     	 ldr r3,[r3]
 1612 0070 5A40     	 eors r2,r2,r3
 1613 0072 FB68     	 ldr r3,[r7,#12]
 1614 0074 0833     	 adds r3,r3,#8
 1615 0076 1B68     	 ldr r3,[r3]
 1616 0078 1340     	 ands r3,r3,r2
 1617 007a 002B     	 cmp r3,#0
 1618 007c 11D0     	 beq .L90
 826:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         !ip4_addr_islinklocal(ipaddr)) {
 1619              	 .loc 1 826 0 discriminator 1
 1620 007e 7B68     	 ldr r3,[r7,#4]
 1621 0080 1B68     	 ldr r3,[r3]
 1622 0082 9BB2     	 uxth r3,r3
 825:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         !ip4_addr_islinklocal(ipaddr)) {
 1623              	 .loc 1 825 0 discriminator 1
 1624 0084 4FF6A962 	 movw r2,#65193
 1625 0088 9342     	 cmp r3,r2
 1626 008a 0AD0     	 beq .L90
 827:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if LWIP_AUTOIP
 828:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       struct ip_hdr *iphdr = LWIP_ALIGNMENT_CAST(struct ip_hdr *, q->payload);
 829:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* According to RFC 3297, chapter 2.6.2 (Forwarding Rules), a packet with
 830:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****          a link-local source address must always be "directly to its destination
 831:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****          on the same physical link. The host MUST NOT send the packet to any
 832:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****          router for forwarding". */
 833:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       if (!ip4_addr_islinklocal(&iphdr->src))
 834:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* LWIP_AUTOIP */
 835:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       {
 836:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #ifdef LWIP_HOOK_ETHARP_GET_GW
 837:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* For advanced routing, a single default gateway might not be enough, so get
 838:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****            the IP address of the gateway to handle the current destination address. */
 839:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
 840:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         if (dst_addr == NULL)
 841:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* LWIP_HOOK_ETHARP_GET_GW */
 842:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         {
 843:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           /* interface has default gateway? */
 844:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 1627              	 .loc 1 844 0
 1628 008c FB68     	 ldr r3,[r7,#12]
 1629 008e 0C33     	 adds r3,r3,#12
 1630 0090 1B68     	 ldr r3,[r3]
 1631 0092 002B     	 cmp r3,#0
 1632 0094 03D0     	 beq .L91
 845:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****             /* send to hardware address of default gateway IP address */
 846:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****             dst_addr = netif_ip4_gw(netif);
 1633              	 .loc 1 846 0
 1634 0096 FB68     	 ldr r3,[r7,#12]
 1635 0098 0C33     	 adds r3,r3,#12
 1636 009a BB61     	 str r3,[r7,#24]
 1637 009c 01E0     	 b .L90
 1638              	.L91:
 847:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****             /* no default gateway available */
 848:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           } else {
 849:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****             /* no route to destination error (default gateway missing) */
 850:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****             return ERR_RTE;
 1639              	 .loc 1 850 0
 1640 009e FC23     	 movs r3,#252
 1641 00a0 7BE0     	 b .L97
 1642              	.L90:
 851:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           }
 852:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         }
 853:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       }
 854:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     }
 855:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 856:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     if (netif->hints != NULL) {
 857:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* per-pcb cached entry was given */
 858:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
 859:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       if (etharp_cached_entry < ARP_TABLE_SIZE) {
 860:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* LWIP_NETIF_HWADDRHINT */
 861:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 1643              	 .loc 1 861 0
 1644 00a2 414B     	 ldr r3,.L98+4
 1645 00a4 1B78     	 ldrb r3,[r3]
 1646 00a6 1946     	 mov r1,r3
 1647 00a8 404A     	 ldr r2,.L98+8
 1648 00aa 0B46     	 mov r3,r1
 1649 00ac 5B00     	 lsls r3,r3,#1
 1650 00ae 0B44     	 add r3,r3,r1
 1651 00b0 DB00     	 lsls r3,r3,#3
 1652 00b2 1344     	 add r3,r3,r2
 1653 00b4 1033     	 adds r3,r3,#16
 1654 00b6 1B79     	 ldrb r3,[r3,#4]
 1655 00b8 012B     	 cmp r3,#1
 1656 00ba 24D9     	 bls .L93
 862:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if ETHARP_TABLE_MATCH_NETIF
 863:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****             (arp_table[etharp_cached_entry].netif == netif) &&
 1657              	 .loc 1 863 0 discriminator 1
 1658 00bc 3A4B     	 ldr r3,.L98+4
 1659 00be 1B78     	 ldrb r3,[r3]
 1660 00c0 1946     	 mov r1,r3
 1661 00c2 3A4A     	 ldr r2,.L98+8
 1662 00c4 0B46     	 mov r3,r1
 1663 00c6 5B00     	 lsls r3,r3,#1
 1664 00c8 0B44     	 add r3,r3,r1
 1665 00ca DB00     	 lsls r3,r3,#3
 1666 00cc 1344     	 add r3,r3,r2
 1667 00ce 0833     	 adds r3,r3,#8
 1668 00d0 1A68     	 ldr r2,[r3]
 861:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if ETHARP_TABLE_MATCH_NETIF
 1669              	 .loc 1 861 0 discriminator 1
 1670 00d2 FB68     	 ldr r3,[r7,#12]
 1671 00d4 9A42     	 cmp r2,r3
 1672 00d6 16D1     	 bne .L93
 864:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif
 865:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****             (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 1673              	 .loc 1 865 0
 1674 00d8 BB69     	 ldr r3,[r7,#24]
 1675 00da 1A68     	 ldr r2,[r3]
 1676 00dc 324B     	 ldr r3,.L98+4
 1677 00de 1B78     	 ldrb r3,[r3]
 1678 00e0 1846     	 mov r0,r3
 1679 00e2 3249     	 ldr r1,.L98+8
 1680 00e4 0346     	 mov r3,r0
 1681 00e6 5B00     	 lsls r3,r3,#1
 1682 00e8 0344     	 add r3,r3,r0
 1683 00ea DB00     	 lsls r3,r3,#3
 1684 00ec 0B44     	 add r3,r3,r1
 1685 00ee 5B68     	 ldr r3,[r3,#4]
 863:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif
 1686              	 .loc 1 863 0
 1687 00f0 9A42     	 cmp r2,r3
 1688 00f2 08D1     	 bne .L93
 866:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           /* the per-pcb-cached entry is stable and the right one! */
 867:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           ETHARP_STATS_INC(etharp.cachehit);
 868:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 1689              	 .loc 1 868 0
 1690 00f4 2C4B     	 ldr r3,.L98+4
 1691 00f6 1B78     	 ldrb r3,[r3]
 1692 00f8 F868     	 ldr r0,[r7,#12]
 1693 00fa B968     	 ldr r1,[r7,#8]
 1694 00fc 1A46     	 mov r2,r3
 1695 00fe FFF7FEFF 	 bl etharp_output_to_arp_index
 1696 0102 0346     	 mov r3,r0
 1697 0104 49E0     	 b .L97
 1698              	.L93:
 869:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         }
 870:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 871:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       }
 872:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     }
 873:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* LWIP_NETIF_HWADDRHINT */
 874:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 875:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* find stable entry: do this here since this is a critical path for
 876:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****        throughput and etharp_find_entry() is kind of slow */
 877:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     for (i = 0; i < ARP_TABLE_SIZE; i++) {
 1699              	 .loc 1 877 0
 1700 0106 0023     	 movs r3,#0
 1701 0108 FB75     	 strb r3,[r7,#23]
 1702 010a 30E0     	 b .L94
 1703              	.L96:
 878:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 1704              	 .loc 1 878 0
 1705 010c FA7D     	 ldrb r2,[r7,#23]
 1706 010e 2749     	 ldr r1,.L98+8
 1707 0110 1346     	 mov r3,r2
 1708 0112 5B00     	 lsls r3,r3,#1
 1709 0114 1344     	 add r3,r3,r2
 1710 0116 DB00     	 lsls r3,r3,#3
 1711 0118 0B44     	 add r3,r3,r1
 1712 011a 1033     	 adds r3,r3,#16
 1713 011c 1B79     	 ldrb r3,[r3,#4]
 1714 011e 012B     	 cmp r3,#1
 1715 0120 22D9     	 bls .L95
 879:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if ETHARP_TABLE_MATCH_NETIF
 880:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           (arp_table[i].netif == netif) &&
 1716              	 .loc 1 880 0 discriminator 1
 1717 0122 FA7D     	 ldrb r2,[r7,#23]
 1718 0124 2149     	 ldr r1,.L98+8
 1719 0126 1346     	 mov r3,r2
 1720 0128 5B00     	 lsls r3,r3,#1
 1721 012a 1344     	 add r3,r3,r2
 1722 012c DB00     	 lsls r3,r3,#3
 1723 012e 0B44     	 add r3,r3,r1
 1724 0130 0833     	 adds r3,r3,#8
 1725 0132 1A68     	 ldr r2,[r3]
 878:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 1726              	 .loc 1 878 0 discriminator 1
 1727 0134 FB68     	 ldr r3,[r7,#12]
 1728 0136 9A42     	 cmp r2,r3
 1729 0138 16D1     	 bne .L95
 881:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif
 882:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 1730              	 .loc 1 882 0
 1731 013a BB69     	 ldr r3,[r7,#24]
 1732 013c 1968     	 ldr r1,[r3]
 1733 013e FA7D     	 ldrb r2,[r7,#23]
 1734 0140 1A48     	 ldr r0,.L98+8
 1735 0142 1346     	 mov r3,r2
 1736 0144 5B00     	 lsls r3,r3,#1
 1737 0146 1344     	 add r3,r3,r2
 1738 0148 DB00     	 lsls r3,r3,#3
 1739 014a 0344     	 add r3,r3,r0
 1740 014c 5B68     	 ldr r3,[r3,#4]
 880:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif
 1741              	 .loc 1 880 0
 1742 014e 9942     	 cmp r1,r3
 1743 0150 0AD1     	 bne .L95
 883:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* found an existing, stable entry */
 884:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         ETHARP_SET_ADDRHINT(netif, i);
 1744              	 .loc 1 884 0
 1745 0152 154A     	 ldr r2,.L98+4
 1746 0154 FB7D     	 ldrb r3,[r7,#23]
 1747 0156 1370     	 strb r3,[r2]
 885:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         return etharp_output_to_arp_index(netif, q, i);
 1748              	 .loc 1 885 0
 1749 0158 FB7D     	 ldrb r3,[r7,#23]
 1750 015a F868     	 ldr r0,[r7,#12]
 1751 015c B968     	 ldr r1,[r7,#8]
 1752 015e 1A46     	 mov r2,r3
 1753 0160 FFF7FEFF 	 bl etharp_output_to_arp_index
 1754 0164 0346     	 mov r3,r0
 1755 0166 18E0     	 b .L97
 1756              	.L95:
 877:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 1757              	 .loc 1 877 0 discriminator 2
 1758 0168 FB7D     	 ldrb r3,[r7,#23]
 1759 016a 0133     	 adds r3,r3,#1
 1760 016c FB75     	 strb r3,[r7,#23]
 1761              	.L94:
 877:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 1762              	 .loc 1 877 0 is_stmt 0 discriminator 1
 1763 016e FB7D     	 ldrb r3,[r7,#23]
 1764 0170 092B     	 cmp r3,#9
 1765 0172 CBD9     	 bls .L96
 886:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       }
 887:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     }
 888:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* no stable entry found, use the (slower) query function:
 889:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****        queue on destination Ethernet address belonging to ipaddr */
 890:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     return etharp_query(netif, dst_addr, q);
 1766              	 .loc 1 890 0 is_stmt 1
 1767 0174 F868     	 ldr r0,[r7,#12]
 1768 0176 B969     	 ldr r1,[r7,#24]
 1769 0178 BA68     	 ldr r2,[r7,#8]
 1770 017a FFF7FEFF 	 bl etharp_query
 1771 017e 0346     	 mov r3,r0
 1772 0180 0BE0     	 b .L97
 1773              	.L88:
 1774              	.LBE6:
 891:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 892:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 893:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* continuation for multicast/broadcast destinations */
 894:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* obtain source Ethernet address of the given interface */
 895:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* send packet directly on the link */
 896:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 1775              	 .loc 1 896 0
 1776 0182 FB68     	 ldr r3,[r7,#12]
 1777 0184 03F12602 	 add r2,r3,#38
 1778 0188 4FF40063 	 mov r3,#2048
 1779 018c 0093     	 str r3,[sp]
 1780 018e F868     	 ldr r0,[r7,#12]
 1781 0190 B968     	 ldr r1,[r7,#8]
 1782 0192 FB69     	 ldr r3,[r7,#28]
 1783 0194 FFF7FEFF 	 bl ethernet_output
 1784 0198 0346     	 mov r3,r0
 1785              	.L97:
 1786 019a 5BB2     	 sxtb r3,r3
 897:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
 1787              	 .loc 1 897 0 discriminator 1
 1788 019c 1846     	 mov r0,r3
 1789 019e 2037     	 adds r7,r7,#32
 1790              	.LCFI49:
 1791              	 .cfi_def_cfa_offset 8
 1792 01a0 BD46     	 mov sp,r7
 1793              	.LCFI50:
 1794              	 .cfi_def_cfa_register 13
 1795              	 
 1796 01a2 80BD     	 pop {r7,pc}
 1797              	.L99:
 1798              	 .align 2
 1799              	.L98:
 1800 01a4 00000000 	 .word ethbroadcast
 1801 01a8 00000000 	 .word etharp_cached_entry
 1802 01ac 00000000 	 .word arp_table
 1803              	 .cfi_endproc
 1804              	.LFE142:
 1806              	 .section .text.etharp_query,"ax",%progbits
 1807              	 .align 2
 1808              	 .global etharp_query
 1809              	 .thumb
 1810              	 .thumb_func
 1812              	etharp_query:
 1813              	.LFB143:
 898:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 899:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /**
 900:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Send an ARP request for the given IP address and/or queue a packet.
 901:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 902:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * If the IP address was not yet in the cache, a pending ARP cache entry
 903:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * is added and an ARP request is sent for the given address. The packet
 904:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * is queued on this entry.
 905:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 906:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * If the IP address was already pending in the cache, a new ARP request
 907:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * is sent for the given address. The packet is queued on this entry.
 908:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 909:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * If the IP address was already stable in the cache, and a packet is
 910:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * given, it is directly sent and no ARP request is sent out.
 911:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 912:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * If the IP address was already stable in the cache, and no packet is
 913:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * given, an ARP request is sent out.
 914:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 915:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param netif The lwIP network interface on which ipaddr
 916:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * must be queried for.
 917:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ipaddr The IP address to be resolved.
 918:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param q If non-NULL, a pbuf that must be delivered to the IP address.
 919:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * q is not freed by this function.
 920:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 921:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @note q must only be ONE packet, not a packet queue!
 922:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 923:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @return
 924:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * - ERR_BUF Could not make room for Ethernet header.
 925:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * - ERR_MEM Hardware address unknown, and no more ARP entries available
 926:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *   to query for address or queue the packet.
 927:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * - ERR_MEM Could not queue packet due to memory shortage.
 928:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * - ERR_RTE No route to destination (no gateway to external networks).
 929:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 930:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
 931:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
 932:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** err_t
 933:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
 934:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
 1814              	 .loc 1 934 0
 1815              	 .cfi_startproc
 1816              	 
 1817              	 
 1818 0000 90B5     	 push {r4,r7,lr}
 1819              	.LCFI51:
 1820              	 .cfi_def_cfa_offset 12
 1821              	 .cfi_offset 4,-12
 1822              	 .cfi_offset 7,-8
 1823              	 .cfi_offset 14,-4
 1824 0002 8DB0     	 sub sp,sp,#52
 1825              	.LCFI52:
 1826              	 .cfi_def_cfa_offset 64
 1827 0004 02AF     	 add r7,sp,#8
 1828              	.LCFI53:
 1829              	 .cfi_def_cfa 7,56
 1830 0006 F860     	 str r0,[r7,#12]
 1831 0008 B960     	 str r1,[r7,#8]
 1832 000a 7A60     	 str r2,[r7,#4]
 935:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 1833              	 .loc 1 935 0
 1834 000c FB68     	 ldr r3,[r7,#12]
 1835 000e 2633     	 adds r3,r3,#38
 1836 0010 7B61     	 str r3,[r7,#20]
 936:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   err_t result = ERR_MEM;
 1837              	 .loc 1 936 0
 1838 0012 FF23     	 movs r3,#255
 1839 0014 87F82730 	 strb r3,[r7,#39]
 937:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   int is_new_entry = 0;
 1840              	 .loc 1 937 0
 1841 0018 0023     	 movs r3,#0
 1842 001a 3B62     	 str r3,[r7,#32]
 938:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   s16_t i_err;
 939:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   netif_addr_idx_t i;
 940:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 941:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* non-unicast address? */
 942:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (ip4_addr_isbroadcast(ipaddr, netif) ||
 1843              	 .loc 1 942 0
 1844 001c BB68     	 ldr r3,[r7,#8]
 1845 001e 1B68     	 ldr r3,[r3]
 1846 0020 1846     	 mov r0,r3
 1847 0022 F968     	 ldr r1,[r7,#12]
 1848 0024 FFF7FEFF 	 bl ip4_addr_isbroadcast_u32
 1849 0028 0346     	 mov r3,r0
 1850 002a 002B     	 cmp r3,#0
 1851 002c 0CD1     	 bne .L101
 943:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       ip4_addr_ismulticast(ipaddr) ||
 1852              	 .loc 1 943 0 discriminator 1
 1853 002e BB68     	 ldr r3,[r7,#8]
 1854 0030 1B68     	 ldr r3,[r3]
 1855 0032 03F0F003 	 and r3,r3,#240
 942:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       ip4_addr_ismulticast(ipaddr) ||
 1856              	 .loc 1 942 0 discriminator 1
 1857 0036 E02B     	 cmp r3,#224
 1858 0038 06D0     	 beq .L101
 1859              	 .loc 1 943 0
 1860 003a BB68     	 ldr r3,[r7,#8]
 1861 003c 002B     	 cmp r3,#0
 1862 003e 03D0     	 beq .L101
 944:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       ip4_addr_isany(ipaddr)) {
 1863              	 .loc 1 944 0
 1864 0040 BB68     	 ldr r3,[r7,#8]
 1865 0042 1B68     	 ldr r3,[r3]
 1866 0044 002B     	 cmp r3,#0
 1867 0046 01D1     	 bne .L102
 1868              	.L101:
 945:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address 
 946:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     return ERR_ARG;
 1869              	 .loc 1 946 0
 1870 0048 F023     	 movs r3,#240
 1871 004a C0E0     	 b .L103
 1872              	.L102:
 947:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 948:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 949:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* find entry in ARP cache, ask to create entry if queueing packet */
 950:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 1873              	 .loc 1 950 0
 1874 004c B868     	 ldr r0,[r7,#8]
 1875 004e 0121     	 movs r1,#1
 1876 0050 FA68     	 ldr r2,[r7,#12]
 1877 0052 FFF7FEFF 	 bl etharp_find_entry
 1878 0056 0346     	 mov r3,r0
 1879 0058 7B82     	 strh r3,[r7,#18]
 951:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 952:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* could not find or create entry? */
 953:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (i_err < 0) {
 1880              	 .loc 1 953 0
 1881 005a B7F91230 	 ldrsh r3,[r7,#18]
 1882 005e 002B     	 cmp r3,#0
 1883 0060 02DA     	 bge .L104
 954:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
 955:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     if (q) {
 956:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
 957:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       ETHARP_STATS_INC(etharp.memerr);
 958:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     }
 959:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     return (err_t)i_err;
 1884              	 .loc 1 959 0
 1885 0062 7B8A     	 ldrh r3,[r7,#18]
 1886 0064 DBB2     	 uxtb r3,r3
 1887 0066 B2E0     	 b .L103
 1888              	.L104:
 960:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 961:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 962:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   i = (netif_addr_idx_t)i_err;
 1889              	 .loc 1 962 0
 1890 0068 7B8A     	 ldrh r3,[r7,#18]
 1891 006a 7B74     	 strb r3,[r7,#17]
 963:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 964:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* mark a fresh entry as pending (we just sent a request) */
 965:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 1892              	 .loc 1 965 0
 1893 006c 7A7C     	 ldrb r2,[r7,#17]
 1894 006e 5A49     	 ldr r1,.L118
 1895 0070 1346     	 mov r3,r2
 1896 0072 5B00     	 lsls r3,r3,#1
 1897 0074 1344     	 add r3,r3,r2
 1898 0076 DB00     	 lsls r3,r3,#3
 1899 0078 0B44     	 add r3,r3,r1
 1900 007a 1033     	 adds r3,r3,#16
 1901 007c 1B79     	 ldrb r3,[r3,#4]
 1902 007e 002B     	 cmp r3,#0
 1903 0080 15D1     	 bne .L105
 966:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     is_new_entry = 1;
 1904              	 .loc 1 966 0
 1905 0082 0123     	 movs r3,#1
 1906 0084 3B62     	 str r3,[r7,#32]
 967:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     arp_table[i].state = ETHARP_STATE_PENDING;
 1907              	 .loc 1 967 0
 1908 0086 7A7C     	 ldrb r2,[r7,#17]
 1909 0088 5349     	 ldr r1,.L118
 1910 008a 1346     	 mov r3,r2
 1911 008c 5B00     	 lsls r3,r3,#1
 1912 008e 1344     	 add r3,r3,r2
 1913 0090 DB00     	 lsls r3,r3,#3
 1914 0092 0B44     	 add r3,r3,r1
 1915 0094 1033     	 adds r3,r3,#16
 1916 0096 0122     	 movs r2,#1
 1917 0098 1A71     	 strb r2,[r3,#4]
 968:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* record network interface for re-sending arp request in etharp_tmr */
 969:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     arp_table[i].netif = netif;
 1918              	 .loc 1 969 0
 1919 009a 7A7C     	 ldrb r2,[r7,#17]
 1920 009c 4E49     	 ldr r1,.L118
 1921 009e 1346     	 mov r3,r2
 1922 00a0 5B00     	 lsls r3,r3,#1
 1923 00a2 1344     	 add r3,r3,r2
 1924 00a4 DB00     	 lsls r3,r3,#3
 1925 00a6 0B44     	 add r3,r3,r1
 1926 00a8 0833     	 adds r3,r3,#8
 1927 00aa FA68     	 ldr r2,[r7,#12]
 1928 00ac 1A60     	 str r2,[r3]
 1929              	.L105:
 970:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 971:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 972:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* { i is either a STABLE or (new or existing) PENDING entry } */
 973:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 974:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****               ((arp_table[i].state == ETHARP_STATE_PENDING) ||
 975:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                (arp_table[i].state >= ETHARP_STATE_STABLE)));
 976:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 977:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* do we have a new entry? or an implicit query request? */
 978:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (is_new_entry || (q == NULL)) {
 1930              	 .loc 1 978 0
 1931 00ae 3B6A     	 ldr r3,[r7,#32]
 1932 00b0 002B     	 cmp r3,#0
 1933 00b2 02D1     	 bne .L106
 1934              	 .loc 1 978 0 is_stmt 0 discriminator 1
 1935 00b4 7B68     	 ldr r3,[r7,#4]
 1936 00b6 002B     	 cmp r3,#0
 1937 00b8 0CD1     	 bne .L107
 1938              	.L106:
 979:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* try to resolve it; send out ARP request */
 980:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     result = etharp_request(netif, ipaddr);
 1939              	 .loc 1 980 0 is_stmt 1
 1940 00ba F868     	 ldr r0,[r7,#12]
 1941 00bc B968     	 ldr r1,[r7,#8]
 1942 00be FFF7FEFF 	 bl etharp_request
 1943 00c2 0346     	 mov r3,r0
 1944 00c4 87F82730 	 strb r3,[r7,#39]
 981:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     if (result != ERR_OK) {
 982:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* ARP request couldn't be sent */
 983:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* We don't re-send arp request in etharp_tmr, but we still queue packets,
 984:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****          since this failure could be temporary, and the next packet calling
 985:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****          etharp_query again could lead to sending the queued packets. */
 986:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     }
 987:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     if (q == NULL) {
 1945              	 .loc 1 987 0
 1946 00c8 7B68     	 ldr r3,[r7,#4]
 1947 00ca 002B     	 cmp r3,#0
 1948 00cc 02D1     	 bne .L107
 988:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       return result;
 1949              	 .loc 1 988 0
 1950 00ce 97F82730 	 ldrb r3,[r7,#39]
 1951 00d2 7CE0     	 b .L103
 1952              	.L107:
 989:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     }
 990:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
 991:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
 992:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* packet given? */
 993:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("q != NULL", q != NULL);
 994:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* stable entry? */
 995:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 1953              	 .loc 1 995 0
 1954 00d4 7A7C     	 ldrb r2,[r7,#17]
 1955 00d6 4049     	 ldr r1,.L118
 1956 00d8 1346     	 mov r3,r2
 1957 00da 5B00     	 lsls r3,r3,#1
 1958 00dc 1344     	 add r3,r3,r2
 1959 00de DB00     	 lsls r3,r3,#3
 1960 00e0 0B44     	 add r3,r3,r1
 1961 00e2 1033     	 adds r3,r3,#16
 1962 00e4 1B79     	 ldrb r3,[r3,#4]
 1963 00e6 012B     	 cmp r3,#1
 1964 00e8 18D9     	 bls .L108
 996:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* we have a valid IP->Ethernet address mapping */
 997:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     ETHARP_SET_ADDRHINT(netif, i);
 1965              	 .loc 1 997 0
 1966 00ea 3C4A     	 ldr r2,.L118+4
 1967 00ec 7B7C     	 ldrb r3,[r7,#17]
 1968 00ee 1370     	 strb r3,[r2]
 998:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* send the packet */
 999:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 1969              	 .loc 1 999 0
 1970 00f0 7A7C     	 ldrb r2,[r7,#17]
 1971 00f2 1346     	 mov r3,r2
 1972 00f4 5B00     	 lsls r3,r3,#1
 1973 00f6 1344     	 add r3,r3,r2
 1974 00f8 DB00     	 lsls r3,r3,#3
 1975 00fa 0833     	 adds r3,r3,#8
 1976 00fc 364A     	 ldr r2,.L118
 1977 00fe 1344     	 add r3,r3,r2
 1978 0100 1C1D     	 adds r4,r3,#4
 1979 0102 4FF40063 	 mov r3,#2048
 1980 0106 0093     	 str r3,[sp]
 1981 0108 F868     	 ldr r0,[r7,#12]
 1982 010a 7968     	 ldr r1,[r7,#4]
 1983 010c 7A69     	 ldr r2,[r7,#20]
 1984 010e 2346     	 mov r3,r4
 1985 0110 FFF7FEFF 	 bl ethernet_output
 1986 0114 0346     	 mov r3,r0
 1987 0116 87F82730 	 strb r3,[r7,#39]
 1988 011a 56E0     	 b .L109
 1989              	.L108:
1000:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* pending entry? (either just created or already pending */
1001:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 1990              	 .loc 1 1001 0
 1991 011c 7A7C     	 ldrb r2,[r7,#17]
 1992 011e 2E49     	 ldr r1,.L118
 1993 0120 1346     	 mov r3,r2
 1994 0122 5B00     	 lsls r3,r3,#1
 1995 0124 1344     	 add r3,r3,r2
 1996 0126 DB00     	 lsls r3,r3,#3
 1997 0128 0B44     	 add r3,r3,r1
 1998 012a 1033     	 adds r3,r3,#16
 1999 012c 1B79     	 ldrb r3,[r3,#4]
 2000 012e 012B     	 cmp r3,#1
 2001 0130 4BD1     	 bne .L109
 2002              	.LBB7:
1002:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* entry is still pending, queue the given packet 'q' */
1003:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     struct pbuf *p;
1004:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     int copy_needed = 0;
 2003              	 .loc 1 1004 0
 2004 0132 0023     	 movs r3,#0
 2005 0134 BB61     	 str r3,[r7,#24]
1005:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* IF q includes a pbuf that must be copied, copy the whole chain into a
1006:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****      * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
1007:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     p = q;
 2006              	 .loc 1 1007 0
 2007 0136 7B68     	 ldr r3,[r7,#4]
 2008 0138 FB61     	 str r3,[r7,#28]
1008:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     while (p) {
 2009              	 .loc 1 1008 0
 2010 013a 0BE0     	 b .L110
 2011              	.L113:
1009:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
1010:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       if (PBUF_NEEDS_COPY(p)) {
 2012              	 .loc 1 1010 0
 2013 013c FB69     	 ldr r3,[r7,#28]
 2014 013e 1B7B     	 ldrb r3,[r3,#12]
 2015 0140 03F04003 	 and r3,r3,#64
 2016 0144 002B     	 cmp r3,#0
 2017 0146 02D0     	 beq .L111
1011:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         copy_needed = 1;
 2018              	 .loc 1 1011 0
 2019 0148 0123     	 movs r3,#1
 2020 014a BB61     	 str r3,[r7,#24]
1012:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         break;
 2021              	 .loc 1 1012 0
 2022 014c 05E0     	 b .L112
 2023              	.L111:
1013:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       }
1014:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       p = p->next;
 2024              	 .loc 1 1014 0
 2025 014e FB69     	 ldr r3,[r7,#28]
 2026 0150 1B68     	 ldr r3,[r3]
 2027 0152 FB61     	 str r3,[r7,#28]
 2028              	.L110:
1008:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 2029              	 .loc 1 1008 0
 2030 0154 FB69     	 ldr r3,[r7,#28]
 2031 0156 002B     	 cmp r3,#0
 2032 0158 F0D1     	 bne .L113
 2033              	.L112:
1015:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     }
1016:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     if (copy_needed) {
 2034              	 .loc 1 1016 0
 2035 015a BB69     	 ldr r3,[r7,#24]
 2036 015c 002B     	 cmp r3,#0
 2037 015e 07D0     	 beq .L114
1017:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* copy the whole packet into new pbufs */
1018:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 2038              	 .loc 1 1018 0
 2039 0160 1020     	 movs r0,#16
 2040 0162 4FF42071 	 mov r1,#640
 2041 0166 7A68     	 ldr r2,[r7,#4]
 2042 0168 FFF7FEFF 	 bl pbuf_clone
 2043 016c F861     	 str r0,[r7,#28]
 2044 016e 04E0     	 b .L115
 2045              	.L114:
1019:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     } else {
1020:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* referencing the old pbuf is enough */
1021:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       p = q;
 2046              	 .loc 1 1021 0
 2047 0170 7B68     	 ldr r3,[r7,#4]
 2048 0172 FB61     	 str r3,[r7,#28]
1022:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       pbuf_ref(p);
 2049              	 .loc 1 1022 0
 2050 0174 F869     	 ldr r0,[r7,#28]
 2051 0176 FFF7FEFF 	 bl pbuf_ref
 2052              	.L115:
1023:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     }
1024:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     /* packet could be taken over? */
1025:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     if (p != NULL) {
 2053              	 .loc 1 1025 0
 2054 017a FB69     	 ldr r3,[r7,#28]
 2055 017c 002B     	 cmp r3,#0
 2056 017e 21D0     	 beq .L116
1026:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* queue packet ... */
1027:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if ARP_QUEUEING
1028:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       struct etharp_q_entry *new_entry;
1029:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* allocate a new arp queue entry */
1030:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
1031:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       if (new_entry != NULL) {
1032:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         unsigned int qlen = 0;
1033:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         new_entry->next = 0;
1034:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         new_entry->p = p;
1035:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         if (arp_table[i].q != NULL) {
1036:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           /* queue was already existent, append the new entry to the end */
1037:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           struct etharp_q_entry *r;
1038:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           r = arp_table[i].q;
1039:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           qlen++;
1040:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           while (r->next != NULL) {
1041:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****             r = r->next;
1042:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****             qlen++;
1043:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           }
1044:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           r->next = new_entry;
1045:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         } else {
1046:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           /* queue did not exist, first item in queue */
1047:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           arp_table[i].q = new_entry;
1048:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         }
1049:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if ARP_QUEUE_LEN
1050:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         if (qlen >= ARP_QUEUE_LEN) {
1051:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           struct etharp_q_entry *old;
1052:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           old = arp_table[i].q;
1053:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           arp_table[i].q = arp_table[i].q->next;
1054:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           pbuf_free(old->p);
1055:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****           memp_free(MEMP_ARP_QUEUE, old);
1056:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         }
1057:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif
1058:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"
1059:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         result = ERR_OK;
1060:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       } else {
1061:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         /* the pool MEMP_ARP_QUEUE is empty */
1062:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         pbuf_free(p);
1063:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_R
1064:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         result = ERR_MEM;
1065:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       }
1066:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #else /* ARP_QUEUEING */
1067:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       /* always queue one packet per ARP request only, freeing a previously queued packet */
1068:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       if (arp_table[i].q != NULL) {
 2057              	 .loc 1 1068 0
 2058 0180 7A7C     	 ldrb r2,[r7,#17]
 2059 0182 1549     	 ldr r1,.L118
 2060 0184 1346     	 mov r3,r2
 2061 0186 5B00     	 lsls r3,r3,#1
 2062 0188 1344     	 add r3,r3,r2
 2063 018a DB00     	 lsls r3,r3,#3
 2064 018c 0B44     	 add r3,r3,r1
 2065 018e 1B68     	 ldr r3,[r3]
 2066 0190 002B     	 cmp r3,#0
 2067 0192 0AD0     	 beq .L117
1069:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet
1070:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****         pbuf_free(arp_table[i].q);
 2068              	 .loc 1 1070 0
 2069 0194 7A7C     	 ldrb r2,[r7,#17]
 2070 0196 1049     	 ldr r1,.L118
 2071 0198 1346     	 mov r3,r2
 2072 019a 5B00     	 lsls r3,r3,#1
 2073 019c 1344     	 add r3,r3,r2
 2074 019e DB00     	 lsls r3,r3,#3
 2075 01a0 0B44     	 add r3,r3,r1
 2076 01a2 1B68     	 ldr r3,[r3]
 2077 01a4 1846     	 mov r0,r3
 2078 01a6 FFF7FEFF 	 bl pbuf_free
 2079              	.L117:
1071:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       }
1072:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       arp_table[i].q = p;
 2080              	 .loc 1 1072 0
 2081 01aa 7A7C     	 ldrb r2,[r7,#17]
 2082 01ac 0A49     	 ldr r1,.L118
 2083 01ae 1346     	 mov r3,r2
 2084 01b0 5B00     	 lsls r3,r3,#1
 2085 01b2 1344     	 add r3,r3,r2
 2086 01b4 DB00     	 lsls r3,r3,#3
 2087 01b6 0B44     	 add r3,r3,r1
 2088 01b8 FA69     	 ldr r2,[r7,#28]
 2089 01ba 1A60     	 str r2,[r3]
1073:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       result = ERR_OK;
 2090              	 .loc 1 1073 0
 2091 01bc 0023     	 movs r3,#0
 2092 01be 87F82730 	 strb r3,[r7,#39]
 2093 01c2 02E0     	 b .L109
 2094              	.L116:
1074:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U1
1075:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* ARP_QUEUEING */
1076:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     } else {
1077:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       ETHARP_STATS_INC(etharp.memerr);
1078:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF
1079:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****       result = ERR_MEM;
 2095              	 .loc 1 1079 0
 2096 01c4 FF23     	 movs r3,#255
 2097 01c6 87F82730 	 strb r3,[r7,#39]
 2098              	.L109:
 2099              	.LBE7:
1080:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     }
1081:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
1082:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   return result;
 2100              	 .loc 1 1082 0
 2101 01ca 97F82730 	 ldrb r3,[r7,#39]
 2102              	.L103:
 2103 01ce 5BB2     	 sxtb r3,r3
1083:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
 2104              	 .loc 1 1083 0
 2105 01d0 1846     	 mov r0,r3
 2106 01d2 2C37     	 adds r7,r7,#44
 2107              	.LCFI54:
 2108              	 .cfi_def_cfa_offset 12
 2109 01d4 BD46     	 mov sp,r7
 2110              	.LCFI55:
 2111              	 .cfi_def_cfa_register 13
 2112              	 
 2113 01d6 90BD     	 pop {r4,r7,pc}
 2114              	.L119:
 2115              	 .align 2
 2116              	.L118:
 2117 01d8 00000000 	 .word arp_table
 2118 01dc 00000000 	 .word etharp_cached_entry
 2119              	 .cfi_endproc
 2120              	.LFE143:
 2122              	 .section .text.etharp_raw,"ax",%progbits
 2123              	 .align 2
 2124              	 .thumb
 2125              	 .thumb_func
 2127              	etharp_raw:
 2128              	.LFB144:
1084:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
1085:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /**
1086:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Send a raw ARP packet (opcode and all addresses can be modified)
1087:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
1088:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param netif the lwip network interface on which to send the ARP packet
1089:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ethsrc_addr the source MAC address for the ethernet header
1090:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ethdst_addr the destination MAC address for the ethernet header
1091:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param hwsrc_addr the source MAC address for the ARP protocol header
1092:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ipsrc_addr the source IP address for the ARP protocol header
1093:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param hwdst_addr the destination MAC address for the ARP protocol header
1094:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ipdst_addr the destination IP address for the ARP protocol header
1095:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param opcode the type of the ARP packet
1096:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @return ERR_OK if the ARP packet has been sent
1097:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *         ERR_MEM if the ARP packet couldn't be allocated
1098:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *         any other err_t on failure
1099:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
1100:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** static err_t
1101:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
1102:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****            const struct eth_addr *ethdst_addr,
1103:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****            const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
1104:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****            const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
1105:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****            const u16_t opcode)
1106:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
 2129              	 .loc 1 1106 0
 2130              	 .cfi_startproc
 2131              	 
 2132              	 
 2133 0000 80B5     	 push {r7,lr}
 2134              	.LCFI56:
 2135              	 .cfi_def_cfa_offset 8
 2136              	 .cfi_offset 7,-8
 2137              	 .cfi_offset 14,-4
 2138 0002 8AB0     	 sub sp,sp,#40
 2139              	.LCFI57:
 2140              	 .cfi_def_cfa_offset 48
 2141 0004 02AF     	 add r7,sp,#8
 2142              	.LCFI58:
 2143              	 .cfi_def_cfa 7,40
 2144 0006 F860     	 str r0,[r7,#12]
 2145 0008 B960     	 str r1,[r7,#8]
 2146 000a 7A60     	 str r2,[r7,#4]
 2147 000c 3B60     	 str r3,[r7]
1107:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   struct pbuf *p;
1108:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   err_t result = ERR_OK;
 2148              	 .loc 1 1108 0
 2149 000e 0023     	 movs r3,#0
 2150 0010 FB77     	 strb r3,[r7,#31]
1109:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   struct etharp_hdr *hdr;
1110:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
1111:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("netif != NULL", netif != NULL);
1112:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
1113:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* allocate a pbuf for the outgoing ARP request packet */
1114:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 2151              	 .loc 1 1114 0
 2152 0012 1020     	 movs r0,#16
 2153 0014 1C21     	 movs r1,#28
 2154 0016 4FF42072 	 mov r2,#640
 2155 001a FFF7FEFF 	 bl pbuf_alloc
 2156 001e B861     	 str r0,[r7,#24]
1115:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* could allocate a pbuf for an ARP request? */
1116:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (p == NULL) {
 2157              	 .loc 1 1116 0
 2158 0020 BB69     	 ldr r3,[r7,#24]
 2159 0022 002B     	 cmp r3,#0
 2160 0024 01D1     	 bne .L121
1117:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
1118:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                 ("etharp_raw: could not allocate pbuf for ARP request.\n"));
1119:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     ETHARP_STATS_INC(etharp.memerr);
1120:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     return ERR_MEM;
 2161              	 .loc 1 1120 0
 2162 0026 FF23     	 movs r3,#255
 2163 0028 49E0     	 b .L122
 2164              	.L121:
1121:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
1122:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
1123:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****               (p->len >= SIZEOF_ETHARP_HDR));
1124:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
1125:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   hdr = (struct etharp_hdr *)p->payload;
 2165              	 .loc 1 1125 0
 2166 002a BB69     	 ldr r3,[r7,#24]
 2167 002c 5B68     	 ldr r3,[r3,#4]
 2168 002e 7B61     	 str r3,[r7,#20]
1126:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
1127:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   hdr->opcode = lwip_htons(opcode);
 2169              	 .loc 1 1127 0
 2170 0030 BB8E     	 ldrh r3,[r7,#52]
 2171 0032 1846     	 mov r0,r3
 2172 0034 FFF7FEFF 	 bl lwip_htons
 2173 0038 0346     	 mov r3,r0
 2174 003a 1A46     	 mov r2,r3
 2175 003c 7B69     	 ldr r3,[r7,#20]
 2176 003e DA80     	 strh r2,[r3,#6]
1128:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
1129:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
1130:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****               (netif->hwaddr_len == ETH_HWADDR_LEN));
1131:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
1132:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* Write the ARP MAC-Addresses */
1133:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 2177              	 .loc 1 1133 0
 2178 0040 7B69     	 ldr r3,[r7,#20]
 2179 0042 0833     	 adds r3,r3,#8
 2180 0044 1846     	 mov r0,r3
 2181 0046 3968     	 ldr r1,[r7]
 2182 0048 0622     	 movs r2,#6
 2183 004a FFF7FEFF 	 bl memcpy
1134:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 2184              	 .loc 1 1134 0
 2185 004e 7B69     	 ldr r3,[r7,#20]
 2186 0050 1233     	 adds r3,r3,#18
 2187 0052 1846     	 mov r0,r3
 2188 0054 F96A     	 ldr r1,[r7,#44]
 2189 0056 0622     	 movs r2,#6
 2190 0058 FFF7FEFF 	 bl memcpy
1135:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
1136:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * structure packing. */
1137:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 2191              	 .loc 1 1137 0
 2192 005c 7B69     	 ldr r3,[r7,#20]
 2193 005e 0E33     	 adds r3,r3,#14
 2194 0060 1846     	 mov r0,r3
 2195 0062 B96A     	 ldr r1,[r7,#40]
 2196 0064 0422     	 movs r2,#4
 2197 0066 FFF7FEFF 	 bl memcpy
1138:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 2198              	 .loc 1 1138 0
 2199 006a 7B69     	 ldr r3,[r7,#20]
 2200 006c 1833     	 adds r3,r3,#24
 2201 006e 1846     	 mov r0,r3
 2202 0070 396B     	 ldr r1,[r7,#48]
 2203 0072 0422     	 movs r2,#4
 2204 0074 FFF7FEFF 	 bl memcpy
1139:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
1140:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 2205              	 .loc 1 1140 0
 2206 0078 7B69     	 ldr r3,[r7,#20]
 2207 007a 0022     	 movs r2,#0
 2208 007c 1A70     	 strb r2,[r3]
 2209 007e 0022     	 movs r2,#0
 2210 0080 42F00102 	 orr r2,r2,#1
 2211 0084 5A70     	 strb r2,[r3,#1]
1141:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   hdr->proto = PP_HTONS(ETHTYPE_IP);
 2212              	 .loc 1 1141 0
 2213 0086 7B69     	 ldr r3,[r7,#20]
 2214 0088 0022     	 movs r2,#0
 2215 008a 42F00802 	 orr r2,r2,#8
 2216 008e 9A70     	 strb r2,[r3,#2]
 2217 0090 0022     	 movs r2,#0
 2218 0092 DA70     	 strb r2,[r3,#3]
1142:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* set hwlen and protolen */
1143:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   hdr->hwlen = ETH_HWADDR_LEN;
 2219              	 .loc 1 1143 0
 2220 0094 7B69     	 ldr r3,[r7,#20]
 2221 0096 0622     	 movs r2,#6
 2222 0098 1A71     	 strb r2,[r3,#4]
1144:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   hdr->protolen = sizeof(ip4_addr_t);
 2223              	 .loc 1 1144 0
 2224 009a 7B69     	 ldr r3,[r7,#20]
 2225 009c 0422     	 movs r2,#4
 2226 009e 5A71     	 strb r2,[r3,#5]
1145:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
1146:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* send ARP query */
1147:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #if LWIP_AUTOIP
1148:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* If we are using Link-Local, all ARP packets that contain a Link-Local
1149:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * 'sender IP address' MUST be sent using link-layer broadcast instead of
1150:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****    * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
1151:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   if (ip4_addr_islinklocal(ipsrc_addr)) {
1152:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
1153:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   } else
1154:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** #endif /* LWIP_AUTOIP */
1155:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   {
1156:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****     ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 2227              	 .loc 1 1156 0
 2228 00a0 40F60603 	 movw r3,#2054
 2229 00a4 0093     	 str r3,[sp]
 2230 00a6 F868     	 ldr r0,[r7,#12]
 2231 00a8 B969     	 ldr r1,[r7,#24]
 2232 00aa BA68     	 ldr r2,[r7,#8]
 2233 00ac 7B68     	 ldr r3,[r7,#4]
 2234 00ae FFF7FEFF 	 bl ethernet_output
1157:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   }
1158:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
1159:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   ETHARP_STATS_INC(etharp.xmit);
1160:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* free ARP query packet */
1161:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   pbuf_free(p);
 2235              	 .loc 1 1161 0
 2236 00b2 B869     	 ldr r0,[r7,#24]
 2237 00b4 FFF7FEFF 	 bl pbuf_free
1162:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   p = NULL;
 2238              	 .loc 1 1162 0
 2239 00b8 0023     	 movs r3,#0
 2240 00ba BB61     	 str r3,[r7,#24]
1163:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   /* could not allocate pbuf for ARP request */
1164:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
1165:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   return result;
 2241              	 .loc 1 1165 0
 2242 00bc FB7F     	 ldrb r3,[r7,#31]
 2243              	.L122:
 2244 00be 5BB2     	 sxtb r3,r3
1166:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
 2245              	 .loc 1 1166 0
 2246 00c0 1846     	 mov r0,r3
 2247 00c2 2037     	 adds r7,r7,#32
 2248              	.LCFI59:
 2249              	 .cfi_def_cfa_offset 8
 2250 00c4 BD46     	 mov sp,r7
 2251              	.LCFI60:
 2252              	 .cfi_def_cfa_register 13
 2253              	 
 2254 00c6 80BD     	 pop {r7,pc}
 2255              	 .cfi_endproc
 2256              	.LFE144:
 2258              	 .section .text.etharp_request_dst,"ax",%progbits
 2259              	 .align 2
 2260              	 .thumb
 2261              	 .thumb_func
 2263              	etharp_request_dst:
 2264              	.LFB145:
1167:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
1168:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /**
1169:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Send an ARP request packet asking for ipaddr to a specific eth address.
1170:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Used to send unicast request to refresh the ARP table just before an entry
1171:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * times out
1172:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
1173:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param netif the lwip network interface on which to send the request
1174:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ipaddr the IP address for which to ask
1175:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param hw_dst_addr the ethernet address to send this packet to
1176:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @return ERR_OK if the request has been sent
1177:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *         ERR_MEM if the ARP packet couldn't be allocated
1178:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *         any other err_t on failure
1179:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
1180:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** static err_t
1181:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_add
1182:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
 2265              	 .loc 1 1182 0
 2266              	 .cfi_startproc
 2267              	 
 2268              	 
 2269 0000 90B5     	 push {r4,r7,lr}
 2270              	.LCFI61:
 2271              	 .cfi_def_cfa_offset 12
 2272              	 .cfi_offset 4,-12
 2273              	 .cfi_offset 7,-8
 2274              	 .cfi_offset 14,-4
 2275 0002 89B0     	 sub sp,sp,#36
 2276              	.LCFI62:
 2277              	 .cfi_def_cfa_offset 48
 2278 0004 04AF     	 add r7,sp,#16
 2279              	.LCFI63:
 2280              	 .cfi_def_cfa 7,32
 2281 0006 F860     	 str r0,[r7,#12]
 2282 0008 B960     	 str r1,[r7,#8]
 2283 000a 7A60     	 str r2,[r7,#4]
1183:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 2284              	 .loc 1 1183 0
 2285 000c FB68     	 ldr r3,[r7,#12]
 2286 000e 03F12602 	 add r2,r3,#38
1184:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                     (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 2287              	 .loc 1 1184 0
 2288 0012 FB68     	 ldr r3,[r7,#12]
 2289 0014 03F12604 	 add r4,r3,#38
 2290 0018 FB68     	 ldr r3,[r7,#12]
 2291 001a 0433     	 adds r3,r3,#4
1183:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 2292              	 .loc 1 1183 0
 2293 001c 0093     	 str r3,[sp]
 2294 001e 084B     	 ldr r3,.L125
 2295 0020 0193     	 str r3,[sp,#4]
 2296 0022 BB68     	 ldr r3,[r7,#8]
 2297 0024 0293     	 str r3,[sp,#8]
 2298 0026 0123     	 movs r3,#1
 2299 0028 0393     	 str r3,[sp,#12]
 2300 002a F868     	 ldr r0,[r7,#12]
 2301 002c 1146     	 mov r1,r2
 2302 002e 7A68     	 ldr r2,[r7,#4]
 2303 0030 2346     	 mov r3,r4
 2304 0032 FFF7FEFF 	 bl etharp_raw
 2305 0036 0346     	 mov r3,r0
1185:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****                     ipaddr, ARP_REQUEST);
1186:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
 2306              	 .loc 1 1186 0
 2307 0038 1846     	 mov r0,r3
 2308 003a 1437     	 adds r7,r7,#20
 2309              	.LCFI64:
 2310              	 .cfi_def_cfa_offset 12
 2311 003c BD46     	 mov sp,r7
 2312              	.LCFI65:
 2313              	 .cfi_def_cfa_register 13
 2314              	 
 2315 003e 90BD     	 pop {r4,r7,pc}
 2316              	.L126:
 2317              	 .align 2
 2318              	.L125:
 2319 0040 00000000 	 .word ethzero
 2320              	 .cfi_endproc
 2321              	.LFE145:
 2323              	 .section .text.etharp_request,"ax",%progbits
 2324              	 .align 2
 2325              	 .global etharp_request
 2326              	 .thumb
 2327              	 .thumb_func
 2329              	etharp_request:
 2330              	.LFB146:
1187:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** 
1188:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** /**
1189:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * Send an ARP request packet asking for ipaddr.
1190:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *
1191:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param netif the lwip network interface on which to send the request
1192:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @param ipaddr the IP address for which to ask
1193:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  * @return ERR_OK if the request has been sent
1194:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *         ERR_MEM if the ARP packet couldn't be allocated
1195:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  *         any other err_t on failure
1196:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****  */
1197:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** err_t
1198:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
1199:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** {
 2331              	 .loc 1 1199 0
 2332              	 .cfi_startproc
 2333              	 
 2334              	 
 2335 0000 80B5     	 push {r7,lr}
 2336              	.LCFI66:
 2337              	 .cfi_def_cfa_offset 8
 2338              	 .cfi_offset 7,-8
 2339              	 .cfi_offset 14,-4
 2340 0002 82B0     	 sub sp,sp,#8
 2341              	.LCFI67:
 2342              	 .cfi_def_cfa_offset 16
 2343 0004 00AF     	 add r7,sp,#0
 2344              	.LCFI68:
 2345              	 .cfi_def_cfa_register 7
 2346 0006 7860     	 str r0,[r7,#4]
 2347 0008 3960     	 str r1,[r7]
1200:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
1201:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c ****   return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 2348              	 .loc 1 1201 0
 2349 000a 7868     	 ldr r0,[r7,#4]
 2350 000c 3968     	 ldr r1,[r7]
 2351 000e 044A     	 ldr r2,.L129
 2352 0010 FFF7FEFF 	 bl etharp_request_dst
 2353 0014 0346     	 mov r3,r0
1202:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/etharp.c **** }
 2354              	 .loc 1 1202 0
 2355 0016 1846     	 mov r0,r3
 2356 0018 0837     	 adds r7,r7,#8
 2357              	.LCFI69:
 2358              	 .cfi_def_cfa_offset 8
 2359 001a BD46     	 mov sp,r7
 2360              	.LCFI70:
 2361              	 .cfi_def_cfa_register 13
 2362              	 
 2363 001c 80BD     	 pop {r7,pc}
 2364              	.L130:
 2365 001e 00BF     	 .align 2
 2366              	.L129:
 2367 0020 00000000 	 .word ethbroadcast
 2368              	 .cfi_endproc
 2369              	.LFE146:
 2371              	 .text
 2372              	.Letext0:
 2373              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 2374              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2375              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2376              	 .file 5 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/arch.h"
 2377              	 .file 6 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/err.h"
 2378              	 .file 7 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/pbuf.h"
 2379              	 .file 8 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/ip4_addr.h"
 2380              	 .file 9 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/ip_addr.h"
 2381              	 .file 10 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/memp.h"
 2382              	 .file 11 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/netif.h"
 2383              	 .file 12 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/prot/ethernet.h"
 2384              	 .file 13 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/prot/etharp.h"
 2385              	 .file 14 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/prot/ieee.h"
 2386              	 .file 15 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/prot/iana.h"
 2387              	 .file 16 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Libraries/CMSIS/Include/cmsis_gcc.h"
 2388              	 .file 17 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Libraries/CMSIS/Include/core_cm4.h"
 2389              	 .file 18 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/netif/ethernet.h"
DEFINED SYMBOLS
                            *ABS*:00000000 etharp.c
    {standard input}:20     .bss.arp_table:00000000 $d
    {standard input}:23     .bss.arp_table:00000000 arp_table
    {standard input}:28     .bss.etharp_cached_entry:00000000 etharp_cached_entry
    {standard input}:29     .bss.etharp_cached_entry:00000000 $d
    {standard input}:31     .text.etharp_free_entry:00000000 $t
    {standard input}:35     .text.etharp_free_entry:00000000 etharp_free_entry
    {standard input}:110    .text.etharp_free_entry:00000060 $d
    {standard input}:115    .text.etharp_tmr:00000000 $t
    {standard input}:120    .text.etharp_tmr:00000000 etharp_tmr
    {standard input}:2329   .text.etharp_request:00000000 etharp_request
    {standard input}:330    .text.etharp_tmr:0000014c $d
    {standard input}:335    .text.etharp_find_entry:00000000 $t
    {standard input}:339    .text.etharp_find_entry:00000000 etharp_find_entry
    {standard input}:689    .text.etharp_find_entry:0000023c $d
    {standard input}:694    .text.etharp_update_arp_entry:00000000 $t
    {standard input}:698    .text.etharp_update_arp_entry:00000000 etharp_update_arp_entry
    {standard input}:878    .text.etharp_update_arp_entry:00000124 $d
    {standard input}:883    .text.etharp_cleanup_netif:00000000 $t
    {standard input}:888    .text.etharp_cleanup_netif:00000000 etharp_cleanup_netif
    {standard input}:966    .text.etharp_cleanup_netif:00000058 $d
    {standard input}:971    .text.etharp_find_addr:00000000 $t
    {standard input}:976    .text.etharp_find_addr:00000000 etharp_find_addr
    {standard input}:1063   .text.etharp_find_addr:0000007c $d
    {standard input}:1068   .text.etharp_get_entry:00000000 $t
    {standard input}:1073   .text.etharp_get_entry:00000000 etharp_get_entry
    {standard input}:1169   .text.etharp_get_entry:0000007c $d
    {standard input}:1174   .text.etharp_input:00000000 $t
    {standard input}:1179   .text.etharp_input:00000000 etharp_input
    {standard input}:2127   .text.etharp_raw:00000000 etharp_raw
    {standard input}:1361   .text.etharp_output_to_arp_index:00000000 $t
    {standard input}:1365   .text.etharp_output_to_arp_index:00000000 etharp_output_to_arp_index
    {standard input}:2263   .text.etharp_request_dst:00000000 etharp_request_dst
    {standard input}:1521   .text.etharp_output_to_arp_index:00000100 $d
    {standard input}:1526   .text.etharp_output:00000000 $t
    {standard input}:1531   .text.etharp_output:00000000 etharp_output
    {standard input}:1812   .text.etharp_query:00000000 etharp_query
    {standard input}:1800   .text.etharp_output:000001a4 $d
    {standard input}:1807   .text.etharp_query:00000000 $t
    {standard input}:2117   .text.etharp_query:000001d8 $d
    {standard input}:2123   .text.etharp_raw:00000000 $t
    {standard input}:2259   .text.etharp_request_dst:00000000 $t
    {standard input}:2319   .text.etharp_request_dst:00000040 $d
    {standard input}:2324   .text.etharp_request:00000000 $t
    {standard input}:2367   .text.etharp_request:00000020 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pbuf_free
ip4_addr_isbroadcast_u32
ethernet_output
memcpy
ethbroadcast
pbuf_clone
pbuf_ref
pbuf_alloc
lwip_htons
ethzero
