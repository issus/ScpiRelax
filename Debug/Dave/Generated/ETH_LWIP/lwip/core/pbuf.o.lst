   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "pbuf.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm pbuf_free_ooseq_pending,1,1
  20              	 .section .text.pbuf_free_ooseq,"ax",%progbits
  21              	 .align 2
  22              	 .global pbuf_free_ooseq
  23              	 .thumb
  24              	 .thumb_func
  26              	pbuf_free_ooseq:
  27              	.LFB133:
  28              	 .file 1 "../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c"
   1:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
   2:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @file
   3:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Packet buffer management
   4:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
   5:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
   6:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
   7:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @defgroup pbuf Packet buffers (PBUF)
   8:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup infrastructure
   9:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  10:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Packets are built from the pbuf data structure. It supports dynamic
  11:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * memory allocation for packet contents or can reference externally
  12:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * managed packet contents both in RAM and ROM. Quick allocation for
  13:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * incoming packets is provided through pools with fixed sized pbufs.
  14:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  15:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * A packet may span over multiple pbufs, chained as a singly linked
  16:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * list. This is called a "pbuf chain".
  17:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  18:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Multiple packets may be queued, also using this singly linked list.
  19:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * This is called a "packet queue".
  20:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  21:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * So, a packet queue consists of one or more pbuf chains, each of
  22:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * which consist of one or more pbufs. CURRENTLY, PACKET QUEUES ARE
  23:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * NOT SUPPORTED!!! Use helper structs to queue multiple packets.
  24:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  25:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The differences between a pbuf chain and a packet queue are very
  26:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * precise but subtle.
  27:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  28:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The last pbuf of a packet has a ->tot_len field that equals the
  29:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * ->len field. It can be found by traversing the list. If the last
  30:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * pbuf of a packet has a ->next field other than NULL, more packets
  31:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * are on the queue.
  32:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  33:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Therefore, looping through a pbuf of a single packet, has an
  34:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * loop end condition (tot_len == p->len), NOT (next == NULL).
  35:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  36:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Example of custom pbuf usage: @ref zerocopyrx
  37:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
  38:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
  39:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /*
  40:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
  41:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * All rights reserved.
  42:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  43:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Redistribution and use in source and binary forms, with or without modification,
  44:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * are permitted provided that the following conditions are met:
  45:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  46:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  47:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *    this list of conditions and the following disclaimer.
  48:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  49:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *    this list of conditions and the following disclaimer in the documentation
  50:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *    and/or other materials provided with the distribution.
  51:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 3. The name of the author may not be used to endorse or promote products
  52:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *    derived from this software without specific prior written permission.
  53:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  54:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  55:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  56:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  57:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  58:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  59:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  60:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  61:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  62:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  63:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * OF SUCH DAMAGE.
  64:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  65:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * This file is part of the lwIP TCP/IP stack.
  66:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  67:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Author: Adam Dunkels <adam@sics.se>
  68:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  69:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
  70:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
  71:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "ETH_LWIP/lwip/include/lwip/opt.h"
  72:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
  73:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "ETH_LWIP/lwip/include/lwip/pbuf.h"
  74:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "ETH_LWIP/lwip/include/lwip/stats.h"
  75:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "ETH_LWIP/lwip/include/lwip/def.h"
  76:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "ETH_LWIP/lwip/include/lwip/mem.h"
  77:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "ETH_LWIP/lwip/include/lwip/memp.h"
  78:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "ETH_LWIP/lwip/include/lwip/sys.h"
  79:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "ETH_LWIP/lwip/include/lwip/netif.h"
  80:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if LWIP_TCP && TCP_QUEUE_OOSEQ
  81:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "ETH_LWIP/lwip/include/lwip/priv/tcp_priv.h"
  82:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif
  83:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if LWIP_CHECKSUM_ON_COPY
  84:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "ETH_LWIP/lwip/include/lwip/inet_chksum.h"
  85:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif
  86:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
  87:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include <string.h>
  88:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
  89:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #define SIZEOF_STRUCT_PBUF        LWIP_MEM_ALIGN_SIZE(sizeof(struct pbuf))
  90:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /* Since the pool is created in memp, PBUF_POOL_BUFSIZE will be automatically
  91:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****    aligned there. Therefore, PBUF_POOL_BUFSIZE_ALIGNED can be used here. */
  92:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #define PBUF_POOL_BUFSIZE_ALIGNED LWIP_MEM_ALIGN_SIZE(PBUF_POOL_BUFSIZE)
  93:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
  94:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** static const struct pbuf *
  95:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset);
  96:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
  97:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ
  98:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #define PBUF_POOL_IS_EMPTY()
  99:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #else /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */
 100:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 101:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if !NO_SYS
 102:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
 103:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "ETH_LWIP/lwip/include/lwip/tcpip.h"
 104:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #define PBUF_POOL_FREE_OOSEQ_QUEUE_CALL()  do { \
 105:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (tcpip_try_callback(pbuf_free_ooseq_callback, NULL) != ERR_OK) { \
 106:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       SYS_ARCH_PROTECT(old_level); \
 107:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       pbuf_free_ooseq_pending = 0; \
 108:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       SYS_ARCH_UNPROTECT(old_level); \
 109:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   } } while(0)
 110:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
 111:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* !NO_SYS */
 112:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 113:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** volatile u8_t pbuf_free_ooseq_pending;
 114:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #define PBUF_POOL_IS_EMPTY() pbuf_pool_is_empty()
 115:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 116:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 117:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Attempt to reclaim some memory from queued out-of-sequence TCP segments
 118:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * if we run out of pool pbufs. It's better to give priority to new packets
 119:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * if we're running out.
 120:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 121:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * This must be done in the correct thread context therefore this function
 122:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * can only be used with NO_SYS=0 and through tcpip_callback.
 123:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 124:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if !NO_SYS
 125:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** static
 126:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* !NO_SYS */
 127:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** void
 128:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_free_ooseq(void)
 129:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
  29              	 .loc 1 129 0
  30              	 .cfi_startproc
  31              	 
  32              	 
  33 0000 80B5     	 push {r7,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 8
  36              	 .cfi_offset 7,-8
  37              	 .cfi_offset 14,-4
  38 0002 82B0     	 sub sp,sp,#8
  39              	.LCFI1:
  40              	 .cfi_def_cfa_offset 16
  41 0004 00AF     	 add r7,sp,#0
  42              	.LCFI2:
  43              	 .cfi_def_cfa_register 7
 130:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct tcp_pcb *pcb;
 131:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
  44              	 .loc 1 131 0
  45 0006 0C4B     	 ldr r3,.L6
  46 0008 0022     	 movs r2,#0
  47 000a 1A70     	 strb r2,[r3]
 132:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 133:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  48              	 .loc 1 133 0
  49 000c 0B4B     	 ldr r3,.L6+4
  50 000e 1B68     	 ldr r3,[r3]
  51 0010 7B60     	 str r3,[r7,#4]
  52 0012 0AE0     	 b .L2
  53              	.L5:
 134:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (pcb->ooseq != NULL) {
  54              	 .loc 1 134 0
  55 0014 7B68     	 ldr r3,[r7,#4]
  56 0016 5B6F     	 ldr r3,[r3,#116]
  57 0018 002B     	 cmp r3,#0
  58 001a 03D0     	 beq .L3
 135:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /** Free the ooseq pbufs of one PCB only */
 136:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n")
 137:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       tcp_free_ooseq(pcb);
  59              	 .loc 1 137 0
  60 001c 7868     	 ldr r0,[r7,#4]
  61 001e FFF7FEFF 	 bl tcp_free_ooseq
 138:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       return;
  62              	 .loc 1 138 0
  63 0022 05E0     	 b .L1
  64              	.L3:
 133:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (pcb->ooseq != NULL) {
  65              	 .loc 1 133 0 discriminator 2
  66 0024 7B68     	 ldr r3,[r7,#4]
  67 0026 DB68     	 ldr r3,[r3,#12]
  68 0028 7B60     	 str r3,[r7,#4]
  69              	.L2:
 133:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (pcb->ooseq != NULL) {
  70              	 .loc 1 133 0 is_stmt 0 discriminator 1
  71 002a 7B68     	 ldr r3,[r7,#4]
  72 002c 002B     	 cmp r3,#0
  73 002e F1D1     	 bne .L5
  74              	.L1:
 139:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 140:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 141:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
  75              	 .loc 1 141 0 is_stmt 1
  76 0030 0837     	 adds r7,r7,#8
  77              	.LCFI3:
  78              	 .cfi_def_cfa_offset 8
  79 0032 BD46     	 mov sp,r7
  80              	.LCFI4:
  81              	 .cfi_def_cfa_register 13
  82              	 
  83 0034 80BD     	 pop {r7,pc}
  84              	.L7:
  85 0036 00BF     	 .align 2
  86              	.L6:
  87 0038 00000000 	 .word pbuf_free_ooseq_pending
  88 003c 00000000 	 .word tcp_active_pcbs
  89              	 .cfi_endproc
  90              	.LFE133:
  92              	 .section .text.pbuf_pool_is_empty,"ax",%progbits
  93              	 .align 2
  94              	 .thumb
  95              	 .thumb_func
  97              	pbuf_pool_is_empty:
  98              	.LFB134:
 142:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 143:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if !NO_SYS
 144:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 145:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 146:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 147:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** static void
 148:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_free_ooseq_callback(void *arg)
 149:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 150:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_UNUSED_ARG(arg);
 151:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   pbuf_free_ooseq();
 152:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 153:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* !NO_SYS */
 154:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 155:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /** Queue a call to pbuf_free_ooseq if not already queued. */
 156:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** static void
 157:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_pool_is_empty(void)
 158:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
  99              	 .loc 1 158 0
 100              	 .cfi_startproc
 101              	 
 102              	 
 103              	 
 104 0000 80B4     	 push {r7}
 105              	.LCFI5:
 106              	 .cfi_def_cfa_offset 4
 107              	 .cfi_offset 7,-4
 108 0002 00AF     	 add r7,sp,#0
 109              	.LCFI6:
 110              	 .cfi_def_cfa_register 7
 159:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
 160:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 111              	 .loc 1 160 0
 112 0004 034B     	 ldr r3,.L9
 113 0006 0122     	 movs r2,#1
 114 0008 1A70     	 strb r2,[r3]
 161:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
 162:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u8_t queued;
 163:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   SYS_ARCH_DECL_PROTECT(old_level);
 164:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   SYS_ARCH_PROTECT(old_level);
 165:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   queued = pbuf_free_ooseq_pending;
 166:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   pbuf_free_ooseq_pending = 1;
 167:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   SYS_ARCH_UNPROTECT(old_level);
 168:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 169:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (!queued) {
 170:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* queue a call to pbuf_free_ooseq if not already queued */
 171:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 172:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 173:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
 174:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 115              	 .loc 1 174 0
 116 000a BD46     	 mov sp,r7
 117              	.LCFI7:
 118              	 .cfi_def_cfa_register 13
 119              	 
 120 000c 5DF8047B 	 ldr r7,[sp],#4
 121              	.LCFI8:
 122              	 .cfi_restore 7
 123              	 .cfi_def_cfa_offset 0
 124 0010 7047     	 bx lr
 125              	.L10:
 126 0012 00BF     	 .align 2
 127              	.L9:
 128 0014 00000000 	 .word pbuf_free_ooseq_pending
 129              	 .cfi_endproc
 130              	.LFE134:
 132              	 .section .text.pbuf_init_alloced_pbuf,"ax",%progbits
 133              	 .align 2
 134              	 .thumb
 135              	 .thumb_func
 137              	pbuf_init_alloced_pbuf:
 138              	.LFB135:
 175:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */
 176:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 177:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /* Initialize members of struct pbuf after allocation */
 178:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** static void
 179:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_
 180:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 139              	 .loc 1 180 0
 140              	 .cfi_startproc
 141              	 
 142              	 
 143              	 
 144 0000 80B4     	 push {r7}
 145              	.LCFI9:
 146              	 .cfi_def_cfa_offset 4
 147              	 .cfi_offset 7,-4
 148 0002 85B0     	 sub sp,sp,#20
 149              	.LCFI10:
 150              	 .cfi_def_cfa_offset 24
 151 0004 00AF     	 add r7,sp,#0
 152              	.LCFI11:
 153              	 .cfi_def_cfa_register 7
 154 0006 F860     	 str r0,[r7,#12]
 155 0008 B960     	 str r1,[r7,#8]
 156 000a 1146     	 mov r1,r2
 157 000c 1A46     	 mov r2,r3
 158 000e 0B46     	 mov r3,r1
 159 0010 FB80     	 strh r3,[r7,#6]
 160 0012 1346     	 mov r3,r2
 161 0014 BB80     	 strh r3,[r7,#4]
 181:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->next = NULL;
 162              	 .loc 1 181 0
 163 0016 FB68     	 ldr r3,[r7,#12]
 164 0018 0022     	 movs r2,#0
 165 001a 1A60     	 str r2,[r3]
 182:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->payload = payload;
 166              	 .loc 1 182 0
 167 001c FB68     	 ldr r3,[r7,#12]
 168 001e BA68     	 ldr r2,[r7,#8]
 169 0020 5A60     	 str r2,[r3,#4]
 183:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->tot_len = tot_len;
 170              	 .loc 1 183 0
 171 0022 FB68     	 ldr r3,[r7,#12]
 172 0024 FA88     	 ldrh r2,[r7,#6]
 173 0026 1A81     	 strh r2,[r3,#8]
 184:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->len = len;
 174              	 .loc 1 184 0
 175 0028 FB68     	 ldr r3,[r7,#12]
 176 002a BA88     	 ldrh r2,[r7,#4]
 177 002c 5A81     	 strh r2,[r3,#10]
 185:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->type_internal = (u8_t)type;
 178              	 .loc 1 185 0
 179 002e 3B8B     	 ldrh r3,[r7,#24]
 180 0030 DAB2     	 uxtb r2,r3
 181 0032 FB68     	 ldr r3,[r7,#12]
 182 0034 1A73     	 strb r2,[r3,#12]
 186:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->flags = flags;
 183              	 .loc 1 186 0
 184 0036 FB68     	 ldr r3,[r7,#12]
 185 0038 3A7F     	 ldrb r2,[r7,#28]
 186 003a 5A73     	 strb r2,[r3,#13]
 187:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->ref = 1;
 187              	 .loc 1 187 0
 188 003c FB68     	 ldr r3,[r7,#12]
 189 003e 0122     	 movs r2,#1
 190 0040 9A73     	 strb r2,[r3,#14]
 188:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->if_idx = NETIF_NO_INDEX;
 191              	 .loc 1 188 0
 192 0042 FB68     	 ldr r3,[r7,#12]
 193 0044 0022     	 movs r2,#0
 194 0046 DA73     	 strb r2,[r3,#15]
 189:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 195              	 .loc 1 189 0
 196 0048 1437     	 adds r7,r7,#20
 197              	.LCFI12:
 198              	 .cfi_def_cfa_offset 4
 199 004a BD46     	 mov sp,r7
 200              	.LCFI13:
 201              	 .cfi_def_cfa_register 13
 202              	 
 203 004c 5DF8047B 	 ldr r7,[sp],#4
 204              	.LCFI14:
 205              	 .cfi_restore 7
 206              	 .cfi_def_cfa_offset 0
 207 0050 7047     	 bx lr
 208              	 .cfi_endproc
 209              	.LFE135:
 211 0052 00BF     	 .section .text.pbuf_alloc,"ax",%progbits
 212              	 .align 2
 213              	 .global pbuf_alloc
 214              	 .thumb
 215              	 .thumb_func
 217              	pbuf_alloc:
 218              	.LFB136:
 190:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 191:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 192:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
 193:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Allocates a pbuf of the given type (possibly a chain for PBUF_POOL type).
 194:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 195:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The actual memory allocated for the pbuf is determined by the
 196:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * layer at which the pbuf is allocated and the requested size
 197:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * (from the size parameter).
 198:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 199:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param layer header size
 200:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param length size of the pbuf's payload
 201:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param type this parameter decides how and where the pbuf
 202:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * should be allocated as follows:
 203:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 204:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * - PBUF_RAM: buffer memory for pbuf is allocated as one large
 205:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             chunk. This includes protocol headers as well.
 206:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * - PBUF_ROM: no buffer memory is allocated for the pbuf, even for
 207:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             protocol headers. Additional headers must be prepended
 208:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             by allocating another pbuf and chain in to the front of
 209:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             the ROM pbuf. It is assumed that the memory used is really
 210:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             similar to ROM in that it is immutable and will not be
 211:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             changed. Memory which is dynamic should generally not
 212:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             be attached to PBUF_ROM pbufs. Use PBUF_REF instead.
 213:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * - PBUF_REF: no buffer memory is allocated for the pbuf, even for
 214:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             protocol headers. It is assumed that the pbuf is only
 215:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             being used in a single thread. If the pbuf gets queued,
 216:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             then pbuf_take should be called to copy the buffer.
 217:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * - PBUF_POOL: the pbuf is allocated as a pbuf chain, with pbufs from
 218:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *              the pbuf pool that is allocated during pbuf_init().
 219:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 220:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return the allocated pbuf. If multiple pbufs where allocated, this
 221:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * is the first pbuf of a pbuf chain.
 222:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 223:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** struct pbuf *
 224:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
 225:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 219              	 .loc 1 225 0
 220              	 .cfi_startproc
 221              	 
 222              	 
 223 0000 90B5     	 push {r4,r7,lr}
 224              	.LCFI15:
 225              	 .cfi_def_cfa_offset 12
 226              	 .cfi_offset 4,-12
 227              	 .cfi_offset 7,-8
 228              	 .cfi_offset 14,-4
 229 0002 8DB0     	 sub sp,sp,#52
 230              	.LCFI16:
 231              	 .cfi_def_cfa_offset 64
 232 0004 02AF     	 add r7,sp,#8
 233              	.LCFI17:
 234              	 .cfi_def_cfa 7,56
 235 0006 0346     	 mov r3,r0
 236 0008 FB71     	 strb r3,[r7,#7]
 237 000a 0B46     	 mov r3,r1
 238 000c BB80     	 strh r3,[r7,#4]
 239 000e 1346     	 mov r3,r2
 240 0010 7B80     	 strh r3,[r7,#2]
 226:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *p;
 227:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t offset = (u16_t)layer;
 241              	 .loc 1 227 0
 242 0012 FB79     	 ldrb r3,[r7,#7]
 243 0014 7B84     	 strh r3,[r7,#34]
 228:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));
 229:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 230:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   switch (type) {
 244              	 .loc 1 230 0
 245 0016 7B88     	 ldrh r3,[r7,#2]
 246 0018 412B     	 cmp r3,#65
 247 001a 0BD0     	 beq .L14
 248 001c 412B     	 cmp r3,#65
 249 001e 02DC     	 bgt .L15
 250 0020 012B     	 cmp r3,#1
 251 0022 07D0     	 beq .L14
 252 0024 99E0     	 b .L13
 253              	.L15:
 254 0026 B3F5C17F 	 cmp r3,#386
 255 002a 0CD0     	 beq .L16
 256 002c B3F5207F 	 cmp r3,#640
 257 0030 55D0     	 beq .L17
 258 0032 92E0     	 b .L13
 259              	.L14:
 231:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     case PBUF_REF: /* fall through */
 232:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     case PBUF_ROM:
 233:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       p = pbuf_alloc_reference(NULL, length, type);
 260              	 .loc 1 233 0
 261 0034 BA88     	 ldrh r2,[r7,#4]
 262 0036 7B88     	 ldrh r3,[r7,#2]
 263 0038 0020     	 movs r0,#0
 264 003a 1146     	 mov r1,r2
 265 003c 1A46     	 mov r2,r3
 266 003e FFF7FEFF 	 bl pbuf_alloc_reference
 267 0042 7862     	 str r0,[r7,#36]
 234:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       break;
 268              	 .loc 1 234 0
 269 0044 8BE0     	 b .L18
 270              	.L16:
 271              	.LBB2:
 235:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     case PBUF_POOL: {
 236:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       struct pbuf *q, *last;
 237:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       u16_t rem_len; /* remaining length */
 238:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       p = NULL;
 272              	 .loc 1 238 0
 273 0046 0023     	 movs r3,#0
 274 0048 7B62     	 str r3,[r7,#36]
 239:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       last = NULL;
 275              	 .loc 1 239 0
 276 004a 0023     	 movs r3,#0
 277 004c FB61     	 str r3,[r7,#28]
 240:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       rem_len = length;
 278              	 .loc 1 240 0
 279 004e BB88     	 ldrh r3,[r7,#4]
 280 0050 7B83     	 strh r3,[r7,#26]
 281              	.L24:
 282              	.LBB3:
 241:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       do {
 242:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         u16_t qlen;
 243:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 283              	 .loc 1 243 0
 284 0052 0620     	 movs r0,#6
 285 0054 FFF7FEFF 	 bl memp_malloc
 286 0058 7861     	 str r0,[r7,#20]
 244:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         if (q == NULL) {
 287              	 .loc 1 244 0
 288 005a 7B69     	 ldr r3,[r7,#20]
 289 005c 002B     	 cmp r3,#0
 290 005e 09D1     	 bne .L19
 245:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           PBUF_POOL_IS_EMPTY();
 291              	 .loc 1 245 0
 292 0060 FFF7FEFF 	 bl pbuf_pool_is_empty
 246:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           /* free chain so far allocated */
 247:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           if (p) {
 293              	 .loc 1 247 0
 294 0064 7B6A     	 ldr r3,[r7,#36]
 295 0066 002B     	 cmp r3,#0
 296 0068 02D0     	 beq .L20
 248:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****             pbuf_free(p);
 297              	 .loc 1 248 0
 298 006a 786A     	 ldr r0,[r7,#36]
 299 006c FFF7FEFF 	 bl pbuf_free
 300              	.L20:
 249:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           }
 250:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           /* bail out unsuccessfully */
 251:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           return NULL;
 301              	 .loc 1 251 0
 302 0070 0023     	 movs r3,#0
 303 0072 75E0     	 b .L21
 304              	.L19:
 252:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         }
 253:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 305              	 .loc 1 253 0
 306 0074 7B8C     	 ldrh r3,[r7,#34]
 307 0076 0333     	 adds r3,r3,#3
 308 0078 9BB2     	 uxth r3,r3
 309 007a 23F00303 	 bic r3,r3,#3
 310 007e 9BB2     	 uxth r3,r3
 311 0080 C3F5C063 	 rsb r3,r3,#1536
 312 0084 9AB2     	 uxth r2,r3
 313 0086 7B8B     	 ldrh r3,[r7,#26]
 314 0088 9342     	 cmp r3,r2
 315 008a 28BF     	 it cs
 316 008c 1346     	 movcs r3,r2
 317 008e 7B82     	 strh r3,[r7,#18]
 254:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset))
 318              	 .loc 1 254 0
 319 0090 7B8C     	 ldrh r3,[r7,#34]
 320 0092 1033     	 adds r3,r3,#16
 321 0094 7A69     	 ldr r2,[r7,#20]
 322 0096 1344     	 add r3,r3,r2
 323 0098 0333     	 adds r3,r3,#3
 324 009a 23F00303 	 bic r3,r3,#3
 325 009e 1946     	 mov r1,r3
 326 00a0 7A8B     	 ldrh r2,[r7,#26]
 327 00a2 7C8A     	 ldrh r4,[r7,#18]
 328 00a4 7B88     	 ldrh r3,[r7,#2]
 329 00a6 0093     	 str r3,[sp]
 330 00a8 0023     	 movs r3,#0
 331 00aa 0193     	 str r3,[sp,#4]
 332 00ac 7869     	 ldr r0,[r7,#20]
 333 00ae 2346     	 mov r3,r4
 334 00b0 FFF7FEFF 	 bl pbuf_init_alloced_pbuf
 255:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                                rem_len, qlen, type, 0);
 256:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 257:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                     ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
 258:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 259:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                     (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
 260:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         if (p == NULL) {
 335              	 .loc 1 260 0
 336 00b4 7B6A     	 ldr r3,[r7,#36]
 337 00b6 002B     	 cmp r3,#0
 338 00b8 02D1     	 bne .L22
 261:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           /* allocated head of pbuf chain (into p) */
 262:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           p = q;
 339              	 .loc 1 262 0
 340 00ba 7B69     	 ldr r3,[r7,#20]
 341 00bc 7B62     	 str r3,[r7,#36]
 342 00be 02E0     	 b .L23
 343              	.L22:
 263:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         } else {
 264:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           /* make previous pbuf point to this pbuf */
 265:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           last->next = q;
 344              	 .loc 1 265 0
 345 00c0 FB69     	 ldr r3,[r7,#28]
 346 00c2 7A69     	 ldr r2,[r7,#20]
 347 00c4 1A60     	 str r2,[r3]
 348              	.L23:
 266:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         }
 267:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         last = q;
 349              	 .loc 1 267 0
 350 00c6 7B69     	 ldr r3,[r7,#20]
 351 00c8 FB61     	 str r3,[r7,#28]
 268:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         rem_len = (u16_t)(rem_len - qlen);
 352              	 .loc 1 268 0
 353 00ca 7A8B     	 ldrh r2,[r7,#26]
 354 00cc 7B8A     	 ldrh r3,[r7,#18]
 355 00ce D31A     	 subs r3,r2,r3
 356 00d0 7B83     	 strh r3,[r7,#26]
 269:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         offset = 0;
 357              	 .loc 1 269 0
 358 00d2 0023     	 movs r3,#0
 359 00d4 7B84     	 strh r3,[r7,#34]
 360              	.LBE3:
 270:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       } while (rem_len > 0);
 361              	 .loc 1 270 0
 362 00d6 7B8B     	 ldrh r3,[r7,#26]
 363 00d8 002B     	 cmp r3,#0
 364 00da BAD1     	 bne .L24
 271:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       break;
 365              	 .loc 1 271 0
 366 00dc 3FE0     	 b .L18
 367              	.L17:
 368              	.LBE2:
 369              	.LBB4:
 272:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 273:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     case PBUF_RAM: {
 274:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 370              	 .loc 1 274 0
 371 00de 7B8C     	 ldrh r3,[r7,#34]
 372 00e0 0333     	 adds r3,r3,#3
 373 00e2 9BB2     	 uxth r3,r3
 374 00e4 23F00303 	 bic r3,r3,#3
 375 00e8 9AB2     	 uxth r2,r3
 376 00ea BB88     	 ldrh r3,[r7,#4]
 377 00ec 0333     	 adds r3,r3,#3
 378 00ee 9BB2     	 uxth r3,r3
 379 00f0 23F00303 	 bic r3,r3,#3
 380 00f4 9BB2     	 uxth r3,r3
 381 00f6 1344     	 add r3,r3,r2
 382 00f8 3B82     	 strh r3,[r7,#16]
 275:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 383              	 .loc 1 275 0
 384 00fa 3B8A     	 ldrh r3,[r7,#16]
 385 00fc 1033     	 adds r3,r3,#16
 386 00fe FB81     	 strh r3,[r7,#14]
 276:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 277:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* bug #50040: Check for integer overflow when calculating alloc_len */
 278:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 387              	 .loc 1 278 0
 388 0100 3A8A     	 ldrh r2,[r7,#16]
 389 0102 BB88     	 ldrh r3,[r7,#4]
 390 0104 0333     	 adds r3,r3,#3
 391 0106 23F00303 	 bic r3,r3,#3
 392 010a 9A42     	 cmp r2,r3
 393 010c 06D3     	 bcc .L25
 279:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 394              	 .loc 1 279 0 discriminator 1
 395 010e FA89     	 ldrh r2,[r7,#14]
 396 0110 BB88     	 ldrh r3,[r7,#4]
 397 0112 0333     	 adds r3,r3,#3
 398 0114 23F00303 	 bic r3,r3,#3
 278:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 399              	 .loc 1 278 0 discriminator 1
 400 0118 9A42     	 cmp r2,r3
 401 011a 01D2     	 bcs .L26
 402              	.L25:
 280:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         return NULL;
 403              	 .loc 1 280 0
 404 011c 0023     	 movs r3,#0
 405 011e 1FE0     	 b .L21
 406              	.L26:
 281:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       }
 282:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 283:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* If pbuf is to be allocated in RAM, allocate memory for it. */
 284:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       p = (struct pbuf *)mem_malloc(alloc_len);
 407              	 .loc 1 284 0
 408 0120 FB89     	 ldrh r3,[r7,#14]
 409 0122 1846     	 mov r0,r3
 410 0124 FFF7FEFF 	 bl mem_malloc
 411 0128 7862     	 str r0,[r7,#36]
 285:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       if (p == NULL) {
 412              	 .loc 1 285 0
 413 012a 7B6A     	 ldr r3,[r7,#36]
 414 012c 002B     	 cmp r3,#0
 415 012e 01D1     	 bne .L27
 286:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         return NULL;
 416              	 .loc 1 286 0
 417 0130 0023     	 movs r3,#0
 418 0132 15E0     	 b .L21
 419              	.L27:
 287:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       }
 288:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 420              	 .loc 1 288 0
 421 0134 7B8C     	 ldrh r3,[r7,#34]
 422 0136 1033     	 adds r3,r3,#16
 423 0138 7A6A     	 ldr r2,[r7,#36]
 424 013a 1344     	 add r3,r3,r2
 425 013c 0333     	 adds r3,r3,#3
 426 013e 23F00303 	 bic r3,r3,#3
 427 0142 1946     	 mov r1,r3
 428 0144 BA88     	 ldrh r2,[r7,#4]
 429 0146 BC88     	 ldrh r4,[r7,#4]
 430 0148 7B88     	 ldrh r3,[r7,#2]
 431 014a 0093     	 str r3,[sp]
 432 014c 0023     	 movs r3,#0
 433 014e 0193     	 str r3,[sp,#4]
 434 0150 786A     	 ldr r0,[r7,#36]
 435 0152 2346     	 mov r3,r4
 436 0154 FFF7FEFF 	 bl pbuf_init_alloced_pbuf
 289:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                              length, length, type, 0);
 290:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 291:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                   ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
 292:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       break;
 437              	 .loc 1 292 0
 438 0158 01E0     	 b .L18
 439              	.L13:
 440              	.LBE4:
 293:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 294:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     default:
 295:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 296:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       return NULL;
 441              	 .loc 1 296 0
 442 015a 0023     	 movs r3,#0
 443 015c 00E0     	 b .L21
 444              	.L18:
 297:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 298:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)
 299:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return p;
 445              	 .loc 1 299 0
 446 015e 7B6A     	 ldr r3,[r7,#36]
 447              	.L21:
 300:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 448              	 .loc 1 300 0
 449 0160 1846     	 mov r0,r3
 450 0162 2C37     	 adds r7,r7,#44
 451              	.LCFI18:
 452              	 .cfi_def_cfa_offset 12
 453 0164 BD46     	 mov sp,r7
 454              	.LCFI19:
 455              	 .cfi_def_cfa_register 13
 456              	 
 457 0166 90BD     	 pop {r4,r7,pc}
 458              	 .cfi_endproc
 459              	.LFE136:
 461              	 .section .text.pbuf_alloc_reference,"ax",%progbits
 462              	 .align 2
 463              	 .global pbuf_alloc_reference
 464              	 .thumb
 465              	 .thumb_func
 467              	pbuf_alloc_reference:
 468              	.LFB137:
 301:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 302:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 303:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
 304:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Allocates a pbuf for referenced data.
 305:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Referenced data can be volatile (PBUF_REF) or long-lived (PBUF_ROM).
 306:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 307:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The actual memory allocated for the pbuf is determined by the
 308:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * layer at which the pbuf is allocated and the requested size
 309:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * (from the size parameter).
 310:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 311:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param payload referenced payload
 312:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param length size of the pbuf's payload
 313:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param type this parameter decides how and where the pbuf
 314:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * should be allocated as follows:
 315:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 316:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * - PBUF_ROM: It is assumed that the memory used is really
 317:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             similar to ROM in that it is immutable and will not be
 318:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             changed. Memory which is dynamic should generally not
 319:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             be attached to PBUF_ROM pbufs. Use PBUF_REF instead.
 320:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * - PBUF_REF: It is assumed that the pbuf is only
 321:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             being used in a single thread. If the pbuf gets queued,
 322:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             then pbuf_take should be called to copy the buffer.
 323:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 324:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return the allocated pbuf.
 325:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 326:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** struct pbuf *
 327:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
 328:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 469              	 .loc 1 328 0
 470              	 .cfi_startproc
 471              	 
 472              	 
 473 0000 90B5     	 push {r4,r7,lr}
 474              	.LCFI20:
 475              	 .cfi_def_cfa_offset 12
 476              	 .cfi_offset 4,-12
 477              	 .cfi_offset 7,-8
 478              	 .cfi_offset 14,-4
 479 0002 87B0     	 sub sp,sp,#28
 480              	.LCFI21:
 481              	 .cfi_def_cfa_offset 40
 482 0004 02AF     	 add r7,sp,#8
 483              	.LCFI22:
 484              	 .cfi_def_cfa 7,32
 485 0006 7860     	 str r0,[r7,#4]
 486 0008 0B46     	 mov r3,r1
 487 000a 7B80     	 strh r3,[r7,#2]
 488 000c 1346     	 mov r3,r2
 489 000e 3B80     	 strh r3,[r7]
 329:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *p;
 330:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 331:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* only allocate memory for the pbuf structure */
 332:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 490              	 .loc 1 332 0
 491 0010 0520     	 movs r0,#5
 492 0012 FFF7FEFF 	 bl memp_malloc
 493 0016 F860     	 str r0,[r7,#12]
 333:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (p == NULL) {
 494              	 .loc 1 333 0
 495 0018 FB68     	 ldr r3,[r7,#12]
 496 001a 002B     	 cmp r3,#0
 497 001c 01D1     	 bne .L29
 334:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 335:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                 ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
 336:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                  (type == PBUF_ROM) ? "ROM" : "REF"));
 337:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return NULL;
 498              	 .loc 1 337 0
 499 001e 0023     	 movs r3,#0
 500 0020 0BE0     	 b .L30
 501              	.L29:
 338:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 339:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 502              	 .loc 1 339 0
 503 0022 7A88     	 ldrh r2,[r7,#2]
 504 0024 7C88     	 ldrh r4,[r7,#2]
 505 0026 3B88     	 ldrh r3,[r7]
 506 0028 0093     	 str r3,[sp]
 507 002a 0023     	 movs r3,#0
 508 002c 0193     	 str r3,[sp,#4]
 509 002e F868     	 ldr r0,[r7,#12]
 510 0030 7968     	 ldr r1,[r7,#4]
 511 0032 2346     	 mov r3,r4
 512 0034 FFF7FEFF 	 bl pbuf_init_alloced_pbuf
 340:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return p;
 513              	 .loc 1 340 0
 514 0038 FB68     	 ldr r3,[r7,#12]
 515              	.L30:
 341:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 516              	 .loc 1 341 0
 517 003a 1846     	 mov r0,r3
 518 003c 1437     	 adds r7,r7,#20
 519              	.LCFI23:
 520              	 .cfi_def_cfa_offset 12
 521 003e BD46     	 mov sp,r7
 522              	.LCFI24:
 523              	 .cfi_def_cfa_register 13
 524              	 
 525 0040 90BD     	 pop {r4,r7,pc}
 526              	 .cfi_endproc
 527              	.LFE137:
 529 0042 00BF     	 .section .text.pbuf_realloc,"ax",%progbits
 530              	 .align 2
 531              	 .global pbuf_realloc
 532              	 .thumb
 533              	 .thumb_func
 535              	pbuf_realloc:
 536              	.LFB138:
 342:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 343:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 344:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if LWIP_SUPPORT_CUSTOM_PBUF
 345:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 346:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
 347:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Initialize a custom pbuf (already allocated).
 348:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Example of custom pbuf usage: @ref zerocopyrx
 349:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 350:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param l header size
 351:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param length size of the pbuf's payload
 352:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param type type of the pbuf (only used to treat the pbuf accordingly, as
 353:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *        this function allocates no memory)
 354:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pointer to the custom pbuf to initialize (already allocated)
 355:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param payload_mem pointer to the buffer that is used for payload and headers,
 356:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *        must be at least big enough to hold 'length' plus the header size,
 357:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *        may be NULL if set later.
 358:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *        ATTENTION: The caller is responsible for correct alignment of this buffer!!
 359:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param payload_mem_len the size of the 'payload_mem' buffer, must be at least
 360:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *        big enough to hold 'length' plus the header size
 361:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 362:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** struct pbuf *
 363:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
 364:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                     void *payload_mem, u16_t payload_mem_len)
 365:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 366:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t offset = (u16_t)l;
 367:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   void *payload;
 368:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));
 369:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 370:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 371:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer 
 372:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return NULL;
 373:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 374:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 375:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (payload_mem != NULL) {
 376:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 377:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   } else {
 378:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     payload = NULL;
 379:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 380:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 381:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return &p->pbuf;
 382:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 383:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* LWIP_SUPPORT_CUSTOM_PBUF */
 384:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 385:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 386:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
 387:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Shrink a pbuf chain to a desired length.
 388:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 389:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to shrink.
 390:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param new_len desired new length of pbuf chain
 391:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 392:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Depending on the desired length, the first few pbufs in a chain might
 393:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * be skipped and left unchanged. The new last pbuf in the chain will be
 394:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * resized, and any remaining pbufs will be freed.
 395:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 396:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note If the pbuf is ROM/REF, only the ->tot_len and ->len fields are adjusted.
 397:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note May not be called on a packet queue.
 398:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 399:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 400:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 401:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** void
 402:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_realloc(struct pbuf *p, u16_t new_len)
 403:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 537              	 .loc 1 403 0
 538              	 .cfi_startproc
 539              	 
 540              	 
 541 0000 80B5     	 push {r7,lr}
 542              	.LCFI25:
 543              	 .cfi_def_cfa_offset 8
 544              	 .cfi_offset 7,-8
 545              	 .cfi_offset 14,-4
 546 0002 84B0     	 sub sp,sp,#16
 547              	.LCFI26:
 548              	 .cfi_def_cfa_offset 24
 549 0004 00AF     	 add r7,sp,#0
 550              	.LCFI27:
 551              	 .cfi_def_cfa_register 7
 552 0006 7860     	 str r0,[r7,#4]
 553 0008 0B46     	 mov r3,r1
 554 000a 7B80     	 strh r3,[r7,#2]
 404:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *q;
 405:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t rem_len; /* remaining length */
 406:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t shrink;
 407:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 408:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 409:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 410:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* desired length larger than current length? */
 411:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (new_len >= p->tot_len) {
 555              	 .loc 1 411 0
 556 000c 7B68     	 ldr r3,[r7,#4]
 557 000e 1B89     	 ldrh r3,[r3,#8]
 558 0010 7A88     	 ldrh r2,[r7,#2]
 559 0012 9A42     	 cmp r2,r3
 560 0014 00D3     	 bcc .L32
 412:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* enlarging not yet supported */
 413:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return;
 561              	 .loc 1 413 0
 562 0016 49E0     	 b .L31
 563              	.L32:
 414:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 415:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 416:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* the pbuf chain grows by (new_len - p->tot_len) bytes
 417:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****    * (which may be negative in case of shrinking) */
 418:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   shrink = (u16_t)(p->tot_len - new_len);
 564              	 .loc 1 418 0
 565 0018 7B68     	 ldr r3,[r7,#4]
 566 001a 1A89     	 ldrh r2,[r3,#8]
 567 001c 7B88     	 ldrh r3,[r7,#2]
 568 001e D31A     	 subs r3,r2,r3
 569 0020 3B81     	 strh r3,[r7,#8]
 419:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 420:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* first, step over any pbufs that should remain in the chain */
 421:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   rem_len = new_len;
 570              	 .loc 1 421 0
 571 0022 7B88     	 ldrh r3,[r7,#2]
 572 0024 7B81     	 strh r3,[r7,#10]
 422:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   q = p;
 573              	 .loc 1 422 0
 574 0026 7B68     	 ldr r3,[r7,#4]
 575 0028 FB60     	 str r3,[r7,#12]
 423:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* should this pbuf be kept? */
 424:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   while (rem_len > q->len) {
 576              	 .loc 1 424 0
 577 002a 0EE0     	 b .L34
 578              	.L35:
 425:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* decrease remaining length by pbuf length */
 426:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     rem_len = (u16_t)(rem_len - q->len);
 579              	 .loc 1 426 0
 580 002c FB68     	 ldr r3,[r7,#12]
 581 002e 5B89     	 ldrh r3,[r3,#10]
 582 0030 7A89     	 ldrh r2,[r7,#10]
 583 0032 D31A     	 subs r3,r2,r3
 584 0034 7B81     	 strh r3,[r7,#10]
 427:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* decrease total length indicator */
 428:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     q->tot_len = (u16_t)(q->tot_len - shrink);
 585              	 .loc 1 428 0
 586 0036 FB68     	 ldr r3,[r7,#12]
 587 0038 1A89     	 ldrh r2,[r3,#8]
 588 003a 3B89     	 ldrh r3,[r7,#8]
 589 003c D31A     	 subs r3,r2,r3
 590 003e 9AB2     	 uxth r2,r3
 591 0040 FB68     	 ldr r3,[r7,#12]
 592 0042 1A81     	 strh r2,[r3,#8]
 429:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* proceed to next pbuf in chain */
 430:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     q = q->next;
 593              	 .loc 1 430 0
 594 0044 FB68     	 ldr r3,[r7,#12]
 595 0046 1B68     	 ldr r3,[r3]
 596 0048 FB60     	 str r3,[r7,#12]
 597              	.L34:
 424:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* decrease remaining length by pbuf length */
 598              	 .loc 1 424 0
 599 004a FB68     	 ldr r3,[r7,#12]
 600 004c 5B89     	 ldrh r3,[r3,#10]
 601 004e 7A89     	 ldrh r2,[r7,#10]
 602 0050 9A42     	 cmp r2,r3
 603 0052 EBD8     	 bhi .L35
 431:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 432:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 433:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* we have now reached the new last pbuf (in q) */
 434:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* rem_len == desired length for pbuf q */
 435:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 436:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* shrink allocated memory for PBUF_RAM */
 437:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* (other types merely adjust their length fields */
 438:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 604              	 .loc 1 438 0
 605 0054 FB68     	 ldr r3,[r7,#12]
 606 0056 1B7B     	 ldrb r3,[r3,#12]
 607 0058 03F00F03 	 and r3,r3,#15
 608 005c 002B     	 cmp r3,#0
 609 005e 12D1     	 bne .L36
 610              	 .loc 1 438 0 is_stmt 0 discriminator 1
 611 0060 FB68     	 ldr r3,[r7,#12]
 612 0062 5B89     	 ldrh r3,[r3,#10]
 613 0064 7A89     	 ldrh r2,[r7,#10]
 614 0066 9A42     	 cmp r2,r3
 615 0068 0DD0     	 beq .L36
 439:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if LWIP_SUPPORT_CUSTOM_PBUF
 440:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 441:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* LWIP_SUPPORT_CUSTOM_PBUF */
 442:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****      ) {
 443:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* reallocate and adjust the length of the pbuf that will be split */
 444:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 616              	 .loc 1 444 0 is_stmt 1
 617 006a FB68     	 ldr r3,[r7,#12]
 618 006c 5B68     	 ldr r3,[r3,#4]
 619 006e 1A46     	 mov r2,r3
 620 0070 FB68     	 ldr r3,[r7,#12]
 621 0072 D31A     	 subs r3,r2,r3
 622 0074 9AB2     	 uxth r2,r3
 623 0076 7B89     	 ldrh r3,[r7,#10]
 624 0078 1344     	 add r3,r3,r2
 625 007a 9BB2     	 uxth r3,r3
 626 007c F868     	 ldr r0,[r7,#12]
 627 007e 1946     	 mov r1,r3
 628 0080 FFF7FEFF 	 bl mem_trim
 629 0084 F860     	 str r0,[r7,#12]
 630              	.L36:
 445:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 446:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 447:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* adjust length fields for new last pbuf */
 448:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   q->len = rem_len;
 631              	 .loc 1 448 0
 632 0086 FB68     	 ldr r3,[r7,#12]
 633 0088 7A89     	 ldrh r2,[r7,#10]
 634 008a 5A81     	 strh r2,[r3,#10]
 449:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   q->tot_len = q->len;
 635              	 .loc 1 449 0
 636 008c FB68     	 ldr r3,[r7,#12]
 637 008e 5A89     	 ldrh r2,[r3,#10]
 638 0090 FB68     	 ldr r3,[r7,#12]
 639 0092 1A81     	 strh r2,[r3,#8]
 450:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 451:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* any remaining pbufs in chain? */
 452:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (q->next != NULL) {
 640              	 .loc 1 452 0
 641 0094 FB68     	 ldr r3,[r7,#12]
 642 0096 1B68     	 ldr r3,[r3]
 643 0098 002B     	 cmp r3,#0
 644 009a 04D0     	 beq .L37
 453:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* free remaining pbufs in chain */
 454:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     pbuf_free(q->next);
 645              	 .loc 1 454 0
 646 009c FB68     	 ldr r3,[r7,#12]
 647 009e 1B68     	 ldr r3,[r3]
 648 00a0 1846     	 mov r0,r3
 649 00a2 FFF7FEFF 	 bl pbuf_free
 650              	.L37:
 455:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 456:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* q is last packet in chain */
 457:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   q->next = NULL;
 651              	 .loc 1 457 0
 652 00a6 FB68     	 ldr r3,[r7,#12]
 653 00a8 0022     	 movs r2,#0
 654 00aa 1A60     	 str r2,[r3]
 655              	.L31:
 458:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 459:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 656              	 .loc 1 459 0
 657 00ac 1037     	 adds r7,r7,#16
 658              	.LCFI28:
 659              	 .cfi_def_cfa_offset 8
 660 00ae BD46     	 mov sp,r7
 661              	.LCFI29:
 662              	 .cfi_def_cfa_register 13
 663              	 
 664 00b0 80BD     	 pop {r7,pc}
 665              	 .cfi_endproc
 666              	.LFE138:
 668 00b2 00BF     	 .section .text.pbuf_add_header_impl,"ax",%progbits
 669              	 .align 2
 670              	 .thumb
 671              	 .thumb_func
 673              	pbuf_add_header_impl:
 674              	.LFB139:
 460:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 461:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 462:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Adjusts the payload pointer to reveal headers in the payload.
 463:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @see pbuf_add_header.
 464:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 465:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to change the header size.
 466:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param header_size_increment Number of bytes to increment header size.
 467:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param force Allow 'header_size_increment > 0' for PBUF_REF/PBUF_ROM types
 468:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 469:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return non-zero on failure, zero on success.
 470:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 471:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 472:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** static u8_t
 473:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
 474:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 675              	 .loc 1 474 0
 676              	 .cfi_startproc
 677              	 
 678              	 
 679              	 
 680 0000 80B4     	 push {r7}
 681              	.LCFI30:
 682              	 .cfi_def_cfa_offset 4
 683              	 .cfi_offset 7,-4
 684 0002 87B0     	 sub sp,sp,#28
 685              	.LCFI31:
 686              	 .cfi_def_cfa_offset 32
 687 0004 00AF     	 add r7,sp,#0
 688              	.LCFI32:
 689              	 .cfi_def_cfa_register 7
 690 0006 F860     	 str r0,[r7,#12]
 691 0008 B960     	 str r1,[r7,#8]
 692 000a 1346     	 mov r3,r2
 693 000c FB71     	 strb r3,[r7,#7]
 475:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t type_internal;
 476:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   void *payload;
 477:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t increment_magnitude;
 478:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 479:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("p != NULL", p != NULL);
 480:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 694              	 .loc 1 480 0
 695 000e FB68     	 ldr r3,[r7,#12]
 696 0010 002B     	 cmp r3,#0
 697 0012 03D0     	 beq .L39
 698              	 .loc 1 480 0 is_stmt 0 discriminator 1
 699 0014 BB68     	 ldr r3,[r7,#8]
 700 0016 B3F5803F 	 cmp r3,#65536
 701 001a 01D3     	 bcc .L40
 702              	.L39:
 481:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return 1;
 703              	 .loc 1 481 0 is_stmt 1
 704 001c 0123     	 movs r3,#1
 705 001e 44E0     	 b .L41
 706              	.L40:
 482:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 483:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (header_size_increment == 0) {
 707              	 .loc 1 483 0
 708 0020 BB68     	 ldr r3,[r7,#8]
 709 0022 002B     	 cmp r3,#0
 710 0024 01D1     	 bne .L42
 484:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return 0;
 711              	 .loc 1 484 0
 712 0026 0023     	 movs r3,#0
 713 0028 3FE0     	 b .L41
 714              	.L42:
 485:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 486:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 487:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   increment_magnitude = (u16_t)header_size_increment;
 715              	 .loc 1 487 0
 716 002a BB68     	 ldr r3,[r7,#8]
 717 002c 7B82     	 strh r3,[r7,#18]
 488:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* Do not allow tot_len to wrap as a result. */
 489:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 718              	 .loc 1 489 0
 719 002e FB68     	 ldr r3,[r7,#12]
 720 0030 1A89     	 ldrh r2,[r3,#8]
 721 0032 7B8A     	 ldrh r3,[r7,#18]
 722 0034 1344     	 add r3,r3,r2
 723 0036 9BB2     	 uxth r3,r3
 724 0038 7A8A     	 ldrh r2,[r7,#18]
 725 003a 9A42     	 cmp r2,r3
 726 003c 01D9     	 bls .L43
 490:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return 1;
 727              	 .loc 1 490 0
 728 003e 0123     	 movs r3,#1
 729 0040 33E0     	 b .L41
 730              	.L43:
 491:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 492:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 493:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   type_internal = p->type_internal;
 731              	 .loc 1 493 0
 732 0042 FB68     	 ldr r3,[r7,#12]
 733 0044 1B7B     	 ldrb r3,[r3,#12]
 734 0046 3B82     	 strh r3,[r7,#16]
 494:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 495:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* pbuf types containing payloads? */
 496:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 735              	 .loc 1 496 0
 736 0048 3B8A     	 ldrh r3,[r7,#16]
 737 004a 03F08003 	 and r3,r3,#128
 738 004e 002B     	 cmp r3,#0
 739 0050 0DD0     	 beq .L44
 497:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* set new payload pointer */
 498:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     payload = (u8_t *)p->payload - header_size_increment;
 740              	 .loc 1 498 0
 741 0052 FB68     	 ldr r3,[r7,#12]
 742 0054 5A68     	 ldr r2,[r3,#4]
 743 0056 BB68     	 ldr r3,[r7,#8]
 744 0058 5B42     	 negs r3,r3
 745 005a 1344     	 add r3,r3,r2
 746 005c 7B61     	 str r3,[r7,#20]
 499:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* boundary check fails? */
 500:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 747              	 .loc 1 500 0
 748 005e FB68     	 ldr r3,[r7,#12]
 749 0060 03F11002 	 add r2,r3,#16
 750 0064 7B69     	 ldr r3,[r7,#20]
 751 0066 9A42     	 cmp r2,r3
 752 0068 0DD9     	 bls .L45
 501:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
 502:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                    ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
 503:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                     (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
 504:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* bail out unsuccessfully */
 505:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       return 1;
 753              	 .loc 1 505 0
 754 006a 0123     	 movs r3,#1
 755 006c 1DE0     	 b .L41
 756              	.L44:
 506:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 507:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* pbuf types referring to external payloads? */
 508:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   } else {
 509:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* hide a header in the payload? */
 510:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (force) {
 757              	 .loc 1 510 0
 758 006e FB79     	 ldrb r3,[r7,#7]
 759 0070 002B     	 cmp r3,#0
 760 0072 06D0     	 beq .L46
 511:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       payload = (u8_t *)p->payload - header_size_increment;
 761              	 .loc 1 511 0
 762 0074 FB68     	 ldr r3,[r7,#12]
 763 0076 5A68     	 ldr r2,[r3,#4]
 764 0078 BB68     	 ldr r3,[r7,#8]
 765 007a 5B42     	 negs r3,r3
 766 007c 1344     	 add r3,r3,r2
 767 007e 7B61     	 str r3,[r7,#20]
 768 0080 01E0     	 b .L45
 769              	.L46:
 512:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     } else {
 513:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* cannot expand payload to front (yet!)
 514:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****        * bail out unsuccessfully */
 515:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       return 1;
 770              	 .loc 1 515 0
 771 0082 0123     	 movs r3,#1
 772 0084 11E0     	 b .L41
 773              	.L45:
 516:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 517:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 518:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
 519:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****               (void *)p->payload, (void *)payload, increment_magnitude));
 520:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 521:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* modify pbuf fields */
 522:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->payload = payload;
 774              	 .loc 1 522 0
 775 0086 FB68     	 ldr r3,[r7,#12]
 776 0088 7A69     	 ldr r2,[r7,#20]
 777 008a 5A60     	 str r2,[r3,#4]
 523:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->len = (u16_t)(p->len + increment_magnitude);
 778              	 .loc 1 523 0
 779 008c FB68     	 ldr r3,[r7,#12]
 780 008e 5A89     	 ldrh r2,[r3,#10]
 781 0090 7B8A     	 ldrh r3,[r7,#18]
 782 0092 1344     	 add r3,r3,r2
 783 0094 9AB2     	 uxth r2,r3
 784 0096 FB68     	 ldr r3,[r7,#12]
 785 0098 5A81     	 strh r2,[r3,#10]
 524:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 786              	 .loc 1 524 0
 787 009a FB68     	 ldr r3,[r7,#12]
 788 009c 1A89     	 ldrh r2,[r3,#8]
 789 009e 7B8A     	 ldrh r3,[r7,#18]
 790 00a0 1344     	 add r3,r3,r2
 791 00a2 9AB2     	 uxth r2,r3
 792 00a4 FB68     	 ldr r3,[r7,#12]
 793 00a6 1A81     	 strh r2,[r3,#8]
 525:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 526:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 527:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return 0;
 794              	 .loc 1 527 0
 795 00a8 0023     	 movs r3,#0
 796              	.L41:
 528:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 797              	 .loc 1 528 0
 798 00aa 1846     	 mov r0,r3
 799 00ac 1C37     	 adds r7,r7,#28
 800              	.LCFI33:
 801              	 .cfi_def_cfa_offset 4
 802 00ae BD46     	 mov sp,r7
 803              	.LCFI34:
 804              	 .cfi_def_cfa_register 13
 805              	 
 806 00b0 5DF8047B 	 ldr r7,[sp],#4
 807              	.LCFI35:
 808              	 .cfi_restore 7
 809              	 .cfi_def_cfa_offset 0
 810 00b4 7047     	 bx lr
 811              	 .cfi_endproc
 812              	.LFE139:
 814 00b6 00BF     	 .section .text.pbuf_add_header,"ax",%progbits
 815              	 .align 2
 816              	 .global pbuf_add_header
 817              	 .thumb
 818              	 .thumb_func
 820              	pbuf_add_header:
 821              	.LFB140:
 529:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 530:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 531:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Adjusts the payload pointer to reveal headers in the payload.
 532:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 533:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Adjusts the ->payload pointer so that space for a header
 534:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * appears in the pbuf payload.
 535:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 536:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The ->payload, ->tot_len and ->len fields are adjusted.
 537:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 538:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to change the header size.
 539:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param header_size_increment Number of bytes to increment header size which
 540:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *          increases the size of the pbuf. New space is on the front.
 541:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *          If header_size_increment is 0, this function does nothing and returns successful.
 542:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 543:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * PBUF_ROM and PBUF_REF type buffers cannot have their sizes increased, so
 544:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * the call will fail. A check is made that the increase in header size does
 545:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * not move the payload pointer in front of the start of the buffer.
 546:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 547:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return non-zero on failure, zero on success.
 548:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 549:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 550:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u8_t
 551:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_add_header(struct pbuf *p, size_t header_size_increment)
 552:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 822              	 .loc 1 552 0
 823              	 .cfi_startproc
 824              	 
 825              	 
 826 0000 80B5     	 push {r7,lr}
 827              	.LCFI36:
 828              	 .cfi_def_cfa_offset 8
 829              	 .cfi_offset 7,-8
 830              	 .cfi_offset 14,-4
 831 0002 82B0     	 sub sp,sp,#8
 832              	.LCFI37:
 833              	 .cfi_def_cfa_offset 16
 834 0004 00AF     	 add r7,sp,#0
 835              	.LCFI38:
 836              	 .cfi_def_cfa_register 7
 837 0006 7860     	 str r0,[r7,#4]
 838 0008 3960     	 str r1,[r7]
 553:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return pbuf_add_header_impl(p, header_size_increment, 0);
 839              	 .loc 1 553 0
 840 000a 7868     	 ldr r0,[r7,#4]
 841 000c 3968     	 ldr r1,[r7]
 842 000e 0022     	 movs r2,#0
 843 0010 FFF7FEFF 	 bl pbuf_add_header_impl
 844 0014 0346     	 mov r3,r0
 554:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 845              	 .loc 1 554 0
 846 0016 1846     	 mov r0,r3
 847 0018 0837     	 adds r7,r7,#8
 848              	.LCFI39:
 849              	 .cfi_def_cfa_offset 8
 850 001a BD46     	 mov sp,r7
 851              	.LCFI40:
 852              	 .cfi_def_cfa_register 13
 853              	 
 854 001c 80BD     	 pop {r7,pc}
 855              	 .cfi_endproc
 856              	.LFE140:
 858 001e 00BF     	 .section .text.pbuf_add_header_force,"ax",%progbits
 859              	 .align 2
 860              	 .global pbuf_add_header_force
 861              	 .thumb
 862              	 .thumb_func
 864              	pbuf_add_header_force:
 865              	.LFB141:
 555:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 556:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 557:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Same as @ref pbuf_add_header but does not check if 'header_size > 0' is allowed.
 558:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * This is used internally only, to allow PBUF_REF for RX.
 559:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 560:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u8_t
 561:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_add_header_force(struct pbuf *p, size_t header_size_increment)
 562:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 866              	 .loc 1 562 0
 867              	 .cfi_startproc
 868              	 
 869              	 
 870 0000 80B5     	 push {r7,lr}
 871              	.LCFI41:
 872              	 .cfi_def_cfa_offset 8
 873              	 .cfi_offset 7,-8
 874              	 .cfi_offset 14,-4
 875 0002 82B0     	 sub sp,sp,#8
 876              	.LCFI42:
 877              	 .cfi_def_cfa_offset 16
 878 0004 00AF     	 add r7,sp,#0
 879              	.LCFI43:
 880              	 .cfi_def_cfa_register 7
 881 0006 7860     	 str r0,[r7,#4]
 882 0008 3960     	 str r1,[r7]
 563:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return pbuf_add_header_impl(p, header_size_increment, 1);
 883              	 .loc 1 563 0
 884 000a 7868     	 ldr r0,[r7,#4]
 885 000c 3968     	 ldr r1,[r7]
 886 000e 0122     	 movs r2,#1
 887 0010 FFF7FEFF 	 bl pbuf_add_header_impl
 888 0014 0346     	 mov r3,r0
 564:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 889              	 .loc 1 564 0
 890 0016 1846     	 mov r0,r3
 891 0018 0837     	 adds r7,r7,#8
 892              	.LCFI44:
 893              	 .cfi_def_cfa_offset 8
 894 001a BD46     	 mov sp,r7
 895              	.LCFI45:
 896              	 .cfi_def_cfa_register 13
 897              	 
 898 001c 80BD     	 pop {r7,pc}
 899              	 .cfi_endproc
 900              	.LFE141:
 902 001e 00BF     	 .section .text.pbuf_remove_header,"ax",%progbits
 903              	 .align 2
 904              	 .global pbuf_remove_header
 905              	 .thumb
 906              	 .thumb_func
 908              	pbuf_remove_header:
 909              	.LFB142:
 565:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 566:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 567:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Adjusts the payload pointer to hide headers in the payload.
 568:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 569:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Adjusts the ->payload pointer so that space for a header
 570:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * disappears in the pbuf payload.
 571:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 572:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The ->payload, ->tot_len and ->len fields are adjusted.
 573:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 574:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to change the header size.
 575:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param header_size_decrement Number of bytes to decrement header size which
 576:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *          decreases the size of the pbuf.
 577:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *          If header_size_decrement is 0, this function does nothing and returns successful.
 578:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return non-zero on failure, zero on success.
 579:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 580:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 581:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u8_t
 582:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
 583:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 910              	 .loc 1 583 0
 911              	 .cfi_startproc
 912              	 
 913              	 
 914              	 
 915 0000 80B4     	 push {r7}
 916              	.LCFI46:
 917              	 .cfi_def_cfa_offset 4
 918              	 .cfi_offset 7,-4
 919 0002 85B0     	 sub sp,sp,#20
 920              	.LCFI47:
 921              	 .cfi_def_cfa_offset 24
 922 0004 00AF     	 add r7,sp,#0
 923              	.LCFI48:
 924              	 .cfi_def_cfa_register 7
 925 0006 7860     	 str r0,[r7,#4]
 926 0008 3960     	 str r1,[r7]
 584:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   void *payload;
 585:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t increment_magnitude;
 586:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 587:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("p != NULL", p != NULL);
 588:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 927              	 .loc 1 588 0
 928 000a 7B68     	 ldr r3,[r7,#4]
 929 000c 002B     	 cmp r3,#0
 930 000e 03D0     	 beq .L52
 931              	 .loc 1 588 0 is_stmt 0 discriminator 1
 932 0010 3B68     	 ldr r3,[r7]
 933 0012 B3F5803F 	 cmp r3,#65536
 934 0016 01D3     	 bcc .L53
 935              	.L52:
 589:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return 1;
 936              	 .loc 1 589 0 is_stmt 1
 937 0018 0123     	 movs r3,#1
 938 001a 25E0     	 b .L54
 939              	.L53:
 590:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 591:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (header_size_decrement == 0) {
 940              	 .loc 1 591 0
 941 001c 3B68     	 ldr r3,[r7]
 942 001e 002B     	 cmp r3,#0
 943 0020 01D1     	 bne .L55
 592:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return 0;
 944              	 .loc 1 592 0
 945 0022 0023     	 movs r3,#0
 946 0024 20E0     	 b .L54
 947              	.L55:
 593:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 594:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 595:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   increment_magnitude = (u16_t)header_size_decrement;
 948              	 .loc 1 595 0
 949 0026 3B68     	 ldr r3,[r7]
 950 0028 FB81     	 strh r3,[r7,#14]
 596:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* Check that we aren't going to move off the end of the pbuf */
 597:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 951              	 .loc 1 597 0
 952 002a 7B68     	 ldr r3,[r7,#4]
 953 002c 5B89     	 ldrh r3,[r3,#10]
 954 002e FA89     	 ldrh r2,[r7,#14]
 955 0030 9A42     	 cmp r2,r3
 956 0032 01D9     	 bls .L56
 957              	 .loc 1 597 0 is_stmt 0 discriminator 1
 958 0034 0123     	 movs r3,#1
 959 0036 17E0     	 b .L54
 960              	.L56:
 598:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 599:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* remember current payload pointer */
 600:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   payload = p->payload;
 961              	 .loc 1 600 0 is_stmt 1
 962 0038 7B68     	 ldr r3,[r7,#4]
 963 003a 5B68     	 ldr r3,[r3,#4]
 964 003c BB60     	 str r3,[r7,#8]
 601:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */
 602:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 603:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* increase payload pointer (guarded by length check above) */
 604:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->payload = (u8_t *)p->payload + header_size_decrement;
 965              	 .loc 1 604 0
 966 003e 7B68     	 ldr r3,[r7,#4]
 967 0040 5A68     	 ldr r2,[r3,#4]
 968 0042 3B68     	 ldr r3,[r7]
 969 0044 1A44     	 add r2,r2,r3
 970 0046 7B68     	 ldr r3,[r7,#4]
 971 0048 5A60     	 str r2,[r3,#4]
 605:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* modify pbuf length fields */
 606:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->len = (u16_t)(p->len - increment_magnitude);
 972              	 .loc 1 606 0
 973 004a 7B68     	 ldr r3,[r7,#4]
 974 004c 5A89     	 ldrh r2,[r3,#10]
 975 004e FB89     	 ldrh r3,[r7,#14]
 976 0050 D31A     	 subs r3,r2,r3
 977 0052 9AB2     	 uxth r2,r3
 978 0054 7B68     	 ldr r3,[r7,#4]
 979 0056 5A81     	 strh r2,[r3,#10]
 607:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 980              	 .loc 1 607 0
 981 0058 7B68     	 ldr r3,[r7,#4]
 982 005a 1A89     	 ldrh r2,[r3,#8]
 983 005c FB89     	 ldrh r3,[r7,#14]
 984 005e D31A     	 subs r3,r2,r3
 985 0060 9AB2     	 uxth r2,r3
 986 0062 7B68     	 ldr r3,[r7,#4]
 987 0064 1A81     	 strh r2,[r3,#8]
 608:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 609:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
 610:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****               (void *)payload, (void *)p->payload, increment_magnitude));
 611:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 612:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return 0;
 988              	 .loc 1 612 0
 989 0066 0023     	 movs r3,#0
 990              	.L54:
 613:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 991              	 .loc 1 613 0
 992 0068 1846     	 mov r0,r3
 993 006a 1437     	 adds r7,r7,#20
 994              	.LCFI49:
 995              	 .cfi_def_cfa_offset 4
 996 006c BD46     	 mov sp,r7
 997              	.LCFI50:
 998              	 .cfi_def_cfa_register 13
 999              	 
 1000 006e 5DF8047B 	 ldr r7,[sp],#4
 1001              	.LCFI51:
 1002              	 .cfi_restore 7
 1003              	 .cfi_def_cfa_offset 0
 1004 0072 7047     	 bx lr
 1005              	 .cfi_endproc
 1006              	.LFE142:
 1008              	 .section .text.pbuf_header_impl,"ax",%progbits
 1009              	 .align 2
 1010              	 .thumb
 1011              	 .thumb_func
 1013              	pbuf_header_impl:
 1014              	.LFB143:
 614:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 615:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** static u8_t
 616:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
 617:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1015              	 .loc 1 617 0
 1016              	 .cfi_startproc
 1017              	 
 1018              	 
 1019 0000 80B5     	 push {r7,lr}
 1020              	.LCFI52:
 1021              	 .cfi_def_cfa_offset 8
 1022              	 .cfi_offset 7,-8
 1023              	 .cfi_offset 14,-4
 1024 0002 82B0     	 sub sp,sp,#8
 1025              	.LCFI53:
 1026              	 .cfi_def_cfa_offset 16
 1027 0004 00AF     	 add r7,sp,#0
 1028              	.LCFI54:
 1029              	 .cfi_def_cfa_register 7
 1030 0006 7860     	 str r0,[r7,#4]
 1031 0008 0B46     	 mov r3,r1
 1032 000a 7B80     	 strh r3,[r7,#2]
 1033 000c 1346     	 mov r3,r2
 1034 000e 7B70     	 strb r3,[r7,#1]
 618:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (header_size_increment < 0) {
 1035              	 .loc 1 618 0
 1036 0010 B7F90230 	 ldrsh r3,[r7,#2]
 1037 0014 002B     	 cmp r3,#0
 1038 0016 08DA     	 bge .L58
 619:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return pbuf_remove_header(p, (size_t) - header_size_increment);
 1039              	 .loc 1 619 0
 1040 0018 B7F90230 	 ldrsh r3,[r7,#2]
 1041 001c 5B42     	 negs r3,r3
 1042 001e 7868     	 ldr r0,[r7,#4]
 1043 0020 1946     	 mov r1,r3
 1044 0022 FFF7FEFF 	 bl pbuf_remove_header
 1045 0026 0346     	 mov r3,r0
 1046 0028 08E0     	 b .L59
 1047              	.L58:
 620:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   } else {
 621:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 1048              	 .loc 1 621 0
 1049 002a B7F90220 	 ldrsh r2,[r7,#2]
 1050 002e 7B78     	 ldrb r3,[r7,#1]
 1051 0030 7868     	 ldr r0,[r7,#4]
 1052 0032 1146     	 mov r1,r2
 1053 0034 1A46     	 mov r2,r3
 1054 0036 FFF7FEFF 	 bl pbuf_add_header_impl
 1055 003a 0346     	 mov r3,r0
 1056              	.L59:
 622:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 623:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1057              	 .loc 1 623 0
 1058 003c 1846     	 mov r0,r3
 1059 003e 0837     	 adds r7,r7,#8
 1060              	.LCFI55:
 1061              	 .cfi_def_cfa_offset 8
 1062 0040 BD46     	 mov sp,r7
 1063              	.LCFI56:
 1064              	 .cfi_def_cfa_register 13
 1065              	 
 1066 0042 80BD     	 pop {r7,pc}
 1067              	 .cfi_endproc
 1068              	.LFE143:
 1070              	 .section .text.pbuf_header,"ax",%progbits
 1071              	 .align 2
 1072              	 .global pbuf_header
 1073              	 .thumb
 1074              	 .thumb_func
 1076              	pbuf_header:
 1077              	.LFB144:
 624:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 625:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 626:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Adjusts the payload pointer to hide or reveal headers in the payload.
 627:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 628:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Adjusts the ->payload pointer so that space for a header
 629:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * (dis)appears in the pbuf payload.
 630:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 631:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The ->payload, ->tot_len and ->len fields are adjusted.
 632:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 633:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to change the header size.
 634:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param header_size_increment Number of bytes to increment header size which
 635:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * increases the size of the pbuf. New space is on the front.
 636:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * (Using a negative value decreases the header size.)
 637:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * If header_size_increment is 0, this function does nothing and returns successful.
 638:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 639:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * PBUF_ROM and PBUF_REF type buffers cannot have their sizes increased, so
 640:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * the call will fail. A check is made that the increase in header size does
 641:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * not move the payload pointer in front of the start of the buffer.
 642:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return non-zero on failure, zero on success.
 643:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 644:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 645:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u8_t
 646:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_header(struct pbuf *p, s16_t header_size_increment)
 647:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1078              	 .loc 1 647 0
 1079              	 .cfi_startproc
 1080              	 
 1081              	 
 1082 0000 80B5     	 push {r7,lr}
 1083              	.LCFI57:
 1084              	 .cfi_def_cfa_offset 8
 1085              	 .cfi_offset 7,-8
 1086              	 .cfi_offset 14,-4
 1087 0002 82B0     	 sub sp,sp,#8
 1088              	.LCFI58:
 1089              	 .cfi_def_cfa_offset 16
 1090 0004 00AF     	 add r7,sp,#0
 1091              	.LCFI59:
 1092              	 .cfi_def_cfa_register 7
 1093 0006 7860     	 str r0,[r7,#4]
 1094 0008 0B46     	 mov r3,r1
 1095 000a 7B80     	 strh r3,[r7,#2]
 648:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return pbuf_header_impl(p, header_size_increment, 0);
 1096              	 .loc 1 648 0
 1097 000c B7F90230 	 ldrsh r3,[r7,#2]
 1098 0010 7868     	 ldr r0,[r7,#4]
 1099 0012 1946     	 mov r1,r3
 1100 0014 0022     	 movs r2,#0
 1101 0016 FFF7FEFF 	 bl pbuf_header_impl
 1102 001a 0346     	 mov r3,r0
 649:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1103              	 .loc 1 649 0
 1104 001c 1846     	 mov r0,r3
 1105 001e 0837     	 adds r7,r7,#8
 1106              	.LCFI60:
 1107              	 .cfi_def_cfa_offset 8
 1108 0020 BD46     	 mov sp,r7
 1109              	.LCFI61:
 1110              	 .cfi_def_cfa_register 13
 1111              	 
 1112 0022 80BD     	 pop {r7,pc}
 1113              	 .cfi_endproc
 1114              	.LFE144:
 1116              	 .section .text.pbuf_header_force,"ax",%progbits
 1117              	 .align 2
 1118              	 .global pbuf_header_force
 1119              	 .thumb
 1120              	 .thumb_func
 1122              	pbuf_header_force:
 1123              	.LFB145:
 650:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 651:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 652:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 653:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * This is used internally only, to allow PBUF_REF for RX.
 654:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 655:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u8_t
 656:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
 657:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1124              	 .loc 1 657 0
 1125              	 .cfi_startproc
 1126              	 
 1127              	 
 1128 0000 80B5     	 push {r7,lr}
 1129              	.LCFI62:
 1130              	 .cfi_def_cfa_offset 8
 1131              	 .cfi_offset 7,-8
 1132              	 .cfi_offset 14,-4
 1133 0002 82B0     	 sub sp,sp,#8
 1134              	.LCFI63:
 1135              	 .cfi_def_cfa_offset 16
 1136 0004 00AF     	 add r7,sp,#0
 1137              	.LCFI64:
 1138              	 .cfi_def_cfa_register 7
 1139 0006 7860     	 str r0,[r7,#4]
 1140 0008 0B46     	 mov r3,r1
 1141 000a 7B80     	 strh r3,[r7,#2]
 658:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return pbuf_header_impl(p, header_size_increment, 1);
 1142              	 .loc 1 658 0
 1143 000c B7F90230 	 ldrsh r3,[r7,#2]
 1144 0010 7868     	 ldr r0,[r7,#4]
 1145 0012 1946     	 mov r1,r3
 1146 0014 0122     	 movs r2,#1
 1147 0016 FFF7FEFF 	 bl pbuf_header_impl
 1148 001a 0346     	 mov r3,r0
 659:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1149              	 .loc 1 659 0
 1150 001c 1846     	 mov r0,r3
 1151 001e 0837     	 adds r7,r7,#8
 1152              	.LCFI65:
 1153              	 .cfi_def_cfa_offset 8
 1154 0020 BD46     	 mov sp,r7
 1155              	.LCFI66:
 1156              	 .cfi_def_cfa_register 13
 1157              	 
 1158 0022 80BD     	 pop {r7,pc}
 1159              	 .cfi_endproc
 1160              	.LFE145:
 1162              	 .section .text.pbuf_free_header,"ax",%progbits
 1163              	 .align 2
 1164              	 .global pbuf_free_header
 1165              	 .thumb
 1166              	 .thumb_func
 1168              	pbuf_free_header:
 1169              	.LFB146:
 660:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 661:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /** Similar to pbuf_header(-size) but de-refs header pbufs for (size >= p->len)
 662:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 663:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param q pbufs to operate on
 664:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param size The number of bytes to remove from the beginning of the pbuf list.
 665:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             While size >= p->len, pbufs are freed.
 666:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *        ATTENTION: this is the opposite direction as @ref pbuf_header, but
 667:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *                   takes an u16_t not s16_t!
 668:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return the new head pbuf
 669:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 670:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** struct pbuf *
 671:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_free_header(struct pbuf *q, u16_t size)
 672:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1170              	 .loc 1 672 0
 1171              	 .cfi_startproc
 1172              	 
 1173              	 
 1174 0000 80B5     	 push {r7,lr}
 1175              	.LCFI67:
 1176              	 .cfi_def_cfa_offset 8
 1177              	 .cfi_offset 7,-8
 1178              	 .cfi_offset 14,-4
 1179 0002 86B0     	 sub sp,sp,#24
 1180              	.LCFI68:
 1181              	 .cfi_def_cfa_offset 32
 1182 0004 00AF     	 add r7,sp,#0
 1183              	.LCFI69:
 1184              	 .cfi_def_cfa_register 7
 1185 0006 7860     	 str r0,[r7,#4]
 1186 0008 0B46     	 mov r3,r1
 1187 000a 7B80     	 strh r3,[r7,#2]
 673:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *p = q;
 1188              	 .loc 1 673 0
 1189 000c 7B68     	 ldr r3,[r7,#4]
 1190 000e 7B61     	 str r3,[r7,#20]
 674:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t free_left = size;
 1191              	 .loc 1 674 0
 1192 0010 7B88     	 ldrh r3,[r7,#2]
 1193 0012 7B82     	 strh r3,[r7,#18]
 675:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   while (free_left && p) {
 1194              	 .loc 1 675 0
 1195 0014 1CE0     	 b .L65
 1196              	.L68:
 676:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (free_left >= p->len) {
 1197              	 .loc 1 676 0
 1198 0016 7B69     	 ldr r3,[r7,#20]
 1199 0018 5B89     	 ldrh r3,[r3,#10]
 1200 001a 7A8A     	 ldrh r2,[r7,#18]
 1201 001c 9A42     	 cmp r2,r3
 1202 001e 10D3     	 bcc .L66
 1203              	.LBB5:
 677:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       struct pbuf *f = p;
 1204              	 .loc 1 677 0
 1205 0020 7B69     	 ldr r3,[r7,#20]
 1206 0022 FB60     	 str r3,[r7,#12]
 678:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       free_left = (u16_t)(free_left - p->len);
 1207              	 .loc 1 678 0
 1208 0024 7B69     	 ldr r3,[r7,#20]
 1209 0026 5B89     	 ldrh r3,[r3,#10]
 1210 0028 7A8A     	 ldrh r2,[r7,#18]
 1211 002a D31A     	 subs r3,r2,r3
 1212 002c 7B82     	 strh r3,[r7,#18]
 679:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       p = p->next;
 1213              	 .loc 1 679 0
 1214 002e 7B69     	 ldr r3,[r7,#20]
 1215 0030 1B68     	 ldr r3,[r3]
 1216 0032 7B61     	 str r3,[r7,#20]
 680:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       f->next = 0;
 1217              	 .loc 1 680 0
 1218 0034 FB68     	 ldr r3,[r7,#12]
 1219 0036 0022     	 movs r2,#0
 1220 0038 1A60     	 str r2,[r3]
 681:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       pbuf_free(f);
 1221              	 .loc 1 681 0
 1222 003a F868     	 ldr r0,[r7,#12]
 1223 003c FFF7FEFF 	 bl pbuf_free
 1224              	.LBE5:
 1225 0040 06E0     	 b .L65
 1226              	.L66:
 682:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     } else {
 683:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       pbuf_remove_header(p, free_left);
 1227              	 .loc 1 683 0
 1228 0042 7B8A     	 ldrh r3,[r7,#18]
 1229 0044 7869     	 ldr r0,[r7,#20]
 1230 0046 1946     	 mov r1,r3
 1231 0048 FFF7FEFF 	 bl pbuf_remove_header
 684:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       free_left = 0;
 1232              	 .loc 1 684 0
 1233 004c 0023     	 movs r3,#0
 1234 004e 7B82     	 strh r3,[r7,#18]
 1235              	.L65:
 675:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (free_left >= p->len) {
 1236              	 .loc 1 675 0
 1237 0050 7B8A     	 ldrh r3,[r7,#18]
 1238 0052 002B     	 cmp r3,#0
 1239 0054 02D0     	 beq .L67
 675:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (free_left >= p->len) {
 1240              	 .loc 1 675 0 is_stmt 0 discriminator 1
 1241 0056 7B69     	 ldr r3,[r7,#20]
 1242 0058 002B     	 cmp r3,#0
 1243 005a DCD1     	 bne .L68
 1244              	.L67:
 685:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 686:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 687:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return p;
 1245              	 .loc 1 687 0 is_stmt 1
 1246 005c 7B69     	 ldr r3,[r7,#20]
 688:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1247              	 .loc 1 688 0
 1248 005e 1846     	 mov r0,r3
 1249 0060 1837     	 adds r7,r7,#24
 1250              	.LCFI70:
 1251              	 .cfi_def_cfa_offset 8
 1252 0062 BD46     	 mov sp,r7
 1253              	.LCFI71:
 1254              	 .cfi_def_cfa_register 13
 1255              	 
 1256 0064 80BD     	 pop {r7,pc}
 1257              	 .cfi_endproc
 1258              	.LFE146:
 1260 0066 00BF     	 .section .text.pbuf_free,"ax",%progbits
 1261              	 .align 2
 1262              	 .global pbuf_free
 1263              	 .thumb
 1264              	 .thumb_func
 1266              	pbuf_free:
 1267              	.LFB147:
 689:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 690:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 691:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
 692:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Dereference a pbuf chain or queue and deallocate any no-longer-used
 693:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * pbufs at the head of this chain or queue.
 694:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 695:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Decrements the pbuf reference count. If it reaches zero, the pbuf is
 696:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * deallocated.
 697:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 698:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * For a pbuf chain, this is repeated for each pbuf in the chain,
 699:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * up to the first pbuf which has a non-zero reference count after
 700:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * decrementing. So, when all reference counts are one, the whole
 701:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * chain is free'd.
 702:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 703:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p The pbuf (chain) to be dereferenced.
 704:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 705:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return the number of pbufs that were de-allocated
 706:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * from the head of the chain.
 707:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 708:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note MUST NOT be called on a packet queue (Not verified to work yet).
 709:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note the reference counter of a pbuf equals the number of pointers
 710:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * that refer to the pbuf (or into the pbuf).
 711:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 712:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @internal examples:
 713:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 714:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Assuming existing chains a->b->c with the following reference
 715:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * counts, calling pbuf_free(a) results in:
 716:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 717:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 1->2->3 becomes ...1->3
 718:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 3->3->3 becomes 2->3->3
 719:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 1->1->2 becomes ......1
 720:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 2->1->1 becomes 1->1->1
 721:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 1->1->1 becomes .......
 722:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 723:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 724:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u8_t
 725:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_free(struct pbuf *p)
 726:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1268              	 .loc 1 726 0
 1269              	 .cfi_startproc
 1270              	 
 1271              	 
 1272 0000 80B5     	 push {r7,lr}
 1273              	.LCFI72:
 1274              	 .cfi_def_cfa_offset 8
 1275              	 .cfi_offset 7,-8
 1276              	 .cfi_offset 14,-4
 1277 0002 86B0     	 sub sp,sp,#24
 1278              	.LCFI73:
 1279              	 .cfi_def_cfa_offset 32
 1280 0004 00AF     	 add r7,sp,#0
 1281              	.LCFI74:
 1282              	 .cfi_def_cfa_register 7
 1283 0006 7860     	 str r0,[r7,#4]
 727:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u8_t alloc_src;
 728:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *q;
 729:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u8_t count;
 730:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 731:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (p == NULL) {
 1284              	 .loc 1 731 0
 1285 0008 7B68     	 ldr r3,[r7,#4]
 1286 000a 002B     	 cmp r3,#0
 1287 000c 01D1     	 bne .L71
 732:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("p != NULL", p != NULL);
 733:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* if assertions are disabled, proceed with debug output */
 734:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 735:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                 ("pbuf_free(p == NULL) was called.\n"));
 736:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return 0;
 1288              	 .loc 1 736 0
 1289 000e 0023     	 movs r3,#0
 1290 0010 38E0     	 b .L72
 1291              	.L71:
 737:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 738:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));
 739:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 740:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   PERF_START;
 741:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 742:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   count = 0;
 1292              	 .loc 1 742 0
 1293 0012 0023     	 movs r3,#0
 1294 0014 FB75     	 strb r3,[r7,#23]
 743:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* de-allocate all consecutive pbufs from the head of the chain that
 744:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****    * obtain a zero reference count after decrementing*/
 745:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   while (p != NULL) {
 1295              	 .loc 1 745 0
 1296 0016 31E0     	 b .L73
 1297              	.L78:
 1298              	.LBB6:
 746:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_PBUF_REF_T ref;
 747:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     SYS_ARCH_DECL_PROTECT(old_level);
 748:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* Since decrementing ref cannot be guaranteed to be a single machine operation
 749:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****      * we must protect it. We put the new ref into a local variable to prevent
 750:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****      * further protection. */
 751:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     SYS_ARCH_PROTECT(old_level);
 752:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* all pbufs in a chain are referenced at least once */
 753:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 754:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* decrease reference count (number of pointers to pbuf) */
 755:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     ref = --(p->ref);
 1299              	 .loc 1 755 0
 1300 0018 7B68     	 ldr r3,[r7,#4]
 1301 001a 9B7B     	 ldrb r3,[r3,#14]
 1302 001c 013B     	 subs r3,r3,#1
 1303 001e DAB2     	 uxtb r2,r3
 1304 0020 7B68     	 ldr r3,[r7,#4]
 1305 0022 9A73     	 strb r2,[r3,#14]
 1306 0024 7B68     	 ldr r3,[r7,#4]
 1307 0026 9B7B     	 ldrb r3,[r3,#14]
 1308 0028 BB75     	 strb r3,[r7,#22]
 756:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     SYS_ARCH_UNPROTECT(old_level);
 757:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* this pbuf is no longer referenced to? */
 758:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (ref == 0) {
 1309              	 .loc 1 758 0
 1310 002a BB7D     	 ldrb r3,[r7,#22]
 1311 002c 002B     	 cmp r3,#0
 1312 002e 23D1     	 bne .L74
 759:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* remember next pbuf in chain for next iteration */
 760:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       q = p->next;
 1313              	 .loc 1 760 0
 1314 0030 7B68     	 ldr r3,[r7,#4]
 1315 0032 1B68     	 ldr r3,[r3]
 1316 0034 3B61     	 str r3,[r7,#16]
 761:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
 762:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       alloc_src = pbuf_get_allocsrc(p);
 1317              	 .loc 1 762 0
 1318 0036 7B68     	 ldr r3,[r7,#4]
 1319 0038 1B7B     	 ldrb r3,[r3,#12]
 1320 003a 03F00F03 	 and r3,r3,#15
 1321 003e FB73     	 strb r3,[r7,#15]
 763:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if LWIP_SUPPORT_CUSTOM_PBUF
 764:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* is this a custom pbuf? */
 765:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 766:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         struct pbuf_custom *pc = (struct pbuf_custom *)p;
 767:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 768:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         pc->custom_free_function(p);
 769:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       } else
 770:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* LWIP_SUPPORT_CUSTOM_PBUF */
 771:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       {
 772:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         /* is this a pbuf from the pool? */
 773:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 1322              	 .loc 1 773 0
 1323 0040 FB7B     	 ldrb r3,[r7,#15]
 1324 0042 022B     	 cmp r3,#2
 1325 0044 04D1     	 bne .L75
 774:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           memp_free(MEMP_PBUF_POOL, p);
 1326              	 .loc 1 774 0
 1327 0046 0620     	 movs r0,#6
 1328 0048 7968     	 ldr r1,[r7,#4]
 1329 004a FFF7FEFF 	 bl memp_free
 1330 004e 0DE0     	 b .L76
 1331              	.L75:
 775:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           /* is this a ROM or RAM referencing pbuf? */
 776:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 1332              	 .loc 1 776 0
 1333 0050 FB7B     	 ldrb r3,[r7,#15]
 1334 0052 012B     	 cmp r3,#1
 1335 0054 04D1     	 bne .L77
 777:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           memp_free(MEMP_PBUF, p);
 1336              	 .loc 1 777 0
 1337 0056 0520     	 movs r0,#5
 1338 0058 7968     	 ldr r1,[r7,#4]
 1339 005a FFF7FEFF 	 bl memp_free
 1340 005e 05E0     	 b .L76
 1341              	.L77:
 778:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           /* type == PBUF_RAM */
 779:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 1342              	 .loc 1 779 0
 1343 0060 FB7B     	 ldrb r3,[r7,#15]
 1344 0062 002B     	 cmp r3,#0
 1345 0064 02D1     	 bne .L76
 780:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           mem_free(p);
 1346              	 .loc 1 780 0
 1347 0066 7868     	 ldr r0,[r7,#4]
 1348 0068 FFF7FEFF 	 bl mem_free
 1349              	.L76:
 781:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         } else {
 782:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           /* @todo: support freeing other types */
 783:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           LWIP_ASSERT("invalid pbuf type", 0);
 784:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         }
 785:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       }
 786:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       count++;
 1350              	 .loc 1 786 0
 1351 006c FB7D     	 ldrb r3,[r7,#23]
 1352 006e 0133     	 adds r3,r3,#1
 1353 0070 FB75     	 strb r3,[r7,#23]
 787:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* proceed to next pbuf */
 788:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       p = q;
 1354              	 .loc 1 788 0
 1355 0072 3B69     	 ldr r3,[r7,#16]
 1356 0074 7B60     	 str r3,[r7,#4]
 1357 0076 01E0     	 b .L73
 1358              	.L74:
 789:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* p->ref > 0, this pbuf is still referenced to */
 790:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* (and so the remaining pbufs in chain as well) */
 791:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     } else {
 792:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", 
 793:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* stop walking through the chain */
 794:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       p = NULL;
 1359              	 .loc 1 794 0
 1360 0078 0023     	 movs r3,#0
 1361 007a 7B60     	 str r3,[r7,#4]
 1362              	.L73:
 1363              	.LBE6:
 745:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_PBUF_REF_T ref;
 1364              	 .loc 1 745 0
 1365 007c 7B68     	 ldr r3,[r7,#4]
 1366 007e 002B     	 cmp r3,#0
 1367 0080 CAD1     	 bne .L78
 795:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 796:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 797:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   PERF_STOP("pbuf_free");
 798:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* return number of de-allocated pbufs */
 799:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return count;
 1368              	 .loc 1 799 0
 1369 0082 FB7D     	 ldrb r3,[r7,#23]
 1370              	.L72:
 800:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1371              	 .loc 1 800 0
 1372 0084 1846     	 mov r0,r3
 1373 0086 1837     	 adds r7,r7,#24
 1374              	.LCFI75:
 1375              	 .cfi_def_cfa_offset 8
 1376 0088 BD46     	 mov sp,r7
 1377              	.LCFI76:
 1378              	 .cfi_def_cfa_register 13
 1379              	 
 1380 008a 80BD     	 pop {r7,pc}
 1381              	 .cfi_endproc
 1382              	.LFE147:
 1384              	 .section .text.pbuf_clen,"ax",%progbits
 1385              	 .align 2
 1386              	 .global pbuf_clen
 1387              	 .thumb
 1388              	 .thumb_func
 1390              	pbuf_clen:
 1391              	.LFB148:
 801:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 802:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 803:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Count number of pbufs in a chain
 804:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 805:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p first pbuf of chain
 806:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return the number of pbufs in a chain
 807:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 808:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u16_t
 809:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_clen(const struct pbuf *p)
 810:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1392              	 .loc 1 810 0
 1393              	 .cfi_startproc
 1394              	 
 1395              	 
 1396              	 
 1397 0000 80B4     	 push {r7}
 1398              	.LCFI77:
 1399              	 .cfi_def_cfa_offset 4
 1400              	 .cfi_offset 7,-4
 1401 0002 85B0     	 sub sp,sp,#20
 1402              	.LCFI78:
 1403              	 .cfi_def_cfa_offset 24
 1404 0004 00AF     	 add r7,sp,#0
 1405              	.LCFI79:
 1406              	 .cfi_def_cfa_register 7
 1407 0006 7860     	 str r0,[r7,#4]
 811:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t len;
 812:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 813:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   len = 0;
 1408              	 .loc 1 813 0
 1409 0008 0023     	 movs r3,#0
 1410 000a FB81     	 strh r3,[r7,#14]
 814:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   while (p != NULL) {
 1411              	 .loc 1 814 0
 1412 000c 05E0     	 b .L80
 1413              	.L81:
 815:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     ++len;
 1414              	 .loc 1 815 0
 1415 000e FB89     	 ldrh r3,[r7,#14]
 1416 0010 0133     	 adds r3,r3,#1
 1417 0012 FB81     	 strh r3,[r7,#14]
 816:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p = p->next;
 1418              	 .loc 1 816 0
 1419 0014 7B68     	 ldr r3,[r7,#4]
 1420 0016 1B68     	 ldr r3,[r3]
 1421 0018 7B60     	 str r3,[r7,#4]
 1422              	.L80:
 814:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   while (p != NULL) {
 1423              	 .loc 1 814 0
 1424 001a 7B68     	 ldr r3,[r7,#4]
 1425 001c 002B     	 cmp r3,#0
 1426 001e F6D1     	 bne .L81
 817:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 818:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return len;
 1427              	 .loc 1 818 0
 1428 0020 FB89     	 ldrh r3,[r7,#14]
 819:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1429              	 .loc 1 819 0
 1430 0022 1846     	 mov r0,r3
 1431 0024 1437     	 adds r7,r7,#20
 1432              	.LCFI80:
 1433              	 .cfi_def_cfa_offset 4
 1434 0026 BD46     	 mov sp,r7
 1435              	.LCFI81:
 1436              	 .cfi_def_cfa_register 13
 1437              	 
 1438 0028 5DF8047B 	 ldr r7,[sp],#4
 1439              	.LCFI82:
 1440              	 .cfi_restore 7
 1441              	 .cfi_def_cfa_offset 0
 1442 002c 7047     	 bx lr
 1443              	 .cfi_endproc
 1444              	.LFE148:
 1446 002e 00BF     	 .section .text.pbuf_ref,"ax",%progbits
 1447              	 .align 2
 1448              	 .global pbuf_ref
 1449              	 .thumb
 1450              	 .thumb_func
 1452              	pbuf_ref:
 1453              	.LFB149:
 820:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 821:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 822:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
 823:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Increment the reference count of the pbuf.
 824:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 825:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to increase reference counter of
 826:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 827:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 828:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** void
 829:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_ref(struct pbuf *p)
 830:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1454              	 .loc 1 830 0
 1455              	 .cfi_startproc
 1456              	 
 1457              	 
 1458              	 
 1459 0000 80B4     	 push {r7}
 1460              	.LCFI83:
 1461              	 .cfi_def_cfa_offset 4
 1462              	 .cfi_offset 7,-4
 1463 0002 83B0     	 sub sp,sp,#12
 1464              	.LCFI84:
 1465              	 .cfi_def_cfa_offset 16
 1466 0004 00AF     	 add r7,sp,#0
 1467              	.LCFI85:
 1468              	 .cfi_def_cfa_register 7
 1469 0006 7860     	 str r0,[r7,#4]
 831:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* pbuf given? */
 832:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (p != NULL) {
 1470              	 .loc 1 832 0
 1471 0008 7B68     	 ldr r3,[r7,#4]
 1472 000a 002B     	 cmp r3,#0
 1473 000c 05D0     	 beq .L83
 833:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 1474              	 .loc 1 833 0
 1475 000e 7B68     	 ldr r3,[r7,#4]
 1476 0010 9B7B     	 ldrb r3,[r3,#14]
 1477 0012 0133     	 adds r3,r3,#1
 1478 0014 DAB2     	 uxtb r2,r3
 1479 0016 7B68     	 ldr r3,[r7,#4]
 1480 0018 9A73     	 strb r2,[r3,#14]
 1481              	.L83:
 834:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 835:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 836:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1482              	 .loc 1 836 0
 1483 001a 0C37     	 adds r7,r7,#12
 1484              	.LCFI86:
 1485              	 .cfi_def_cfa_offset 4
 1486 001c BD46     	 mov sp,r7
 1487              	.LCFI87:
 1488              	 .cfi_def_cfa_register 13
 1489              	 
 1490 001e 5DF8047B 	 ldr r7,[sp],#4
 1491              	.LCFI88:
 1492              	 .cfi_restore 7
 1493              	 .cfi_def_cfa_offset 0
 1494 0022 7047     	 bx lr
 1495              	 .cfi_endproc
 1496              	.LFE149:
 1498              	 .section .text.pbuf_cat,"ax",%progbits
 1499              	 .align 2
 1500              	 .global pbuf_cat
 1501              	 .thumb
 1502              	 .thumb_func
 1504              	pbuf_cat:
 1505              	.LFB150:
 837:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 838:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 839:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
 840:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Concatenate two pbufs (each may be a pbuf chain) and take over
 841:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * the caller's reference of the tail pbuf.
 842:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 843:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note The caller MAY NOT reference the tail pbuf afterwards.
 844:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Use pbuf_chain() for that purpose.
 845:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 846:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * This function explicitly does not check for tot_len overflow to prevent
 847:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * failing to queue too long pbufs. This can produce invalid pbufs, so
 848:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * handle with care!
 849:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 850:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @see pbuf_chain()
 851:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 852:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** void
 853:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_cat(struct pbuf *h, struct pbuf *t)
 854:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1506              	 .loc 1 854 0
 1507              	 .cfi_startproc
 1508              	 
 1509              	 
 1510              	 
 1511 0000 80B4     	 push {r7}
 1512              	.LCFI89:
 1513              	 .cfi_def_cfa_offset 4
 1514              	 .cfi_offset 7,-4
 1515 0002 85B0     	 sub sp,sp,#20
 1516              	.LCFI90:
 1517              	 .cfi_def_cfa_offset 24
 1518 0004 00AF     	 add r7,sp,#0
 1519              	.LCFI91:
 1520              	 .cfi_def_cfa_register 7
 1521 0006 7860     	 str r0,[r7,#4]
 1522 0008 3960     	 str r1,[r7]
 855:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *p;
 856:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 857:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 1523              	 .loc 1 857 0
 1524 000a 7B68     	 ldr r3,[r7,#4]
 1525 000c 002B     	 cmp r3,#0
 1526 000e 02D0     	 beq .L86
 1527              	 .loc 1 857 0 is_stmt 0 discriminator 1
 1528 0010 3B68     	 ldr r3,[r7]
 1529 0012 002B     	 cmp r3,#0
 1530 0014 00D1     	 bne .L87
 1531              	.L86:
 1532              	 .loc 1 857 0
 1533 0016 1CE0     	 b .L85
 1534              	.L87:
 858:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****              ((h != NULL) && (t != NULL)), return;);
 859:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 860:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* proceed to last pbuf of chain */
 861:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   for (p = h; p->next != NULL; p = p->next) {
 1535              	 .loc 1 861 0 is_stmt 1
 1536 0018 7B68     	 ldr r3,[r7,#4]
 1537 001a FB60     	 str r3,[r7,#12]
 1538 001c 0AE0     	 b .L89
 1539              	.L90:
 862:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* add total length of second chain to all totals of first chain */
 863:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 1540              	 .loc 1 863 0 discriminator 3
 1541 001e FB68     	 ldr r3,[r7,#12]
 1542 0020 1A89     	 ldrh r2,[r3,#8]
 1543 0022 3B68     	 ldr r3,[r7]
 1544 0024 1B89     	 ldrh r3,[r3,#8]
 1545 0026 1344     	 add r3,r3,r2
 1546 0028 9AB2     	 uxth r2,r3
 1547 002a FB68     	 ldr r3,[r7,#12]
 1548 002c 1A81     	 strh r2,[r3,#8]
 861:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* add total length of second chain to all totals of first chain */
 1549              	 .loc 1 861 0 discriminator 3
 1550 002e FB68     	 ldr r3,[r7,#12]
 1551 0030 1B68     	 ldr r3,[r3]
 1552 0032 FB60     	 str r3,[r7,#12]
 1553              	.L89:
 861:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* add total length of second chain to all totals of first chain */
 1554              	 .loc 1 861 0 is_stmt 0 discriminator 1
 1555 0034 FB68     	 ldr r3,[r7,#12]
 1556 0036 1B68     	 ldr r3,[r3]
 1557 0038 002B     	 cmp r3,#0
 1558 003a F0D1     	 bne .L90
 864:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 865:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* { p is last pbuf of first h chain, p->next == NULL } */
 866:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 867:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("p->next == NULL", p->next == NULL);
 868:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* add total length of second chain to last pbuf total of first chain */
 869:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 1559              	 .loc 1 869 0 is_stmt 1
 1560 003c FB68     	 ldr r3,[r7,#12]
 1561 003e 1A89     	 ldrh r2,[r3,#8]
 1562 0040 3B68     	 ldr r3,[r7]
 1563 0042 1B89     	 ldrh r3,[r3,#8]
 1564 0044 1344     	 add r3,r3,r2
 1565 0046 9AB2     	 uxth r2,r3
 1566 0048 FB68     	 ldr r3,[r7,#12]
 1567 004a 1A81     	 strh r2,[r3,#8]
 870:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* chain last pbuf of head (p) with first of tail (t) */
 871:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->next = t;
 1568              	 .loc 1 871 0
 1569 004c FB68     	 ldr r3,[r7,#12]
 1570 004e 3A68     	 ldr r2,[r7]
 1571 0050 1A60     	 str r2,[r3]
 1572              	.L85:
 872:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* p->next now references t, but the caller will drop its reference to t,
 873:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****    * so netto there is no change to the reference count of t.
 874:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****    */
 875:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1573              	 .loc 1 875 0
 1574 0052 1437     	 adds r7,r7,#20
 1575              	.LCFI92:
 1576              	 .cfi_def_cfa_offset 4
 1577 0054 BD46     	 mov sp,r7
 1578              	.LCFI93:
 1579              	 .cfi_def_cfa_register 13
 1580              	 
 1581 0056 5DF8047B 	 ldr r7,[sp],#4
 1582              	.LCFI94:
 1583              	 .cfi_restore 7
 1584              	 .cfi_def_cfa_offset 0
 1585 005a 7047     	 bx lr
 1586              	 .cfi_endproc
 1587              	.LFE150:
 1589              	 .section .text.pbuf_chain,"ax",%progbits
 1590              	 .align 2
 1591              	 .global pbuf_chain
 1592              	 .thumb
 1593              	 .thumb_func
 1595              	pbuf_chain:
 1596              	.LFB151:
 876:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 877:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 878:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
 879:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Chain two pbufs (or pbuf chains) together.
 880:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 881:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The caller MUST call pbuf_free(t) once it has stopped
 882:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * using it. Use pbuf_cat() instead if you no longer use t.
 883:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 884:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param h head pbuf (chain)
 885:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param t tail pbuf (chain)
 886:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note The pbufs MUST belong to the same packet.
 887:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note MAY NOT be called on a packet queue.
 888:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 889:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The ->tot_len fields of all pbufs of the head chain are adjusted.
 890:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The ->next field of the last pbuf of the head chain is adjusted.
 891:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The ->ref field of the first pbuf of the tail chain is adjusted.
 892:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 893:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 894:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** void
 895:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_chain(struct pbuf *h, struct pbuf *t)
 896:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1597              	 .loc 1 896 0
 1598              	 .cfi_startproc
 1599              	 
 1600              	 
 1601 0000 80B5     	 push {r7,lr}
 1602              	.LCFI95:
 1603              	 .cfi_def_cfa_offset 8
 1604              	 .cfi_offset 7,-8
 1605              	 .cfi_offset 14,-4
 1606 0002 82B0     	 sub sp,sp,#8
 1607              	.LCFI96:
 1608              	 .cfi_def_cfa_offset 16
 1609 0004 00AF     	 add r7,sp,#0
 1610              	.LCFI97:
 1611              	 .cfi_def_cfa_register 7
 1612 0006 7860     	 str r0,[r7,#4]
 1613 0008 3960     	 str r1,[r7]
 897:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   pbuf_cat(h, t);
 1614              	 .loc 1 897 0
 1615 000a 7868     	 ldr r0,[r7,#4]
 1616 000c 3968     	 ldr r1,[r7]
 1617 000e FFF7FEFF 	 bl pbuf_cat
 898:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* t is now referenced by h */
 899:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   pbuf_ref(t);
 1618              	 .loc 1 899 0
 1619 0012 3868     	 ldr r0,[r7]
 1620 0014 FFF7FEFF 	 bl pbuf_ref
 900:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t)
 901:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1621              	 .loc 1 901 0
 1622 0018 0837     	 adds r7,r7,#8
 1623              	.LCFI98:
 1624              	 .cfi_def_cfa_offset 8
 1625 001a BD46     	 mov sp,r7
 1626              	.LCFI99:
 1627              	 .cfi_def_cfa_register 13
 1628              	 
 1629 001c 80BD     	 pop {r7,pc}
 1630              	 .cfi_endproc
 1631              	.LFE151:
 1633 001e 00BF     	 .section .text.pbuf_dechain,"ax",%progbits
 1634              	 .align 2
 1635              	 .global pbuf_dechain
 1636              	 .thumb
 1637              	 .thumb_func
 1639              	pbuf_dechain:
 1640              	.LFB152:
 902:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 903:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 904:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Dechains the first pbuf from its succeeding pbufs in the chain.
 905:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 906:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Makes p->tot_len field equal to p->len.
 907:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to dechain
 908:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 909:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note May not be called on a packet queue.
 910:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 911:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** struct pbuf *
 912:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_dechain(struct pbuf *p)
 913:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1641              	 .loc 1 913 0
 1642              	 .cfi_startproc
 1643              	 
 1644              	 
 1645 0000 80B5     	 push {r7,lr}
 1646              	.LCFI100:
 1647              	 .cfi_def_cfa_offset 8
 1648              	 .cfi_offset 7,-8
 1649              	 .cfi_offset 14,-4
 1650 0002 84B0     	 sub sp,sp,#16
 1651              	.LCFI101:
 1652              	 .cfi_def_cfa_offset 24
 1653 0004 00AF     	 add r7,sp,#0
 1654              	.LCFI102:
 1655              	 .cfi_def_cfa_register 7
 1656 0006 7860     	 str r0,[r7,#4]
 914:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *q;
 915:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u8_t tail_gone = 1;
 1657              	 .loc 1 915 0
 1658 0008 0123     	 movs r3,#1
 1659 000a FB73     	 strb r3,[r7,#15]
 916:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* tail */
 917:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   q = p->next;
 1660              	 .loc 1 917 0
 1661 000c 7B68     	 ldr r3,[r7,#4]
 1662 000e 1B68     	 ldr r3,[r3]
 1663 0010 BB60     	 str r3,[r7,#8]
 918:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* pbuf has successor in chain? */
 919:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (q != NULL) {
 1664              	 .loc 1 919 0
 1665 0012 BB68     	 ldr r3,[r7,#8]
 1666 0014 002B     	 cmp r3,#0
 1667 0016 13D0     	 beq .L93
 920:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
 921:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
 922:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* enforce invariant if assertion is disabled */
 923:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     q->tot_len = (u16_t)(p->tot_len - p->len);
 1668              	 .loc 1 923 0
 1669 0018 7B68     	 ldr r3,[r7,#4]
 1670 001a 1A89     	 ldrh r2,[r3,#8]
 1671 001c 7B68     	 ldr r3,[r7,#4]
 1672 001e 5B89     	 ldrh r3,[r3,#10]
 1673 0020 D31A     	 subs r3,r2,r3
 1674 0022 9AB2     	 uxth r2,r3
 1675 0024 BB68     	 ldr r3,[r7,#8]
 1676 0026 1A81     	 strh r2,[r3,#8]
 924:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* decouple pbuf from remainder */
 925:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->next = NULL;
 1677              	 .loc 1 925 0
 1678 0028 7B68     	 ldr r3,[r7,#4]
 1679 002a 0022     	 movs r2,#0
 1680 002c 1A60     	 str r2,[r3]
 926:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* total length of pbuf p is its own length only */
 927:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->tot_len = p->len;
 1681              	 .loc 1 927 0
 1682 002e 7B68     	 ldr r3,[r7,#4]
 1683 0030 5A89     	 ldrh r2,[r3,#10]
 1684 0032 7B68     	 ldr r3,[r7,#4]
 1685 0034 1A81     	 strh r2,[r3,#8]
 928:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* q is no longer referenced by p, free it */
 929:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
 930:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     tail_gone = pbuf_free(q);
 1686              	 .loc 1 930 0
 1687 0036 B868     	 ldr r0,[r7,#8]
 1688 0038 FFF7FEFF 	 bl pbuf_free
 1689 003c 0346     	 mov r3,r0
 1690 003e FB73     	 strb r3,[r7,#15]
 1691              	.L93:
 931:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (tail_gone > 0) {
 932:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE,
 933:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                   ("pbuf_dechain: deallocated %p (as it is no longer referenced)\n", (void *)q));
 934:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 935:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* return remaining tail or NULL if deallocated */
 936:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 937:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
 938:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
 939:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return ((tail_gone > 0) ? NULL : q);
 1692              	 .loc 1 939 0
 1693 0040 FB7B     	 ldrb r3,[r7,#15]
 1694 0042 002B     	 cmp r3,#0
 1695 0044 01D1     	 bne .L94
 1696              	 .loc 1 939 0 is_stmt 0 discriminator 1
 1697 0046 BB68     	 ldr r3,[r7,#8]
 1698 0048 00E0     	 b .L95
 1699              	.L94:
 1700              	 .loc 1 939 0 discriminator 2
 1701 004a 0023     	 movs r3,#0
 1702              	.L95:
 940:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1703              	 .loc 1 940 0 is_stmt 1 discriminator 4
 1704 004c 1846     	 mov r0,r3
 1705 004e 1037     	 adds r7,r7,#16
 1706              	.LCFI103:
 1707              	 .cfi_def_cfa_offset 8
 1708 0050 BD46     	 mov sp,r7
 1709              	.LCFI104:
 1710              	 .cfi_def_cfa_register 13
 1711              	 
 1712 0052 80BD     	 pop {r7,pc}
 1713              	 .cfi_endproc
 1714              	.LFE152:
 1716              	 .section .text.pbuf_copy,"ax",%progbits
 1717              	 .align 2
 1718              	 .global pbuf_copy
 1719              	 .thumb
 1720              	 .thumb_func
 1722              	pbuf_copy:
 1723              	.LFB153:
 941:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 942:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 943:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
 944:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Create PBUF_RAM copies of pbufs.
 945:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 946:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Used to queue packets on behalf of the lwIP stack, such as
 947:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * ARP based queueing.
 948:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 949:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note You MUST explicitly use p = pbuf_take(p);
 950:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 951:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note Only one packet is copied, no packet queue!
 952:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 953:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p_to pbuf destination of the copy
 954:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p_from pbuf source of the copy
 955:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 956:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return ERR_OK if pbuf was copied
 957:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 958:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *                 enough to hold p_from
 959:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 960:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** err_t
 961:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 962:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1724              	 .loc 1 962 0
 1725              	 .cfi_startproc
 1726              	 
 1727              	 
 1728 0000 80B5     	 push {r7,lr}
 1729              	.LCFI105:
 1730              	 .cfi_def_cfa_offset 8
 1731              	 .cfi_offset 7,-8
 1732              	 .cfi_offset 14,-4
 1733 0002 86B0     	 sub sp,sp,#24
 1734              	.LCFI106:
 1735              	 .cfi_def_cfa_offset 32
 1736 0004 00AF     	 add r7,sp,#0
 1737              	.LCFI107:
 1738              	 .cfi_def_cfa_register 7
 1739 0006 7860     	 str r0,[r7,#4]
 1740 0008 3960     	 str r1,[r7]
 963:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   size_t offset_to = 0, offset_from = 0, len;
 1741              	 .loc 1 963 0
 1742 000a 0023     	 movs r3,#0
 1743 000c 7B61     	 str r3,[r7,#20]
 1744 000e 0023     	 movs r3,#0
 1745 0010 3B61     	 str r3,[r7,#16]
 964:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 965:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
 966:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****               (const void *)p_to, (const void *)p_from));
 967:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 968:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* is the target big enough to hold the source? */
 969:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 1746              	 .loc 1 969 0
 1747 0012 7B68     	 ldr r3,[r7,#4]
 1748 0014 002B     	 cmp r3,#0
 1749 0016 08D0     	 beq .L98
 1750              	 .loc 1 969 0 is_stmt 0 discriminator 2
 1751 0018 3B68     	 ldr r3,[r7]
 1752 001a 002B     	 cmp r3,#0
 1753 001c 05D0     	 beq .L98
 1754              	 .loc 1 969 0 discriminator 4
 1755 001e 7B68     	 ldr r3,[r7,#4]
 1756 0020 1A89     	 ldrh r2,[r3,#8]
 1757 0022 3B68     	 ldr r3,[r7]
 1758 0024 1B89     	 ldrh r3,[r3,#8]
 1759 0026 9A42     	 cmp r2,r3
 1760 0028 01D2     	 bcs .L99
 1761              	.L98:
 1762              	 .loc 1 969 0 discriminator 5
 1763 002a F023     	 movs r3,#240
 1764 002c 6DE0     	 b .L100
 1765              	.L99:
 970:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****              (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);
 971:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 972:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* iterate through pbuf chain */
 973:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   do {
 974:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* copy one part of the original chain */
 975:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 1766              	 .loc 1 975 0 is_stmt 1
 1767 002e 7B68     	 ldr r3,[r7,#4]
 1768 0030 5B89     	 ldrh r3,[r3,#10]
 1769 0032 1A46     	 mov r2,r3
 1770 0034 7B69     	 ldr r3,[r7,#20]
 1771 0036 D21A     	 subs r2,r2,r3
 1772 0038 3B68     	 ldr r3,[r7]
 1773 003a 5B89     	 ldrh r3,[r3,#10]
 1774 003c 1946     	 mov r1,r3
 1775 003e 3B69     	 ldr r3,[r7,#16]
 1776 0040 CB1A     	 subs r3,r1,r3
 1777 0042 9A42     	 cmp r2,r3
 1778 0044 06D3     	 bcc .L101
 976:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* complete current p_from fits into current p_to */
 977:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       len = p_from->len - offset_from;
 1779              	 .loc 1 977 0
 1780 0046 3B68     	 ldr r3,[r7]
 1781 0048 5B89     	 ldrh r3,[r3,#10]
 1782 004a 1A46     	 mov r2,r3
 1783 004c 3B69     	 ldr r3,[r7,#16]
 1784 004e D31A     	 subs r3,r2,r3
 1785 0050 FB60     	 str r3,[r7,#12]
 1786 0052 05E0     	 b .L102
 1787              	.L101:
 978:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     } else {
 979:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* current p_from does not fit into current p_to */
 980:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       len = p_to->len - offset_to;
 1788              	 .loc 1 980 0
 1789 0054 7B68     	 ldr r3,[r7,#4]
 1790 0056 5B89     	 ldrh r3,[r3,#10]
 1791 0058 1A46     	 mov r2,r3
 1792 005a 7B69     	 ldr r3,[r7,#20]
 1793 005c D31A     	 subs r3,r2,r3
 1794 005e FB60     	 str r3,[r7,#12]
 1795              	.L102:
 981:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 982:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 1796              	 .loc 1 982 0
 1797 0060 7B68     	 ldr r3,[r7,#4]
 1798 0062 5A68     	 ldr r2,[r3,#4]
 1799 0064 7B69     	 ldr r3,[r7,#20]
 1800 0066 D118     	 adds r1,r2,r3
 1801 0068 3B68     	 ldr r3,[r7]
 1802 006a 5A68     	 ldr r2,[r3,#4]
 1803 006c 3B69     	 ldr r3,[r7,#16]
 1804 006e 1344     	 add r3,r3,r2
 1805 0070 0846     	 mov r0,r1
 1806 0072 1946     	 mov r1,r3
 1807 0074 FA68     	 ldr r2,[r7,#12]
 1808 0076 FFF7FEFF 	 bl memcpy
 983:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     offset_to += len;
 1809              	 .loc 1 983 0
 1810 007a 7A69     	 ldr r2,[r7,#20]
 1811 007c FB68     	 ldr r3,[r7,#12]
 1812 007e 1344     	 add r3,r3,r2
 1813 0080 7B61     	 str r3,[r7,#20]
 984:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     offset_from += len;
 1814              	 .loc 1 984 0
 1815 0082 3A69     	 ldr r2,[r7,#16]
 1816 0084 FB68     	 ldr r3,[r7,#12]
 1817 0086 1344     	 add r3,r3,r2
 1818 0088 3B61     	 str r3,[r7,#16]
 985:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 986:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 987:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (offset_from >= p_from->len) {
 1819              	 .loc 1 987 0
 1820 008a 3B68     	 ldr r3,[r7]
 1821 008c 5B89     	 ldrh r3,[r3,#10]
 1822 008e 1A46     	 mov r2,r3
 1823 0090 3B69     	 ldr r3,[r7,#16]
 1824 0092 9A42     	 cmp r2,r3
 1825 0094 04D8     	 bhi .L103
 988:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* on to next p_from (if any) */
 989:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       offset_from = 0;
 1826              	 .loc 1 989 0
 1827 0096 0023     	 movs r3,#0
 1828 0098 3B61     	 str r3,[r7,#16]
 990:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       p_from = p_from->next;
 1829              	 .loc 1 990 0
 1830 009a 3B68     	 ldr r3,[r7]
 1831 009c 1B68     	 ldr r3,[r3]
 1832 009e 3B60     	 str r3,[r7]
 1833              	.L103:
 991:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 992:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (offset_to == p_to->len) {
 1834              	 .loc 1 992 0
 1835 00a0 7B68     	 ldr r3,[r7,#4]
 1836 00a2 5B89     	 ldrh r3,[r3,#10]
 1837 00a4 1A46     	 mov r2,r3
 1838 00a6 7B69     	 ldr r3,[r7,#20]
 1839 00a8 9A42     	 cmp r2,r3
 1840 00aa 0CD1     	 bne .L104
 993:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* on to next p_to (if any) */
 994:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       offset_to = 0;
 1841              	 .loc 1 994 0
 1842 00ac 0023     	 movs r3,#0
 1843 00ae 7B61     	 str r3,[r7,#20]
 995:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       p_to = p_to->next;
 1844              	 .loc 1 995 0
 1845 00b0 7B68     	 ldr r3,[r7,#4]
 1846 00b2 1B68     	 ldr r3,[r3]
 1847 00b4 7B60     	 str r3,[r7,#4]
 996:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 1848              	 .loc 1 996 0
 1849 00b6 7B68     	 ldr r3,[r7,#4]
 1850 00b8 002B     	 cmp r3,#0
 1851 00ba 04D1     	 bne .L104
 1852              	 .loc 1 996 0 is_stmt 0 discriminator 1
 1853 00bc 3B68     	 ldr r3,[r7]
 1854 00be 002B     	 cmp r3,#0
 1855 00c0 01D0     	 beq .L104
 1856              	 .loc 1 996 0 discriminator 2
 1857 00c2 F023     	 movs r3,#240
 1858 00c4 21E0     	 b .L100
 1859              	.L104:
 997:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 998:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 999:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 1860              	 .loc 1 999 0 is_stmt 1
 1861 00c6 3B68     	 ldr r3,[r7]
 1862 00c8 002B     	 cmp r3,#0
 1863 00ca 0BD0     	 beq .L105
 1864              	 .loc 1 999 0 is_stmt 0 discriminator 1
 1865 00cc 3B68     	 ldr r3,[r7]
 1866 00ce 5A89     	 ldrh r2,[r3,#10]
 1867 00d0 3B68     	 ldr r3,[r7]
 1868 00d2 1B89     	 ldrh r3,[r3,#8]
 1869 00d4 9A42     	 cmp r2,r3
 1870 00d6 05D1     	 bne .L105
1000:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* don't copy more than one packet! */
1001:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 1871              	 .loc 1 1001 0 is_stmt 1
 1872 00d8 3B68     	 ldr r3,[r7]
 1873 00da 1B68     	 ldr r3,[r3]
 1874 00dc 002B     	 cmp r3,#0
 1875 00de 01D0     	 beq .L105
 1876              	 .loc 1 1001 0 is_stmt 0 discriminator 1
 1877 00e0 FA23     	 movs r3,#250
 1878 00e2 12E0     	 b .L100
 1879              	.L105:
1002:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                  (p_from->next == NULL), return ERR_VAL;);
1003:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
1004:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 1880              	 .loc 1 1004 0 is_stmt 1
 1881 00e4 7B68     	 ldr r3,[r7,#4]
 1882 00e6 002B     	 cmp r3,#0
 1883 00e8 0BD0     	 beq .L106
 1884              	 .loc 1 1004 0 is_stmt 0 discriminator 1
 1885 00ea 7B68     	 ldr r3,[r7,#4]
 1886 00ec 5A89     	 ldrh r2,[r3,#10]
 1887 00ee 7B68     	 ldr r3,[r7,#4]
 1888 00f0 1B89     	 ldrh r3,[r3,#8]
 1889 00f2 9A42     	 cmp r2,r3
 1890 00f4 05D1     	 bne .L106
1005:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* don't copy more than one packet! */
1006:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 1891              	 .loc 1 1006 0 is_stmt 1
 1892 00f6 7B68     	 ldr r3,[r7,#4]
 1893 00f8 1B68     	 ldr r3,[r3]
 1894 00fa 002B     	 cmp r3,#0
 1895 00fc 01D0     	 beq .L106
 1896              	 .loc 1 1006 0 is_stmt 0 discriminator 1
 1897 00fe FA23     	 movs r3,#250
 1898 0100 03E0     	 b .L100
 1899              	.L106:
1007:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                  (p_to->next == NULL), return ERR_VAL;);
1008:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
1009:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   } while (p_from);
 1900              	 .loc 1 1009 0 is_stmt 1
 1901 0102 3B68     	 ldr r3,[r7]
 1902 0104 002B     	 cmp r3,#0
 1903 0106 92D1     	 bne .L99
1010:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
1011:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return ERR_OK;
 1904              	 .loc 1 1011 0
 1905 0108 0023     	 movs r3,#0
 1906              	.L100:
 1907 010a 5BB2     	 sxtb r3,r3
1012:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1908              	 .loc 1 1012 0
 1909 010c 1846     	 mov r0,r3
 1910 010e 1837     	 adds r7,r7,#24
 1911              	.LCFI108:
 1912              	 .cfi_def_cfa_offset 8
 1913 0110 BD46     	 mov sp,r7
 1914              	.LCFI109:
 1915              	 .cfi_def_cfa_register 13
 1916              	 
 1917 0112 80BD     	 pop {r7,pc}
 1918              	 .cfi_endproc
 1919              	.LFE153:
 1921              	 .section .text.pbuf_copy_partial,"ax",%progbits
 1922              	 .align 2
 1923              	 .global pbuf_copy_partial
 1924              	 .thumb
 1925              	 .thumb_func
 1927              	pbuf_copy_partial:
 1928              	.LFB154:
1013:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1014:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
1015:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
1016:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Copy (part of) the contents of a packet buffer
1017:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * to an application supplied buffer.
1018:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1019:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param buf the pbuf from which to copy data
1020:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param dataptr the application supplied buffer
1021:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param len length of data to copy (dataptr must be big enough). No more
1022:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * than buf->tot_len will be copied, irrespective of len
1023:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param offset offset into the packet buffer from where to begin copying len bytes
1024:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return the number of bytes copied, or 0 on failure
1025:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1026:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u16_t
1027:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
1028:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1929              	 .loc 1 1028 0
 1930              	 .cfi_startproc
 1931              	 
 1932              	 
 1933 0000 80B5     	 push {r7,lr}
 1934              	.LCFI110:
 1935              	 .cfi_def_cfa_offset 8
 1936              	 .cfi_offset 7,-8
 1937              	 .cfi_offset 14,-4
 1938 0002 88B0     	 sub sp,sp,#32
 1939              	.LCFI111:
 1940              	 .cfi_def_cfa_offset 40
 1941 0004 00AF     	 add r7,sp,#0
 1942              	.LCFI112:
 1943              	 .cfi_def_cfa_register 7
 1944 0006 F860     	 str r0,[r7,#12]
 1945 0008 B960     	 str r1,[r7,#8]
 1946 000a 1146     	 mov r1,r2
 1947 000c 1A46     	 mov r2,r3
 1948 000e 0B46     	 mov r3,r1
 1949 0010 FB80     	 strh r3,[r7,#6]
 1950 0012 1346     	 mov r3,r2
 1951 0014 BB80     	 strh r3,[r7,#4]
1029:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   const struct pbuf *p;
1030:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t left = 0;
 1952              	 .loc 1 1030 0
 1953 0016 0023     	 movs r3,#0
 1954 0018 7B83     	 strh r3,[r7,#26]
1031:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t buf_copy_len;
1032:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t copied_total = 0;
 1955              	 .loc 1 1032 0
 1956 001a 0023     	 movs r3,#0
 1957 001c FB82     	 strh r3,[r7,#22]
1033:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1034:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 1958              	 .loc 1 1034 0
 1959 001e FB68     	 ldr r3,[r7,#12]
 1960 0020 002B     	 cmp r3,#0
 1961 0022 01D1     	 bne .L108
 1962              	 .loc 1 1034 0 is_stmt 0 discriminator 1
 1963 0024 0023     	 movs r3,#0
 1964 0026 45E0     	 b .L109
 1965              	.L108:
1035:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 1966              	 .loc 1 1035 0 is_stmt 1
 1967 0028 BB68     	 ldr r3,[r7,#8]
 1968 002a 002B     	 cmp r3,#0
 1969 002c 01D1     	 bne .L110
 1970              	 .loc 1 1035 0 is_stmt 0 discriminator 1
 1971 002e 0023     	 movs r3,#0
 1972 0030 40E0     	 b .L109
 1973              	.L110:
1036:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1037:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. 
1038:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   for (p = buf; len != 0 && p != NULL; p = p->next) {
 1974              	 .loc 1 1038 0 is_stmt 1
 1975 0032 FB68     	 ldr r3,[r7,#12]
 1976 0034 FB61     	 str r3,[r7,#28]
 1977 0036 36E0     	 b .L111
 1978              	.L116:
1039:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if ((offset != 0) && (offset >= p->len)) {
 1979              	 .loc 1 1039 0
 1980 0038 BB88     	 ldrh r3,[r7,#4]
 1981 003a 002B     	 cmp r3,#0
 1982 003c 0AD0     	 beq .L112
 1983              	 .loc 1 1039 0 is_stmt 0 discriminator 1
 1984 003e FB69     	 ldr r3,[r7,#28]
 1985 0040 5B89     	 ldrh r3,[r3,#10]
 1986 0042 BA88     	 ldrh r2,[r7,#4]
 1987 0044 9A42     	 cmp r2,r3
 1988 0046 05D3     	 bcc .L112
1040:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* don't copy from this buffer -> on to the next */
1041:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       offset = (u16_t)(offset - p->len);
 1989              	 .loc 1 1041 0 is_stmt 1
 1990 0048 FB69     	 ldr r3,[r7,#28]
 1991 004a 5B89     	 ldrh r3,[r3,#10]
 1992 004c BA88     	 ldrh r2,[r7,#4]
 1993 004e D31A     	 subs r3,r2,r3
 1994 0050 BB80     	 strh r3,[r7,#4]
 1995 0052 25E0     	 b .L113
 1996              	.L112:
1042:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     } else {
1043:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* copy from this buffer. maybe only partially. */
1044:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       buf_copy_len = (u16_t)(p->len - offset);
 1997              	 .loc 1 1044 0
 1998 0054 FB69     	 ldr r3,[r7,#28]
 1999 0056 5A89     	 ldrh r2,[r3,#10]
 2000 0058 BB88     	 ldrh r3,[r7,#4]
 2001 005a D31A     	 subs r3,r2,r3
 2002 005c 3B83     	 strh r3,[r7,#24]
1045:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       if (buf_copy_len > len) {
 2003              	 .loc 1 1045 0
 2004 005e 3A8B     	 ldrh r2,[r7,#24]
 2005 0060 FB88     	 ldrh r3,[r7,#6]
 2006 0062 9A42     	 cmp r2,r3
 2007 0064 01D9     	 bls .L114
1046:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         buf_copy_len = len;
 2008              	 .loc 1 1046 0
 2009 0066 FB88     	 ldrh r3,[r7,#6]
 2010 0068 3B83     	 strh r3,[r7,#24]
 2011              	.L114:
1047:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       }
1048:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* copy the necessary parts of the buffer */
1049:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 2012              	 .loc 1 1049 0
 2013 006a 7B8B     	 ldrh r3,[r7,#26]
 2014 006c BA68     	 ldr r2,[r7,#8]
 2015 006e D118     	 adds r1,r2,r3
 2016 0070 FB69     	 ldr r3,[r7,#28]
 2017 0072 5A68     	 ldr r2,[r3,#4]
 2018 0074 BB88     	 ldrh r3,[r7,#4]
 2019 0076 1A44     	 add r2,r2,r3
 2020 0078 3B8B     	 ldrh r3,[r7,#24]
 2021 007a 0846     	 mov r0,r1
 2022 007c 1146     	 mov r1,r2
 2023 007e 1A46     	 mov r2,r3
 2024 0080 FFF7FEFF 	 bl memcpy
1050:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       copied_total = (u16_t)(copied_total + buf_copy_len);
 2025              	 .loc 1 1050 0
 2026 0084 FA8A     	 ldrh r2,[r7,#22]
 2027 0086 3B8B     	 ldrh r3,[r7,#24]
 2028 0088 1344     	 add r3,r3,r2
 2029 008a FB82     	 strh r3,[r7,#22]
1051:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       left = (u16_t)(left + buf_copy_len);
 2030              	 .loc 1 1051 0
 2031 008c 7A8B     	 ldrh r2,[r7,#26]
 2032 008e 3B8B     	 ldrh r3,[r7,#24]
 2033 0090 1344     	 add r3,r3,r2
 2034 0092 7B83     	 strh r3,[r7,#26]
1052:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       len = (u16_t)(len - buf_copy_len);
 2035              	 .loc 1 1052 0
 2036 0094 FA88     	 ldrh r2,[r7,#6]
 2037 0096 3B8B     	 ldrh r3,[r7,#24]
 2038 0098 D31A     	 subs r3,r2,r3
 2039 009a FB80     	 strh r3,[r7,#6]
1053:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       offset = 0;
 2040              	 .loc 1 1053 0
 2041 009c 0023     	 movs r3,#0
 2042 009e BB80     	 strh r3,[r7,#4]
 2043              	.L113:
1038:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if ((offset != 0) && (offset >= p->len)) {
 2044              	 .loc 1 1038 0 discriminator 2
 2045 00a0 FB69     	 ldr r3,[r7,#28]
 2046 00a2 1B68     	 ldr r3,[r3]
 2047 00a4 FB61     	 str r3,[r7,#28]
 2048              	.L111:
1038:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if ((offset != 0) && (offset >= p->len)) {
 2049              	 .loc 1 1038 0 is_stmt 0 discriminator 1
 2050 00a6 FB88     	 ldrh r3,[r7,#6]
 2051 00a8 002B     	 cmp r3,#0
 2052 00aa 02D0     	 beq .L115
1038:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if ((offset != 0) && (offset >= p->len)) {
 2053              	 .loc 1 1038 0 discriminator 3
 2054 00ac FB69     	 ldr r3,[r7,#28]
 2055 00ae 002B     	 cmp r3,#0
 2056 00b0 C2D1     	 bne .L116
 2057              	.L115:
1054:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
1055:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1056:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return copied_total;
 2058              	 .loc 1 1056 0 is_stmt 1
 2059 00b2 FB8A     	 ldrh r3,[r7,#22]
 2060              	.L109:
1057:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 2061              	 .loc 1 1057 0
 2062 00b4 1846     	 mov r0,r3
 2063 00b6 2037     	 adds r7,r7,#32
 2064              	.LCFI113:
 2065              	 .cfi_def_cfa_offset 8
 2066 00b8 BD46     	 mov sp,r7
 2067              	.LCFI114:
 2068              	 .cfi_def_cfa_register 13
 2069              	 
 2070 00ba 80BD     	 pop {r7,pc}
 2071              	 .cfi_endproc
 2072              	.LFE154:
 2074              	 .section .text.pbuf_get_contiguous,"ax",%progbits
 2075              	 .align 2
 2076              	 .global pbuf_get_contiguous
 2077              	 .thumb
 2078              	 .thumb_func
 2080              	pbuf_get_contiguous:
 2081              	.LFB155:
1058:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1059:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
1060:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
1061:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Get part of a pbuf's payload as contiguous memory. The returned memory is
1062:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * either a pointer into the pbuf's payload or, if split over multiple pbufs,
1063:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * a copy into the user-supplied buffer.
1064:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1065:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p the pbuf from which to copy data
1066:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param buffer the application supplied buffer
1067:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param bufsize size of the application supplied buffer
1068:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param len length of data to copy (dataptr must be big enough). No more
1069:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * than buf->tot_len will be copied, irrespective of len
1070:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param offset offset into the packet buffer from where to begin copying len bytes
1071:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return the number of bytes copied, or 0 on failure
1072:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1073:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** void *
1074:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_get_contiguous(const struct pbuf *p, void *buffer, size_t bufsize, u16_t len, u16_t offset)
1075:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 2082              	 .loc 1 1075 0
 2083              	 .cfi_startproc
 2084              	 
 2085              	 
 2086 0000 80B5     	 push {r7,lr}
 2087              	.LCFI115:
 2088              	 .cfi_def_cfa_offset 8
 2089              	 .cfi_offset 7,-8
 2090              	 .cfi_offset 14,-4
 2091 0002 86B0     	 sub sp,sp,#24
 2092              	.LCFI116:
 2093              	 .cfi_def_cfa_offset 32
 2094 0004 00AF     	 add r7,sp,#0
 2095              	.LCFI117:
 2096              	 .cfi_def_cfa_register 7
 2097 0006 F860     	 str r0,[r7,#12]
 2098 0008 B960     	 str r1,[r7,#8]
 2099 000a 7A60     	 str r2,[r7,#4]
 2100 000c 7B80     	 strh r3,[r7,#2]
1076:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   const struct pbuf *q;
1077:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t out_offset;
1078:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1079:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("pbuf_get_contiguous: invalid buf", (p != NULL), return NULL;);
 2101              	 .loc 1 1079 0
 2102 000e FB68     	 ldr r3,[r7,#12]
 2103 0010 002B     	 cmp r3,#0
 2104 0012 01D1     	 bne .L118
 2105              	 .loc 1 1079 0 is_stmt 0 discriminator 1
 2106 0014 0023     	 movs r3,#0
 2107 0016 34E0     	 b .L125
 2108              	.L118:
1080:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("pbuf_get_contiguous: invalid dataptr", (buffer != NULL), return NULL;);
 2109              	 .loc 1 1080 0 is_stmt 1
 2110 0018 BB68     	 ldr r3,[r7,#8]
 2111 001a 002B     	 cmp r3,#0
 2112 001c 01D1     	 bne .L120
 2113              	 .loc 1 1080 0 is_stmt 0 discriminator 1
 2114 001e 0023     	 movs r3,#0
 2115 0020 2FE0     	 b .L125
 2116              	.L120:
1081:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("pbuf_get_contiguous: invalid dataptr", (bufsize >= len), return NULL;);
 2117              	 .loc 1 1081 0 is_stmt 1
 2118 0022 7A88     	 ldrh r2,[r7,#2]
 2119 0024 7B68     	 ldr r3,[r7,#4]
 2120 0026 9A42     	 cmp r2,r3
 2121 0028 01D9     	 bls .L121
 2122              	 .loc 1 1081 0 is_stmt 0 discriminator 1
 2123 002a 0023     	 movs r3,#0
 2124 002c 29E0     	 b .L125
 2125              	.L121:
1082:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1083:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   q = pbuf_skip_const(p, offset, &out_offset);
 2126              	 .loc 1 1083 0 is_stmt 1
 2127 002e 3A8C     	 ldrh r2,[r7,#32]
 2128 0030 07F11203 	 add r3,r7,#18
 2129 0034 F868     	 ldr r0,[r7,#12]
 2130 0036 1146     	 mov r1,r2
 2131 0038 1A46     	 mov r2,r3
 2132 003a FFF7FEFF 	 bl pbuf_skip_const
 2133 003e 7861     	 str r0,[r7,#20]
1084:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (q != NULL) {
 2134              	 .loc 1 1084 0
 2135 0040 7B69     	 ldr r3,[r7,#20]
 2136 0042 002B     	 cmp r3,#0
 2137 0044 1CD0     	 beq .L122
1085:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (q->len >= (out_offset + len)) {
 2138              	 .loc 1 1085 0
 2139 0046 7B69     	 ldr r3,[r7,#20]
 2140 0048 5B89     	 ldrh r3,[r3,#10]
 2141 004a 1A46     	 mov r2,r3
 2142 004c 7B8A     	 ldrh r3,[r7,#18]
 2143 004e 1946     	 mov r1,r3
 2144 0050 7B88     	 ldrh r3,[r7,#2]
 2145 0052 0B44     	 add r3,r3,r1
 2146 0054 9A42     	 cmp r2,r3
 2147 0056 04DB     	 blt .L123
1086:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* all data in this pbuf, return zero-copy */
1087:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       return (u8_t *)q->payload + out_offset;
 2148              	 .loc 1 1087 0
 2149 0058 7B69     	 ldr r3,[r7,#20]
 2150 005a 5B68     	 ldr r3,[r3,#4]
 2151 005c 7A8A     	 ldrh r2,[r7,#18]
 2152 005e 1344     	 add r3,r3,r2
 2153 0060 0FE0     	 b .L125
 2154              	.L123:
1088:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
1089:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* need to copy */
1090:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (pbuf_copy_partial(q, buffer, len, out_offset) != len) {
 2155              	 .loc 1 1090 0
 2156 0062 7B8A     	 ldrh r3,[r7,#18]
 2157 0064 7A88     	 ldrh r2,[r7,#2]
 2158 0066 7869     	 ldr r0,[r7,#20]
 2159 0068 B968     	 ldr r1,[r7,#8]
 2160 006a FFF7FEFF 	 bl pbuf_copy_partial
 2161 006e 0346     	 mov r3,r0
 2162 0070 1A46     	 mov r2,r3
 2163 0072 7B88     	 ldrh r3,[r7,#2]
 2164 0074 9342     	 cmp r3,r2
 2165 0076 01D0     	 beq .L124
1091:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* copying failed: pbuf is too short */
1092:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       return NULL;
 2166              	 .loc 1 1092 0
 2167 0078 0023     	 movs r3,#0
 2168 007a 02E0     	 b .L125
 2169              	.L124:
1093:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
1094:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return buffer;
 2170              	 .loc 1 1094 0
 2171 007c BB68     	 ldr r3,[r7,#8]
 2172 007e 00E0     	 b .L125
 2173              	.L122:
1095:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1096:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* pbuf is too short (offset does not fit in) */
1097:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return NULL;
 2174              	 .loc 1 1097 0
 2175 0080 0023     	 movs r3,#0
 2176              	.L125:
1098:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 2177              	 .loc 1 1098 0 discriminator 1
 2178 0082 1846     	 mov r0,r3
 2179 0084 1837     	 adds r7,r7,#24
 2180              	.LCFI118:
 2181              	 .cfi_def_cfa_offset 8
 2182 0086 BD46     	 mov sp,r7
 2183              	.LCFI119:
 2184              	 .cfi_def_cfa_register 13
 2185              	 
 2186 0088 80BD     	 pop {r7,pc}
 2187              	 .cfi_endproc
 2188              	.LFE155:
 2190 008a 00BF     	 .section .text.pbuf_skip_const,"ax",%progbits
 2191              	 .align 2
 2192              	 .thumb
 2193              	 .thumb_func
 2195              	pbuf_skip_const:
 2196              	.LFB156:
1099:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1100:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
1101:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
1102:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * This method modifies a 'pbuf chain', so that its total length is
1103:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * smaller than 64K. The remainder of the original pbuf chain is stored
1104:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * in *rest.
1105:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * This function never creates new pbufs, but splits an existing chain
1106:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * in two parts. The tot_len of the modified packet queue will likely be
1107:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * smaller than 64K.
1108:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 'packet queues' are not supported by this function.
1109:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1110:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p the pbuf queue to be split
1111:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param rest pointer to store the remainder (after the first 64K)
1112:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1113:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** void pbuf_split_64k(struct pbuf *p, struct pbuf **rest)
1114:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
1115:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   *rest = NULL;
1116:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((p != NULL) && (p->next != NULL)) {
1117:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     u16_t tot_len_front = p->len;
1118:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     struct pbuf *i = p;
1119:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     struct pbuf *r = p->next;
1120:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1121:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* continue until the total length (summed up as u16_t) overflows */
1122:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     while ((r != NULL) && ((u16_t)(tot_len_front + r->len) >= tot_len_front)) {
1123:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       tot_len_front = (u16_t)(tot_len_front + r->len);
1124:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       i = r;
1125:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       r = r->next;
1126:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
1127:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* i now points to last packet of the first segment. Set next
1128:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****        pointer to NULL */
1129:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     i->next = NULL;
1130:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1131:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (r != NULL) {
1132:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* Update the tot_len field in the first part */
1133:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       for (i = p; i != NULL; i = i->next) {
1134:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         i->tot_len = (u16_t)(i->tot_len - r->tot_len);
1135:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         LWIP_ASSERT("tot_len/len mismatch in last pbuf",
1136:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                     (i->next != NULL) || (i->tot_len == i->len));
1137:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       }
1138:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       if (p->flags & PBUF_FLAG_TCP_FIN) {
1139:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         r->flags |= PBUF_FLAG_TCP_FIN;
1140:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       }
1141:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1142:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* tot_len field in rest does not need modifications */
1143:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* reference counters do not need modifications */
1144:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       *rest = r;
1145:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
1146:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1147:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
1148:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
1149:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1150:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /* Actual implementation of pbuf_skip() but returning const pointer... */
1151:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** static const struct pbuf *
1152:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
1153:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 2197              	 .loc 1 1153 0
 2198              	 .cfi_startproc
 2199              	 
 2200              	 
 2201              	 
 2202 0000 80B4     	 push {r7}
 2203              	.LCFI120:
 2204              	 .cfi_def_cfa_offset 4
 2205              	 .cfi_offset 7,-4
 2206 0002 87B0     	 sub sp,sp,#28
 2207              	.LCFI121:
 2208              	 .cfi_def_cfa_offset 32
 2209 0004 00AF     	 add r7,sp,#0
 2210              	.LCFI122:
 2211              	 .cfi_def_cfa_register 7
 2212 0006 F860     	 str r0,[r7,#12]
 2213 0008 0B46     	 mov r3,r1
 2214 000a 7A60     	 str r2,[r7,#4]
 2215 000c 7B81     	 strh r3,[r7,#10]
1154:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t offset_left = in_offset;
 2216              	 .loc 1 1154 0
 2217 000e 7B89     	 ldrh r3,[r7,#10]
 2218 0010 FB82     	 strh r3,[r7,#22]
1155:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   const struct pbuf *q = in;
 2219              	 .loc 1 1155 0
 2220 0012 FB68     	 ldr r3,[r7,#12]
 2221 0014 3B61     	 str r3,[r7,#16]
1156:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1157:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* get the correct pbuf */
1158:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   while ((q != NULL) && (q->len <= offset_left)) {
 2222              	 .loc 1 1158 0
 2223 0016 07E0     	 b .L127
 2224              	.L129:
1159:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     offset_left = (u16_t)(offset_left - q->len);
 2225              	 .loc 1 1159 0
 2226 0018 3B69     	 ldr r3,[r7,#16]
 2227 001a 5B89     	 ldrh r3,[r3,#10]
 2228 001c FA8A     	 ldrh r2,[r7,#22]
 2229 001e D31A     	 subs r3,r2,r3
 2230 0020 FB82     	 strh r3,[r7,#22]
1160:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     q = q->next;
 2231              	 .loc 1 1160 0
 2232 0022 3B69     	 ldr r3,[r7,#16]
 2233 0024 1B68     	 ldr r3,[r3]
 2234 0026 3B61     	 str r3,[r7,#16]
 2235              	.L127:
1158:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     offset_left = (u16_t)(offset_left - q->len);
 2236              	 .loc 1 1158 0
 2237 0028 3B69     	 ldr r3,[r7,#16]
 2238 002a 002B     	 cmp r3,#0
 2239 002c 04D0     	 beq .L128
1158:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     offset_left = (u16_t)(offset_left - q->len);
 2240              	 .loc 1 1158 0 is_stmt 0 discriminator 1
 2241 002e 3B69     	 ldr r3,[r7,#16]
 2242 0030 5B89     	 ldrh r3,[r3,#10]
 2243 0032 FA8A     	 ldrh r2,[r7,#22]
 2244 0034 9A42     	 cmp r2,r3
 2245 0036 EFD2     	 bcs .L129
 2246              	.L128:
1161:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1162:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (out_offset != NULL) {
 2247              	 .loc 1 1162 0 is_stmt 1
 2248 0038 7B68     	 ldr r3,[r7,#4]
 2249 003a 002B     	 cmp r3,#0
 2250 003c 02D0     	 beq .L130
1163:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     *out_offset = offset_left;
 2251              	 .loc 1 1163 0
 2252 003e 7B68     	 ldr r3,[r7,#4]
 2253 0040 FA8A     	 ldrh r2,[r7,#22]
 2254 0042 1A80     	 strh r2,[r3]
 2255              	.L130:
1164:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1165:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return q;
 2256              	 .loc 1 1165 0
 2257 0044 3B69     	 ldr r3,[r7,#16]
1166:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 2258              	 .loc 1 1166 0
 2259 0046 1846     	 mov r0,r3
 2260 0048 1C37     	 adds r7,r7,#28
 2261              	.LCFI123:
 2262              	 .cfi_def_cfa_offset 4
 2263 004a BD46     	 mov sp,r7
 2264              	.LCFI124:
 2265              	 .cfi_def_cfa_register 13
 2266              	 
 2267 004c 5DF8047B 	 ldr r7,[sp],#4
 2268              	.LCFI125:
 2269              	 .cfi_restore 7
 2270              	 .cfi_def_cfa_offset 0
 2271 0050 7047     	 bx lr
 2272              	 .cfi_endproc
 2273              	.LFE156:
 2275 0052 00BF     	 .section .text.pbuf_skip,"ax",%progbits
 2276              	 .align 2
 2277              	 .global pbuf_skip
 2278              	 .thumb
 2279              	 .thumb_func
 2281              	pbuf_skip:
 2282              	.LFB157:
1167:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1168:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
1169:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
1170:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Skip a number of bytes at the start of a pbuf
1171:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1172:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param in input pbuf
1173:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param in_offset offset to skip
1174:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param out_offset resulting offset in the returned pbuf
1175:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return the pbuf in the queue where the offset is
1176:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1177:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** struct pbuf *
1178:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
1179:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 2283              	 .loc 1 1179 0
 2284              	 .cfi_startproc
 2285              	 
 2286              	 
 2287 0000 80B5     	 push {r7,lr}
 2288              	.LCFI126:
 2289              	 .cfi_def_cfa_offset 8
 2290              	 .cfi_offset 7,-8
 2291              	 .cfi_offset 14,-4
 2292 0002 86B0     	 sub sp,sp,#24
 2293              	.LCFI127:
 2294              	 .cfi_def_cfa_offset 32
 2295 0004 00AF     	 add r7,sp,#0
 2296              	.LCFI128:
 2297              	 .cfi_def_cfa_register 7
 2298 0006 F860     	 str r0,[r7,#12]
 2299 0008 0B46     	 mov r3,r1
 2300 000a 7A60     	 str r2,[r7,#4]
 2301 000c 7B81     	 strh r3,[r7,#10]
1180:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 2302              	 .loc 1 1180 0
 2303 000e 7B89     	 ldrh r3,[r7,#10]
 2304 0010 F868     	 ldr r0,[r7,#12]
 2305 0012 1946     	 mov r1,r3
 2306 0014 7A68     	 ldr r2,[r7,#4]
 2307 0016 FFF7FEFF 	 bl pbuf_skip_const
 2308 001a 7861     	 str r0,[r7,#20]
1181:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return LWIP_CONST_CAST(struct pbuf *, out);
 2309              	 .loc 1 1181 0
 2310 001c 7B69     	 ldr r3,[r7,#20]
1182:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 2311              	 .loc 1 1182 0
 2312 001e 1846     	 mov r0,r3
 2313 0020 1837     	 adds r7,r7,#24
 2314              	.LCFI129:
 2315              	 .cfi_def_cfa_offset 8
 2316 0022 BD46     	 mov sp,r7
 2317              	.LCFI130:
 2318              	 .cfi_def_cfa_register 13
 2319              	 
 2320 0024 80BD     	 pop {r7,pc}
 2321              	 .cfi_endproc
 2322              	.LFE157:
 2324 0026 00BF     	 .section .text.pbuf_take,"ax",%progbits
 2325              	 .align 2
 2326              	 .global pbuf_take
 2327              	 .thumb
 2328              	 .thumb_func
 2330              	pbuf_take:
 2331              	.LFB158:
1183:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1184:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
1185:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
1186:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Copy application supplied data into a pbuf.
1187:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * This function can only be used to copy the equivalent of buf->tot_len data.
1188:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1189:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param buf pbuf to fill with data
1190:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param dataptr application supplied data buffer
1191:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param len length of the application supplied data buffer
1192:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1193:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
1194:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1195:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** err_t
1196:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
1197:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 2332              	 .loc 1 1197 0
 2333              	 .cfi_startproc
 2334              	 
 2335              	 
 2336 0000 80B5     	 push {r7,lr}
 2337              	.LCFI131:
 2338              	 .cfi_def_cfa_offset 8
 2339              	 .cfi_offset 7,-8
 2340              	 .cfi_offset 14,-4
 2341 0002 88B0     	 sub sp,sp,#32
 2342              	.LCFI132:
 2343              	 .cfi_def_cfa_offset 40
 2344 0004 00AF     	 add r7,sp,#0
 2345              	.LCFI133:
 2346              	 .cfi_def_cfa_register 7
 2347 0006 F860     	 str r0,[r7,#12]
 2348 0008 B960     	 str r1,[r7,#8]
 2349 000a 1346     	 mov r3,r2
 2350 000c FB80     	 strh r3,[r7,#6]
1198:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *p;
1199:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   size_t buf_copy_len;
1200:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   size_t total_copy_len = len;
 2351              	 .loc 1 1200 0
 2352 000e FB88     	 ldrh r3,[r7,#6]
 2353 0010 7B61     	 str r3,[r7,#20]
1201:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   size_t copied_total = 0;
 2354              	 .loc 1 1201 0
 2355 0012 0023     	 movs r3,#0
 2356 0014 3B61     	 str r3,[r7,#16]
1202:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1203:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 2357              	 .loc 1 1203 0
 2358 0016 FB68     	 ldr r3,[r7,#12]
 2359 0018 002B     	 cmp r3,#0
 2360 001a 01D1     	 bne .L135
 2361              	 .loc 1 1203 0 is_stmt 0 discriminator 1
 2362 001c F023     	 movs r3,#240
 2363 001e 3FE0     	 b .L136
 2364              	.L135:
1204:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 2365              	 .loc 1 1204 0 is_stmt 1
 2366 0020 BB68     	 ldr r3,[r7,#8]
 2367 0022 002B     	 cmp r3,#0
 2368 0024 01D1     	 bne .L137
 2369              	 .loc 1 1204 0 is_stmt 0 discriminator 1
 2370 0026 F023     	 movs r3,#240
 2371 0028 3AE0     	 b .L136
 2372              	.L137:
1205:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 2373              	 .loc 1 1205 0 is_stmt 1
 2374 002a FB68     	 ldr r3,[r7,#12]
 2375 002c 1B89     	 ldrh r3,[r3,#8]
 2376 002e FA88     	 ldrh r2,[r7,#6]
 2377 0030 9A42     	 cmp r2,r3
 2378 0032 01D9     	 bls .L138
 2379              	 .loc 1 1205 0 is_stmt 0 discriminator 1
 2380 0034 FF23     	 movs r3,#255
 2381 0036 33E0     	 b .L136
 2382              	.L138:
1206:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1207:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 2383              	 .loc 1 1207 0 is_stmt 1
 2384 0038 FB68     	 ldr r3,[r7,#12]
 2385 003a 002B     	 cmp r3,#0
 2386 003c 07D0     	 beq .L139
 2387              	 .loc 1 1207 0 is_stmt 0 discriminator 1
 2388 003e BB68     	 ldr r3,[r7,#8]
 2389 0040 002B     	 cmp r3,#0
 2390 0042 04D0     	 beq .L139
 2391              	 .loc 1 1207 0 discriminator 2
 2392 0044 FB68     	 ldr r3,[r7,#12]
 2393 0046 1B89     	 ldrh r3,[r3,#8]
 2394 0048 FA88     	 ldrh r2,[r7,#6]
 2395 004a 9A42     	 cmp r2,r3
 2396 004c 01D9     	 bls .L140
 2397              	.L139:
1208:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return ERR_ARG;
 2398              	 .loc 1 1208 0 is_stmt 1
 2399 004e F023     	 movs r3,#240
 2400 0050 26E0     	 b .L136
 2401              	.L140:
1209:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1210:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1211:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. 
1212:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   for (p = buf; total_copy_len != 0; p = p->next) {
 2402              	 .loc 1 1212 0
 2403 0052 FB68     	 ldr r3,[r7,#12]
 2404 0054 FB61     	 str r3,[r7,#28]
 2405 0056 1FE0     	 b .L141
 2406              	.L143:
1213:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
1214:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     buf_copy_len = total_copy_len;
 2407              	 .loc 1 1214 0
 2408 0058 7B69     	 ldr r3,[r7,#20]
 2409 005a BB61     	 str r3,[r7,#24]
1215:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (buf_copy_len > p->len) {
 2410              	 .loc 1 1215 0
 2411 005c FB69     	 ldr r3,[r7,#28]
 2412 005e 5B89     	 ldrh r3,[r3,#10]
 2413 0060 1A46     	 mov r2,r3
 2414 0062 BB69     	 ldr r3,[r7,#24]
 2415 0064 9A42     	 cmp r2,r3
 2416 0066 02D2     	 bcs .L142
1216:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* this pbuf cannot hold all remaining data */
1217:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       buf_copy_len = p->len;
 2417              	 .loc 1 1217 0
 2418 0068 FB69     	 ldr r3,[r7,#28]
 2419 006a 5B89     	 ldrh r3,[r3,#10]
 2420 006c BB61     	 str r3,[r7,#24]
 2421              	.L142:
1218:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
1219:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* copy the necessary parts of the buffer */
1220:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 2422              	 .loc 1 1220 0 discriminator 2
 2423 006e FB69     	 ldr r3,[r7,#28]
 2424 0070 5968     	 ldr r1,[r3,#4]
 2425 0072 BA68     	 ldr r2,[r7,#8]
 2426 0074 3B69     	 ldr r3,[r7,#16]
 2427 0076 1344     	 add r3,r3,r2
 2428 0078 0846     	 mov r0,r1
 2429 007a 1946     	 mov r1,r3
 2430 007c BA69     	 ldr r2,[r7,#24]
 2431 007e FFF7FEFF 	 bl memcpy
1221:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     total_copy_len -= buf_copy_len;
 2432              	 .loc 1 1221 0 discriminator 2
 2433 0082 7A69     	 ldr r2,[r7,#20]
 2434 0084 BB69     	 ldr r3,[r7,#24]
 2435 0086 D31A     	 subs r3,r2,r3
 2436 0088 7B61     	 str r3,[r7,#20]
1222:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     copied_total += buf_copy_len;
 2437              	 .loc 1 1222 0 discriminator 2
 2438 008a 3A69     	 ldr r2,[r7,#16]
 2439 008c BB69     	 ldr r3,[r7,#24]
 2440 008e 1344     	 add r3,r3,r2
 2441 0090 3B61     	 str r3,[r7,#16]
1212:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 2442              	 .loc 1 1212 0 discriminator 2
 2443 0092 FB69     	 ldr r3,[r7,#28]
 2444 0094 1B68     	 ldr r3,[r3]
 2445 0096 FB61     	 str r3,[r7,#28]
 2446              	.L141:
1212:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 2447              	 .loc 1 1212 0 is_stmt 0 discriminator 1
 2448 0098 7B69     	 ldr r3,[r7,#20]
 2449 009a 002B     	 cmp r3,#0
 2450 009c DCD1     	 bne .L143
1223:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1224:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
1225:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return ERR_OK;
 2451              	 .loc 1 1225 0 is_stmt 1
 2452 009e 0023     	 movs r3,#0
 2453              	.L136:
 2454 00a0 5BB2     	 sxtb r3,r3
1226:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 2455              	 .loc 1 1226 0
 2456 00a2 1846     	 mov r0,r3
 2457 00a4 2037     	 adds r7,r7,#32
 2458              	.LCFI134:
 2459              	 .cfi_def_cfa_offset 8
 2460 00a6 BD46     	 mov sp,r7
 2461              	.LCFI135:
 2462              	 .cfi_def_cfa_register 13
 2463              	 
 2464 00a8 80BD     	 pop {r7,pc}
 2465              	 .cfi_endproc
 2466              	.LFE158:
 2468 00aa 00BF     	 .section .text.pbuf_take_at,"ax",%progbits
 2469              	 .align 2
 2470              	 .global pbuf_take_at
 2471              	 .thumb
 2472              	 .thumb_func
 2474              	pbuf_take_at:
 2475              	.LFB159:
1227:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1228:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
1229:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
1230:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Same as pbuf_take() but puts data at an offset
1231:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1232:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param buf pbuf to fill with data
1233:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param dataptr application supplied data buffer
1234:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param len length of the application supplied data buffer
1235:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param offset offset in pbuf where to copy dataptr to
1236:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1237:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
1238:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1239:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** err_t
1240:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
1241:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 2476              	 .loc 1 1241 0
 2477              	 .cfi_startproc
 2478              	 
 2479              	 
 2480 0000 80B5     	 push {r7,lr}
 2481              	.LCFI136:
 2482              	 .cfi_def_cfa_offset 8
 2483              	 .cfi_offset 7,-8
 2484              	 .cfi_offset 14,-4
 2485 0002 88B0     	 sub sp,sp,#32
 2486              	.LCFI137:
 2487              	 .cfi_def_cfa_offset 40
 2488 0004 00AF     	 add r7,sp,#0
 2489              	.LCFI138:
 2490              	 .cfi_def_cfa_register 7
 2491 0006 F860     	 str r0,[r7,#12]
 2492 0008 B960     	 str r1,[r7,#8]
 2493 000a 1146     	 mov r1,r2
 2494 000c 1A46     	 mov r2,r3
 2495 000e 0B46     	 mov r3,r1
 2496 0010 FB80     	 strh r3,[r7,#6]
 2497 0012 1346     	 mov r3,r2
 2498 0014 BB80     	 strh r3,[r7,#4]
1242:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t target_offset;
1243:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 2499              	 .loc 1 1243 0
 2500 0016 BA88     	 ldrh r2,[r7,#4]
 2501 0018 07F11003 	 add r3,r7,#16
 2502 001c F868     	 ldr r0,[r7,#12]
 2503 001e 1146     	 mov r1,r2
 2504 0020 1A46     	 mov r2,r3
 2505 0022 FFF7FEFF 	 bl pbuf_skip
 2506 0026 F861     	 str r0,[r7,#28]
1244:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1245:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* return requested data if pbuf is OK */
1246:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 2507              	 .loc 1 1246 0
 2508 0028 FB69     	 ldr r3,[r7,#28]
 2509 002a 002B     	 cmp r3,#0
 2510 002c 3DD0     	 beq .L145
 2511              	 .loc 1 1246 0 is_stmt 0 discriminator 1
 2512 002e FB69     	 ldr r3,[r7,#28]
 2513 0030 1B89     	 ldrh r3,[r3,#8]
 2514 0032 1A46     	 mov r2,r3
 2515 0034 3B8A     	 ldrh r3,[r7,#16]
 2516 0036 1946     	 mov r1,r3
 2517 0038 FB88     	 ldrh r3,[r7,#6]
 2518 003a 0B44     	 add r3,r3,r1
 2519 003c 9A42     	 cmp r2,r3
 2520 003e 34DB     	 blt .L145
 2521              	.LBB7:
1247:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     u16_t remaining_len = len;
 2522              	 .loc 1 1247 0 is_stmt 1
 2523 0040 FB88     	 ldrh r3,[r7,#6]
 2524 0042 7B83     	 strh r3,[r7,#26]
1248:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     const u8_t *src_ptr = (const u8_t *)dataptr;
 2525              	 .loc 1 1248 0
 2526 0044 BB68     	 ldr r3,[r7,#8]
 2527 0046 7B61     	 str r3,[r7,#20]
1249:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* copy the part that goes into the first pbuf */
1250:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     u16_t first_copy_len;
1251:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
1252:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 2528              	 .loc 1 1252 0
 2529 0048 FB69     	 ldr r3,[r7,#28]
 2530 004a 5B89     	 ldrh r3,[r3,#10]
 2531 004c 1A46     	 mov r2,r3
 2532 004e 3B8A     	 ldrh r3,[r7,#16]
 2533 0050 D21A     	 subs r2,r2,r3
 2534 0052 FB88     	 ldrh r3,[r7,#6]
 2535 0054 9A42     	 cmp r2,r3
 2536 0056 05DA     	 bge .L146
 2537              	 .loc 1 1252 0 is_stmt 0 discriminator 1
 2538 0058 FB69     	 ldr r3,[r7,#28]
 2539 005a 5A89     	 ldrh r2,[r3,#10]
 2540 005c 3B8A     	 ldrh r3,[r7,#16]
 2541 005e D31A     	 subs r3,r2,r3
 2542 0060 9BB2     	 uxth r3,r3
 2543 0062 00E0     	 b .L147
 2544              	.L146:
 2545              	 .loc 1 1252 0 discriminator 2
 2546 0064 FB88     	 ldrh r3,[r7,#6]
 2547              	.L147:
 2548              	 .loc 1 1252 0 discriminator 4
 2549 0066 7B82     	 strh r3,[r7,#18]
1253:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 2550              	 .loc 1 1253 0 is_stmt 1 discriminator 4
 2551 0068 FB69     	 ldr r3,[r7,#28]
 2552 006a 5B68     	 ldr r3,[r3,#4]
 2553 006c 3A8A     	 ldrh r2,[r7,#16]
 2554 006e 1A44     	 add r2,r2,r3
 2555 0070 7B8A     	 ldrh r3,[r7,#18]
 2556 0072 1046     	 mov r0,r2
 2557 0074 B968     	 ldr r1,[r7,#8]
 2558 0076 1A46     	 mov r2,r3
 2559 0078 FFF7FEFF 	 bl memcpy
1254:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     remaining_len = (u16_t)(remaining_len - first_copy_len);
 2560              	 .loc 1 1254 0 discriminator 4
 2561 007c 7A8B     	 ldrh r2,[r7,#26]
 2562 007e 7B8A     	 ldrh r3,[r7,#18]
 2563 0080 D31A     	 subs r3,r2,r3
 2564 0082 7B83     	 strh r3,[r7,#26]
1255:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     src_ptr += first_copy_len;
 2565              	 .loc 1 1255 0 discriminator 4
 2566 0084 7B8A     	 ldrh r3,[r7,#18]
 2567 0086 7A69     	 ldr r2,[r7,#20]
 2568 0088 1344     	 add r3,r3,r2
 2569 008a 7B61     	 str r3,[r7,#20]
1256:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (remaining_len > 0) {
 2570              	 .loc 1 1256 0 discriminator 4
 2571 008c 7B8B     	 ldrh r3,[r7,#26]
 2572 008e 002B     	 cmp r3,#0
 2573 0090 09D0     	 beq .L148
1257:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       return pbuf_take(q->next, src_ptr, remaining_len);
 2574              	 .loc 1 1257 0
 2575 0092 FB69     	 ldr r3,[r7,#28]
 2576 0094 1A68     	 ldr r2,[r3]
 2577 0096 7B8B     	 ldrh r3,[r7,#26]
 2578 0098 1046     	 mov r0,r2
 2579 009a 7969     	 ldr r1,[r7,#20]
 2580 009c 1A46     	 mov r2,r3
 2581 009e FFF7FEFF 	 bl pbuf_take
 2582 00a2 0346     	 mov r3,r0
 2583 00a4 02E0     	 b .L150
 2584              	.L148:
1258:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
1259:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return ERR_OK;
 2585              	 .loc 1 1259 0
 2586 00a6 0023     	 movs r3,#0
 2587 00a8 00E0     	 b .L150
 2588              	.L145:
 2589              	.LBE7:
1260:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1261:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return ERR_MEM;
 2590              	 .loc 1 1261 0
 2591 00aa FF23     	 movs r3,#255
 2592              	.L150:
 2593 00ac 5BB2     	 sxtb r3,r3
1262:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 2594              	 .loc 1 1262 0 discriminator 1
 2595 00ae 1846     	 mov r0,r3
 2596 00b0 2037     	 adds r7,r7,#32
 2597              	.LCFI139:
 2598              	 .cfi_def_cfa_offset 8
 2599 00b2 BD46     	 mov sp,r7
 2600              	.LCFI140:
 2601              	 .cfi_def_cfa_register 13
 2602              	 
 2603 00b4 80BD     	 pop {r7,pc}
 2604              	 .cfi_endproc
 2605              	.LFE159:
 2607 00b6 00BF     	 .section .text.pbuf_coalesce,"ax",%progbits
 2608              	 .align 2
 2609              	 .global pbuf_coalesce
 2610              	 .thumb
 2611              	 .thumb_func
 2613              	pbuf_coalesce:
 2614              	.LFB160:
1263:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1264:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
1265:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
1266:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Creates a single pbuf out of a queue of pbufs.
1267:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1268:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @remark: Either the source pbuf 'p' is freed by this function or the original
1269:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *          pbuf 'p' is returned, therefore the caller has to check the result!
1270:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1271:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p the source pbuf
1272:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param layer pbuf_layer of the new pbuf
1273:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1274:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return a new, single pbuf (p->next is NULL)
1275:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *         or the old pbuf if allocation fails
1276:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1277:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** struct pbuf *
1278:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
1279:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 2615              	 .loc 1 1279 0
 2616              	 .cfi_startproc
 2617              	 
 2618              	 
 2619 0000 80B5     	 push {r7,lr}
 2620              	.LCFI141:
 2621              	 .cfi_def_cfa_offset 8
 2622              	 .cfi_offset 7,-8
 2623              	 .cfi_offset 14,-4
 2624 0002 84B0     	 sub sp,sp,#16
 2625              	.LCFI142:
 2626              	 .cfi_def_cfa_offset 24
 2627 0004 00AF     	 add r7,sp,#0
 2628              	.LCFI143:
 2629              	 .cfi_def_cfa_register 7
 2630 0006 7860     	 str r0,[r7,#4]
 2631 0008 0B46     	 mov r3,r1
 2632 000a FB70     	 strb r3,[r7,#3]
1280:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *q;
1281:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (p->next == NULL) {
 2633              	 .loc 1 1281 0
 2634 000c 7B68     	 ldr r3,[r7,#4]
 2635 000e 1B68     	 ldr r3,[r3]
 2636 0010 002B     	 cmp r3,#0
 2637 0012 01D1     	 bne .L152
1282:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return p;
 2638              	 .loc 1 1282 0
 2639 0014 7B68     	 ldr r3,[r7,#4]
 2640 0016 10E0     	 b .L153
 2641              	.L152:
1283:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1284:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   q = pbuf_clone(layer, PBUF_RAM, p);
 2642              	 .loc 1 1284 0
 2643 0018 FB78     	 ldrb r3,[r7,#3]
 2644 001a 1846     	 mov r0,r3
 2645 001c 4FF42071 	 mov r1,#640
 2646 0020 7A68     	 ldr r2,[r7,#4]
 2647 0022 FFF7FEFF 	 bl pbuf_clone
 2648 0026 F860     	 str r0,[r7,#12]
1285:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (q == NULL) {
 2649              	 .loc 1 1285 0
 2650 0028 FB68     	 ldr r3,[r7,#12]
 2651 002a 002B     	 cmp r3,#0
 2652 002c 01D1     	 bne .L154
1286:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* @todo: what do we do now? */
1287:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return p;
 2653              	 .loc 1 1287 0
 2654 002e 7B68     	 ldr r3,[r7,#4]
 2655 0030 03E0     	 b .L153
 2656              	.L154:
1288:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1289:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   pbuf_free(p);
 2657              	 .loc 1 1289 0
 2658 0032 7868     	 ldr r0,[r7,#4]
 2659 0034 FFF7FEFF 	 bl pbuf_free
1290:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return q;
 2660              	 .loc 1 1290 0
 2661 0038 FB68     	 ldr r3,[r7,#12]
 2662              	.L153:
1291:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 2663              	 .loc 1 1291 0
 2664 003a 1846     	 mov r0,r3
 2665 003c 1037     	 adds r7,r7,#16
 2666              	.LCFI144:
 2667              	 .cfi_def_cfa_offset 8
 2668 003e BD46     	 mov sp,r7
 2669              	.LCFI145:
 2670              	 .cfi_def_cfa_register 13
 2671              	 
 2672 0040 80BD     	 pop {r7,pc}
 2673              	 .cfi_endproc
 2674              	.LFE160:
 2676 0042 00BF     	 .section .text.pbuf_clone,"ax",%progbits
 2677              	 .align 2
 2678              	 .global pbuf_clone
 2679              	 .thumb
 2680              	 .thumb_func
 2682              	pbuf_clone:
 2683              	.LFB161:
1292:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1293:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
1294:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
1295:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Allocates a new pbuf of same length (via pbuf_alloc()) and copies the source
1296:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * pbuf into this new pbuf (using pbuf_copy()).
1297:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1298:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param layer pbuf_layer of the new pbuf
1299:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param type this parameter decides how and where the pbuf should be allocated
1300:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             (@see pbuf_alloc())
1301:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p the source pbuf
1302:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1303:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return a new pbuf or NULL if allocation fails
1304:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1305:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** struct pbuf *
1306:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
1307:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 2684              	 .loc 1 1307 0
 2685              	 .cfi_startproc
 2686              	 
 2687              	 
 2688 0000 80B5     	 push {r7,lr}
 2689              	.LCFI146:
 2690              	 .cfi_def_cfa_offset 8
 2691              	 .cfi_offset 7,-8
 2692              	 .cfi_offset 14,-4
 2693 0002 84B0     	 sub sp,sp,#16
 2694              	.LCFI147:
 2695              	 .cfi_def_cfa_offset 24
 2696 0004 00AF     	 add r7,sp,#0
 2697              	.LCFI148:
 2698              	 .cfi_def_cfa_register 7
 2699 0006 0346     	 mov r3,r0
 2700 0008 3A60     	 str r2,[r7]
 2701 000a FB71     	 strb r3,[r7,#7]
 2702 000c 0B46     	 mov r3,r1
 2703 000e BB80     	 strh r3,[r7,#4]
1308:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *q;
1309:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   err_t err;
1310:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   q = pbuf_alloc(layer, p->tot_len, type);
 2704              	 .loc 1 1310 0
 2705 0010 3B68     	 ldr r3,[r7]
 2706 0012 1A89     	 ldrh r2,[r3,#8]
 2707 0014 F979     	 ldrb r1,[r7,#7]
 2708 0016 BB88     	 ldrh r3,[r7,#4]
 2709 0018 0846     	 mov r0,r1
 2710 001a 1146     	 mov r1,r2
 2711 001c 1A46     	 mov r2,r3
 2712 001e FFF7FEFF 	 bl pbuf_alloc
 2713 0022 F860     	 str r0,[r7,#12]
1311:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (q == NULL) {
 2714              	 .loc 1 1311 0
 2715 0024 FB68     	 ldr r3,[r7,#12]
 2716 0026 002B     	 cmp r3,#0
 2717 0028 01D1     	 bne .L156
1312:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return NULL;
 2718              	 .loc 1 1312 0
 2719 002a 0023     	 movs r3,#0
 2720 002c 06E0     	 b .L157
 2721              	.L156:
1313:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1314:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   err = pbuf_copy(q, p);
 2722              	 .loc 1 1314 0
 2723 002e F868     	 ldr r0,[r7,#12]
 2724 0030 3968     	 ldr r1,[r7]
 2725 0032 FFF7FEFF 	 bl pbuf_copy
 2726 0036 0346     	 mov r3,r0
 2727 0038 FB72     	 strb r3,[r7,#11]
1315:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
1316:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
1317:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return q;
 2728              	 .loc 1 1317 0
 2729 003a FB68     	 ldr r3,[r7,#12]
 2730              	.L157:
1318:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 2731              	 .loc 1 1318 0
 2732 003c 1846     	 mov r0,r3
 2733 003e 1037     	 adds r7,r7,#16
 2734              	.LCFI149:
 2735              	 .cfi_def_cfa_offset 8
 2736 0040 BD46     	 mov sp,r7
 2737              	.LCFI150:
 2738              	 .cfi_def_cfa_register 13
 2739              	 
 2740 0042 80BD     	 pop {r7,pc}
 2741              	 .cfi_endproc
 2742              	.LFE161:
 2744              	 .section .text.pbuf_get_at,"ax",%progbits
 2745              	 .align 2
 2746              	 .global pbuf_get_at
 2747              	 .thumb
 2748              	 .thumb_func
 2750              	pbuf_get_at:
 2751              	.LFB162:
1319:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1320:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if LWIP_CHECKSUM_ON_COPY
1321:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
1322:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Copies data into a single pbuf (*not* into a pbuf queue!) and updates
1323:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * the checksum while copying
1324:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1325:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p the pbuf to copy data into
1326:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param start_offset offset of p->payload where to copy the data to
1327:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param dataptr data to copy into the pbuf
1328:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param len length of data to copy into the pbuf
1329:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param chksum pointer to the checksum which is updated
1330:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return ERR_OK if successful, another error if the data does not fit
1331:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *         within the (first) pbuf (no pbuf queues!)
1332:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1333:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** err_t
1334:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_fill_chksum(struct pbuf *p, u16_t start_offset, const void *dataptr,
1335:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                  u16_t len, u16_t *chksum)
1336:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
1337:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u32_t acc;
1338:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t copy_chksum;
1339:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   char *dst_ptr;
1340:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("p != NULL", p != NULL);
1341:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("dataptr != NULL", dataptr != NULL);
1342:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("chksum != NULL", chksum != NULL);
1343:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("len != 0", len != 0);
1344:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1345:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((start_offset >= p->len) || (start_offset + len > p->len)) {
1346:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return ERR_ARG;
1347:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1348:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1349:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   dst_ptr = ((char *)p->payload) + start_offset;
1350:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   copy_chksum = LWIP_CHKSUM_COPY(dst_ptr, dataptr, len);
1351:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((start_offset & 1) != 0) {
1352:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     copy_chksum = SWAP_BYTES_IN_WORD(copy_chksum);
1353:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1354:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   acc = *chksum;
1355:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   acc += copy_chksum;
1356:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   *chksum = FOLD_U32T(acc);
1357:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return ERR_OK;
1358:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
1359:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* LWIP_CHECKSUM_ON_COPY */
1360:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1361:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
1362:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
1363:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Get one byte from the specified position in a pbuf
1364:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * WARNING: returns zero for offset >= p->tot_len
1365:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1366:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to parse
1367:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param offset offset into p of the byte to return
1368:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
1369:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1370:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u8_t
1371:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_get_at(const struct pbuf *p, u16_t offset)
1372:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 2752              	 .loc 1 1372 0
 2753              	 .cfi_startproc
 2754              	 
 2755              	 
 2756 0000 80B5     	 push {r7,lr}
 2757              	.LCFI151:
 2758              	 .cfi_def_cfa_offset 8
 2759              	 .cfi_offset 7,-8
 2760              	 .cfi_offset 14,-4
 2761 0002 84B0     	 sub sp,sp,#16
 2762              	.LCFI152:
 2763              	 .cfi_def_cfa_offset 24
 2764 0004 00AF     	 add r7,sp,#0
 2765              	.LCFI153:
 2766              	 .cfi_def_cfa_register 7
 2767 0006 7860     	 str r0,[r7,#4]
 2768 0008 0B46     	 mov r3,r1
 2769 000a 7B80     	 strh r3,[r7,#2]
1373:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   int ret = pbuf_try_get_at(p, offset);
 2770              	 .loc 1 1373 0
 2771 000c 7B88     	 ldrh r3,[r7,#2]
 2772 000e 7868     	 ldr r0,[r7,#4]
 2773 0010 1946     	 mov r1,r3
 2774 0012 FFF7FEFF 	 bl pbuf_try_get_at
 2775 0016 F860     	 str r0,[r7,#12]
1374:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (ret >= 0) {
 2776              	 .loc 1 1374 0
 2777 0018 FB68     	 ldr r3,[r7,#12]
 2778 001a 002B     	 cmp r3,#0
 2779 001c 02DB     	 blt .L159
1375:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return (u8_t)ret;
 2780              	 .loc 1 1375 0
 2781 001e FB68     	 ldr r3,[r7,#12]
 2782 0020 DBB2     	 uxtb r3,r3
 2783 0022 00E0     	 b .L160
 2784              	.L159:
1376:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1377:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return 0;
 2785              	 .loc 1 1377 0
 2786 0024 0023     	 movs r3,#0
 2787              	.L160:
1378:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 2788              	 .loc 1 1378 0
 2789 0026 1846     	 mov r0,r3
 2790 0028 1037     	 adds r7,r7,#16
 2791              	.LCFI154:
 2792              	 .cfi_def_cfa_offset 8
 2793 002a BD46     	 mov sp,r7
 2794              	.LCFI155:
 2795              	 .cfi_def_cfa_register 13
 2796              	 
 2797 002c 80BD     	 pop {r7,pc}
 2798              	 .cfi_endproc
 2799              	.LFE162:
 2801 002e 00BF     	 .section .text.pbuf_try_get_at,"ax",%progbits
 2802              	 .align 2
 2803              	 .global pbuf_try_get_at
 2804              	 .thumb
 2805              	 .thumb_func
 2807              	pbuf_try_get_at:
 2808              	.LFB163:
1379:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1380:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
1381:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
1382:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Get one byte from the specified position in a pbuf
1383:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1384:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to parse
1385:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param offset offset into p of the byte to return
1386:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
1387:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1388:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** int
1389:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_try_get_at(const struct pbuf *p, u16_t offset)
1390:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 2809              	 .loc 1 1390 0
 2810              	 .cfi_startproc
 2811              	 
 2812              	 
 2813 0000 80B5     	 push {r7,lr}
 2814              	.LCFI156:
 2815              	 .cfi_def_cfa_offset 8
 2816              	 .cfi_offset 7,-8
 2817              	 .cfi_offset 14,-4
 2818 0002 84B0     	 sub sp,sp,#16
 2819              	.LCFI157:
 2820              	 .cfi_def_cfa_offset 24
 2821 0004 00AF     	 add r7,sp,#0
 2822              	.LCFI158:
 2823              	 .cfi_def_cfa_register 7
 2824 0006 7860     	 str r0,[r7,#4]
 2825 0008 0B46     	 mov r3,r1
 2826 000a 7B80     	 strh r3,[r7,#2]
1391:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t q_idx;
1392:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 2827              	 .loc 1 1392 0
 2828 000c 7A88     	 ldrh r2,[r7,#2]
 2829 000e 07F10A03 	 add r3,r7,#10
 2830 0012 7868     	 ldr r0,[r7,#4]
 2831 0014 1146     	 mov r1,r2
 2832 0016 1A46     	 mov r2,r3
 2833 0018 FFF7FEFF 	 bl pbuf_skip_const
 2834 001c F860     	 str r0,[r7,#12]
1393:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1394:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* return requested data if pbuf is OK */
1395:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((q != NULL) && (q->len > q_idx)) {
 2835              	 .loc 1 1395 0
 2836 001e FB68     	 ldr r3,[r7,#12]
 2837 0020 002B     	 cmp r3,#0
 2838 0022 0AD0     	 beq .L162
 2839              	 .loc 1 1395 0 is_stmt 0 discriminator 1
 2840 0024 FB68     	 ldr r3,[r7,#12]
 2841 0026 5A89     	 ldrh r2,[r3,#10]
 2842 0028 7B89     	 ldrh r3,[r7,#10]
 2843 002a 9A42     	 cmp r2,r3
 2844 002c 05D9     	 bls .L162
1396:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return ((u8_t *)q->payload)[q_idx];
 2845              	 .loc 1 1396 0 is_stmt 1
 2846 002e FB68     	 ldr r3,[r7,#12]
 2847 0030 5B68     	 ldr r3,[r3,#4]
 2848 0032 7A89     	 ldrh r2,[r7,#10]
 2849 0034 1344     	 add r3,r3,r2
 2850 0036 1B78     	 ldrb r3,[r3]
 2851 0038 01E0     	 b .L164
 2852              	.L162:
1397:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1398:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return -1;
 2853              	 .loc 1 1398 0
 2854 003a 4FF0FF33 	 mov r3,#-1
 2855              	.L164:
1399:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 2856              	 .loc 1 1399 0 discriminator 1
 2857 003e 1846     	 mov r0,r3
 2858 0040 1037     	 adds r7,r7,#16
 2859              	.LCFI159:
 2860              	 .cfi_def_cfa_offset 8
 2861 0042 BD46     	 mov sp,r7
 2862              	.LCFI160:
 2863              	 .cfi_def_cfa_register 13
 2864              	 
 2865 0044 80BD     	 pop {r7,pc}
 2866              	 .cfi_endproc
 2867              	.LFE163:
 2869 0046 00BF     	 .section .text.pbuf_put_at,"ax",%progbits
 2870              	 .align 2
 2871              	 .global pbuf_put_at
 2872              	 .thumb
 2873              	 .thumb_func
 2875              	pbuf_put_at:
 2876              	.LFB164:
1400:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1401:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
1402:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
1403:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Put one byte to the specified position in a pbuf
1404:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * WARNING: silently ignores offset >= p->tot_len
1405:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1406:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to fill
1407:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param offset offset into p of the byte to write
1408:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param data byte to write at an offset into p
1409:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1410:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** void
1411:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
1412:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 2877              	 .loc 1 1412 0
 2878              	 .cfi_startproc
 2879              	 
 2880              	 
 2881 0000 80B5     	 push {r7,lr}
 2882              	.LCFI161:
 2883              	 .cfi_def_cfa_offset 8
 2884              	 .cfi_offset 7,-8
 2885              	 .cfi_offset 14,-4
 2886 0002 84B0     	 sub sp,sp,#16
 2887              	.LCFI162:
 2888              	 .cfi_def_cfa_offset 24
 2889 0004 00AF     	 add r7,sp,#0
 2890              	.LCFI163:
 2891              	 .cfi_def_cfa_register 7
 2892 0006 7860     	 str r0,[r7,#4]
 2893 0008 0B46     	 mov r3,r1
 2894 000a 7B80     	 strh r3,[r7,#2]
 2895 000c 1346     	 mov r3,r2
 2896 000e 7B70     	 strb r3,[r7,#1]
1413:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t q_idx;
1414:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 2897              	 .loc 1 1414 0
 2898 0010 7A88     	 ldrh r2,[r7,#2]
 2899 0012 07F10A03 	 add r3,r7,#10
 2900 0016 7868     	 ldr r0,[r7,#4]
 2901 0018 1146     	 mov r1,r2
 2902 001a 1A46     	 mov r2,r3
 2903 001c FFF7FEFF 	 bl pbuf_skip
 2904 0020 F860     	 str r0,[r7,#12]
1415:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1416:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* write requested data if pbuf is OK */
1417:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((q != NULL) && (q->len > q_idx)) {
 2905              	 .loc 1 1417 0
 2906 0022 FB68     	 ldr r3,[r7,#12]
 2907 0024 002B     	 cmp r3,#0
 2908 0026 0AD0     	 beq .L165
 2909              	 .loc 1 1417 0 is_stmt 0 discriminator 1
 2910 0028 FB68     	 ldr r3,[r7,#12]
 2911 002a 5A89     	 ldrh r2,[r3,#10]
 2912 002c 7B89     	 ldrh r3,[r7,#10]
 2913 002e 9A42     	 cmp r2,r3
 2914 0030 05D9     	 bls .L165
1418:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     ((u8_t *)q->payload)[q_idx] = data;
 2915              	 .loc 1 1418 0 is_stmt 1
 2916 0032 FB68     	 ldr r3,[r7,#12]
 2917 0034 5B68     	 ldr r3,[r3,#4]
 2918 0036 7A89     	 ldrh r2,[r7,#10]
 2919 0038 1344     	 add r3,r3,r2
 2920 003a 7A78     	 ldrb r2,[r7,#1]
 2921 003c 1A70     	 strb r2,[r3]
 2922              	.L165:
1419:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1420:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 2923              	 .loc 1 1420 0
 2924 003e 1037     	 adds r7,r7,#16
 2925              	.LCFI164:
 2926              	 .cfi_def_cfa_offset 8
 2927 0040 BD46     	 mov sp,r7
 2928              	.LCFI165:
 2929              	 .cfi_def_cfa_register 13
 2930              	 
 2931 0042 80BD     	 pop {r7,pc}
 2932              	 .cfi_endproc
 2933              	.LFE164:
 2935              	 .section .text.pbuf_memcmp,"ax",%progbits
 2936              	 .align 2
 2937              	 .global pbuf_memcmp
 2938              	 .thumb
 2939              	 .thumb_func
 2941              	pbuf_memcmp:
 2942              	.LFB165:
1421:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1422:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
1423:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
1424:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Compare pbuf contents at specified offset with memory s2, both of length n
1425:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1426:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to compare
1427:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param offset offset into p at which to start comparing
1428:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param s2 buffer to compare
1429:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param n length of buffer to compare
1430:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return zero if equal, nonzero otherwise
1431:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *         (0xffff if p is too short, diffoffset+1 otherwise)
1432:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1433:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u16_t
1434:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
1435:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 2943              	 .loc 1 1435 0
 2944              	 .cfi_startproc
 2945              	 
 2946              	 
 2947 0000 80B5     	 push {r7,lr}
 2948              	.LCFI166:
 2949              	 .cfi_def_cfa_offset 8
 2950              	 .cfi_offset 7,-8
 2951              	 .cfi_offset 14,-4
 2952 0002 88B0     	 sub sp,sp,#32
 2953              	.LCFI167:
 2954              	 .cfi_def_cfa_offset 40
 2955 0004 00AF     	 add r7,sp,#0
 2956              	.LCFI168:
 2957              	 .cfi_def_cfa_register 7
 2958 0006 F860     	 str r0,[r7,#12]
 2959 0008 7A60     	 str r2,[r7,#4]
 2960 000a 1A46     	 mov r2,r3
 2961 000c 0B46     	 mov r3,r1
 2962 000e 7B81     	 strh r3,[r7,#10]
 2963 0010 1346     	 mov r3,r2
 2964 0012 3B81     	 strh r3,[r7,#8]
1436:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t start = offset;
 2965              	 .loc 1 1436 0
 2966 0014 7B89     	 ldrh r3,[r7,#10]
 2967 0016 FB83     	 strh r3,[r7,#30]
1437:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   const struct pbuf *q = p;
 2968              	 .loc 1 1437 0
 2969 0018 FB68     	 ldr r3,[r7,#12]
 2970 001a BB61     	 str r3,[r7,#24]
1438:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t i;
1439:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1440:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* pbuf long enough to perform check? */
1441:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (p->tot_len < (offset + n)) {
 2971              	 .loc 1 1441 0
 2972 001c FB68     	 ldr r3,[r7,#12]
 2973 001e 1B89     	 ldrh r3,[r3,#8]
 2974 0020 1946     	 mov r1,r3
 2975 0022 7A89     	 ldrh r2,[r7,#10]
 2976 0024 3B89     	 ldrh r3,[r7,#8]
 2977 0026 1344     	 add r3,r3,r2
 2978 0028 9942     	 cmp r1,r3
 2979 002a 02DA     	 bge .L168
1442:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return 0xffff;
 2980              	 .loc 1 1442 0
 2981 002c 4FF6FF73 	 movw r3,#65535
 2982 0030 3BE0     	 b .L169
 2983              	.L168:
1443:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1444:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1445:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
1446:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   while ((q != NULL) && (q->len <= start)) {
 2984              	 .loc 1 1446 0
 2985 0032 07E0     	 b .L170
 2986              	.L172:
1447:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     start = (u16_t)(start - q->len);
 2987              	 .loc 1 1447 0
 2988 0034 BB69     	 ldr r3,[r7,#24]
 2989 0036 5B89     	 ldrh r3,[r3,#10]
 2990 0038 FA8B     	 ldrh r2,[r7,#30]
 2991 003a D31A     	 subs r3,r2,r3
 2992 003c FB83     	 strh r3,[r7,#30]
1448:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     q = q->next;
 2993              	 .loc 1 1448 0
 2994 003e BB69     	 ldr r3,[r7,#24]
 2995 0040 1B68     	 ldr r3,[r3]
 2996 0042 BB61     	 str r3,[r7,#24]
 2997              	.L170:
1446:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     start = (u16_t)(start - q->len);
 2998              	 .loc 1 1446 0
 2999 0044 BB69     	 ldr r3,[r7,#24]
 3000 0046 002B     	 cmp r3,#0
 3001 0048 04D0     	 beq .L171
1446:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     start = (u16_t)(start - q->len);
 3002              	 .loc 1 1446 0 is_stmt 0 discriminator 1
 3003 004a BB69     	 ldr r3,[r7,#24]
 3004 004c 5B89     	 ldrh r3,[r3,#10]
 3005 004e FA8B     	 ldrh r2,[r7,#30]
 3006 0050 9A42     	 cmp r2,r3
 3007 0052 EFD2     	 bcs .L172
 3008              	.L171:
1449:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1450:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1451:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* return requested data if pbuf is OK */
1452:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   for (i = 0; i < n; i++) {
 3009              	 .loc 1 1452 0 is_stmt 1
 3010 0054 0023     	 movs r3,#0
 3011 0056 FB82     	 strh r3,[r7,#22]
 3012 0058 22E0     	 b .L173
 3013              	.L177:
 3014              	.LBB8:
1453:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
1454:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 3015              	 .loc 1 1454 0
 3016 005a FA8B     	 ldrh r2,[r7,#30]
 3017 005c FB8A     	 ldrh r3,[r7,#22]
 3018 005e 1344     	 add r3,r3,r2
 3019 0060 9BB2     	 uxth r3,r3
 3020 0062 B869     	 ldr r0,[r7,#24]
 3021 0064 1946     	 mov r1,r3
 3022 0066 FFF7FEFF 	 bl pbuf_get_at
 3023 006a 0346     	 mov r3,r0
 3024 006c 7B75     	 strb r3,[r7,#21]
1455:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     u8_t b = ((const u8_t *)s2)[i];
 3025              	 .loc 1 1455 0
 3026 006e FB8A     	 ldrh r3,[r7,#22]
 3027 0070 7A68     	 ldr r2,[r7,#4]
 3028 0072 1344     	 add r3,r3,r2
 3029 0074 1B78     	 ldrb r3,[r3]
 3030 0076 3B75     	 strb r3,[r7,#20]
1456:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (a != b) {
 3031              	 .loc 1 1456 0
 3032 0078 7A7D     	 ldrb r2,[r7,#21]
 3033 007a 3B7D     	 ldrb r3,[r7,#20]
 3034 007c 9A42     	 cmp r2,r3
 3035 007e 0CD0     	 beq .L174
1457:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 3036              	 .loc 1 1457 0
 3037 0080 FB8A     	 ldrh r3,[r7,#22]
 3038 0082 0133     	 adds r3,r3,#1
 3039 0084 4FF6FE72 	 movw r2,#65534
 3040 0088 9342     	 cmp r3,r2
 3041 008a 03DC     	 bgt .L175
 3042              	 .loc 1 1457 0 is_stmt 0 discriminator 1
 3043 008c FB8A     	 ldrh r3,[r7,#22]
 3044 008e 0133     	 adds r3,r3,#1
 3045 0090 9BB2     	 uxth r3,r3
 3046 0092 0AE0     	 b .L169
 3047              	.L175:
 3048              	 .loc 1 1457 0 discriminator 2
 3049 0094 4FF6FF73 	 movw r3,#65535
 3050 0098 07E0     	 b .L169
 3051              	.L174:
 3052              	.LBE8:
1452:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
 3053              	 .loc 1 1452 0 is_stmt 1 discriminator 2
 3054 009a FB8A     	 ldrh r3,[r7,#22]
 3055 009c 0133     	 adds r3,r3,#1
 3056 009e FB82     	 strh r3,[r7,#22]
 3057              	.L173:
1452:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
 3058              	 .loc 1 1452 0 is_stmt 0 discriminator 1
 3059 00a0 FA8A     	 ldrh r2,[r7,#22]
 3060 00a2 3B89     	 ldrh r3,[r7,#8]
 3061 00a4 9A42     	 cmp r2,r3
 3062 00a6 D8D3     	 bcc .L177
1458:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
1459:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1460:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return 0;
 3063              	 .loc 1 1460 0 is_stmt 1
 3064 00a8 0023     	 movs r3,#0
 3065              	.L169:
1461:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 3066              	 .loc 1 1461 0
 3067 00aa 1846     	 mov r0,r3
 3068 00ac 2037     	 adds r7,r7,#32
 3069              	.LCFI169:
 3070              	 .cfi_def_cfa_offset 8
 3071 00ae BD46     	 mov sp,r7
 3072              	.LCFI170:
 3073              	 .cfi_def_cfa_register 13
 3074              	 
 3075 00b0 80BD     	 pop {r7,pc}
 3076              	 .cfi_endproc
 3077              	.LFE165:
 3079 00b2 00BF     	 .section .text.pbuf_memfind,"ax",%progbits
 3080              	 .align 2
 3081              	 .global pbuf_memfind
 3082              	 .thumb
 3083              	 .thumb_func
 3085              	pbuf_memfind:
 3086              	.LFB166:
1462:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1463:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
1464:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @ingroup pbuf
1465:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Find occurrence of mem (with length mem_len) in pbuf p, starting at offset
1466:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * start_offset.
1467:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1468:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to search, maximum length is 0xFFFE since 0xFFFF is used as
1469:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *        return value 'not found'
1470:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param mem search for the contents of this buffer
1471:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param mem_len length of 'mem'
1472:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param start_offset offset into p at which to start searching
1473:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return 0xFFFF if substr was not found in p or the index where it was found
1474:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1475:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u16_t
1476:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
1477:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 3087              	 .loc 1 1477 0
 3088              	 .cfi_startproc
 3089              	 
 3090              	 
 3091 0000 80B5     	 push {r7,lr}
 3092              	.LCFI171:
 3093              	 .cfi_def_cfa_offset 8
 3094              	 .cfi_offset 7,-8
 3095              	 .cfi_offset 14,-4
 3096 0002 86B0     	 sub sp,sp,#24
 3097              	.LCFI172:
 3098              	 .cfi_def_cfa_offset 32
 3099 0004 00AF     	 add r7,sp,#0
 3100              	.LCFI173:
 3101              	 .cfi_def_cfa_register 7
 3102 0006 F860     	 str r0,[r7,#12]
 3103 0008 B960     	 str r1,[r7,#8]
 3104 000a 1146     	 mov r1,r2
 3105 000c 1A46     	 mov r2,r3
 3106 000e 0B46     	 mov r3,r1
 3107 0010 FB80     	 strh r3,[r7,#6]
 3108 0012 1346     	 mov r3,r2
 3109 0014 BB80     	 strh r3,[r7,#4]
1478:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t i;
1479:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 3110              	 .loc 1 1479 0
 3111 0016 FB68     	 ldr r3,[r7,#12]
 3112 0018 1A89     	 ldrh r2,[r3,#8]
 3113 001a FB88     	 ldrh r3,[r7,#6]
 3114 001c D31A     	 subs r3,r2,r3
 3115 001e BB82     	 strh r3,[r7,#20]
1480:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (p->tot_len >= mem_len + start_offset) {
 3116              	 .loc 1 1480 0
 3117 0020 FB68     	 ldr r3,[r7,#12]
 3118 0022 1B89     	 ldrh r3,[r3,#8]
 3119 0024 1946     	 mov r1,r3
 3120 0026 FA88     	 ldrh r2,[r7,#6]
 3121 0028 BB88     	 ldrh r3,[r7,#4]
 3122 002a 1344     	 add r3,r3,r2
 3123 002c 9942     	 cmp r1,r3
 3124 002e 17DB     	 blt .L179
1481:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     for (i = start_offset; i <= max_cmp_start; i++) {
 3125              	 .loc 1 1481 0
 3126 0030 BB88     	 ldrh r3,[r7,#4]
 3127 0032 FB82     	 strh r3,[r7,#22]
 3128 0034 10E0     	 b .L180
 3129              	.L183:
 3130              	.LBB9:
1482:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 3131              	 .loc 1 1482 0
 3132 0036 FA8A     	 ldrh r2,[r7,#22]
 3133 0038 FB88     	 ldrh r3,[r7,#6]
 3134 003a F868     	 ldr r0,[r7,#12]
 3135 003c 1146     	 mov r1,r2
 3136 003e BA68     	 ldr r2,[r7,#8]
 3137 0040 FFF7FEFF 	 bl pbuf_memcmp
 3138 0044 0346     	 mov r3,r0
 3139 0046 7B82     	 strh r3,[r7,#18]
1483:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       if (plus == 0) {
 3140              	 .loc 1 1483 0
 3141 0048 7B8A     	 ldrh r3,[r7,#18]
 3142 004a 002B     	 cmp r3,#0
 3143 004c 01D1     	 bne .L181
1484:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         return i;
 3144              	 .loc 1 1484 0
 3145 004e FB8A     	 ldrh r3,[r7,#22]
 3146 0050 08E0     	 b .L182
 3147              	.L181:
 3148              	.LBE9:
1481:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 3149              	 .loc 1 1481 0 discriminator 2
 3150 0052 FB8A     	 ldrh r3,[r7,#22]
 3151 0054 0133     	 adds r3,r3,#1
 3152 0056 FB82     	 strh r3,[r7,#22]
 3153              	.L180:
1481:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 3154              	 .loc 1 1481 0 is_stmt 0 discriminator 1
 3155 0058 FA8A     	 ldrh r2,[r7,#22]
 3156 005a BB8A     	 ldrh r3,[r7,#20]
 3157 005c 9A42     	 cmp r2,r3
 3158 005e EAD9     	 bls .L183
 3159              	.L179:
1485:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       }
1486:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
1487:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1488:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return 0xFFFF;
 3160              	 .loc 1 1488 0 is_stmt 1
 3161 0060 4FF6FF73 	 movw r3,#65535
 3162              	.L182:
1489:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 3163              	 .loc 1 1489 0
 3164 0064 1846     	 mov r0,r3
 3165 0066 1837     	 adds r7,r7,#24
 3166              	.LCFI174:
 3167              	 .cfi_def_cfa_offset 8
 3168 0068 BD46     	 mov sp,r7
 3169              	.LCFI175:
 3170              	 .cfi_def_cfa_register 13
 3171              	 
 3172 006a 80BD     	 pop {r7,pc}
 3173              	 .cfi_endproc
 3174              	.LFE166:
 3176              	 .section .text.pbuf_strstr,"ax",%progbits
 3177              	 .align 2
 3178              	 .global pbuf_strstr
 3179              	 .thumb
 3180              	 .thumb_func
 3182              	pbuf_strstr:
 3183              	.LFB167:
1490:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1491:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
1492:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Find occurrence of substr with length substr_len in pbuf p, start at offset
1493:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * start_offset
1494:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * WARNING: in contrast to strstr(), this one does not stop at the first \0 in
1495:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * the pbuf/source string!
1496:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1497:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to search, maximum length is 0xFFFE since 0xFFFF is used as
1498:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *        return value 'not found'
1499:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param substr string to search for in p, maximum length is 0xFFFE
1500:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return 0xFFFF if substr was not found in p or the index where it was found
1501:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1502:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u16_t
1503:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_strstr(const struct pbuf *p, const char *substr)
1504:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 3184              	 .loc 1 1504 0
 3185              	 .cfi_startproc
 3186              	 
 3187              	 
 3188 0000 80B5     	 push {r7,lr}
 3189              	.LCFI176:
 3190              	 .cfi_def_cfa_offset 8
 3191              	 .cfi_offset 7,-8
 3192              	 .cfi_offset 14,-4
 3193 0002 84B0     	 sub sp,sp,#16
 3194              	.LCFI177:
 3195              	 .cfi_def_cfa_offset 24
 3196 0004 00AF     	 add r7,sp,#0
 3197              	.LCFI178:
 3198              	 .cfi_def_cfa_register 7
 3199 0006 7860     	 str r0,[r7,#4]
 3200 0008 3960     	 str r1,[r7]
1505:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   size_t substr_len;
1506:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
 3201              	 .loc 1 1506 0
 3202 000a 3B68     	 ldr r3,[r7]
 3203 000c 002B     	 cmp r3,#0
 3204 000e 09D0     	 beq .L185
 3205              	 .loc 1 1506 0 is_stmt 0 discriminator 1
 3206 0010 3B68     	 ldr r3,[r7]
 3207 0012 1B78     	 ldrb r3,[r3]
 3208 0014 002B     	 cmp r3,#0
 3209 0016 05D0     	 beq .L185
 3210              	 .loc 1 1506 0 discriminator 2
 3211 0018 7B68     	 ldr r3,[r7,#4]
 3212 001a 1B89     	 ldrh r3,[r3,#8]
 3213 001c 4FF6FF72 	 movw r2,#65535
 3214 0020 9342     	 cmp r3,r2
 3215 0022 02D1     	 bne .L186
 3216              	.L185:
1507:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return 0xFFFF;
 3217              	 .loc 1 1507 0 is_stmt 1
 3218 0024 4FF6FF73 	 movw r3,#65535
 3219 0028 14E0     	 b .L187
 3220              	.L186:
1508:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1509:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   substr_len = strlen(substr);
 3221              	 .loc 1 1509 0
 3222 002a 3868     	 ldr r0,[r7]
 3223 002c FFF7FEFF 	 bl strlen
 3224 0030 F860     	 str r0,[r7,#12]
1510:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (substr_len >= 0xFFFF) {
 3225              	 .loc 1 1510 0
 3226 0032 FB68     	 ldr r3,[r7,#12]
 3227 0034 4FF6FE72 	 movw r2,#65534
 3228 0038 9342     	 cmp r3,r2
 3229 003a 02D9     	 bls .L188
1511:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return 0xFFFF;
 3230              	 .loc 1 1511 0
 3231 003c 4FF6FF73 	 movw r3,#65535
 3232 0040 08E0     	 b .L187
 3233              	.L188:
1512:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1513:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
 3234              	 .loc 1 1513 0
 3235 0042 FB68     	 ldr r3,[r7,#12]
 3236 0044 9BB2     	 uxth r3,r3
 3237 0046 7868     	 ldr r0,[r7,#4]
 3238 0048 3968     	 ldr r1,[r7]
 3239 004a 1A46     	 mov r2,r3
 3240 004c 0023     	 movs r3,#0
 3241 004e FFF7FEFF 	 bl pbuf_memfind
 3242 0052 0346     	 mov r3,r0
 3243              	.L187:
1514:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 3244              	 .loc 1 1514 0
 3245 0054 1846     	 mov r0,r3
 3246 0056 1037     	 adds r7,r7,#16
 3247              	.LCFI179:
 3248              	 .cfi_def_cfa_offset 8
 3249 0058 BD46     	 mov sp,r7
 3250              	.LCFI180:
 3251              	 .cfi_def_cfa_register 13
 3252              	 
 3253 005a 80BD     	 pop {r7,pc}
 3254              	 .cfi_endproc
 3255              	.LFE167:
 3257              	 .text
 3258              	.Letext0:
 3259              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 3260              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3261              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3262              	 .file 5 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/arch.h"
 3263              	 .file 6 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/err.h"
 3264              	 .file 7 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/pbuf.h"
 3265              	 .file 8 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/mem.h"
 3266              	 .file 9 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/memp.h"
 3267              	 .file 10 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/ip4_addr.h"
 3268              	 .file 11 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/ip_addr.h"
 3269              	 .file 12 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/tcpbase.h"
 3270              	 .file 13 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/tcp.h"
 3271              	 .file 14 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/priv/tcp_priv.h"
 3272              	 .file 15 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/prot/tcp.h"
 3273              	 .file 16 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Libraries/CMSIS/Include/cmsis_gcc.h"
 3274              	 .file 17 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pbuf.c
                            *COM*:00000001 pbuf_free_ooseq_pending
    {standard input}:21     .text.pbuf_free_ooseq:00000000 $t
    {standard input}:26     .text.pbuf_free_ooseq:00000000 pbuf_free_ooseq
    {standard input}:87     .text.pbuf_free_ooseq:00000038 $d
    {standard input}:93     .text.pbuf_pool_is_empty:00000000 $t
    {standard input}:97     .text.pbuf_pool_is_empty:00000000 pbuf_pool_is_empty
    {standard input}:128    .text.pbuf_pool_is_empty:00000014 $d
    {standard input}:133    .text.pbuf_init_alloced_pbuf:00000000 $t
    {standard input}:137    .text.pbuf_init_alloced_pbuf:00000000 pbuf_init_alloced_pbuf
    {standard input}:212    .text.pbuf_alloc:00000000 $t
    {standard input}:217    .text.pbuf_alloc:00000000 pbuf_alloc
    {standard input}:467    .text.pbuf_alloc_reference:00000000 pbuf_alloc_reference
    {standard input}:1266   .text.pbuf_free:00000000 pbuf_free
    {standard input}:462    .text.pbuf_alloc_reference:00000000 $t
    {standard input}:530    .text.pbuf_realloc:00000000 $t
    {standard input}:535    .text.pbuf_realloc:00000000 pbuf_realloc
    {standard input}:669    .text.pbuf_add_header_impl:00000000 $t
    {standard input}:673    .text.pbuf_add_header_impl:00000000 pbuf_add_header_impl
    {standard input}:815    .text.pbuf_add_header:00000000 $t
    {standard input}:820    .text.pbuf_add_header:00000000 pbuf_add_header
    {standard input}:859    .text.pbuf_add_header_force:00000000 $t
    {standard input}:864    .text.pbuf_add_header_force:00000000 pbuf_add_header_force
    {standard input}:903    .text.pbuf_remove_header:00000000 $t
    {standard input}:908    .text.pbuf_remove_header:00000000 pbuf_remove_header
    {standard input}:1009   .text.pbuf_header_impl:00000000 $t
    {standard input}:1013   .text.pbuf_header_impl:00000000 pbuf_header_impl
    {standard input}:1071   .text.pbuf_header:00000000 $t
    {standard input}:1076   .text.pbuf_header:00000000 pbuf_header
    {standard input}:1117   .text.pbuf_header_force:00000000 $t
    {standard input}:1122   .text.pbuf_header_force:00000000 pbuf_header_force
    {standard input}:1163   .text.pbuf_free_header:00000000 $t
    {standard input}:1168   .text.pbuf_free_header:00000000 pbuf_free_header
    {standard input}:1261   .text.pbuf_free:00000000 $t
    {standard input}:1385   .text.pbuf_clen:00000000 $t
    {standard input}:1390   .text.pbuf_clen:00000000 pbuf_clen
    {standard input}:1447   .text.pbuf_ref:00000000 $t
    {standard input}:1452   .text.pbuf_ref:00000000 pbuf_ref
    {standard input}:1499   .text.pbuf_cat:00000000 $t
    {standard input}:1504   .text.pbuf_cat:00000000 pbuf_cat
    {standard input}:1590   .text.pbuf_chain:00000000 $t
    {standard input}:1595   .text.pbuf_chain:00000000 pbuf_chain
    {standard input}:1634   .text.pbuf_dechain:00000000 $t
    {standard input}:1639   .text.pbuf_dechain:00000000 pbuf_dechain
    {standard input}:1717   .text.pbuf_copy:00000000 $t
    {standard input}:1722   .text.pbuf_copy:00000000 pbuf_copy
    {standard input}:1922   .text.pbuf_copy_partial:00000000 $t
    {standard input}:1927   .text.pbuf_copy_partial:00000000 pbuf_copy_partial
    {standard input}:2075   .text.pbuf_get_contiguous:00000000 $t
    {standard input}:2080   .text.pbuf_get_contiguous:00000000 pbuf_get_contiguous
    {standard input}:2195   .text.pbuf_skip_const:00000000 pbuf_skip_const
    {standard input}:2191   .text.pbuf_skip_const:00000000 $t
    {standard input}:2276   .text.pbuf_skip:00000000 $t
    {standard input}:2281   .text.pbuf_skip:00000000 pbuf_skip
    {standard input}:2325   .text.pbuf_take:00000000 $t
    {standard input}:2330   .text.pbuf_take:00000000 pbuf_take
    {standard input}:2469   .text.pbuf_take_at:00000000 $t
    {standard input}:2474   .text.pbuf_take_at:00000000 pbuf_take_at
    {standard input}:2608   .text.pbuf_coalesce:00000000 $t
    {standard input}:2613   .text.pbuf_coalesce:00000000 pbuf_coalesce
    {standard input}:2682   .text.pbuf_clone:00000000 pbuf_clone
    {standard input}:2677   .text.pbuf_clone:00000000 $t
    {standard input}:2745   .text.pbuf_get_at:00000000 $t
    {standard input}:2750   .text.pbuf_get_at:00000000 pbuf_get_at
    {standard input}:2807   .text.pbuf_try_get_at:00000000 pbuf_try_get_at
    {standard input}:2802   .text.pbuf_try_get_at:00000000 $t
    {standard input}:2870   .text.pbuf_put_at:00000000 $t
    {standard input}:2875   .text.pbuf_put_at:00000000 pbuf_put_at
    {standard input}:2936   .text.pbuf_memcmp:00000000 $t
    {standard input}:2941   .text.pbuf_memcmp:00000000 pbuf_memcmp
    {standard input}:3080   .text.pbuf_memfind:00000000 $t
    {standard input}:3085   .text.pbuf_memfind:00000000 pbuf_memfind
    {standard input}:3177   .text.pbuf_strstr:00000000 $t
    {standard input}:3182   .text.pbuf_strstr:00000000 pbuf_strstr
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
tcp_free_ooseq
tcp_active_pcbs
memp_malloc
mem_malloc
mem_trim
memp_free
mem_free
memcpy
strlen
