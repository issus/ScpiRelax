   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "tcp.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .rodata
  20              	 .align 2
  21              	.LC0:
  22 0000 434C4F53 	 .ascii "CLOSED\000"
  22      454400
  23 0007 00       	 .align 2
  24              	.LC1:
  25 0008 4C495354 	 .ascii "LISTEN\000"
  25      454E00
  26 000f 00       	 .align 2
  27              	.LC2:
  28 0010 53594E5F 	 .ascii "SYN_SENT\000"
  28      53454E54 
  28      00
  29 0019 000000   	 .align 2
  30              	.LC3:
  31 001c 53594E5F 	 .ascii "SYN_RCVD\000"
  31      52435644 
  31      00
  32 0025 000000   	 .align 2
  33              	.LC4:
  34 0028 45535441 	 .ascii "ESTABLISHED\000"
  34      424C4953 
  34      48454400 
  35              	 .align 2
  36              	.LC5:
  37 0034 46494E5F 	 .ascii "FIN_WAIT_1\000"
  37      57414954 
  37      5F3100
  38 003f 00       	 .align 2
  39              	.LC6:
  40 0040 46494E5F 	 .ascii "FIN_WAIT_2\000"
  40      57414954 
  40      5F3200
  41 004b 00       	 .align 2
  42              	.LC7:
  43 004c 434C4F53 	 .ascii "CLOSE_WAIT\000"
  43      455F5741 
  43      495400
  44 0057 00       	 .align 2
  45              	.LC8:
  46 0058 434C4F53 	 .ascii "CLOSING\000"
  46      494E4700 
  47              	 .align 2
  48              	.LC9:
  49 0060 4C415354 	 .ascii "LAST_ACK\000"
  49      5F41434B 
  49      00
  50 0069 000000   	 .align 2
  51              	.LC10:
  52 006c 54494D45 	 .ascii "TIME_WAIT\000"
  52      5F574149 
  52      5400
  53 0076 0000     	 .section .rodata.tcp_state_str,"a",%progbits
  54              	 .align 2
  57              	tcp_state_str:
  58 0000 00000000 	 .word .LC0
  59 0004 08000000 	 .word .LC1
  60 0008 10000000 	 .word .LC2
  61 000c 1C000000 	 .word .LC3
  62 0010 28000000 	 .word .LC4
  63 0014 34000000 	 .word .LC5
  64 0018 40000000 	 .word .LC6
  65 001c 4C000000 	 .word .LC7
  66 0020 58000000 	 .word .LC8
  67 0024 60000000 	 .word .LC9
  68 0028 6C000000 	 .word .LC10
  69              	 .section .data.tcp_port,"aw",%progbits
  70              	 .align 1
  73              	tcp_port:
  74 0000 00C0     	 .short -16384
  75              	 .comm tcp_ticks,4,4
  76              	 .section .rodata.tcp_backoff,"a",%progbits
  77              	 .align 2
  80              	tcp_backoff:
  81 0000 01       	 .byte 1
  82 0001 02       	 .byte 2
  83 0002 03       	 .byte 3
  84 0003 04       	 .byte 4
  85 0004 05       	 .byte 5
  86 0005 06       	 .byte 6
  87 0006 07       	 .byte 7
  88 0007 07       	 .byte 7
  89 0008 07       	 .byte 7
  90 0009 07       	 .byte 7
  91 000a 07       	 .byte 7
  92 000b 07       	 .byte 7
  93 000c 07       	 .byte 7
  94 000d 000000   	 .section .rodata.tcp_persist_backoff,"a",%progbits
  95              	 .align 2
  98              	tcp_persist_backoff:
  99 0000 03       	 .byte 3
 100 0001 06       	 .byte 6
 101 0002 0C       	 .byte 12
 102 0003 18       	 .byte 24
 103 0004 30       	 .byte 48
 104 0005 60       	 .byte 96
 105 0006 78       	 .byte 120
 106              	 .comm tcp_bound_pcbs,4,4
 107              	 .comm tcp_listen_pcbs,4,4
 108              	 .comm tcp_active_pcbs,4,4
 109              	 .comm tcp_tw_pcbs,4,4
 110              	 .global tcp_pcb_lists
 111 0007 00       	 .section .rodata.tcp_pcb_lists,"a",%progbits
 112              	 .align 2
 115              	tcp_pcb_lists:
 116 0000 00000000 	 .word tcp_listen_pcbs
 117 0004 00000000 	 .word tcp_bound_pcbs
 118 0008 00000000 	 .word tcp_active_pcbs
 119 000c 00000000 	 .word tcp_tw_pcbs
 120              	 .comm tcp_active_pcbs_changed,1,1
 121              	 .section .bss.tcp_timer,"aw",%nobits
 124              	tcp_timer:
 125 0000 00       	 .space 1
 126              	 .section .bss.tcp_timer_ctr,"aw",%nobits
 129              	tcp_timer_ctr:
 130 0000 00       	 .space 1
 131              	 .section .text.tcp_init,"ax",%progbits
 132              	 .align 2
 133              	 .global tcp_init
 134              	 .thumb
 135              	 .thumb_func
 137              	tcp_init:
 138              	.LFB133:
 139              	 .file 1 "../Dave/Generated/ETH_LWIP/lwip/core/tcp.c"
   1:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
   2:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @file
   3:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Transmission Control Protocol for IP
   4:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * See also @ref tcp_raw
   5:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
   6:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @defgroup tcp_raw TCP
   7:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup callbackstyle_api
   8:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Transmission Control Protocol for IP\n
   9:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @see @ref api
  10:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
  11:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Common functions for the TCP implementation, such as functions
  12:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * for manipulating the data structures and the TCP timer functions. TCP functions
  13:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * related to input and output is found in tcp_in.c and tcp_out.c respectively.\n
  14:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * 
  15:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * TCP connection setup
  16:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * --------------------
  17:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * The functions used for setting up connections is similar to that of
  18:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * the sequential API and of the BSD socket API. A new TCP connection
  19:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * identifier (i.e., a protocol control block - PCB) is created with the
  20:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * tcp_new() function. This PCB can then be either set to listen for new
  21:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * incoming connections or be explicitly connected to another host.
  22:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * - tcp_new()
  23:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * - tcp_bind()
  24:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * - tcp_listen() and tcp_listen_with_backlog()
  25:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * - tcp_accept()
  26:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * - tcp_connect()
  27:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * 
  28:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Sending TCP data
  29:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * ----------------
  30:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * TCP data is sent by enqueueing the data with a call to tcp_write() and
  31:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * triggering to send by calling tcp_output(). When the data is successfully
  32:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * transmitted to the remote host, the application will be notified with a
  33:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * call to a specified callback function.
  34:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * - tcp_write()
  35:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * - tcp_output()
  36:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * - tcp_sent()
  37:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * 
  38:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Receiving TCP data
  39:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * ------------------
  40:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * TCP data reception is callback based - an application specified
  41:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * callback function is called when new data arrives. When the
  42:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * application has taken the data, it has to call the tcp_recved()
  43:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * function to indicate that TCP can advertise increase the receive
  44:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * window.
  45:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * - tcp_recv()
  46:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * - tcp_recved()
  47:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * 
  48:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Application polling
  49:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * -------------------
  50:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * When a connection is idle (i.e., no data is either transmitted or
  51:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * received), lwIP will repeatedly poll the application by calling a
  52:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * specified callback function. This can be used either as a watchdog
  53:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * timer for killing connections that have stayed idle for too long, or
  54:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * as a method of waiting for memory to become available. For instance,
  55:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * if a call to tcp_write() has failed because memory wasn't available,
  56:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * the application may use the polling functionality to call tcp_write()
  57:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * again when the connection has been idle for a while.
  58:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * - tcp_poll()
  59:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
  60:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Closing and aborting connections
  61:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * --------------------------------
  62:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * - tcp_close()
  63:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * - tcp_abort()
  64:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * - tcp_err()
  65:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * 
  66:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
  67:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
  68:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /*
  69:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
  70:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * All rights reserved.
  71:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
  72:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Redistribution and use in source and binary forms, with or without modification,
  73:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * are permitted provided that the following conditions are met:
  74:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
  75:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  76:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *    this list of conditions and the following disclaimer.
  77:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  78:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *    this list of conditions and the following disclaimer in the documentation
  79:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *    and/or other materials provided with the distribution.
  80:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * 3. The name of the author may not be used to endorse or promote products
  81:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *    derived from this software without specific prior written permission.
  82:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
  83:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  84:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  85:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  86:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  87:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  88:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  89:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  90:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  91:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  92:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * OF SUCH DAMAGE.
  93:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
  94:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * This file is part of the lwIP TCP/IP stack.
  95:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
  96:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Author: Adam Dunkels <adam@sics.se>
  97:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
  98:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
  99:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 100:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #include "ETH_LWIP/lwip/include/lwip/opt.h"
 101:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 102:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_TCP /* don't build if not configured for use in lwipopts.h */
 103:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 104:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #include "ETH_LWIP/lwip/include/lwip/def.h"
 105:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #include "ETH_LWIP/lwip/include/lwip/mem.h"
 106:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #include "ETH_LWIP/lwip/include/lwip/memp.h"
 107:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #include "ETH_LWIP/lwip/include/lwip/tcp.h"
 108:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #include "ETH_LWIP/lwip/include/lwip/priv/tcp_priv.h"
 109:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #include "ETH_LWIP/lwip/include/lwip/debug.h"
 110:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #include "ETH_LWIP/lwip/include/lwip/stats.h"
 111:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #include "ETH_LWIP/lwip/include/lwip/ip6.h"
 112:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #include "ETH_LWIP/lwip/include/lwip/ip6_addr.h"
 113:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #include "ETH_LWIP/lwip/include/lwip/nd6.h"
 114:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 115:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #include <string.h>
 116:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 117:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #ifdef LWIP_HOOK_FILENAME
 118:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #include LWIP_HOOK_FILENAME
 119:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif
 120:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 121:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #ifndef TCP_LOCAL_PORT_RANGE_START
 122:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /* From http://www.iana.org/assignments/port-numbers:
 123:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****    "The Dynamic and/or Private Ports are those from 49152 through 65535" */
 124:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #define TCP_LOCAL_PORT_RANGE_START        0xc000
 125:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #define TCP_LOCAL_PORT_RANGE_END          0xffff
 126:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #define TCP_ENSURE_LOCAL_PORT_RANGE(port) ((u16_t)(((port) & (u16_t)~TCP_LOCAL_PORT_RANGE_START) + 
 127:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif
 128:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 129:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_TCP_KEEPALIVE
 130:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #define TCP_KEEP_DUR(pcb)   ((pcb)->keep_cnt * (pcb)->keep_intvl)
 131:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #define TCP_KEEP_INTVL(pcb) ((pcb)->keep_intvl)
 132:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #else /* LWIP_TCP_KEEPALIVE */
 133:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #define TCP_KEEP_DUR(pcb)   TCP_MAXIDLE
 134:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #define TCP_KEEP_INTVL(pcb) TCP_KEEPINTVL_DEFAULT
 135:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_TCP_KEEPALIVE */
 136:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 137:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /* As initial send MSS, we use TCP_MSS but limit it to 536. */
 138:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_MSS > 536
 139:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #define INITIAL_MSS 536
 140:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #else
 141:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #define INITIAL_MSS TCP_MSS
 142:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif
 143:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 144:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static const char *const tcp_state_str[] = {
 145:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   "CLOSED",
 146:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   "LISTEN",
 147:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   "SYN_SENT",
 148:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   "SYN_RCVD",
 149:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   "ESTABLISHED",
 150:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   "FIN_WAIT_1",
 151:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   "FIN_WAIT_2",
 152:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   "CLOSE_WAIT",
 153:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   "CLOSING",
 154:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   "LAST_ACK",
 155:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   "TIME_WAIT"
 156:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** };
 157:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 158:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /* last local TCP port */
 159:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static u16_t tcp_port = TCP_LOCAL_PORT_RANGE_START;
 160:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 161:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /* Incremented every coarse grained timer shot (typically every 500 ms). */
 162:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** u32_t tcp_ticks;
 163:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static const u8_t tcp_backoff[13] =
 164:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** { 1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7};
 165:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /* Times per slowtmr hits */
 166:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static const u8_t tcp_persist_backoff[7] = { 3, 6, 12, 24, 48, 96, 120 };
 167:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 168:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /* The TCP PCB lists. */
 169:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 170:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /** List of all TCP PCBs bound but not yet (connected || listening) */
 171:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** struct tcp_pcb *tcp_bound_pcbs;
 172:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /** List of all TCP PCBs in LISTEN state */
 173:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** union tcp_listen_pcbs_t tcp_listen_pcbs;
 174:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /** List of all TCP PCBs that are in a state in which
 175:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * they accept or send data. */
 176:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** struct tcp_pcb *tcp_active_pcbs;
 177:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /** List of all TCP PCBs in TIME-WAIT state */
 178:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** struct tcp_pcb *tcp_tw_pcbs;
 179:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 180:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /** An array with all (non-temporary) PCB lists, mainly used for smaller code size */
 181:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** struct tcp_pcb **const tcp_pcb_lists[] = {&tcp_listen_pcbs.pcbs, &tcp_bound_pcbs,
 182:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****          &tcp_active_pcbs, &tcp_tw_pcbs
 183:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** };
 184:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 185:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** u8_t tcp_active_pcbs_changed;
 186:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 187:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /** Timer counter to handle calling slow-timer from tcp_tmr() */
 188:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static u8_t tcp_timer;
 189:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static u8_t tcp_timer_ctr;
 190:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static u16_t tcp_new_port(void);
 191:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 192:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static err_t tcp_close_shutdown_fin(struct tcp_pcb *pcb);
 193:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_TCP_PCB_NUM_EXT_ARGS
 194:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static void tcp_ext_arg_invoke_callbacks_destroyed(struct tcp_pcb_ext_args *ext_args);
 195:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif
 196:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 197:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
 198:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Initialize this module.
 199:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 200:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
 201:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_init(void)
 202:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 140              	 .loc 1 202 0
 141              	 .cfi_startproc
 142              	 
 143              	 
 144 0000 80B5     	 push {r7,lr}
 145              	.LCFI0:
 146              	 .cfi_def_cfa_offset 8
 147              	 .cfi_offset 7,-8
 148              	 .cfi_offset 14,-4
 149 0002 00AF     	 add r7,sp,#0
 150              	.LCFI1:
 151              	 .cfi_def_cfa_register 7
 203:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #ifdef LWIP_RAND
 204:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 152              	 .loc 1 204 0
 153 0004 FFF7FEFF 	 bl rand
 154 0008 0346     	 mov r3,r0
 155 000a 9BB2     	 uxth r3,r3
 156 000c C3F30D03 	 ubfx r3,r3,#0,#14
 157 0010 9BB2     	 uxth r3,r3
 158 0012 A3F58043 	 sub r3,r3,#16384
 159 0016 9AB2     	 uxth r2,r3
 160 0018 014B     	 ldr r3,.L2
 161 001a 1A80     	 strh r2,[r3]
 205:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_RAND */
 206:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 162              	 .loc 1 206 0
 163 001c 80BD     	 pop {r7,pc}
 164              	.L3:
 165 001e 00BF     	 .align 2
 166              	.L2:
 167 0020 00000000 	 .word tcp_port
 168              	 .cfi_endproc
 169              	.LFE133:
 171              	 .section .text.tcp_free,"ax",%progbits
 172              	 .align 2
 173              	 .global tcp_free
 174              	 .thumb
 175              	 .thumb_func
 177              	tcp_free:
 178              	.LFB134:
 207:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 208:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /** Free a tcp pcb */
 209:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
 210:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_free(struct tcp_pcb *pcb)
 211:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 179              	 .loc 1 211 0
 180              	 .cfi_startproc
 181              	 
 182              	 
 183 0000 80B5     	 push {r7,lr}
 184              	.LCFI2:
 185              	 .cfi_def_cfa_offset 8
 186              	 .cfi_offset 7,-8
 187              	 .cfi_offset 14,-4
 188 0002 82B0     	 sub sp,sp,#8
 189              	.LCFI3:
 190              	 .cfi_def_cfa_offset 16
 191 0004 00AF     	 add r7,sp,#0
 192              	.LCFI4:
 193              	 .cfi_def_cfa_register 7
 194 0006 7860     	 str r0,[r7,#4]
 212:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 213:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_TCP_PCB_NUM_EXT_ARGS
 214:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
 215:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif
 216:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   memp_free(MEMP_TCP_PCB, pcb);
 195              	 .loc 1 216 0
 196 0008 0120     	 movs r0,#1
 197 000a 7968     	 ldr r1,[r7,#4]
 198 000c FFF7FEFF 	 bl memp_free
 217:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 199              	 .loc 1 217 0
 200 0010 0837     	 adds r7,r7,#8
 201              	.LCFI5:
 202              	 .cfi_def_cfa_offset 8
 203 0012 BD46     	 mov sp,r7
 204              	.LCFI6:
 205              	 .cfi_def_cfa_register 13
 206              	 
 207 0014 80BD     	 pop {r7,pc}
 208              	 .cfi_endproc
 209              	.LFE134:
 211 0016 00BF     	 .section .text.tcp_free_listen,"ax",%progbits
 212              	 .align 2
 213              	 .thumb
 214              	 .thumb_func
 216              	tcp_free_listen:
 217              	.LFB135:
 218:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 219:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /** Free a tcp listen pcb */
 220:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static void
 221:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_free_listen(struct tcp_pcb *pcb)
 222:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 218              	 .loc 1 222 0
 219              	 .cfi_startproc
 220              	 
 221              	 
 222 0000 80B5     	 push {r7,lr}
 223              	.LCFI7:
 224              	 .cfi_def_cfa_offset 8
 225              	 .cfi_offset 7,-8
 226              	 .cfi_offset 14,-4
 227 0002 82B0     	 sub sp,sp,#8
 228              	.LCFI8:
 229              	 .cfi_def_cfa_offset 16
 230 0004 00AF     	 add r7,sp,#0
 231              	.LCFI9:
 232              	 .cfi_def_cfa_register 7
 233 0006 7860     	 str r0,[r7,#4]
 223:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 224:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_TCP_PCB_NUM_EXT_ARGS
 225:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
 226:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif
 227:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 234              	 .loc 1 227 0
 235 0008 0220     	 movs r0,#2
 236 000a 7968     	 ldr r1,[r7,#4]
 237 000c FFF7FEFF 	 bl memp_free
 228:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 238              	 .loc 1 228 0
 239 0010 0837     	 adds r7,r7,#8
 240              	.LCFI10:
 241              	 .cfi_def_cfa_offset 8
 242 0012 BD46     	 mov sp,r7
 243              	.LCFI11:
 244              	 .cfi_def_cfa_register 13
 245              	 
 246 0014 80BD     	 pop {r7,pc}
 247              	 .cfi_endproc
 248              	.LFE135:
 250 0016 00BF     	 .section .text.tcp_tmr,"ax",%progbits
 251              	 .align 2
 252              	 .global tcp_tmr
 253              	 .thumb
 254              	 .thumb_func
 256              	tcp_tmr:
 257              	.LFB136:
 229:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 230:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
 231:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Called periodically to dispatch TCP timers.
 232:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 233:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
 234:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_tmr(void)
 235:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 258              	 .loc 1 235 0
 259              	 .cfi_startproc
 260              	 
 261              	 
 262 0000 80B5     	 push {r7,lr}
 263              	.LCFI12:
 264              	 .cfi_def_cfa_offset 8
 265              	 .cfi_offset 7,-8
 266              	 .cfi_offset 14,-4
 267 0002 00AF     	 add r7,sp,#0
 268              	.LCFI13:
 269              	 .cfi_def_cfa_register 7
 236:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* Call tcp_fasttmr() every 250 ms */
 237:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   tcp_fasttmr();
 270              	 .loc 1 237 0
 271 0004 FFF7FEFF 	 bl tcp_fasttmr
 238:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 239:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (++tcp_timer & 1) {
 272              	 .loc 1 239 0
 273 0008 074B     	 ldr r3,.L8
 274 000a 1B78     	 ldrb r3,[r3]
 275 000c 0133     	 adds r3,r3,#1
 276 000e DAB2     	 uxtb r2,r3
 277 0010 054B     	 ldr r3,.L8
 278 0012 1A70     	 strb r2,[r3]
 279 0014 044B     	 ldr r3,.L8
 280 0016 1B78     	 ldrb r3,[r3]
 281 0018 03F00103 	 and r3,r3,#1
 282 001c 002B     	 cmp r3,#0
 283 001e 01D0     	 beq .L6
 240:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
 241:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        tcp_tmr() is called. */
 242:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_slowtmr();
 284              	 .loc 1 242 0
 285 0020 FFF7FEFF 	 bl tcp_slowtmr
 286              	.L6:
 243:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 244:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 287              	 .loc 1 244 0
 288 0024 80BD     	 pop {r7,pc}
 289              	.L9:
 290 0026 00BF     	 .align 2
 291              	.L8:
 292 0028 00000000 	 .word tcp_timer
 293              	 .cfi_endproc
 294              	.LFE136:
 296              	 .section .text.tcp_remove_listener,"ax",%progbits
 297              	 .align 2
 298              	 .thumb
 299              	 .thumb_func
 301              	tcp_remove_listener:
 302              	.LFB137:
 245:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 246:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
 247:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /** Called when a listen pcb is closed. Iterates one pcb list and removes the
 248:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * closed listener pcb from pcb->listener if matching.
 249:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 250:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static void
 251:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
 252:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 303              	 .loc 1 252 0
 304              	 .cfi_startproc
 305              	 
 306              	 
 307              	 
 308 0000 80B4     	 push {r7}
 309              	.LCFI14:
 310              	 .cfi_def_cfa_offset 4
 311              	 .cfi_offset 7,-4
 312 0002 85B0     	 sub sp,sp,#20
 313              	.LCFI15:
 314              	 .cfi_def_cfa_offset 24
 315 0004 00AF     	 add r7,sp,#0
 316              	.LCFI16:
 317              	 .cfi_def_cfa_register 7
 318 0006 7860     	 str r0,[r7,#4]
 319 0008 3960     	 str r1,[r7]
 253:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct tcp_pcb *pcb;
 254:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 255:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 256:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 257:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 320              	 .loc 1 257 0
 321 000a 7B68     	 ldr r3,[r7,#4]
 322 000c FB60     	 str r3,[r7,#12]
 323 000e 0AE0     	 b .L11
 324              	.L13:
 258:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->listener == lpcb) {
 325              	 .loc 1 258 0
 326 0010 FB68     	 ldr r3,[r7,#12]
 327 0012 DA6F     	 ldr r2,[r3,#124]
 328 0014 3B68     	 ldr r3,[r7]
 329 0016 9A42     	 cmp r2,r3
 330 0018 02D1     	 bne .L12
 259:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb->listener = NULL;
 331              	 .loc 1 259 0
 332 001a FB68     	 ldr r3,[r7,#12]
 333 001c 0022     	 movs r2,#0
 334 001e DA67     	 str r2,[r3,#124]
 335              	.L12:
 257:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->listener == lpcb) {
 336              	 .loc 1 257 0 discriminator 2
 337 0020 FB68     	 ldr r3,[r7,#12]
 338 0022 DB68     	 ldr r3,[r3,#12]
 339 0024 FB60     	 str r3,[r7,#12]
 340              	.L11:
 257:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->listener == lpcb) {
 341              	 .loc 1 257 0 is_stmt 0 discriminator 1
 342 0026 FB68     	 ldr r3,[r7,#12]
 343 0028 002B     	 cmp r3,#0
 344 002a F1D1     	 bne .L13
 260:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
 261:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 262:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 345              	 .loc 1 262 0 is_stmt 1
 346 002c 1437     	 adds r7,r7,#20
 347              	.LCFI17:
 348              	 .cfi_def_cfa_offset 4
 349 002e BD46     	 mov sp,r7
 350              	.LCFI18:
 351              	 .cfi_def_cfa_register 13
 352              	 
 353 0030 5DF8047B 	 ldr r7,[sp],#4
 354              	.LCFI19:
 355              	 .cfi_restore 7
 356              	 .cfi_def_cfa_offset 0
 357 0034 7047     	 bx lr
 358              	 .cfi_endproc
 359              	.LFE137:
 361 0036 00BF     	 .section .text.tcp_listen_closed,"ax",%progbits
 362              	 .align 2
 363              	 .thumb
 364              	 .thumb_func
 366              	tcp_listen_closed:
 367              	.LFB138:
 263:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif
 264:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 265:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 266:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * closed listener pcb from pcb->listener if matching.
 267:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 268:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static void
 269:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_listen_closed(struct tcp_pcb *pcb)
 270:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 368              	 .loc 1 270 0
 369              	 .cfi_startproc
 370              	 
 371              	 
 372 0000 80B5     	 push {r7,lr}
 373              	.LCFI20:
 374              	 .cfi_def_cfa_offset 8
 375              	 .cfi_offset 7,-8
 376              	 .cfi_offset 14,-4
 377 0002 84B0     	 sub sp,sp,#16
 378              	.LCFI21:
 379              	 .cfi_def_cfa_offset 24
 380 0004 00AF     	 add r7,sp,#0
 381              	.LCFI22:
 382              	 .cfi_def_cfa_register 7
 383 0006 7860     	 str r0,[r7,#4]
 271:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
 272:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   size_t i;
 273:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("pcb != NULL", pcb != NULL);
 274:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 275:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 384              	 .loc 1 275 0
 385 0008 0123     	 movs r3,#1
 386 000a FB60     	 str r3,[r7,#12]
 387 000c 0BE0     	 b .L15
 388              	.L16:
 276:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 389              	 .loc 1 276 0 discriminator 3
 390 000e 094A     	 ldr r2,.L17
 391 0010 FB68     	 ldr r3,[r7,#12]
 392 0012 52F82330 	 ldr r3,[r2,r3,lsl#2]
 393 0016 1B68     	 ldr r3,[r3]
 394 0018 1846     	 mov r0,r3
 395 001a 7968     	 ldr r1,[r7,#4]
 396 001c FFF7FEFF 	 bl tcp_remove_listener
 275:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 397              	 .loc 1 275 0 discriminator 3
 398 0020 FB68     	 ldr r3,[r7,#12]
 399 0022 0133     	 adds r3,r3,#1
 400 0024 FB60     	 str r3,[r7,#12]
 401              	.L15:
 275:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 402              	 .loc 1 275 0 is_stmt 0 discriminator 1
 403 0026 FB68     	 ldr r3,[r7,#12]
 404 0028 032B     	 cmp r3,#3
 405 002a F0D9     	 bls .L16
 277:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 278:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif
 279:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_UNUSED_ARG(pcb);
 280:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 406              	 .loc 1 280 0 is_stmt 1
 407 002c 1037     	 adds r7,r7,#16
 408              	.LCFI23:
 409              	 .cfi_def_cfa_offset 8
 410 002e BD46     	 mov sp,r7
 411              	.LCFI24:
 412              	 .cfi_def_cfa_register 13
 413              	 
 414 0030 80BD     	 pop {r7,pc}
 415              	.L18:
 416 0032 00BF     	 .align 2
 417              	.L17:
 418 0034 00000000 	 .word tcp_pcb_lists
 419              	 .cfi_endproc
 420              	.LFE138:
 422              	 .section .text.tcp_backlog_delayed,"ax",%progbits
 423              	 .align 2
 424              	 .global tcp_backlog_delayed
 425              	 .thumb
 426              	 .thumb_func
 428              	tcp_backlog_delayed:
 429              	.LFB139:
 281:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 282:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_LISTEN_BACKLOG
 283:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /** @ingroup tcp_raw
 284:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Delay accepting a connection in respect to the listen backlog:
 285:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * the number of outstanding connections is increased until
 286:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * tcp_backlog_accepted() is called.
 287:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 288:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * ATTENTION: the caller is responsible for calling tcp_backlog_accepted()
 289:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * or else the backlog feature will get out of sync!
 290:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 291:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb the connection pcb which is not fully accepted yet
 292:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 293:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
 294:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_backlog_delayed(struct tcp_pcb *pcb)
 295:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 430              	 .loc 1 295 0
 431              	 .cfi_startproc
 432              	 
 433              	 
 434              	 
 435 0000 80B4     	 push {r7}
 436              	.LCFI25:
 437              	 .cfi_def_cfa_offset 4
 438              	 .cfi_offset 7,-4
 439 0002 83B0     	 sub sp,sp,#12
 440              	.LCFI26:
 441              	 .cfi_def_cfa_offset 16
 442 0004 00AF     	 add r7,sp,#0
 443              	.LCFI27:
 444              	 .cfi_def_cfa_register 7
 445 0006 7860     	 str r0,[r7,#4]
 296:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("pcb != NULL", pcb != NULL);
 297:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
 298:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if ((pcb->flags & TF_BACKLOGPEND) == 0) {
 446              	 .loc 1 298 0
 447 0008 7B68     	 ldr r3,[r7,#4]
 448 000a 5B8B     	 ldrh r3,[r3,#26]
 449 000c 03F40073 	 and r3,r3,#512
 450 0010 002B     	 cmp r3,#0
 451 0012 10D1     	 bne .L19
 299:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->listener != NULL) {
 452              	 .loc 1 299 0
 453 0014 7B68     	 ldr r3,[r7,#4]
 454 0016 DB6F     	 ldr r3,[r3,#124]
 455 0018 002B     	 cmp r3,#0
 456 001a 0CD0     	 beq .L19
 300:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb->listener->accepts_pending++;
 457              	 .loc 1 300 0
 458 001c 7B68     	 ldr r3,[r7,#4]
 459 001e DB6F     	 ldr r3,[r3,#124]
 460 0020 5A7F     	 ldrb r2,[r3,#29]
 461 0022 0132     	 adds r2,r2,#1
 462 0024 D2B2     	 uxtb r2,r2
 463 0026 5A77     	 strb r2,[r3,#29]
 301:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       LWIP_ASSERT("accepts_pending != 0", pcb->listener->accepts_pending != 0);
 302:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_set_flags(pcb, TF_BACKLOGPEND);
 464              	 .loc 1 302 0
 465 0028 7B68     	 ldr r3,[r7,#4]
 466 002a 5B8B     	 ldrh r3,[r3,#26]
 467 002c 43F40073 	 orr r3,r3,#512
 468 0030 9AB2     	 uxth r2,r3
 469 0032 7B68     	 ldr r3,[r7,#4]
 470 0034 5A83     	 strh r2,[r3,#26]
 471              	.L19:
 303:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
 304:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 305:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 472              	 .loc 1 305 0
 473 0036 0C37     	 adds r7,r7,#12
 474              	.LCFI28:
 475              	 .cfi_def_cfa_offset 4
 476 0038 BD46     	 mov sp,r7
 477              	.LCFI29:
 478              	 .cfi_def_cfa_register 13
 479              	 
 480 003a 5DF8047B 	 ldr r7,[sp],#4
 481              	.LCFI30:
 482              	 .cfi_restore 7
 483              	 .cfi_def_cfa_offset 0
 484 003e 7047     	 bx lr
 485              	 .cfi_endproc
 486              	.LFE139:
 488              	 .section .text.tcp_backlog_accepted,"ax",%progbits
 489              	 .align 2
 490              	 .global tcp_backlog_accepted
 491              	 .thumb
 492              	 .thumb_func
 494              	tcp_backlog_accepted:
 495              	.LFB140:
 306:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 307:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /** @ingroup tcp_raw
 308:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * A delayed-accept a connection is accepted (or closed/aborted): decreases
 309:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * the number of outstanding connections after calling tcp_backlog_delayed().
 310:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 311:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * ATTENTION: the caller is responsible for calling tcp_backlog_accepted()
 312:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * or else the backlog feature will get out of sync!
 313:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 314:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb the connection pcb which is now fully accepted (or closed/aborted)
 315:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 316:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
 317:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_backlog_accepted(struct tcp_pcb *pcb)
 318:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 496              	 .loc 1 318 0
 497              	 .cfi_startproc
 498              	 
 499              	 
 500              	 
 501 0000 80B4     	 push {r7}
 502              	.LCFI31:
 503              	 .cfi_def_cfa_offset 4
 504              	 .cfi_offset 7,-4
 505 0002 83B0     	 sub sp,sp,#12
 506              	.LCFI32:
 507              	 .cfi_def_cfa_offset 16
 508 0004 00AF     	 add r7,sp,#0
 509              	.LCFI33:
 510              	 .cfi_def_cfa_register 7
 511 0006 7860     	 str r0,[r7,#4]
 319:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("pcb != NULL", pcb != NULL);
 320:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
 321:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if ((pcb->flags & TF_BACKLOGPEND) != 0) {
 512              	 .loc 1 321 0
 513 0008 7B68     	 ldr r3,[r7,#4]
 514 000a 5B8B     	 ldrh r3,[r3,#26]
 515 000c 03F40073 	 and r3,r3,#512
 516 0010 002B     	 cmp r3,#0
 517 0012 10D0     	 beq .L21
 322:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->listener != NULL) {
 518              	 .loc 1 322 0
 519 0014 7B68     	 ldr r3,[r7,#4]
 520 0016 DB6F     	 ldr r3,[r3,#124]
 521 0018 002B     	 cmp r3,#0
 522 001a 0CD0     	 beq .L21
 323:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       LWIP_ASSERT("accepts_pending != 0", pcb->listener->accepts_pending != 0);
 324:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb->listener->accepts_pending--;
 523              	 .loc 1 324 0
 524 001c 7B68     	 ldr r3,[r7,#4]
 525 001e DB6F     	 ldr r3,[r3,#124]
 526 0020 5A7F     	 ldrb r2,[r3,#29]
 527 0022 013A     	 subs r2,r2,#1
 528 0024 D2B2     	 uxtb r2,r2
 529 0026 5A77     	 strb r2,[r3,#29]
 325:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_clear_flags(pcb, TF_BACKLOGPEND);
 530              	 .loc 1 325 0
 531 0028 7B68     	 ldr r3,[r7,#4]
 532 002a 5B8B     	 ldrh r3,[r3,#26]
 533 002c 23F40073 	 bic r3,r3,#512
 534 0030 9AB2     	 uxth r2,r3
 535 0032 7B68     	 ldr r3,[r7,#4]
 536 0034 5A83     	 strh r2,[r3,#26]
 537              	.L21:
 326:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
 327:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 328:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 538              	 .loc 1 328 0
 539 0036 0C37     	 adds r7,r7,#12
 540              	.LCFI34:
 541              	 .cfi_def_cfa_offset 4
 542 0038 BD46     	 mov sp,r7
 543              	.LCFI35:
 544              	 .cfi_def_cfa_register 13
 545              	 
 546 003a 5DF8047B 	 ldr r7,[sp],#4
 547              	.LCFI36:
 548              	 .cfi_restore 7
 549              	 .cfi_def_cfa_offset 0
 550 003e 7047     	 bx lr
 551              	 .cfi_endproc
 552              	.LFE140:
 554              	 .section .text.tcp_close_shutdown,"ax",%progbits
 555              	 .align 2
 556              	 .thumb
 557              	 .thumb_func
 559              	tcp_close_shutdown:
 560              	.LFB141:
 329:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* TCP_LISTEN_BACKLOG */
 330:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 331:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
 332:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Closes the TX side of a connection held by the PCB.
 333:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * For tcp_close(), a RST is sent if the application didn't receive all data
 334:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * (tcp_recved() not called for all data passed to recv callback).
 335:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 336:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Listening pcbs are freed and may not be referenced any more.
 337:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Connection pcbs are freed if not yet connected and may not be referenced
 338:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * any more. If a connection is established (at least SYN received or in
 339:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * a closing state), the connection is closed, and put in a closing state.
 340:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * The pcb is then automatically freed in tcp_slowtmr(). It is therefore
 341:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * unsafe to reference it.
 342:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 343:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb the tcp_pcb to close
 344:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @return ERR_OK if connection has been closed
 345:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *         another err_t if closing failed and pcb is not freed
 346:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 347:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static err_t
 348:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
 349:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 561              	 .loc 1 349 0
 562              	 .cfi_startproc
 563              	 
 564              	 
 565 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 566              	.LCFI37:
 567              	 .cfi_def_cfa_offset 20
 568              	 .cfi_offset 4,-20
 569              	 .cfi_offset 5,-16
 570              	 .cfi_offset 6,-12
 571              	 .cfi_offset 7,-8
 572              	 .cfi_offset 14,-4
 573 0002 89B0     	 sub sp,sp,#36
 574              	.LCFI38:
 575              	 .cfi_def_cfa_offset 56
 576 0004 04AF     	 add r7,sp,#16
 577              	.LCFI39:
 578              	 .cfi_def_cfa 7,40
 579 0006 7860     	 str r0,[r7,#4]
 580 0008 0B46     	 mov r3,r1
 581 000a FB70     	 strb r3,[r7,#3]
 350:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 351:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 352:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 582              	 .loc 1 352 0
 583 000c FB78     	 ldrb r3,[r7,#3]
 584 000e 002B     	 cmp r3,#0
 585 0010 59D0     	 beq .L24
 586              	 .loc 1 352 0 is_stmt 0 discriminator 1
 587 0012 7B68     	 ldr r3,[r7,#4]
 588 0014 1B7D     	 ldrb r3,[r3,#20]
 589 0016 042B     	 cmp r3,#4
 590 0018 03D0     	 beq .L25
 591              	 .loc 1 352 0 discriminator 2
 592 001a 7B68     	 ldr r3,[r7,#4]
 593 001c 1B7D     	 ldrb r3,[r3,#20]
 594 001e 072B     	 cmp r3,#7
 595 0020 51D1     	 bne .L24
 596              	.L25:
 353:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 597              	 .loc 1 353 0 is_stmt 1
 598 0022 7B68     	 ldr r3,[r7,#4]
 599 0024 9B6F     	 ldr r3,[r3,#120]
 600 0026 002B     	 cmp r3,#0
 601 0028 04D1     	 bne .L26
 602              	 .loc 1 353 0 is_stmt 0 discriminator 1
 603 002a 7B68     	 ldr r3,[r7,#4]
 604 002c 1B8D     	 ldrh r3,[r3,#40]
 605 002e B3F5066F 	 cmp r3,#2144
 606 0032 48D0     	 beq .L24
 607              	.L26:
 354:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* Not all data received by application, send RST to tell the remote
 355:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****          side about this. */
 356:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 357:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 358:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* don't call tcp_abort here: we must not deallocate the pcb since
 359:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****          that might not be expected when calling tcp_close */
 360:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 608              	 .loc 1 360 0 is_stmt 1
 609 0034 7B68     	 ldr r3,[r7,#4]
 610 0036 1E6D     	 ldr r6,[r3,#80]
 611 0038 7B68     	 ldr r3,[r7,#4]
 612 003a 5D6A     	 ldr r5,[r3,#36]
 613 003c 7C68     	 ldr r4,[r7,#4]
 614 003e 7B68     	 ldr r3,[r7,#4]
 615 0040 191D     	 adds r1,r3,#4
 616 0042 7B68     	 ldr r3,[r7,#4]
 617 0044 DA8A     	 ldrh r2,[r3,#22]
 618 0046 7B68     	 ldr r3,[r7,#4]
 619 0048 1B8B     	 ldrh r3,[r3,#24]
 620 004a 0091     	 str r1,[sp]
 621 004c 0192     	 str r2,[sp,#4]
 622 004e 0293     	 str r3,[sp,#8]
 623 0050 7868     	 ldr r0,[r7,#4]
 624 0052 3146     	 mov r1,r6
 625 0054 2A46     	 mov r2,r5
 626 0056 2346     	 mov r3,r4
 627 0058 FFF7FEFF 	 bl tcp_rst
 361:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               pcb->local_port, pcb->remote_port);
 362:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 363:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_pcb_purge(pcb);
 628              	 .loc 1 363 0
 629 005c 7868     	 ldr r0,[r7,#4]
 630 005e FFF7FEFF 	 bl tcp_pcb_purge
 364:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       TCP_RMV_ACTIVE(pcb);
 631              	 .loc 1 364 0
 632 0062 424B     	 ldr r3,.L47
 633 0064 1A68     	 ldr r2,[r3]
 634 0066 7B68     	 ldr r3,[r7,#4]
 635 0068 9A42     	 cmp r2,r3
 636 006a 05D1     	 bne .L27
 637              	 .loc 1 364 0 is_stmt 0 discriminator 1
 638 006c 3F4B     	 ldr r3,.L47
 639 006e 1B68     	 ldr r3,[r3]
 640 0070 DB68     	 ldr r3,[r3,#12]
 641 0072 3E4A     	 ldr r2,.L47
 642 0074 1360     	 str r3,[r2]
 643 0076 13E0     	 b .L28
 644              	.L27:
 645              	.LBB2:
 646              	 .loc 1 364 0 discriminator 2
 647 0078 3C4B     	 ldr r3,.L47
 648 007a 1B68     	 ldr r3,[r3]
 649 007c FB60     	 str r3,[r7,#12]
 650 007e 0CE0     	 b .L29
 651              	.L31:
 652              	 .loc 1 364 0 discriminator 9
 653 0080 FB68     	 ldr r3,[r7,#12]
 654 0082 DA68     	 ldr r2,[r3,#12]
 655 0084 7B68     	 ldr r3,[r7,#4]
 656 0086 9A42     	 cmp r2,r3
 657 0088 04D1     	 bne .L30
 658              	 .loc 1 364 0 discriminator 5
 659 008a 7B68     	 ldr r3,[r7,#4]
 660 008c DA68     	 ldr r2,[r3,#12]
 661 008e FB68     	 ldr r3,[r7,#12]
 662 0090 DA60     	 str r2,[r3,#12]
 663 0092 05E0     	 b .L28
 664              	.L30:
 665              	 .loc 1 364 0 discriminator 6
 666 0094 FB68     	 ldr r3,[r7,#12]
 667 0096 DB68     	 ldr r3,[r3,#12]
 668 0098 FB60     	 str r3,[r7,#12]
 669              	.L29:
 670              	 .loc 1 364 0 discriminator 8
 671 009a FB68     	 ldr r3,[r7,#12]
 672 009c 002B     	 cmp r3,#0
 673 009e EFD1     	 bne .L31
 674              	.L28:
 675              	.LBE2:
 676              	 .loc 1 364 0 discriminator 10
 677 00a0 7B68     	 ldr r3,[r7,#4]
 678 00a2 0022     	 movs r2,#0
 679 00a4 DA60     	 str r2,[r3,#12]
 680 00a6 324B     	 ldr r3,.L47+4
 681 00a8 0122     	 movs r2,#1
 682 00aa 1A70     	 strb r2,[r3]
 365:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* Deallocate the pcb since we already sent a RST for it */
 366:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (tcp_input_pcb == pcb) {
 683              	 .loc 1 366 0 is_stmt 1 discriminator 10
 684 00ac 314B     	 ldr r3,.L47+8
 685 00ae 1A68     	 ldr r2,[r3]
 686 00b0 7B68     	 ldr r3,[r7,#4]
 687 00b2 9A42     	 cmp r2,r3
 688 00b4 02D1     	 bne .L32
 367:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* prevent using a deallocated pcb: free it from tcp_input later */
 368:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         tcp_trigger_input_pcb_close();
 689              	 .loc 1 368 0
 690 00b6 FFF7FEFF 	 bl tcp_trigger_input_pcb_close
 691 00ba 02E0     	 b .L33
 692              	.L32:
 369:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       } else {
 370:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         tcp_free(pcb);
 693              	 .loc 1 370 0
 694 00bc 7868     	 ldr r0,[r7,#4]
 695 00be FFF7FEFF 	 bl tcp_free
 696              	.L33:
 371:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
 372:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       return ERR_OK;
 697              	 .loc 1 372 0
 698 00c2 0023     	 movs r3,#0
 699 00c4 4DE0     	 b .L34
 700              	.L24:
 373:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
 374:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 375:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 376:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* - states which free the pcb are handled here,
 377:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****      - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
 378:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   switch (pcb->state) {
 701              	 .loc 1 378 0
 702 00c6 7B68     	 ldr r3,[r7,#4]
 703 00c8 1B7D     	 ldrb r3,[r3,#20]
 704 00ca 012B     	 cmp r3,#1
 705 00cc 2DD0     	 beq .L36
 706 00ce 022B     	 cmp r3,#2
 707 00d0 36D0     	 beq .L37
 708 00d2 002B     	 cmp r3,#0
 709 00d4 3FD1     	 bne .L46
 379:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     case CLOSED:
 380:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* Closing a pcb in the CLOSED state might seem erroneous,
 381:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        * however, it is in this state once allocated and as yet unused
 382:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        * and the user needs some way to free it should the need arise.
 383:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
 384:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        * or for a pcb that has been used and then entered the CLOSED state
 385:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        * is erroneous, but this should never happen as the pcb has in those cases
 386:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        * been freed, and so any remaining handles are bogus. */
 387:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (pcb->local_port != 0) {
 710              	 .loc 1 387 0
 711 00d6 7B68     	 ldr r3,[r7,#4]
 712 00d8 DB8A     	 ldrh r3,[r3,#22]
 713 00da 002B     	 cmp r3,#0
 714 00dc 21D0     	 beq .L39
 388:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         TCP_RMV(&tcp_bound_pcbs, pcb);
 715              	 .loc 1 388 0
 716 00de 264B     	 ldr r3,.L47+12
 717 00e0 1A68     	 ldr r2,[r3]
 718 00e2 7B68     	 ldr r3,[r7,#4]
 719 00e4 9A42     	 cmp r2,r3
 720 00e6 05D1     	 bne .L40
 721              	 .loc 1 388 0 is_stmt 0 discriminator 1
 722 00e8 234B     	 ldr r3,.L47+12
 723 00ea 1B68     	 ldr r3,[r3]
 724 00ec DB68     	 ldr r3,[r3,#12]
 725 00ee 224A     	 ldr r2,.L47+12
 726 00f0 1360     	 str r3,[r2]
 727 00f2 13E0     	 b .L41
 728              	.L40:
 729              	.LBB3:
 730              	 .loc 1 388 0 discriminator 2
 731 00f4 204B     	 ldr r3,.L47+12
 732 00f6 1B68     	 ldr r3,[r3]
 733 00f8 BB60     	 str r3,[r7,#8]
 734 00fa 0CE0     	 b .L42
 735              	.L44:
 736              	 .loc 1 388 0 discriminator 9
 737 00fc BB68     	 ldr r3,[r7,#8]
 738 00fe DA68     	 ldr r2,[r3,#12]
 739 0100 7B68     	 ldr r3,[r7,#4]
 740 0102 9A42     	 cmp r2,r3
 741 0104 04D1     	 bne .L43
 742              	 .loc 1 388 0 discriminator 5
 743 0106 7B68     	 ldr r3,[r7,#4]
 744 0108 DA68     	 ldr r2,[r3,#12]
 745 010a BB68     	 ldr r3,[r7,#8]
 746 010c DA60     	 str r2,[r3,#12]
 747 010e 05E0     	 b .L41
 748              	.L43:
 749              	 .loc 1 388 0 discriminator 6
 750 0110 BB68     	 ldr r3,[r7,#8]
 751 0112 DB68     	 ldr r3,[r3,#12]
 752 0114 BB60     	 str r3,[r7,#8]
 753              	.L42:
 754              	 .loc 1 388 0 discriminator 8
 755 0116 BB68     	 ldr r3,[r7,#8]
 756 0118 002B     	 cmp r3,#0
 757 011a EFD1     	 bne .L44
 758              	.L41:
 759              	.LBE3:
 760              	 .loc 1 388 0 discriminator 10
 761 011c 7B68     	 ldr r3,[r7,#4]
 762 011e 0022     	 movs r2,#0
 763 0120 DA60     	 str r2,[r3,#12]
 764              	.L39:
 389:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
 390:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_free(pcb);
 765              	 .loc 1 390 0 is_stmt 1
 766 0122 7868     	 ldr r0,[r7,#4]
 767 0124 FFF7FEFF 	 bl tcp_free
 391:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       break;
 768              	 .loc 1 391 0
 769 0128 1AE0     	 b .L45
 770              	.L36:
 392:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     case LISTEN:
 393:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_listen_closed(pcb);
 771              	 .loc 1 393 0
 772 012a 7868     	 ldr r0,[r7,#4]
 773 012c FFF7FEFF 	 bl tcp_listen_closed
 394:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 774              	 .loc 1 394 0
 775 0130 1248     	 ldr r0,.L47+16
 776 0132 7968     	 ldr r1,[r7,#4]
 777 0134 FFF7FEFF 	 bl tcp_pcb_remove
 395:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_free_listen(pcb);
 778              	 .loc 1 395 0
 779 0138 7868     	 ldr r0,[r7,#4]
 780 013a FFF7FEFF 	 bl tcp_free_listen
 396:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       break;
 781              	 .loc 1 396 0
 782 013e 0FE0     	 b .L45
 783              	.L37:
 397:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     case SYN_SENT:
 398:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       TCP_PCB_REMOVE_ACTIVE(pcb);
 784              	 .loc 1 398 0
 785 0140 0A48     	 ldr r0,.L47
 786 0142 7968     	 ldr r1,[r7,#4]
 787 0144 FFF7FEFF 	 bl tcp_pcb_remove
 788 0148 094B     	 ldr r3,.L47+4
 789 014a 0122     	 movs r2,#1
 790 014c 1A70     	 strb r2,[r3]
 399:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_free(pcb);
 791              	 .loc 1 399 0
 792 014e 7868     	 ldr r0,[r7,#4]
 793 0150 FFF7FEFF 	 bl tcp_free
 400:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       MIB2_STATS_INC(mib2.tcpattemptfails);
 401:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       break;
 794              	 .loc 1 401 0
 795 0154 04E0     	 b .L45
 796              	.L46:
 402:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     default:
 403:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       return tcp_close_shutdown_fin(pcb);
 797              	 .loc 1 403 0
 798 0156 7868     	 ldr r0,[r7,#4]
 799 0158 FFF7FEFF 	 bl tcp_close_shutdown_fin
 800 015c 0346     	 mov r3,r0
 801 015e 00E0     	 b .L34
 802              	.L45:
 404:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 405:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return ERR_OK;
 803              	 .loc 1 405 0
 804 0160 0023     	 movs r3,#0
 805              	.L34:
 806 0162 5BB2     	 sxtb r3,r3
 406:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 807              	 .loc 1 406 0
 808 0164 1846     	 mov r0,r3
 809 0166 1437     	 adds r7,r7,#20
 810              	.LCFI40:
 811              	 .cfi_def_cfa_offset 20
 812 0168 BD46     	 mov sp,r7
 813              	.LCFI41:
 814              	 .cfi_def_cfa_register 13
 815              	 
 816 016a F0BD     	 pop {r4,r5,r6,r7,pc}
 817              	.L48:
 818              	 .align 2
 819              	.L47:
 820 016c 00000000 	 .word tcp_active_pcbs
 821 0170 00000000 	 .word tcp_active_pcbs_changed
 822 0174 00000000 	 .word tcp_input_pcb
 823 0178 00000000 	 .word tcp_bound_pcbs
 824 017c 00000000 	 .word tcp_listen_pcbs
 825              	 .cfi_endproc
 826              	.LFE141:
 828              	 .section .text.tcp_close_shutdown_fin,"ax",%progbits
 829              	 .align 2
 830              	 .thumb
 831              	 .thumb_func
 833              	tcp_close_shutdown_fin:
 834              	.LFB142:
 407:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 408:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static err_t
 409:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_close_shutdown_fin(struct tcp_pcb *pcb)
 410:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 835              	 .loc 1 410 0
 836              	 .cfi_startproc
 837              	 
 838              	 
 839 0000 80B5     	 push {r7,lr}
 840              	.LCFI42:
 841              	 .cfi_def_cfa_offset 8
 842              	 .cfi_offset 7,-8
 843              	 .cfi_offset 14,-4
 844 0002 84B0     	 sub sp,sp,#16
 845              	.LCFI43:
 846              	 .cfi_def_cfa_offset 24
 847 0004 00AF     	 add r7,sp,#0
 848              	.LCFI44:
 849              	 .cfi_def_cfa_register 7
 850 0006 7860     	 str r0,[r7,#4]
 411:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   err_t err;
 412:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("pcb != NULL", pcb != NULL);
 413:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 414:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   switch (pcb->state) {
 851              	 .loc 1 414 0
 852 0008 7B68     	 ldr r3,[r7,#4]
 853 000a 1B7D     	 ldrb r3,[r3,#20]
 854 000c 042B     	 cmp r3,#4
 855 000e 14D0     	 beq .L51
 856 0010 072B     	 cmp r3,#7
 857 0012 20D0     	 beq .L52
 858 0014 032B     	 cmp r3,#3
 859 0016 2CD1     	 bne .L61
 415:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     case SYN_RCVD:
 416:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       err = tcp_send_fin(pcb);
 860              	 .loc 1 416 0
 861 0018 7868     	 ldr r0,[r7,#4]
 862 001a FFF7FEFF 	 bl tcp_send_fin
 863 001e 0346     	 mov r3,r0
 864 0020 FB73     	 strb r3,[r7,#15]
 417:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (err == ERR_OK) {
 865              	 .loc 1 417 0
 866 0022 97F90F30 	 ldrsb r3,[r7,#15]
 867 0026 002B     	 cmp r3,#0
 868 0028 06D1     	 bne .L54
 418:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         tcp_backlog_accepted(pcb);
 869              	 .loc 1 418 0
 870 002a 7868     	 ldr r0,[r7,#4]
 871 002c FFF7FEFF 	 bl tcp_backlog_accepted
 419:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         MIB2_STATS_INC(mib2.tcpattemptfails);
 420:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         pcb->state = FIN_WAIT_1;
 872              	 .loc 1 420 0
 873 0030 7B68     	 ldr r3,[r7,#4]
 874 0032 0522     	 movs r2,#5
 875 0034 1A75     	 strb r2,[r3,#20]
 421:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
 422:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       break;
 876              	 .loc 1 422 0
 877 0036 1EE0     	 b .L55
 878              	.L54:
 879 0038 1DE0     	 b .L55
 880              	.L51:
 423:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     case ESTABLISHED:
 424:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       err = tcp_send_fin(pcb);
 881              	 .loc 1 424 0
 882 003a 7868     	 ldr r0,[r7,#4]
 883 003c FFF7FEFF 	 bl tcp_send_fin
 884 0040 0346     	 mov r3,r0
 885 0042 FB73     	 strb r3,[r7,#15]
 425:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (err == ERR_OK) {
 886              	 .loc 1 425 0
 887 0044 97F90F30 	 ldrsb r3,[r7,#15]
 888 0048 002B     	 cmp r3,#0
 889 004a 03D1     	 bne .L56
 426:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         MIB2_STATS_INC(mib2.tcpestabresets);
 427:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         pcb->state = FIN_WAIT_1;
 890              	 .loc 1 427 0
 891 004c 7B68     	 ldr r3,[r7,#4]
 892 004e 0522     	 movs r2,#5
 893 0050 1A75     	 strb r2,[r3,#20]
 428:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
 429:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       break;
 894              	 .loc 1 429 0
 895 0052 10E0     	 b .L55
 896              	.L56:
 897 0054 0FE0     	 b .L55
 898              	.L52:
 430:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     case CLOSE_WAIT:
 431:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       err = tcp_send_fin(pcb);
 899              	 .loc 1 431 0
 900 0056 7868     	 ldr r0,[r7,#4]
 901 0058 FFF7FEFF 	 bl tcp_send_fin
 902 005c 0346     	 mov r3,r0
 903 005e FB73     	 strb r3,[r7,#15]
 432:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (err == ERR_OK) {
 904              	 .loc 1 432 0
 905 0060 97F90F30 	 ldrsb r3,[r7,#15]
 906 0064 002B     	 cmp r3,#0
 907 0066 03D1     	 bne .L57
 433:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         MIB2_STATS_INC(mib2.tcpestabresets);
 434:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         pcb->state = LAST_ACK;
 908              	 .loc 1 434 0
 909 0068 7B68     	 ldr r3,[r7,#4]
 910 006a 0922     	 movs r2,#9
 911 006c 1A75     	 strb r2,[r3,#20]
 435:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
 436:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       break;
 912              	 .loc 1 436 0
 913 006e 02E0     	 b .L55
 914              	.L57:
 915 0070 01E0     	 b .L55
 916              	.L61:
 437:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     default:
 438:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* Has already been closed, do nothing. */
 439:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       return ERR_OK;
 917              	 .loc 1 439 0
 918 0072 0023     	 movs r3,#0
 919 0074 16E0     	 b .L58
 920              	.L55:
 440:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 441:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 442:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (err == ERR_OK) {
 921              	 .loc 1 442 0
 922 0076 97F90F30 	 ldrsb r3,[r7,#15]
 923 007a 002B     	 cmp r3,#0
 924 007c 03D1     	 bne .L59
 443:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* To ensure all data has been sent when tcp_close returns, we have
 444:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        to make sure tcp_output doesn't fail.
 445:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        Since we don't really have to ensure all data has been sent when tcp_close
 446:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        returns (unsent data is sent from tcp timer functions, also), we don't care
 447:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        for the return value of tcp_output for now. */
 448:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_output(pcb);
 925              	 .loc 1 448 0
 926 007e 7868     	 ldr r0,[r7,#4]
 927 0080 FFF7FEFF 	 bl tcp_output
 928 0084 0DE0     	 b .L60
 929              	.L59:
 449:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   } else if (err == ERR_MEM) {
 930              	 .loc 1 449 0
 931 0086 97F90F30 	 ldrsb r3,[r7,#15]
 932 008a B3F1FF3F 	 cmp r3,#-1
 933 008e 08D1     	 bne .L60
 450:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
 451:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_set_flags(pcb, TF_CLOSEPEND);
 934              	 .loc 1 451 0
 935 0090 7B68     	 ldr r3,[r7,#4]
 936 0092 5B8B     	 ldrh r3,[r3,#26]
 937 0094 43F00803 	 orr r3,r3,#8
 938 0098 9AB2     	 uxth r2,r3
 939 009a 7B68     	 ldr r3,[r7,#4]
 940 009c 5A83     	 strh r2,[r3,#26]
 452:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* We have to return ERR_OK from here to indicate to the callers that this
 453:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        pcb should not be used any more as it will be freed soon via tcp_tmr.
 454:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        This is OK here since sending FIN does not guarantee a time frime for
 455:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        actually freeing the pcb, either (it is left in closure states for
 456:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        remote ACK or timeout) */
 457:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     return ERR_OK;
 941              	 .loc 1 457 0
 942 009e 0023     	 movs r3,#0
 943 00a0 00E0     	 b .L58
 944              	.L60:
 458:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 459:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return err;
 945              	 .loc 1 459 0
 946 00a2 FB7B     	 ldrb r3,[r7,#15]
 947              	.L58:
 948 00a4 5BB2     	 sxtb r3,r3
 460:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 949              	 .loc 1 460 0
 950 00a6 1846     	 mov r0,r3
 951 00a8 1037     	 adds r7,r7,#16
 952              	.LCFI45:
 953              	 .cfi_def_cfa_offset 8
 954 00aa BD46     	 mov sp,r7
 955              	.LCFI46:
 956              	 .cfi_def_cfa_register 13
 957              	 
 958 00ac 80BD     	 pop {r7,pc}
 959              	 .cfi_endproc
 960              	.LFE142:
 962 00ae 00BF     	 .section .text.tcp_close,"ax",%progbits
 963              	 .align 2
 964              	 .global tcp_close
 965              	 .thumb
 966              	 .thumb_func
 968              	tcp_close:
 969              	.LFB143:
 461:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 462:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
 463:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
 464:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Closes the connection held by the PCB.
 465:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 466:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Listening pcbs are freed and may not be referenced any more.
 467:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Connection pcbs are freed if not yet connected and may not be referenced
 468:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * any more. If a connection is established (at least SYN received or in
 469:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * a closing state), the connection is closed, and put in a closing state.
 470:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * The pcb is then automatically freed in tcp_slowtmr(). It is therefore
 471:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * unsafe to reference it (unless an error is returned).
 472:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * 
 473:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * The function may return ERR_MEM if no memory
 474:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * was available for closing the connection. If so, the application
 475:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * should wait and try again either by using the acknowledgment
 476:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * callback or the polling functionality. If the close succeeds, the
 477:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * function returns ERR_OK.
 478:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 479:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb the tcp_pcb to close
 480:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @return ERR_OK if connection has been closed
 481:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *         another err_t if closing failed and pcb is not freed
 482:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 483:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** err_t
 484:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_close(struct tcp_pcb *pcb)
 485:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 970              	 .loc 1 485 0
 971              	 .cfi_startproc
 972              	 
 973              	 
 974 0000 80B5     	 push {r7,lr}
 975              	.LCFI47:
 976              	 .cfi_def_cfa_offset 8
 977              	 .cfi_offset 7,-8
 978              	 .cfi_offset 14,-4
 979 0002 82B0     	 sub sp,sp,#8
 980              	.LCFI48:
 981              	 .cfi_def_cfa_offset 16
 982 0004 00AF     	 add r7,sp,#0
 983              	.LCFI49:
 984              	 .cfi_def_cfa_register 7
 985 0006 7860     	 str r0,[r7,#4]
 486:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
 487:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 488:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 986              	 .loc 1 488 0
 987 0008 7B68     	 ldr r3,[r7,#4]
 988 000a 002B     	 cmp r3,#0
 989 000c 01D1     	 bne .L63
 990              	 .loc 1 488 0 is_stmt 0 discriminator 1
 991 000e F023     	 movs r3,#240
 992 0010 0FE0     	 b .L64
 993              	.L63:
 489:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
 490:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 491:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   tcp_debug_print_state(pcb->state);
 492:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 493:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb->state != LISTEN) {
 994              	 .loc 1 493 0 is_stmt 1
 995 0012 7B68     	 ldr r3,[r7,#4]
 996 0014 1B7D     	 ldrb r3,[r3,#20]
 997 0016 012B     	 cmp r3,#1
 998 0018 06D0     	 beq .L65
 494:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Set a flag not to receive any more data... */
 495:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_set_flags(pcb, TF_RXCLOSED);
 999              	 .loc 1 495 0
 1000 001a 7B68     	 ldr r3,[r7,#4]
 1001 001c 5B8B     	 ldrh r3,[r3,#26]
 1002 001e 43F01003 	 orr r3,r3,#16
 1003 0022 9AB2     	 uxth r2,r3
 1004 0024 7B68     	 ldr r3,[r7,#4]
 1005 0026 5A83     	 strh r2,[r3,#26]
 1006              	.L65:
 496:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 497:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* ... and close */
 498:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return tcp_close_shutdown(pcb, 1);
 1007              	 .loc 1 498 0
 1008 0028 7868     	 ldr r0,[r7,#4]
 1009 002a 0121     	 movs r1,#1
 1010 002c FFF7FEFF 	 bl tcp_close_shutdown
 1011 0030 0346     	 mov r3,r0
 1012              	.L64:
 1013 0032 5BB2     	 sxtb r3,r3
 499:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 1014              	 .loc 1 499 0
 1015 0034 1846     	 mov r0,r3
 1016 0036 0837     	 adds r7,r7,#8
 1017              	.LCFI50:
 1018              	 .cfi_def_cfa_offset 8
 1019 0038 BD46     	 mov sp,r7
 1020              	.LCFI51:
 1021              	 .cfi_def_cfa_register 13
 1022              	 
 1023 003a 80BD     	 pop {r7,pc}
 1024              	 .cfi_endproc
 1025              	.LFE143:
 1027              	 .section .text.tcp_shutdown,"ax",%progbits
 1028              	 .align 2
 1029              	 .global tcp_shutdown
 1030              	 .thumb
 1031              	 .thumb_func
 1033              	tcp_shutdown:
 1034              	.LFB144:
 500:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 501:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
 502:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
 503:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Causes all or part of a full-duplex connection of this PCB to be shut down.
 504:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * This doesn't deallocate the PCB unless shutting down both sides!
 505:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Shutting down both sides is the same as calling tcp_close, so if it succeds
 506:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * (i.e. returns ER_OK), the PCB must not be referenced any more!
 507:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 508:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb PCB to shutdown
 509:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param shut_rx shut down receive side if this is != 0
 510:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param shut_tx shut down send side if this is != 0
 511:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 512:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *         another err_t on error.
 513:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 514:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** err_t
 515:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
 516:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 1035              	 .loc 1 516 0
 1036              	 .cfi_startproc
 1037              	 
 1038              	 
 1039 0000 80B5     	 push {r7,lr}
 1040              	.LCFI52:
 1041              	 .cfi_def_cfa_offset 8
 1042              	 .cfi_offset 7,-8
 1043              	 .cfi_offset 14,-4
 1044 0002 84B0     	 sub sp,sp,#16
 1045              	.LCFI53:
 1046              	 .cfi_def_cfa_offset 24
 1047 0004 00AF     	 add r7,sp,#0
 1048              	.LCFI54:
 1049              	 .cfi_def_cfa_register 7
 1050 0006 F860     	 str r0,[r7,#12]
 1051 0008 B960     	 str r1,[r7,#8]
 1052 000a 7A60     	 str r2,[r7,#4]
 517:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
 518:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 519:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 1053              	 .loc 1 519 0
 1054 000c FB68     	 ldr r3,[r7,#12]
 1055 000e 002B     	 cmp r3,#0
 1056 0010 01D1     	 bne .L67
 1057              	 .loc 1 519 0 is_stmt 0 discriminator 1
 1058 0012 F023     	 movs r3,#240
 1059 0014 3AE0     	 b .L68
 1060              	.L67:
 520:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 521:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb->state == LISTEN) {
 1061              	 .loc 1 521 0 is_stmt 1
 1062 0016 FB68     	 ldr r3,[r7,#12]
 1063 0018 1B7D     	 ldrb r3,[r3,#20]
 1064 001a 012B     	 cmp r3,#1
 1065 001c 01D1     	 bne .L69
 522:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     return ERR_CONN;
 1066              	 .loc 1 522 0
 1067 001e F523     	 movs r3,#245
 1068 0020 34E0     	 b .L68
 1069              	.L69:
 523:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 524:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (shut_rx) {
 1070              	 .loc 1 524 0
 1071 0022 BB68     	 ldr r3,[r7,#8]
 1072 0024 002B     	 cmp r3,#0
 1073 0026 1BD0     	 beq .L70
 525:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* shut down the receive side: set a flag not to receive any more data... */
 526:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_set_flags(pcb, TF_RXCLOSED);
 1074              	 .loc 1 526 0
 1075 0028 FB68     	 ldr r3,[r7,#12]
 1076 002a 5B8B     	 ldrh r3,[r3,#26]
 1077 002c 43F01003 	 orr r3,r3,#16
 1078 0030 9AB2     	 uxth r2,r3
 1079 0032 FB68     	 ldr r3,[r7,#12]
 1080 0034 5A83     	 strh r2,[r3,#26]
 527:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (shut_tx) {
 1081              	 .loc 1 527 0
 1082 0036 7B68     	 ldr r3,[r7,#4]
 1083 0038 002B     	 cmp r3,#0
 1084 003a 05D0     	 beq .L71
 528:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* shutting down the tx AND rx side is the same as closing for the raw API */
 529:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       return tcp_close_shutdown(pcb, 1);
 1085              	 .loc 1 529 0
 1086 003c F868     	 ldr r0,[r7,#12]
 1087 003e 0121     	 movs r1,#1
 1088 0040 FFF7FEFF 	 bl tcp_close_shutdown
 1089 0044 0346     	 mov r3,r0
 1090 0046 21E0     	 b .L68
 1091              	.L71:
 530:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
 531:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* ... and free buffered data */
 532:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->refused_data != NULL) {
 1092              	 .loc 1 532 0
 1093 0048 FB68     	 ldr r3,[r7,#12]
 1094 004a 9B6F     	 ldr r3,[r3,#120]
 1095 004c 002B     	 cmp r3,#0
 1096 004e 07D0     	 beq .L70
 533:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pbuf_free(pcb->refused_data);
 1097              	 .loc 1 533 0
 1098 0050 FB68     	 ldr r3,[r7,#12]
 1099 0052 9B6F     	 ldr r3,[r3,#120]
 1100 0054 1846     	 mov r0,r3
 1101 0056 FFF7FEFF 	 bl pbuf_free
 534:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb->refused_data = NULL;
 1102              	 .loc 1 534 0
 1103 005a FB68     	 ldr r3,[r7,#12]
 1104 005c 0022     	 movs r2,#0
 1105 005e 9A67     	 str r2,[r3,#120]
 1106              	.L70:
 535:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
 536:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 537:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (shut_tx) {
 1107              	 .loc 1 537 0
 1108 0060 7B68     	 ldr r3,[r7,#4]
 1109 0062 002B     	 cmp r3,#0
 1110 0064 11D0     	 beq .L72
 538:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* This can't happen twice since if it succeeds, the pcb's state is changed.
 539:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        Only close in these states as the others directly deallocate the PCB */
 540:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     switch (pcb->state) {
 1111              	 .loc 1 540 0
 1112 0066 FB68     	 ldr r3,[r7,#12]
 1113 0068 1B7D     	 ldrb r3,[r3,#20]
 1114 006a 032B     	 cmp r3,#3
 1115 006c 0BDB     	 blt .L73
 1116 006e 042B     	 cmp r3,#4
 1117 0070 01DD     	 ble .L74
 1118 0072 072B     	 cmp r3,#7
 1119 0074 07D1     	 bne .L73
 1120              	.L74:
 541:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       case SYN_RCVD:
 542:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       case ESTABLISHED:
 543:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       case CLOSE_WAIT:
 544:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 1121              	 .loc 1 544 0
 1122 0076 BB68     	 ldr r3,[r7,#8]
 1123 0078 DBB2     	 uxtb r3,r3
 1124 007a F868     	 ldr r0,[r7,#12]
 1125 007c 1946     	 mov r1,r3
 1126 007e FFF7FEFF 	 bl tcp_close_shutdown
 1127 0082 0346     	 mov r3,r0
 1128 0084 02E0     	 b .L68
 1129              	.L73:
 545:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       default:
 546:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
 547:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           into CLOSED state, where the PCB is deallocated. */
 548:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         return ERR_CONN;
 1130              	 .loc 1 548 0
 1131 0086 F523     	 movs r3,#245
 1132 0088 00E0     	 b .L68
 1133              	.L72:
 549:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
 550:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 551:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return ERR_OK;
 1134              	 .loc 1 551 0
 1135 008a 0023     	 movs r3,#0
 1136              	.L68:
 1137 008c 5BB2     	 sxtb r3,r3
 552:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 1138              	 .loc 1 552 0
 1139 008e 1846     	 mov r0,r3
 1140 0090 1037     	 adds r7,r7,#16
 1141              	.LCFI55:
 1142              	 .cfi_def_cfa_offset 8
 1143 0092 BD46     	 mov sp,r7
 1144              	.LCFI56:
 1145              	 .cfi_def_cfa_register 13
 1146              	 
 1147 0094 80BD     	 pop {r7,pc}
 1148              	 .cfi_endproc
 1149              	.LFE144:
 1151 0096 00BF     	 .section .text.tcp_abandon,"ax",%progbits
 1152              	 .align 2
 1153              	 .global tcp_abandon
 1154              	 .thumb
 1155              	 .thumb_func
 1157              	tcp_abandon:
 1158              	.LFB145:
 553:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 554:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
 555:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Abandons a connection and optionally sends a RST to the remote
 556:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * host.  Deletes the local protocol control block. This is done when
 557:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * a connection is killed because of shortage of memory.
 558:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 559:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb the tcp_pcb to abort
 560:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param reset boolean to indicate whether a reset should be sent
 561:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 562:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
 563:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_abandon(struct tcp_pcb *pcb, int reset)
 564:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 1159              	 .loc 1 564 0
 1160              	 .cfi_startproc
 1161              	 
 1162              	 
 1163 0000 90B5     	 push {r4,r7,lr}
 1164              	.LCFI57:
 1165              	 .cfi_def_cfa_offset 12
 1166              	 .cfi_offset 4,-12
 1167              	 .cfi_offset 7,-8
 1168              	 .cfi_offset 14,-4
 1169 0002 8FB0     	 sub sp,sp,#60
 1170              	.LCFI58:
 1171              	 .cfi_def_cfa_offset 72
 1172 0004 04AF     	 add r7,sp,#16
 1173              	.LCFI59:
 1174              	 .cfi_def_cfa 7,56
 1175 0006 7860     	 str r0,[r7,#4]
 1176 0008 3960     	 str r1,[r7]
 565:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   u32_t seqno, ackno;
 566:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_CALLBACK_API
 567:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   tcp_err_fn errf;
 568:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_CALLBACK_API */
 569:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   void *errf_arg;
 570:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 571:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
 572:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 573:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 1177              	 .loc 1 573 0
 1178 000a 7B68     	 ldr r3,[r7,#4]
 1179 000c 002B     	 cmp r3,#0
 1180 000e 00D1     	 bne .L76
 1181 0010 91E0     	 b .L75
 1182              	.L76:
 574:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 575:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* pcb->state LISTEN not allowed here */
 576:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 577:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               pcb->state != LISTEN);
 578:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* Figure out on which TCP PCB list we are, and remove us. If we
 579:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****      are in an active state, call the receive function associated with
 580:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****      the PCB with a NULL argument, and send an RST to the remote end. */
 581:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb->state == TIME_WAIT) {
 1183              	 .loc 1 581 0
 1184 0012 7B68     	 ldr r3,[r7,#4]
 1185 0014 1B7D     	 ldrb r3,[r3,#20]
 1186 0016 0A2B     	 cmp r3,#10
 1187 0018 07D1     	 bne .L78
 582:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 1188              	 .loc 1 582 0
 1189 001a 4848     	 ldr r0,.L91
 1190 001c 7968     	 ldr r1,[r7,#4]
 1191 001e FFF7FEFF 	 bl tcp_pcb_remove
 583:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_free(pcb);
 1192              	 .loc 1 583 0
 1193 0022 7868     	 ldr r0,[r7,#4]
 1194 0024 FFF7FEFF 	 bl tcp_free
 1195 0028 85E0     	 b .L75
 1196              	.L78:
 1197              	.LBB4:
 584:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   } else {
 585:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     int send_rst = 0;
 1198              	 .loc 1 585 0
 1199 002a 0023     	 movs r3,#0
 1200 002c 7B62     	 str r3,[r7,#36]
 586:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     u16_t local_port = 0;
 1201              	 .loc 1 586 0
 1202 002e 0023     	 movs r3,#0
 1203 0030 7B84     	 strh r3,[r7,#34]
 587:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     enum tcp_state last_state;
 588:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     seqno = pcb->snd_nxt;
 1204              	 .loc 1 588 0
 1205 0032 7B68     	 ldr r3,[r7,#4]
 1206 0034 1B6D     	 ldr r3,[r3,#80]
 1207 0036 BB61     	 str r3,[r7,#24]
 589:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     ackno = pcb->rcv_nxt;
 1208              	 .loc 1 589 0
 1209 0038 7B68     	 ldr r3,[r7,#4]
 1210 003a 5B6A     	 ldr r3,[r3,#36]
 1211 003c 7B61     	 str r3,[r7,#20]
 590:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_CALLBACK_API
 591:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     errf = pcb->errf;
 1212              	 .loc 1 591 0
 1213 003e 7B68     	 ldr r3,[r7,#4]
 1214 0040 D3F89030 	 ldr r3,[r3,#144]
 1215 0044 3B61     	 str r3,[r7,#16]
 592:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_CALLBACK_API */
 593:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     errf_arg = pcb->callback_arg;
 1216              	 .loc 1 593 0
 1217 0046 7B68     	 ldr r3,[r7,#4]
 1218 0048 1B69     	 ldr r3,[r3,#16]
 1219 004a FB60     	 str r3,[r7,#12]
 594:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->state == CLOSED) {
 1220              	 .loc 1 594 0
 1221 004c 7B68     	 ldr r3,[r7,#4]
 1222 004e 1B7D     	 ldrb r3,[r3,#20]
 1223 0050 002B     	 cmp r3,#0
 1224 0052 26D1     	 bne .L79
 595:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (pcb->local_port != 0) {
 1225              	 .loc 1 595 0
 1226 0054 7B68     	 ldr r3,[r7,#4]
 1227 0056 DB8A     	 ldrh r3,[r3,#22]
 1228 0058 002B     	 cmp r3,#0
 1229 005a 2ED0     	 beq .L86
 596:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* bound, not yet opened */
 597:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         TCP_RMV(&tcp_bound_pcbs, pcb);
 1230              	 .loc 1 597 0
 1231 005c 384B     	 ldr r3,.L91+4
 1232 005e 1A68     	 ldr r2,[r3]
 1233 0060 7B68     	 ldr r3,[r7,#4]
 1234 0062 9A42     	 cmp r2,r3
 1235 0064 05D1     	 bne .L81
 1236              	 .loc 1 597 0 is_stmt 0 discriminator 1
 1237 0066 364B     	 ldr r3,.L91+4
 1238 0068 1B68     	 ldr r3,[r3]
 1239 006a DB68     	 ldr r3,[r3,#12]
 1240 006c 344A     	 ldr r2,.L91+4
 1241 006e 1360     	 str r3,[r2]
 1242 0070 13E0     	 b .L82
 1243              	.L81:
 1244              	.LBB5:
 1245              	 .loc 1 597 0 discriminator 2
 1246 0072 334B     	 ldr r3,.L91+4
 1247 0074 1B68     	 ldr r3,[r3]
 1248 0076 FB61     	 str r3,[r7,#28]
 1249 0078 0CE0     	 b .L83
 1250              	.L85:
 1251              	 .loc 1 597 0 discriminator 9
 1252 007a FB69     	 ldr r3,[r7,#28]
 1253 007c DA68     	 ldr r2,[r3,#12]
 1254 007e 7B68     	 ldr r3,[r7,#4]
 1255 0080 9A42     	 cmp r2,r3
 1256 0082 04D1     	 bne .L84
 1257              	 .loc 1 597 0 discriminator 5
 1258 0084 7B68     	 ldr r3,[r7,#4]
 1259 0086 DA68     	 ldr r2,[r3,#12]
 1260 0088 FB69     	 ldr r3,[r7,#28]
 1261 008a DA60     	 str r2,[r3,#12]
 1262 008c 05E0     	 b .L82
 1263              	.L84:
 1264              	 .loc 1 597 0 discriminator 6
 1265 008e FB69     	 ldr r3,[r7,#28]
 1266 0090 DB68     	 ldr r3,[r3,#12]
 1267 0092 FB61     	 str r3,[r7,#28]
 1268              	.L83:
 1269              	 .loc 1 597 0 discriminator 8
 1270 0094 FB69     	 ldr r3,[r7,#28]
 1271 0096 002B     	 cmp r3,#0
 1272 0098 EFD1     	 bne .L85
 1273              	.L82:
 1274              	.LBE5:
 1275              	 .loc 1 597 0 discriminator 10
 1276 009a 7B68     	 ldr r3,[r7,#4]
 1277 009c 0022     	 movs r2,#0
 1278 009e DA60     	 str r2,[r3,#12]
 1279 00a0 0BE0     	 b .L86
 1280              	.L79:
 598:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
 599:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     } else {
 600:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       send_rst = reset;
 1281              	 .loc 1 600 0 is_stmt 1
 1282 00a2 3B68     	 ldr r3,[r7]
 1283 00a4 7B62     	 str r3,[r7,#36]
 601:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       local_port = pcb->local_port;
 1284              	 .loc 1 601 0
 1285 00a6 7B68     	 ldr r3,[r7,#4]
 1286 00a8 DB8A     	 ldrh r3,[r3,#22]
 1287 00aa 7B84     	 strh r3,[r7,#34]
 602:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       TCP_PCB_REMOVE_ACTIVE(pcb);
 1288              	 .loc 1 602 0
 1289 00ac 2548     	 ldr r0,.L91+8
 1290 00ae 7968     	 ldr r1,[r7,#4]
 1291 00b0 FFF7FEFF 	 bl tcp_pcb_remove
 1292 00b4 244B     	 ldr r3,.L91+12
 1293 00b6 0122     	 movs r2,#1
 1294 00b8 1A70     	 strb r2,[r3]
 1295              	.L86:
 603:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
 604:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->unacked != NULL) {
 1296              	 .loc 1 604 0
 1297 00ba 7B68     	 ldr r3,[r7,#4]
 1298 00bc 1B6F     	 ldr r3,[r3,#112]
 1299 00be 002B     	 cmp r3,#0
 1300 00c0 04D0     	 beq .L87
 605:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_segs_free(pcb->unacked);
 1301              	 .loc 1 605 0
 1302 00c2 7B68     	 ldr r3,[r7,#4]
 1303 00c4 1B6F     	 ldr r3,[r3,#112]
 1304 00c6 1846     	 mov r0,r3
 1305 00c8 FFF7FEFF 	 bl tcp_segs_free
 1306              	.L87:
 606:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
 607:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->unsent != NULL) {
 1307              	 .loc 1 607 0
 1308 00cc 7B68     	 ldr r3,[r7,#4]
 1309 00ce DB6E     	 ldr r3,[r3,#108]
 1310 00d0 002B     	 cmp r3,#0
 1311 00d2 04D0     	 beq .L88
 608:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_segs_free(pcb->unsent);
 1312              	 .loc 1 608 0
 1313 00d4 7B68     	 ldr r3,[r7,#4]
 1314 00d6 DB6E     	 ldr r3,[r3,#108]
 1315 00d8 1846     	 mov r0,r3
 1316 00da FFF7FEFF 	 bl tcp_segs_free
 1317              	.L88:
 609:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
 610:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_QUEUE_OOSEQ
 611:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->ooseq != NULL) {
 1318              	 .loc 1 611 0
 1319 00de 7B68     	 ldr r3,[r7,#4]
 1320 00e0 5B6F     	 ldr r3,[r3,#116]
 1321 00e2 002B     	 cmp r3,#0
 1322 00e4 04D0     	 beq .L89
 612:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_segs_free(pcb->ooseq);
 1323              	 .loc 1 612 0
 1324 00e6 7B68     	 ldr r3,[r7,#4]
 1325 00e8 5B6F     	 ldr r3,[r3,#116]
 1326 00ea 1846     	 mov r0,r3
 1327 00ec FFF7FEFF 	 bl tcp_segs_free
 1328              	.L89:
 613:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
 614:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* TCP_QUEUE_OOSEQ */
 615:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_backlog_accepted(pcb);
 1329              	 .loc 1 615 0
 1330 00f0 7868     	 ldr r0,[r7,#4]
 1331 00f2 FFF7FEFF 	 bl tcp_backlog_accepted
 616:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (send_rst) {
 1332              	 .loc 1 616 0
 1333 00f6 7B6A     	 ldr r3,[r7,#36]
 1334 00f8 002B     	 cmp r3,#0
 1335 00fa 0ED0     	 beq .L90
 617:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
 618:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 1336              	 .loc 1 618 0
 1337 00fc 7C68     	 ldr r4,[r7,#4]
 1338 00fe 7B68     	 ldr r3,[r7,#4]
 1339 0100 1A1D     	 adds r2,r3,#4
 1340 0102 7B68     	 ldr r3,[r7,#4]
 1341 0104 1B8B     	 ldrh r3,[r3,#24]
 1342 0106 0092     	 str r2,[sp]
 1343 0108 7A8C     	 ldrh r2,[r7,#34]
 1344 010a 0192     	 str r2,[sp,#4]
 1345 010c 0293     	 str r3,[sp,#8]
 1346 010e 7868     	 ldr r0,[r7,#4]
 1347 0110 B969     	 ldr r1,[r7,#24]
 1348 0112 7A69     	 ldr r2,[r7,#20]
 1349 0114 2346     	 mov r3,r4
 1350 0116 FFF7FEFF 	 bl tcp_rst
 1351              	.L90:
 619:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
 620:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     last_state = pcb->state;
 1352              	 .loc 1 620 0
 1353 011a 7B68     	 ldr r3,[r7,#4]
 1354 011c 1B7D     	 ldrb r3,[r3,#20]
 1355 011e FB72     	 strb r3,[r7,#11]
 621:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_free(pcb);
 1356              	 .loc 1 621 0
 1357 0120 7868     	 ldr r0,[r7,#4]
 1358 0122 FFF7FEFF 	 bl tcp_free
 622:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 1359              	 .loc 1 622 0
 1360 0126 3B69     	 ldr r3,[r7,#16]
 1361 0128 002B     	 cmp r3,#0
 1362 012a 04D0     	 beq .L75
 1363              	 .loc 1 622 0 is_stmt 0 discriminator 1
 1364 012c 3B69     	 ldr r3,[r7,#16]
 1365 012e F868     	 ldr r0,[r7,#12]
 1366 0130 6FF00C01 	 mvn r1,#12
 1367 0134 9847     	 blx r3
 1368              	.L75:
 1369              	.LBE4:
 623:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 624:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 1370              	 .loc 1 624 0 is_stmt 1
 1371 0136 2C37     	 adds r7,r7,#44
 1372              	.LCFI60:
 1373              	 .cfi_def_cfa_offset 12
 1374 0138 BD46     	 mov sp,r7
 1375              	.LCFI61:
 1376              	 .cfi_def_cfa_register 13
 1377              	 
 1378 013a 90BD     	 pop {r4,r7,pc}
 1379              	.L92:
 1380              	 .align 2
 1381              	.L91:
 1382 013c 00000000 	 .word tcp_tw_pcbs
 1383 0140 00000000 	 .word tcp_bound_pcbs
 1384 0144 00000000 	 .word tcp_active_pcbs
 1385 0148 00000000 	 .word tcp_active_pcbs_changed
 1386              	 .cfi_endproc
 1387              	.LFE145:
 1389              	 .section .text.tcp_abort,"ax",%progbits
 1390              	 .align 2
 1391              	 .global tcp_abort
 1392              	 .thumb
 1393              	 .thumb_func
 1395              	tcp_abort:
 1396              	.LFB146:
 625:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 626:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
 627:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
 628:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Aborts the connection by sending a RST (reset) segment to the remote
 629:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * host. The pcb is deallocated. This function never fails.
 630:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 631:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * ATTENTION: When calling this from one of the TCP callbacks, make
 632:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * sure you always return ERR_ABRT (and never return ERR_ABRT otherwise
 633:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * or you will risk accessing deallocated memory or memory leaks!
 634:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 635:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb the tcp pcb to abort
 636:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 637:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
 638:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_abort(struct tcp_pcb *pcb)
 639:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 1397              	 .loc 1 639 0
 1398              	 .cfi_startproc
 1399              	 
 1400              	 
 1401 0000 80B5     	 push {r7,lr}
 1402              	.LCFI62:
 1403              	 .cfi_def_cfa_offset 8
 1404              	 .cfi_offset 7,-8
 1405              	 .cfi_offset 14,-4
 1406 0002 82B0     	 sub sp,sp,#8
 1407              	.LCFI63:
 1408              	 .cfi_def_cfa_offset 16
 1409 0004 00AF     	 add r7,sp,#0
 1410              	.LCFI64:
 1411              	 .cfi_def_cfa_register 7
 1412 0006 7860     	 str r0,[r7,#4]
 640:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   tcp_abandon(pcb, 1);
 1413              	 .loc 1 640 0
 1414 0008 7868     	 ldr r0,[r7,#4]
 1415 000a 0121     	 movs r1,#1
 1416 000c FFF7FEFF 	 bl tcp_abandon
 641:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 1417              	 .loc 1 641 0
 1418 0010 0837     	 adds r7,r7,#8
 1419              	.LCFI65:
 1420              	 .cfi_def_cfa_offset 8
 1421 0012 BD46     	 mov sp,r7
 1422              	.LCFI66:
 1423              	 .cfi_def_cfa_register 13
 1424              	 
 1425 0014 80BD     	 pop {r7,pc}
 1426              	 .cfi_endproc
 1427              	.LFE146:
 1429 0016 00BF     	 .section .text.tcp_bind,"ax",%progbits
 1430              	 .align 2
 1431              	 .global tcp_bind
 1432              	 .thumb
 1433              	 .thumb_func
 1435              	tcp_bind:
 1436              	.LFB147:
 642:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 643:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
 644:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
 645:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Binds the connection to a local port number and IP address. If the
 646:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * IP address is not given (i.e., ipaddr == IP_ANY_TYPE), the connection is
 647:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * bound to all local IP addresses.
 648:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * If another connection is bound to the same port, the function will
 649:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * return ERR_USE, otherwise ERR_OK is returned.
 650:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 651:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb the tcp_pcb to bind (no check is done whether this pcb is
 652:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *        already bound!)
 653:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param ipaddr the local ip address to bind to (use IPx_ADDR_ANY to bind
 654:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *        to any local address
 655:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param port the local port to bind to
 656:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @return ERR_USE if the port is already in use
 657:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *         ERR_VAL if bind failed because the PCB is not in a valid state
 658:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *         ERR_OK if bound
 659:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 660:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** err_t
 661:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
 662:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 1437              	 .loc 1 662 0
 1438              	 .cfi_startproc
 1439              	 
 1440              	 
 1441 0000 80B5     	 push {r7,lr}
 1442              	.LCFI67:
 1443              	 .cfi_def_cfa_offset 8
 1444              	 .cfi_offset 7,-8
 1445              	 .cfi_offset 14,-4
 1446 0002 88B0     	 sub sp,sp,#32
 1447              	.LCFI68:
 1448              	 .cfi_def_cfa_offset 40
 1449 0004 00AF     	 add r7,sp,#0
 1450              	.LCFI69:
 1451              	 .cfi_def_cfa_register 7
 1452 0006 F860     	 str r0,[r7,#12]
 1453 0008 B960     	 str r1,[r7,#8]
 1454 000a 1346     	 mov r3,r2
 1455 000c FB80     	 strh r3,[r7,#6]
 663:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   int i;
 664:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   int max_pcb_list = NUM_TCP_PCB_LISTS;
 1456              	 .loc 1 664 0
 1457 000e 0423     	 movs r3,#4
 1458 0010 7B61     	 str r3,[r7,#20]
 665:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct tcp_pcb *cpcb;
 666:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_IPV6 && LWIP_IPV6_SCOPES
 667:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   ip_addr_t zoned_ipaddr;
 668:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */
 669:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 670:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
 671:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 672:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_IPV4
 673:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
 674:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (ipaddr == NULL) {
 1459              	 .loc 1 674 0
 1460 0012 BB68     	 ldr r3,[r7,#8]
 1461 0014 002B     	 cmp r3,#0
 1462 0016 01D1     	 bne .L95
 675:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     ipaddr = IP4_ADDR_ANY;
 1463              	 .loc 1 675 0
 1464 0018 364B     	 ldr r3,.L110
 1465 001a BB60     	 str r3,[r7,#8]
 1466              	.L95:
 676:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 677:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #else /* LWIP_IPV4 */
 678:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 679:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_IPV4 */
 680:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 681:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 1467              	 .loc 1 681 0
 1468 001c FB68     	 ldr r3,[r7,#12]
 1469 001e 002B     	 cmp r3,#0
 1470 0020 01D1     	 bne .L96
 1471              	 .loc 1 681 0 is_stmt 0 discriminator 1
 1472 0022 F023     	 movs r3,#240
 1473 0024 60E0     	 b .L97
 1474              	.L96:
 682:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 683:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 1475              	 .loc 1 683 0 is_stmt 1
 1476 0026 FB68     	 ldr r3,[r7,#12]
 1477 0028 1B7D     	 ldrb r3,[r3,#20]
 1478 002a 002B     	 cmp r3,#0
 1479 002c 01D0     	 beq .L98
 1480              	 .loc 1 683 0 is_stmt 0 discriminator 1
 1481 002e FA23     	 movs r3,#250
 1482 0030 5AE0     	 b .L97
 1483              	.L98:
 684:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 685:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if SO_REUSE
 686:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* Unless the REUSEADDR flag is set,
 687:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****      we have to check the pcbs in TIME-WAIT state, also.
 688:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****      We do not dump TIME_WAIT pcb's; they can still be matched by incoming
 689:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****      packets using both local and remote IP addresses and ports to distinguish.
 690:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****    */
 691:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (ip_get_option(pcb, SOF_REUSEADDR)) {
 692:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
 693:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 694:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* SO_REUSE */
 695:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 696:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_IPV6 && LWIP_IPV6_SCOPES
 697:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* If the given IP address should have a zone but doesn't, assign one now.
 698:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****    * This is legacy support: scope-aware callers should always provide properly
 699:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****    * zoned source addresses. Do the zone selection before the address-in-use
 700:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****    * check below; as such we have to make a temporary copy of the address. */
 701:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (IP_IS_V6(ipaddr) && ip6_addr_lacks_zone(ip_2_ip6(ipaddr), IP6_UNICAST)) {
 702:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     ip_addr_copy(zoned_ipaddr, *ipaddr);
 703:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
 704:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     ipaddr = &zoned_ipaddr;
 705:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 706:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */
 707:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 708:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (port == 0) {
 1484              	 .loc 1 708 0 is_stmt 1
 1485 0032 FB88     	 ldrh r3,[r7,#6]
 1486 0034 002B     	 cmp r3,#0
 1487 0036 08D1     	 bne .L99
 709:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     port = tcp_new_port();
 1488              	 .loc 1 709 0
 1489 0038 FFF7FEFF 	 bl tcp_new_port
 1490 003c 0346     	 mov r3,r0
 1491 003e FB80     	 strh r3,[r7,#6]
 710:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (port == 0) {
 1492              	 .loc 1 710 0
 1493 0040 FB88     	 ldrh r3,[r7,#6]
 1494 0042 002B     	 cmp r3,#0
 1495 0044 33D1     	 bne .L100
 711:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       return ERR_BUF;
 1496              	 .loc 1 711 0
 1497 0046 FE23     	 movs r3,#254
 1498 0048 4EE0     	 b .L97
 1499              	.L99:
 712:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
 713:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   } else {
 714:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Check if the address already is in use (on all lists) */
 715:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     for (i = 0; i < max_pcb_list; i++) {
 1500              	 .loc 1 715 0
 1501 004a 0023     	 movs r3,#0
 1502 004c FB61     	 str r3,[r7,#28]
 1503 004e 2AE0     	 b .L101
 1504              	.L106:
 716:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 1505              	 .loc 1 716 0
 1506 0050 294A     	 ldr r2,.L110+4
 1507 0052 FB69     	 ldr r3,[r7,#28]
 1508 0054 52F82330 	 ldr r3,[r2,r3,lsl#2]
 1509 0058 1B68     	 ldr r3,[r3]
 1510 005a BB61     	 str r3,[r7,#24]
 1511 005c 1DE0     	 b .L102
 1512              	.L105:
 717:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if (cpcb->local_port == port) {
 1513              	 .loc 1 717 0
 1514 005e BB69     	 ldr r3,[r7,#24]
 1515 0060 DB8A     	 ldrh r3,[r3,#22]
 1516 0062 FA88     	 ldrh r2,[r7,#6]
 1517 0064 9A42     	 cmp r2,r3
 1518 0066 15D1     	 bne .L103
 718:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if SO_REUSE
 719:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           /* Omit checking for the same port if both pcbs have REUSEADDR set.
 720:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****              For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
 721:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****              tcp_connect. */
 722:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 723:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               !ip_get_option(cpcb, SOF_REUSEADDR))
 724:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* SO_REUSE */
 725:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           {
 726:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             /* @todo: check accept_any_ip_version */
 727:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 728:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                 (ip_addr_isany(&cpcb->local_ip) ||
 1519              	 .loc 1 728 0
 1520 0068 BB69     	 ldr r3,[r7,#24]
 727:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                 (ip_addr_isany(&cpcb->local_ip) ||
 1521              	 .loc 1 727 0
 1522 006a 002B     	 cmp r3,#0
 1523 006c 10D0     	 beq .L104
 1524              	 .loc 1 728 0
 1525 006e BB69     	 ldr r3,[r7,#24]
 1526 0070 1B68     	 ldr r3,[r3]
 1527 0072 002B     	 cmp r3,#0
 1528 0074 0CD0     	 beq .L104
 1529              	 .loc 1 728 0 is_stmt 0 discriminator 1
 1530 0076 BB68     	 ldr r3,[r7,#8]
 1531 0078 002B     	 cmp r3,#0
 1532 007a 09D0     	 beq .L104
 729:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                  ip_addr_isany(ipaddr) ||
 1533              	 .loc 1 729 0 is_stmt 1
 1534 007c BB68     	 ldr r3,[r7,#8]
 1535 007e 1B68     	 ldr r3,[r3]
 1536 0080 002B     	 cmp r3,#0
 1537 0082 05D0     	 beq .L104
 730:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                  ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 1538              	 .loc 1 730 0
 1539 0084 BB69     	 ldr r3,[r7,#24]
 1540 0086 1A68     	 ldr r2,[r3]
 1541 0088 BB68     	 ldr r3,[r7,#8]
 1542 008a 1B68     	 ldr r3,[r3]
 727:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                 (ip_addr_isany(&cpcb->local_ip) ||
 1543              	 .loc 1 727 0
 1544 008c 9A42     	 cmp r2,r3
 1545 008e 01D1     	 bne .L103
 1546              	.L104:
 731:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               return ERR_USE;
 1547              	 .loc 1 731 0
 1548 0090 F823     	 movs r3,#248
 1549 0092 29E0     	 b .L97
 1550              	.L103:
 716:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if (cpcb->local_port == port) {
 1551              	 .loc 1 716 0 discriminator 2
 1552 0094 BB69     	 ldr r3,[r7,#24]
 1553 0096 DB68     	 ldr r3,[r3,#12]
 1554 0098 BB61     	 str r3,[r7,#24]
 1555              	.L102:
 716:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if (cpcb->local_port == port) {
 1556              	 .loc 1 716 0 is_stmt 0 discriminator 1
 1557 009a BB69     	 ldr r3,[r7,#24]
 1558 009c 002B     	 cmp r3,#0
 1559 009e DED1     	 bne .L105
 715:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 1560              	 .loc 1 715 0 is_stmt 1 discriminator 2
 1561 00a0 FB69     	 ldr r3,[r7,#28]
 1562 00a2 0133     	 adds r3,r3,#1
 1563 00a4 FB61     	 str r3,[r7,#28]
 1564              	.L101:
 715:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 1565              	 .loc 1 715 0 is_stmt 0 discriminator 1
 1566 00a6 FA69     	 ldr r2,[r7,#28]
 1567 00a8 7B69     	 ldr r3,[r7,#20]
 1568 00aa 9A42     	 cmp r2,r3
 1569 00ac D0DB     	 blt .L106
 1570              	.L100:
 732:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             }
 733:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           }
 734:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         }
 735:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
 736:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
 737:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 738:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 739:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (!ip_addr_isany(ipaddr)
 1571              	 .loc 1 739 0 is_stmt 1
 1572 00ae BB68     	 ldr r3,[r7,#8]
 1573 00b0 002B     	 cmp r3,#0
 1574 00b2 0CD0     	 beq .L107
 1575              	 .loc 1 739 0 is_stmt 0 discriminator 1
 1576 00b4 BB68     	 ldr r3,[r7,#8]
 1577 00b6 1B68     	 ldr r3,[r3]
 1578 00b8 002B     	 cmp r3,#0
 1579 00ba 08D0     	 beq .L107
 740:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_IPV4 && LWIP_IPV6
 741:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
 742:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_IPV4 && LWIP_IPV6 */
 743:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****      ) {
 744:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     ip_addr_set(&pcb->local_ip, ipaddr);
 1580              	 .loc 1 744 0 is_stmt 1
 1581 00bc BB68     	 ldr r3,[r7,#8]
 1582 00be 002B     	 cmp r3,#0
 1583 00c0 02D0     	 beq .L108
 1584              	 .loc 1 744 0 is_stmt 0 discriminator 1
 1585 00c2 BB68     	 ldr r3,[r7,#8]
 1586 00c4 1B68     	 ldr r3,[r3]
 1587 00c6 00E0     	 b .L109
 1588              	.L108:
 1589              	 .loc 1 744 0 discriminator 2
 1590 00c8 0023     	 movs r3,#0
 1591              	.L109:
 1592              	 .loc 1 744 0 discriminator 4
 1593 00ca FA68     	 ldr r2,[r7,#12]
 1594 00cc 1360     	 str r3,[r2]
 1595              	.L107:
 745:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 746:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->local_port = port;
 1596              	 .loc 1 746 0 is_stmt 1
 1597 00ce FB68     	 ldr r3,[r7,#12]
 1598 00d0 FA88     	 ldrh r2,[r7,#6]
 1599 00d2 DA82     	 strh r2,[r3,#22]
 747:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   TCP_REG(&tcp_bound_pcbs, pcb);
 1600              	 .loc 1 747 0
 1601 00d4 094B     	 ldr r3,.L110+8
 1602 00d6 1A68     	 ldr r2,[r3]
 1603 00d8 FB68     	 ldr r3,[r7,#12]
 1604 00da DA60     	 str r2,[r3,#12]
 1605 00dc 074A     	 ldr r2,.L110+8
 1606 00de FB68     	 ldr r3,[r7,#12]
 1607 00e0 1360     	 str r3,[r2]
 1608 00e2 FFF7FEFF 	 bl tcp_timer_needed
 748:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
 749:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return ERR_OK;
 1609              	 .loc 1 749 0
 1610 00e6 0023     	 movs r3,#0
 1611              	.L97:
 1612 00e8 5BB2     	 sxtb r3,r3
 750:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 1613              	 .loc 1 750 0
 1614 00ea 1846     	 mov r0,r3
 1615 00ec 2037     	 adds r7,r7,#32
 1616              	.LCFI70:
 1617              	 .cfi_def_cfa_offset 8
 1618 00ee BD46     	 mov sp,r7
 1619              	.LCFI71:
 1620              	 .cfi_def_cfa_register 13
 1621              	 
 1622 00f0 80BD     	 pop {r7,pc}
 1623              	.L111:
 1624 00f2 00BF     	 .align 2
 1625              	.L110:
 1626 00f4 00000000 	 .word ip_addr_any
 1627 00f8 00000000 	 .word tcp_pcb_lists
 1628 00fc 00000000 	 .word tcp_bound_pcbs
 1629              	 .cfi_endproc
 1630              	.LFE147:
 1632              	 .section .text.tcp_bind_netif,"ax",%progbits
 1633              	 .align 2
 1634              	 .global tcp_bind_netif
 1635              	 .thumb
 1636              	 .thumb_func
 1638              	tcp_bind_netif:
 1639              	.LFB148:
 751:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 752:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
 753:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
 754:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Binds the connection to a netif and IP address.
 755:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * After calling this function, all packets received via this PCB
 756:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * are guaranteed to have come in via the specified netif, and all
 757:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * outgoing packets will go out via the specified netif.
 758:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 759:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb the tcp_pcb to bind.
 760:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param netif the netif to bind to. Can be NULL.
 761:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 762:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
 763:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
 764:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 1640              	 .loc 1 764 0
 1641              	 .cfi_startproc
 1642              	 
 1643              	 
 1644              	 
 1645 0000 80B4     	 push {r7}
 1646              	.LCFI72:
 1647              	 .cfi_def_cfa_offset 4
 1648              	 .cfi_offset 7,-4
 1649 0002 83B0     	 sub sp,sp,#12
 1650              	.LCFI73:
 1651              	 .cfi_def_cfa_offset 16
 1652 0004 00AF     	 add r7,sp,#0
 1653              	.LCFI74:
 1654              	 .cfi_def_cfa_register 7
 1655 0006 7860     	 str r0,[r7,#4]
 1656 0008 3960     	 str r1,[r7]
 765:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
 766:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (netif != NULL) {
 1657              	 .loc 1 766 0
 1658 000a 3B68     	 ldr r3,[r7]
 1659 000c 002B     	 cmp r3,#0
 1660 000e 07D0     	 beq .L113
 767:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->netif_idx = netif_get_index(netif);
 1661              	 .loc 1 767 0
 1662 0010 3B68     	 ldr r3,[r7]
 1663 0012 93F83030 	 ldrb r3,[r3,#48]
 1664 0016 0133     	 adds r3,r3,#1
 1665 0018 DAB2     	 uxtb r2,r3
 1666 001a 7B68     	 ldr r3,[r7,#4]
 1667 001c 1A72     	 strb r2,[r3,#8]
 1668 001e 02E0     	 b .L112
 1669              	.L113:
 768:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   } else {
 769:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->netif_idx = NETIF_NO_INDEX;
 1670              	 .loc 1 769 0
 1671 0020 7B68     	 ldr r3,[r7,#4]
 1672 0022 0022     	 movs r2,#0
 1673 0024 1A72     	 strb r2,[r3,#8]
 1674              	.L112:
 770:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 771:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 1675              	 .loc 1 771 0
 1676 0026 0C37     	 adds r7,r7,#12
 1677              	.LCFI75:
 1678              	 .cfi_def_cfa_offset 4
 1679 0028 BD46     	 mov sp,r7
 1680              	.LCFI76:
 1681              	 .cfi_def_cfa_register 13
 1682              	 
 1683 002a 5DF8047B 	 ldr r7,[sp],#4
 1684              	.LCFI77:
 1685              	 .cfi_restore 7
 1686              	 .cfi_def_cfa_offset 0
 1687 002e 7047     	 bx lr
 1688              	 .cfi_endproc
 1689              	.LFE148:
 1691              	 .section .text.tcp_accept_null,"ax",%progbits
 1692              	 .align 2
 1693              	 .thumb
 1694              	 .thumb_func
 1696              	tcp_accept_null:
 1697              	.LFB149:
 772:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 773:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_CALLBACK_API
 774:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
 775:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Default accept callback if no accept callback is specified by the user.
 776:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 777:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static err_t
 778:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
 779:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 1698              	 .loc 1 779 0
 1699              	 .cfi_startproc
 1700              	 
 1701              	 
 1702 0000 80B5     	 push {r7,lr}
 1703              	.LCFI78:
 1704              	 .cfi_def_cfa_offset 8
 1705              	 .cfi_offset 7,-8
 1706              	 .cfi_offset 14,-4
 1707 0002 84B0     	 sub sp,sp,#16
 1708              	.LCFI79:
 1709              	 .cfi_def_cfa_offset 24
 1710 0004 00AF     	 add r7,sp,#0
 1711              	.LCFI80:
 1712              	 .cfi_def_cfa_register 7
 1713 0006 F860     	 str r0,[r7,#12]
 1714 0008 B960     	 str r1,[r7,#8]
 1715 000a 1346     	 mov r3,r2
 1716 000c FB71     	 strb r3,[r7,#7]
 780:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_UNUSED_ARG(arg);
 781:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_UNUSED_ARG(err);
 782:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 783:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 784:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 785:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   tcp_abort(pcb);
 1717              	 .loc 1 785 0
 1718 000e B868     	 ldr r0,[r7,#8]
 1719 0010 FFF7FEFF 	 bl tcp_abort
 786:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 787:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return ERR_ABRT;
 1720              	 .loc 1 787 0
 1721 0014 F323     	 movs r3,#243
 1722 0016 5BB2     	 sxtb r3,r3
 788:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 1723              	 .loc 1 788 0
 1724 0018 1846     	 mov r0,r3
 1725 001a 1037     	 adds r7,r7,#16
 1726              	.LCFI81:
 1727              	 .cfi_def_cfa_offset 8
 1728 001c BD46     	 mov sp,r7
 1729              	.LCFI82:
 1730              	 .cfi_def_cfa_register 13
 1731              	 
 1732 001e 80BD     	 pop {r7,pc}
 1733              	 .cfi_endproc
 1734              	.LFE149:
 1736              	 .section .text.tcp_listen_with_backlog,"ax",%progbits
 1737              	 .align 2
 1738              	 .global tcp_listen_with_backlog
 1739              	 .thumb
 1740              	 .thumb_func
 1742              	tcp_listen_with_backlog:
 1743              	.LFB150:
 789:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_CALLBACK_API */
 790:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 791:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
 792:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
 793:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Set the state of the connection to be LISTEN, which means that it
 794:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * is able to accept incoming connections. The protocol control block
 795:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * is reallocated in order to consume less memory. Setting the
 796:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * connection to LISTEN is an irreversible process.
 797:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * When an incoming connection is accepted, the function specified with
 798:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * the tcp_accept() function will be called. The pcb has to be bound
 799:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * to a local port with the tcp_bind() function.
 800:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * 
 801:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * The tcp_listen() function returns a new connection identifier, and
 802:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * the one passed as an argument to the function will be
 803:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * deallocated. The reason for this behavior is that less memory is
 804:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * needed for a connection that is listening, so tcp_listen() will
 805:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * reclaim the memory needed for the original connection and allocate a
 806:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * new smaller memory block for the listening connection.
 807:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 808:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * tcp_listen() may return NULL if no memory was available for the
 809:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * listening connection. If so, the memory associated with the pcb
 810:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * passed as an argument to tcp_listen() will not be deallocated.
 811:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 812:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * The backlog limits the number of outstanding connections
 813:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * in the listen queue to the value specified by the backlog argument.
 814:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * To use it, your need to set TCP_LISTEN_BACKLOG=1 in your lwipopts.h.
 815:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * 
 816:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb the original tcp_pcb
 817:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param backlog the incoming connections queue limit
 818:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @return tcp_pcb used for listening, consumes less memory.
 819:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 820:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @note The original tcp_pcb is freed. This function therefore has to be
 821:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *       called like this:
 822:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 823:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 824:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** struct tcp_pcb *
 825:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
 826:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 1744              	 .loc 1 826 0
 1745              	 .cfi_startproc
 1746              	 
 1747              	 
 1748 0000 80B5     	 push {r7,lr}
 1749              	.LCFI83:
 1750              	 .cfi_def_cfa_offset 8
 1751              	 .cfi_offset 7,-8
 1752              	 .cfi_offset 14,-4
 1753 0002 82B0     	 sub sp,sp,#8
 1754              	.LCFI84:
 1755              	 .cfi_def_cfa_offset 16
 1756 0004 00AF     	 add r7,sp,#0
 1757              	.LCFI85:
 1758              	 .cfi_def_cfa_register 7
 1759 0006 7860     	 str r0,[r7,#4]
 1760 0008 0B46     	 mov r3,r1
 1761 000a FB70     	 strb r3,[r7,#3]
 827:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
 828:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 1762              	 .loc 1 828 0
 1763 000c FB78     	 ldrb r3,[r7,#3]
 1764 000e 7868     	 ldr r0,[r7,#4]
 1765 0010 1946     	 mov r1,r3
 1766 0012 0022     	 movs r2,#0
 1767 0014 FFF7FEFF 	 bl tcp_listen_with_backlog_and_err
 1768 0018 0346     	 mov r3,r0
 829:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 1769              	 .loc 1 829 0
 1770 001a 1846     	 mov r0,r3
 1771 001c 0837     	 adds r7,r7,#8
 1772              	.LCFI86:
 1773              	 .cfi_def_cfa_offset 8
 1774 001e BD46     	 mov sp,r7
 1775              	.LCFI87:
 1776              	 .cfi_def_cfa_register 13
 1777              	 
 1778 0020 80BD     	 pop {r7,pc}
 1779              	 .cfi_endproc
 1780              	.LFE150:
 1782 0022 00BF     	 .section .text.tcp_listen_with_backlog_and_err,"ax",%progbits
 1783              	 .align 2
 1784              	 .global tcp_listen_with_backlog_and_err
 1785              	 .thumb
 1786              	 .thumb_func
 1788              	tcp_listen_with_backlog_and_err:
 1789              	.LFB151:
 830:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 831:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
 832:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
 833:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Set the state of the connection to be LISTEN, which means that it
 834:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * is able to accept incoming connections. The protocol control block
 835:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * is reallocated in order to consume less memory. Setting the
 836:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * connection to LISTEN is an irreversible process.
 837:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 838:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb the original tcp_pcb
 839:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param backlog the incoming connections queue limit
 840:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param err when NULL is returned, this contains the error reason
 841:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @return tcp_pcb used for listening, consumes less memory.
 842:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 843:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @note The original tcp_pcb is freed. This function therefore has to be
 844:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *       called like this:
 845:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 846:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 847:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** struct tcp_pcb *
 848:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
 849:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 1790              	 .loc 1 849 0
 1791              	 .cfi_startproc
 1792              	 
 1793              	 
 1794 0000 80B5     	 push {r7,lr}
 1795              	.LCFI88:
 1796              	 .cfi_def_cfa_offset 8
 1797              	 .cfi_offset 7,-8
 1798              	 .cfi_offset 14,-4
 1799 0002 88B0     	 sub sp,sp,#32
 1800              	.LCFI89:
 1801              	 .cfi_def_cfa_offset 40
 1802 0004 00AF     	 add r7,sp,#0
 1803              	.LCFI90:
 1804              	 .cfi_def_cfa_register 7
 1805 0006 F860     	 str r0,[r7,#12]
 1806 0008 0B46     	 mov r3,r1
 1807 000a 7A60     	 str r2,[r7,#4]
 1808 000c FB72     	 strb r3,[r7,#11]
 850:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct tcp_pcb_listen *lpcb = NULL;
 1809              	 .loc 1 850 0
 1810 000e 0023     	 movs r3,#0
 1811 0010 FB61     	 str r3,[r7,#28]
 851:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   err_t res;
 852:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 853:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_UNUSED_ARG(backlog);
 854:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 855:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
 856:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 857:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done)
 1812              	 .loc 1 857 0
 1813 0012 FB68     	 ldr r3,[r7,#12]
 1814 0014 002B     	 cmp r3,#0
 1815 0016 02D1     	 bne .L120
 1816              	 .loc 1 857 0 is_stmt 0 discriminator 1
 1817 0018 F023     	 movs r3,#240
 1818 001a FB76     	 strb r3,[r7,#27]
 1819 001c 7DE0     	 b .L121
 1820              	.L120:
 858:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = 
 1821              	 .loc 1 858 0 is_stmt 1
 1822 001e FB68     	 ldr r3,[r7,#12]
 1823 0020 1B7D     	 ldrb r3,[r3,#20]
 1824 0022 002B     	 cmp r3,#0
 1825 0024 02D0     	 beq .L122
 1826              	 .loc 1 858 0 is_stmt 0 discriminator 1
 1827 0026 F123     	 movs r3,#241
 1828 0028 FB76     	 strb r3,[r7,#27]
 1829 002a 76E0     	 b .L121
 1830              	.L122:
 859:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 860:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* already listening? */
 861:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb->state == LISTEN) {
 1831              	 .loc 1 861 0 is_stmt 1
 1832 002c FB68     	 ldr r3,[r7,#12]
 1833 002e 1B7D     	 ldrb r3,[r3,#20]
 1834 0030 012B     	 cmp r3,#1
 1835 0032 04D1     	 bne .L123
 862:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     lpcb = (struct tcp_pcb_listen *)pcb;
 1836              	 .loc 1 862 0
 1837 0034 FB68     	 ldr r3,[r7,#12]
 1838 0036 FB61     	 str r3,[r7,#28]
 863:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     res = ERR_ALREADY;
 1839              	 .loc 1 863 0
 1840 0038 F723     	 movs r3,#247
 1841 003a FB76     	 strb r3,[r7,#27]
 864:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     goto done;
 1842              	 .loc 1 864 0
 1843 003c 6DE0     	 b .L121
 1844              	.L123:
 865:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 866:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if SO_REUSE
 867:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (ip_get_option(pcb, SOF_REUSEADDR)) {
 868:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
 869:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        is declared (listen-/connection-pcb), we have to make sure now that
 870:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        this port is only used once for every local IP. */
 871:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 872:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if ((lpcb->local_port == pcb->local_port) &&
 873:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
 874:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* this address/port is already used */
 875:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         lpcb = NULL;
 876:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         res = ERR_USE;
 877:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         goto done;
 878:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
 879:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
 880:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 881:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* SO_REUSE */
 882:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 1845              	 .loc 1 882 0
 1846 003e 0220     	 movs r0,#2
 1847 0040 FFF7FEFF 	 bl memp_malloc
 1848 0044 F861     	 str r0,[r7,#28]
 883:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (lpcb == NULL) {
 1849              	 .loc 1 883 0
 1850 0046 FB69     	 ldr r3,[r7,#28]
 1851 0048 002B     	 cmp r3,#0
 1852 004a 02D1     	 bne .L124
 884:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     res = ERR_MEM;
 1853              	 .loc 1 884 0
 1854 004c FF23     	 movs r3,#255
 1855 004e FB76     	 strb r3,[r7,#27]
 885:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     goto done;
 1856              	 .loc 1 885 0
 1857 0050 63E0     	 b .L121
 1858              	.L124:
 886:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 887:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   lpcb->callback_arg = pcb->callback_arg;
 1859              	 .loc 1 887 0
 1860 0052 FB68     	 ldr r3,[r7,#12]
 1861 0054 1A69     	 ldr r2,[r3,#16]
 1862 0056 FB69     	 ldr r3,[r7,#28]
 1863 0058 1A61     	 str r2,[r3,#16]
 888:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   lpcb->local_port = pcb->local_port;
 1864              	 .loc 1 888 0
 1865 005a FB68     	 ldr r3,[r7,#12]
 1866 005c DA8A     	 ldrh r2,[r3,#22]
 1867 005e FB69     	 ldr r3,[r7,#28]
 1868 0060 DA82     	 strh r2,[r3,#22]
 889:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   lpcb->state = LISTEN;
 1869              	 .loc 1 889 0
 1870 0062 FB69     	 ldr r3,[r7,#28]
 1871 0064 0122     	 movs r2,#1
 1872 0066 1A75     	 strb r2,[r3,#20]
 890:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   lpcb->prio = pcb->prio;
 1873              	 .loc 1 890 0
 1874 0068 FB68     	 ldr r3,[r7,#12]
 1875 006a 5A7D     	 ldrb r2,[r3,#21]
 1876 006c FB69     	 ldr r3,[r7,#28]
 1877 006e 5A75     	 strb r2,[r3,#21]
 891:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   lpcb->so_options = pcb->so_options;
 1878              	 .loc 1 891 0
 1879 0070 FB68     	 ldr r3,[r7,#12]
 1880 0072 5A7A     	 ldrb r2,[r3,#9]
 1881 0074 FB69     	 ldr r3,[r7,#28]
 1882 0076 5A72     	 strb r2,[r3,#9]
 892:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   lpcb->netif_idx = NETIF_NO_INDEX;
 1883              	 .loc 1 892 0
 1884 0078 FB69     	 ldr r3,[r7,#28]
 1885 007a 0022     	 movs r2,#0
 1886 007c 1A72     	 strb r2,[r3,#8]
 893:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   lpcb->ttl = pcb->ttl;
 1887              	 .loc 1 893 0
 1888 007e FB68     	 ldr r3,[r7,#12]
 1889 0080 DA7A     	 ldrb r2,[r3,#11]
 1890 0082 FB69     	 ldr r3,[r7,#28]
 1891 0084 DA72     	 strb r2,[r3,#11]
 894:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   lpcb->tos = pcb->tos;
 1892              	 .loc 1 894 0
 1893 0086 FB68     	 ldr r3,[r7,#12]
 1894 0088 9A7A     	 ldrb r2,[r3,#10]
 1895 008a FB69     	 ldr r3,[r7,#28]
 1896 008c 9A72     	 strb r2,[r3,#10]
 895:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_IPV4 && LWIP_IPV6
 896:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
 897:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_IPV4 && LWIP_IPV6 */
 898:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 1897              	 .loc 1 898 0
 1898 008e FB68     	 ldr r3,[r7,#12]
 1899 0090 1A68     	 ldr r2,[r3]
 1900 0092 FB69     	 ldr r3,[r7,#28]
 1901 0094 1A60     	 str r2,[r3]
 899:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb->local_port != 0) {
 1902              	 .loc 1 899 0
 1903 0096 FB68     	 ldr r3,[r7,#12]
 1904 0098 DB8A     	 ldrh r3,[r3,#22]
 1905 009a 002B     	 cmp r3,#0
 1906 009c 21D0     	 beq .L125
 900:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     TCP_RMV(&tcp_bound_pcbs, pcb);
 1907              	 .loc 1 900 0
 1908 009e 244B     	 ldr r3,.L135
 1909 00a0 1A68     	 ldr r2,[r3]
 1910 00a2 FB68     	 ldr r3,[r7,#12]
 1911 00a4 9A42     	 cmp r2,r3
 1912 00a6 05D1     	 bne .L126
 1913              	 .loc 1 900 0 is_stmt 0 discriminator 1
 1914 00a8 214B     	 ldr r3,.L135
 1915 00aa 1B68     	 ldr r3,[r3]
 1916 00ac DB68     	 ldr r3,[r3,#12]
 1917 00ae 204A     	 ldr r2,.L135
 1918 00b0 1360     	 str r3,[r2]
 1919 00b2 13E0     	 b .L127
 1920              	.L126:
 1921              	.LBB6:
 1922              	 .loc 1 900 0 discriminator 2
 1923 00b4 1E4B     	 ldr r3,.L135
 1924 00b6 1B68     	 ldr r3,[r3]
 1925 00b8 7B61     	 str r3,[r7,#20]
 1926 00ba 0CE0     	 b .L128
 1927              	.L130:
 1928              	 .loc 1 900 0 discriminator 9
 1929 00bc 7B69     	 ldr r3,[r7,#20]
 1930 00be DA68     	 ldr r2,[r3,#12]
 1931 00c0 FB68     	 ldr r3,[r7,#12]
 1932 00c2 9A42     	 cmp r2,r3
 1933 00c4 04D1     	 bne .L129
 1934              	 .loc 1 900 0 discriminator 5
 1935 00c6 FB68     	 ldr r3,[r7,#12]
 1936 00c8 DA68     	 ldr r2,[r3,#12]
 1937 00ca 7B69     	 ldr r3,[r7,#20]
 1938 00cc DA60     	 str r2,[r3,#12]
 1939 00ce 05E0     	 b .L127
 1940              	.L129:
 1941              	 .loc 1 900 0 discriminator 6
 1942 00d0 7B69     	 ldr r3,[r7,#20]
 1943 00d2 DB68     	 ldr r3,[r3,#12]
 1944 00d4 7B61     	 str r3,[r7,#20]
 1945              	.L128:
 1946              	 .loc 1 900 0 discriminator 8
 1947 00d6 7B69     	 ldr r3,[r7,#20]
 1948 00d8 002B     	 cmp r3,#0
 1949 00da EFD1     	 bne .L130
 1950              	.L127:
 1951              	.LBE6:
 1952              	 .loc 1 900 0 discriminator 10
 1953 00dc FB68     	 ldr r3,[r7,#12]
 1954 00de 0022     	 movs r2,#0
 1955 00e0 DA60     	 str r2,[r3,#12]
 1956              	.L125:
 901:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 902:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_TCP_PCB_NUM_EXT_ARGS
 903:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* copy over ext_args to listening pcb  */
 904:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
 905:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif
 906:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   tcp_free(pcb);
 1957              	 .loc 1 906 0 is_stmt 1
 1958 00e2 F868     	 ldr r0,[r7,#12]
 1959 00e4 FFF7FEFF 	 bl tcp_free
 907:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_CALLBACK_API
 908:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   lpcb->accept = tcp_accept_null;
 1960              	 .loc 1 908 0
 1961 00e8 FB69     	 ldr r3,[r7,#28]
 1962 00ea 124A     	 ldr r2,.L135+4
 1963 00ec 9A61     	 str r2,[r3,#24]
 909:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_CALLBACK_API */
 910:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_LISTEN_BACKLOG
 911:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   lpcb->accepts_pending = 0;
 1964              	 .loc 1 911 0
 1965 00ee FB69     	 ldr r3,[r7,#28]
 1966 00f0 0022     	 movs r2,#0
 1967 00f2 5A77     	 strb r2,[r3,#29]
 912:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   tcp_backlog_set(lpcb, backlog);
 1968              	 .loc 1 912 0
 1969 00f4 FB7A     	 ldrb r3,[r7,#11]
 1970 00f6 002B     	 cmp r3,#0
 1971 00f8 01D0     	 beq .L131
 1972              	 .loc 1 912 0 is_stmt 0 discriminator 1
 1973 00fa FA7A     	 ldrb r2,[r7,#11]
 1974 00fc 00E0     	 b .L132
 1975              	.L131:
 1976              	 .loc 1 912 0 discriminator 2
 1977 00fe 0122     	 movs r2,#1
 1978              	.L132:
 1979              	 .loc 1 912 0 discriminator 4
 1980 0100 FB69     	 ldr r3,[r7,#28]
 1981 0102 1A77     	 strb r2,[r3,#28]
 913:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* TCP_LISTEN_BACKLOG */
 914:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 1982              	 .loc 1 914 0 is_stmt 1 discriminator 4
 1983 0104 0C4B     	 ldr r3,.L135+8
 1984 0106 1A68     	 ldr r2,[r3]
 1985 0108 FB69     	 ldr r3,[r7,#28]
 1986 010a DA60     	 str r2,[r3,#12]
 1987 010c 0A4A     	 ldr r2,.L135+8
 1988 010e FB69     	 ldr r3,[r7,#28]
 1989 0110 1360     	 str r3,[r2]
 1990 0112 FFF7FEFF 	 bl tcp_timer_needed
 915:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   res = ERR_OK;
 1991              	 .loc 1 915 0 discriminator 4
 1992 0116 0023     	 movs r3,#0
 1993 0118 FB76     	 strb r3,[r7,#27]
 1994              	.L121:
 916:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** done:
 917:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (err != NULL) {
 1995              	 .loc 1 917 0
 1996 011a 7B68     	 ldr r3,[r7,#4]
 1997 011c 002B     	 cmp r3,#0
 1998 011e 02D0     	 beq .L133
 918:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     *err = res;
 1999              	 .loc 1 918 0
 2000 0120 7B68     	 ldr r3,[r7,#4]
 2001 0122 FA7E     	 ldrb r2,[r7,#27]
 2002 0124 1A70     	 strb r2,[r3]
 2003              	.L133:
 919:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 920:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return (struct tcp_pcb *)lpcb;
 2004              	 .loc 1 920 0
 2005 0126 FB69     	 ldr r3,[r7,#28]
 921:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 2006              	 .loc 1 921 0
 2007 0128 1846     	 mov r0,r3
 2008 012a 2037     	 adds r7,r7,#32
 2009              	.LCFI91:
 2010              	 .cfi_def_cfa_offset 8
 2011 012c BD46     	 mov sp,r7
 2012              	.LCFI92:
 2013              	 .cfi_def_cfa_register 13
 2014              	 
 2015 012e 80BD     	 pop {r7,pc}
 2016              	.L136:
 2017              	 .align 2
 2018              	.L135:
 2019 0130 00000000 	 .word tcp_bound_pcbs
 2020 0134 00000000 	 .word tcp_accept_null
 2021 0138 00000000 	 .word tcp_listen_pcbs
 2022              	 .cfi_endproc
 2023              	.LFE151:
 2025              	 .section .text.tcp_update_rcv_ann_wnd,"ax",%progbits
 2026              	 .align 2
 2027              	 .global tcp_update_rcv_ann_wnd
 2028              	 .thumb
 2029              	 .thumb_func
 2031              	tcp_update_rcv_ann_wnd:
 2032              	.LFB152:
 922:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 923:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
 924:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Update the state that tracks the available window space to advertise.
 925:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 926:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Returns how much extra window would be advertised if we sent an
 927:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * update now.
 928:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 929:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** u32_t
 930:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
 931:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 2033              	 .loc 1 931 0
 2034              	 .cfi_startproc
 2035              	 
 2036              	 
 2037              	 
 2038 0000 80B4     	 push {r7}
 2039              	.LCFI93:
 2040              	 .cfi_def_cfa_offset 4
 2041              	 .cfi_offset 7,-4
 2042 0002 85B0     	 sub sp,sp,#20
 2043              	.LCFI94:
 2044              	 .cfi_def_cfa_offset 24
 2045 0004 00AF     	 add r7,sp,#0
 2046              	.LCFI95:
 2047              	 .cfi_def_cfa_register 7
 2048 0006 7860     	 str r0,[r7,#4]
 932:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   u32_t new_right_edge;
 933:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 934:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 935:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 2049              	 .loc 1 935 0
 2050 0008 7B68     	 ldr r3,[r7,#4]
 2051 000a 5B6A     	 ldr r3,[r3,#36]
 2052 000c 7A68     	 ldr r2,[r7,#4]
 2053 000e 128D     	 ldrh r2,[r2,#40]
 2054 0010 1344     	 add r3,r3,r2
 2055 0012 FB60     	 str r3,[r7,#12]
 936:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 937:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 2056              	 .loc 1 937 0
 2057 0014 7B68     	 ldr r3,[r7,#4]
 2058 0016 DB6A     	 ldr r3,[r3,#44]
 2059 0018 7A68     	 ldr r2,[r7,#4]
 2060 001a 528E     	 ldrh r2,[r2,#50]
 2061 001c B2F5866F 	 cmp r2,#1072
 2062 0020 02D8     	 bhi .L138
 2063              	 .loc 1 937 0 is_stmt 0 discriminator 1
 2064 0022 7A68     	 ldr r2,[r7,#4]
 2065 0024 528E     	 ldrh r2,[r2,#50]
 2066 0026 01E0     	 b .L139
 2067              	.L138:
 2068              	 .loc 1 937 0 discriminator 2
 2069 0028 4FF48662 	 mov r2,#1072
 2070              	.L139:
 2071              	 .loc 1 937 0 discriminator 4
 2072 002c 1344     	 add r3,r3,r2
 2073 002e FA68     	 ldr r2,[r7,#12]
 2074 0030 D31A     	 subs r3,r2,r3
 2075 0032 002B     	 cmp r3,#0
 2076 0034 08DB     	 blt .L140
 938:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* we can advertise more window */
 939:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->rcv_ann_wnd = pcb->rcv_wnd;
 2077              	 .loc 1 939 0 is_stmt 1
 2078 0036 7B68     	 ldr r3,[r7,#4]
 2079 0038 1A8D     	 ldrh r2,[r3,#40]
 2080 003a 7B68     	 ldr r3,[r7,#4]
 2081 003c 5A85     	 strh r2,[r3,#42]
 940:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     return new_right_edge - pcb->rcv_ann_right_edge;
 2082              	 .loc 1 940 0
 2083 003e 7B68     	 ldr r3,[r7,#4]
 2084 0040 DB6A     	 ldr r3,[r3,#44]
 2085 0042 FA68     	 ldr r2,[r7,#12]
 2086 0044 D31A     	 subs r3,r2,r3
 2087 0046 15E0     	 b .L141
 2088              	.L140:
 941:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   } else {
 942:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 2089              	 .loc 1 942 0
 2090 0048 7B68     	 ldr r3,[r7,#4]
 2091 004a 5A6A     	 ldr r2,[r3,#36]
 2092 004c 7B68     	 ldr r3,[r7,#4]
 2093 004e DB6A     	 ldr r3,[r3,#44]
 2094 0050 D31A     	 subs r3,r2,r3
 2095 0052 002B     	 cmp r3,#0
 2096 0054 03DD     	 ble .L142
 943:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* Can happen due to other end sending out of advertised window,
 944:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        * but within actual available (but not yet advertised) window */
 945:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb->rcv_ann_wnd = 0;
 2097              	 .loc 1 945 0
 2098 0056 7B68     	 ldr r3,[r7,#4]
 2099 0058 0022     	 movs r2,#0
 2100 005a 5A85     	 strh r2,[r3,#42]
 2101 005c 09E0     	 b .L143
 2102              	.L142:
 2103              	.LBB7:
 946:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     } else {
 947:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* keep the right edge of window constant */
 948:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 2104              	 .loc 1 948 0
 2105 005e 7B68     	 ldr r3,[r7,#4]
 2106 0060 DA6A     	 ldr r2,[r3,#44]
 2107 0062 7B68     	 ldr r3,[r7,#4]
 2108 0064 5B6A     	 ldr r3,[r3,#36]
 2109 0066 D31A     	 subs r3,r2,r3
 2110 0068 BB60     	 str r3,[r7,#8]
 949:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if !LWIP_WND_SCALE
 950:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 951:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif
 952:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 2111              	 .loc 1 952 0
 2112 006a BB68     	 ldr r3,[r7,#8]
 2113 006c 9AB2     	 uxth r2,r3
 2114 006e 7B68     	 ldr r3,[r7,#4]
 2115 0070 5A85     	 strh r2,[r3,#42]
 2116              	.L143:
 2117              	.LBE7:
 953:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
 954:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     return 0;
 2118              	 .loc 1 954 0
 2119 0072 0023     	 movs r3,#0
 2120              	.L141:
 955:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 956:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 2121              	 .loc 1 956 0
 2122 0074 1846     	 mov r0,r3
 2123 0076 1437     	 adds r7,r7,#20
 2124              	.LCFI96:
 2125              	 .cfi_def_cfa_offset 4
 2126 0078 BD46     	 mov sp,r7
 2127              	.LCFI97:
 2128              	 .cfi_def_cfa_register 13
 2129              	 
 2130 007a 5DF8047B 	 ldr r7,[sp],#4
 2131              	.LCFI98:
 2132              	 .cfi_restore 7
 2133              	 .cfi_def_cfa_offset 0
 2134 007e 7047     	 bx lr
 2135              	 .cfi_endproc
 2136              	.LFE152:
 2138              	 .section .text.tcp_recved,"ax",%progbits
 2139              	 .align 2
 2140              	 .global tcp_recved
 2141              	 .thumb
 2142              	 .thumb_func
 2144              	tcp_recved:
 2145              	.LFB153:
 957:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 958:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
 959:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
 960:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * This function should be called by the application when it has
 961:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * processed the data. The purpose is to advertise a larger window
 962:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * when the data has been processed.
 963:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
 964:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb the tcp_pcb for which data is read
 965:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param len the amount of bytes that have been read by the application
 966:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
 967:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
 968:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_recved(struct tcp_pcb *pcb, u16_t len)
 969:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 2146              	 .loc 1 969 0
 2147              	 .cfi_startproc
 2148              	 
 2149              	 
 2150 0000 80B5     	 push {r7,lr}
 2151              	.LCFI99:
 2152              	 .cfi_def_cfa_offset 8
 2153              	 .cfi_offset 7,-8
 2154              	 .cfi_offset 14,-4
 2155 0002 84B0     	 sub sp,sp,#16
 2156              	.LCFI100:
 2157              	 .cfi_def_cfa_offset 24
 2158 0004 00AF     	 add r7,sp,#0
 2159              	.LCFI101:
 2160              	 .cfi_def_cfa_register 7
 2161 0006 7860     	 str r0,[r7,#4]
 2162 0008 0B46     	 mov r3,r1
 2163 000a 7B80     	 strh r3,[r7,#2]
 970:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   u32_t wnd_inflation;
 971:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   tcpwnd_size_t rcv_wnd;
 972:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 973:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
 974:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 975:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 2164              	 .loc 1 975 0
 2165 000c 7B68     	 ldr r3,[r7,#4]
 2166 000e 002B     	 cmp r3,#0
 2167 0010 00D1     	 bne .L145
 2168 0012 27E0     	 b .L144
 2169              	.L145:
 976:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 977:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* pcb->state LISTEN not allowed here */
 978:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 979:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               pcb->state != LISTEN);
 980:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 981:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 2170              	 .loc 1 981 0
 2171 0014 7B68     	 ldr r3,[r7,#4]
 2172 0016 1A8D     	 ldrh r2,[r3,#40]
 2173 0018 7B88     	 ldrh r3,[r7,#2]
 2174 001a 1344     	 add r3,r3,r2
 2175 001c FB81     	 strh r3,[r7,#14]
 982:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 2176              	 .loc 1 982 0
 2177 001e FB89     	 ldrh r3,[r7,#14]
 2178 0020 B3F5066F 	 cmp r3,#2144
 2179 0024 04D8     	 bhi .L147
 2180              	 .loc 1 982 0 is_stmt 0 discriminator 1
 2181 0026 7B68     	 ldr r3,[r7,#4]
 2182 0028 1B8D     	 ldrh r3,[r3,#40]
 2183 002a FA89     	 ldrh r2,[r7,#14]
 2184 002c 9A42     	 cmp r2,r3
 2185 002e 04D2     	 bcs .L148
 2186              	.L147:
 983:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* window got too big or tcpwnd_size_t overflow */
 984:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
 985:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->rcv_wnd = TCP_WND_MAX(pcb);
 2187              	 .loc 1 985 0 is_stmt 1
 2188 0030 7B68     	 ldr r3,[r7,#4]
 2189 0032 4FF40662 	 mov r2,#2144
 2190 0036 1A85     	 strh r2,[r3,#40]
 2191 0038 02E0     	 b .L149
 2192              	.L148:
 986:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   } else  {
 987:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->rcv_wnd = rcv_wnd;
 2193              	 .loc 1 987 0
 2194 003a 7B68     	 ldr r3,[r7,#4]
 2195 003c FA89     	 ldrh r2,[r7,#14]
 2196 003e 1A85     	 strh r2,[r3,#40]
 2197              	.L149:
 988:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
 989:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 990:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 2198              	 .loc 1 990 0
 2199 0040 7868     	 ldr r0,[r7,#4]
 2200 0042 FFF7FEFF 	 bl tcp_update_rcv_ann_wnd
 2201 0046 B860     	 str r0,[r7,#8]
 991:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
 992:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* If the change in the right edge of window is significant (default
 993:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****    * watermark is TCP_WND/4), then send an explicit update now.
 994:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****    * Otherwise wait for a packet to be sent in the normal course of
 995:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****    * events (or more window to be available later) */
 996:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 2202              	 .loc 1 996 0
 2203 0048 BB68     	 ldr r3,[r7,#8]
 2204 004a B3F5067F 	 cmp r3,#536
 2205 004e 09D3     	 bcc .L144
 997:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_ack_now(pcb);
 2206              	 .loc 1 997 0
 2207 0050 7B68     	 ldr r3,[r7,#4]
 2208 0052 5B8B     	 ldrh r3,[r3,#26]
 2209 0054 43F00203 	 orr r3,r3,#2
 2210 0058 9AB2     	 uxth r2,r3
 2211 005a 7B68     	 ldr r3,[r7,#4]
 2212 005c 5A83     	 strh r2,[r3,#26]
 998:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_output(pcb);
 2213              	 .loc 1 998 0
 2214 005e 7868     	 ldr r0,[r7,#4]
 2215 0060 FFF7FEFF 	 bl tcp_output
 2216              	.L144:
 999:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1000:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1001:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F
1002:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                           len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
1003:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 2217              	 .loc 1 1003 0
 2218 0064 1037     	 adds r7,r7,#16
 2219              	.LCFI102:
 2220              	 .cfi_def_cfa_offset 8
 2221 0066 BD46     	 mov sp,r7
 2222              	.LCFI103:
 2223              	 .cfi_def_cfa_register 13
 2224              	 
 2225 0068 80BD     	 pop {r7,pc}
 2226              	 .cfi_endproc
 2227              	.LFE153:
 2229 006a 00BF     	 .section .text.tcp_new_port,"ax",%progbits
 2230              	 .align 2
 2231              	 .thumb
 2232              	 .thumb_func
 2234              	tcp_new_port:
 2235              	.LFB154:
1004:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1005:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
1006:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Allocate a new local TCP port.
1007:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
1008:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @return a new (free) local TCP port number
1009:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1010:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static u16_t
1011:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_new_port(void)
1012:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 2236              	 .loc 1 1012 0
 2237              	 .cfi_startproc
 2238              	 
 2239              	 
 2240              	 
 2241 0000 80B4     	 push {r7}
 2242              	.LCFI104:
 2243              	 .cfi_def_cfa_offset 4
 2244              	 .cfi_offset 7,-4
 2245 0002 83B0     	 sub sp,sp,#12
 2246              	.LCFI105:
 2247              	 .cfi_def_cfa_offset 16
 2248 0004 00AF     	 add r7,sp,#0
 2249              	.LCFI106:
 2250              	 .cfi_def_cfa_register 7
1013:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   u8_t i;
1014:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   u16_t n = 0;
 2251              	 .loc 1 1014 0
 2252 0006 0023     	 movs r3,#0
 2253 0008 BB80     	 strh r3,[r7,#4]
 2254              	.L151:
1015:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct tcp_pcb *pcb;
1016:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1017:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** again:
1018:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   tcp_port++;
 2255              	 .loc 1 1018 0
 2256 000a 1F4B     	 ldr r3,.L160
 2257 000c 1B88     	 ldrh r3,[r3]
 2258 000e 0133     	 adds r3,r3,#1
 2259 0010 9AB2     	 uxth r2,r3
 2260 0012 1D4B     	 ldr r3,.L160
 2261 0014 1A80     	 strh r2,[r3]
1019:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 2262              	 .loc 1 1019 0
 2263 0016 1C4B     	 ldr r3,.L160
 2264 0018 1B88     	 ldrh r3,[r3]
 2265 001a 4FF6FF72 	 movw r2,#65535
 2266 001e 9342     	 cmp r3,r2
 2267 0020 03D1     	 bne .L152
1020:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_port = TCP_LOCAL_PORT_RANGE_START;
 2268              	 .loc 1 1020 0
 2269 0022 194B     	 ldr r3,.L160
 2270 0024 4FF44042 	 mov r2,#49152
 2271 0028 1A80     	 strh r2,[r3]
 2272              	.L152:
1021:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1022:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* Check all PCB lists. */
1023:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 2273              	 .loc 1 1023 0
 2274 002a 0023     	 movs r3,#0
 2275 002c FB71     	 strb r3,[r7,#7]
 2276 002e 1FE0     	 b .L153
 2277              	.L159:
1024:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 2278              	 .loc 1 1024 0
 2279 0030 FB79     	 ldrb r3,[r7,#7]
 2280 0032 164A     	 ldr r2,.L160+4
 2281 0034 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2282 0038 1B68     	 ldr r3,[r3]
 2283 003a 3B60     	 str r3,[r7]
 2284 003c 12E0     	 b .L154
 2285              	.L158:
1025:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (pcb->local_port == tcp_port) {
 2286              	 .loc 1 1025 0
 2287 003e 3B68     	 ldr r3,[r7]
 2288 0040 DA8A     	 ldrh r2,[r3,#22]
 2289 0042 114B     	 ldr r3,.L160
 2290 0044 1B88     	 ldrh r3,[r3]
 2291 0046 9A42     	 cmp r2,r3
 2292 0048 09D1     	 bne .L155
1026:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         n++;
 2293              	 .loc 1 1026 0
 2294 004a BB88     	 ldrh r3,[r7,#4]
 2295 004c 0133     	 adds r3,r3,#1
 2296 004e BB80     	 strh r3,[r7,#4]
1027:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 2297              	 .loc 1 1027 0
 2298 0050 BB88     	 ldrh r3,[r7,#4]
 2299 0052 B3F5804F 	 cmp r3,#16384
 2300 0056 01D3     	 bcc .L156
1028:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           return 0;
 2301              	 .loc 1 1028 0
 2302 0058 0023     	 movs r3,#0
 2303 005a 0EE0     	 b .L157
 2304              	.L156:
1029:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         }
1030:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         goto again;
 2305              	 .loc 1 1030 0
 2306 005c D5E7     	 b .L151
 2307              	.L155:
1024:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (pcb->local_port == tcp_port) {
 2308              	 .loc 1 1024 0 discriminator 2
 2309 005e 3B68     	 ldr r3,[r7]
 2310 0060 DB68     	 ldr r3,[r3,#12]
 2311 0062 3B60     	 str r3,[r7]
 2312              	.L154:
1024:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (pcb->local_port == tcp_port) {
 2313              	 .loc 1 1024 0 is_stmt 0 discriminator 1
 2314 0064 3B68     	 ldr r3,[r7]
 2315 0066 002B     	 cmp r3,#0
 2316 0068 E9D1     	 bne .L158
1023:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 2317              	 .loc 1 1023 0 is_stmt 1 discriminator 2
 2318 006a FB79     	 ldrb r3,[r7,#7]
 2319 006c 0133     	 adds r3,r3,#1
 2320 006e FB71     	 strb r3,[r7,#7]
 2321              	.L153:
1023:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 2322              	 .loc 1 1023 0 is_stmt 0 discriminator 1
 2323 0070 FB79     	 ldrb r3,[r7,#7]
 2324 0072 032B     	 cmp r3,#3
 2325 0074 DCD9     	 bls .L159
1031:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1032:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1033:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1034:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return tcp_port;
 2326              	 .loc 1 1034 0 is_stmt 1
 2327 0076 044B     	 ldr r3,.L160
 2328 0078 1B88     	 ldrh r3,[r3]
 2329              	.L157:
1035:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 2330              	 .loc 1 1035 0
 2331 007a 1846     	 mov r0,r3
 2332 007c 0C37     	 adds r7,r7,#12
 2333              	.LCFI107:
 2334              	 .cfi_def_cfa_offset 4
 2335 007e BD46     	 mov sp,r7
 2336              	.LCFI108:
 2337              	 .cfi_def_cfa_register 13
 2338              	 
 2339 0080 5DF8047B 	 ldr r7,[sp],#4
 2340              	.LCFI109:
 2341              	 .cfi_restore 7
 2342              	 .cfi_def_cfa_offset 0
 2343 0084 7047     	 bx lr
 2344              	.L161:
 2345 0086 00BF     	 .align 2
 2346              	.L160:
 2347 0088 00000000 	 .word tcp_port
 2348 008c 00000000 	 .word tcp_pcb_lists
 2349              	 .cfi_endproc
 2350              	.LFE154:
 2352              	 .section .text.tcp_connect,"ax",%progbits
 2353              	 .align 2
 2354              	 .global tcp_connect
 2355              	 .thumb
 2356              	 .thumb_func
 2358              	tcp_connect:
 2359              	.LFB155:
1036:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1037:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
1038:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
1039:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Connects to another host. The function given as the "connected"
1040:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * argument will be called when the connection has been established.
1041:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *  Sets up the pcb to connect to the remote host and sends the
1042:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * initial SYN segment which opens the connection. 
1043:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
1044:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * The tcp_connect() function returns immediately; it does not wait for
1045:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * the connection to be properly setup. Instead, it will call the
1046:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * function specified as the fourth argument (the "connected" argument)
1047:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * when the connection is established. If the connection could not be
1048:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * properly established, either because the other host refused the
1049:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * connection or because the other host didn't answer, the "err"
1050:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * callback function of this pcb (registered with tcp_err, see below)
1051:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * will be called.
1052:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
1053:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * The tcp_connect() function can return ERR_MEM if no memory is
1054:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * available for enqueueing the SYN segment. If the SYN indeed was
1055:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * enqueued successfully, the tcp_connect() function returns ERR_OK.
1056:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
1057:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb the tcp_pcb used to establish the connection
1058:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param ipaddr the remote ip address to connect to
1059:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param port the remote tcp port to connect to
1060:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param connected callback function to call when connected (on error,
1061:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                     the err calback will be called)
1062:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @return ERR_VAL if invalid arguments are given
1063:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *         ERR_OK if connect request has been sent
1064:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *         other err_t values if connect request couldn't be sent
1065:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1066:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** err_t
1067:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
1068:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             tcp_connected_fn connected)
1069:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 2360              	 .loc 1 1069 0
 2361              	 .cfi_startproc
 2362              	 
 2363              	 
 2364 0000 80B5     	 push {r7,lr}
 2365              	.LCFI110:
 2366              	 .cfi_def_cfa_offset 8
 2367              	 .cfi_offset 7,-8
 2368              	 .cfi_offset 14,-4
 2369 0002 8AB0     	 sub sp,sp,#40
 2370              	.LCFI111:
 2371              	 .cfi_def_cfa_offset 48
 2372 0004 00AF     	 add r7,sp,#0
 2373              	.LCFI112:
 2374              	 .cfi_def_cfa_register 7
 2375 0006 F860     	 str r0,[r7,#12]
 2376 0008 B960     	 str r1,[r7,#8]
 2377 000a 3B60     	 str r3,[r7]
 2378 000c 1346     	 mov r3,r2
 2379 000e FB80     	 strh r3,[r7,#6]
1070:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct netif *netif = NULL;
 2380              	 .loc 1 1070 0
 2381 0010 0023     	 movs r3,#0
 2382 0012 7B62     	 str r3,[r7,#36]
1071:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   err_t ret;
1072:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   u32_t iss;
1073:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   u16_t old_local_port;
1074:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1075:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
1076:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1077:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 2383              	 .loc 1 1077 0
 2384 0014 FB68     	 ldr r3,[r7,#12]
 2385 0016 002B     	 cmp r3,#0
 2386 0018 01D1     	 bne .L163
 2387              	 .loc 1 1077 0 is_stmt 0 discriminator 1
 2388 001a F023     	 movs r3,#240
 2389 001c D9E0     	 b .L164
 2390              	.L163:
1078:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 2391              	 .loc 1 1078 0 is_stmt 1
 2392 001e BB68     	 ldr r3,[r7,#8]
 2393 0020 002B     	 cmp r3,#0
 2394 0022 01D1     	 bne .L165
 2395              	 .loc 1 1078 0 is_stmt 0 discriminator 1
 2396 0024 F023     	 movs r3,#240
 2397 0026 D4E0     	 b .L164
 2398              	.L165:
1079:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1080:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_IS
 2399              	 .loc 1 1080 0 is_stmt 1
 2400 0028 FB68     	 ldr r3,[r7,#12]
 2401 002a 1B7D     	 ldrb r3,[r3,#20]
 2402 002c 002B     	 cmp r3,#0
 2403 002e 01D0     	 beq .L166
 2404              	 .loc 1 1080 0 is_stmt 0 discriminator 1
 2405 0030 F623     	 movs r3,#246
 2406 0032 CEE0     	 b .L164
 2407              	.L166:
1081:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1082:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
1083:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   ip_addr_set(&pcb->remote_ip, ipaddr);
 2408              	 .loc 1 1083 0 is_stmt 1
 2409 0034 BB68     	 ldr r3,[r7,#8]
 2410 0036 002B     	 cmp r3,#0
 2411 0038 02D0     	 beq .L167
 2412              	 .loc 1 1083 0 is_stmt 0 discriminator 1
 2413 003a BB68     	 ldr r3,[r7,#8]
 2414 003c 1B68     	 ldr r3,[r3]
 2415 003e 00E0     	 b .L168
 2416              	.L167:
 2417              	 .loc 1 1083 0 discriminator 2
 2418 0040 0023     	 movs r3,#0
 2419              	.L168:
 2420              	 .loc 1 1083 0 discriminator 4
 2421 0042 FA68     	 ldr r2,[r7,#12]
 2422 0044 5360     	 str r3,[r2,#4]
1084:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->remote_port = port;
 2423              	 .loc 1 1084 0 is_stmt 1 discriminator 4
 2424 0046 FB68     	 ldr r3,[r7,#12]
 2425 0048 FA88     	 ldrh r2,[r7,#6]
 2426 004a 1A83     	 strh r2,[r3,#24]
1085:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1086:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb->netif_idx != NETIF_NO_INDEX) {
 2427              	 .loc 1 1086 0 discriminator 4
 2428 004c FB68     	 ldr r3,[r7,#12]
 2429 004e 1B7A     	 ldrb r3,[r3,#8]
 2430 0050 002B     	 cmp r3,#0
 2431 0052 06D0     	 beq .L169
1087:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     netif = netif_get_by_index(pcb->netif_idx);
 2432              	 .loc 1 1087 0
 2433 0054 FB68     	 ldr r3,[r7,#12]
 2434 0056 1B7A     	 ldrb r3,[r3,#8]
 2435 0058 1846     	 mov r0,r3
 2436 005a FFF7FEFF 	 bl netif_get_by_index
 2437 005e 7862     	 str r0,[r7,#36]
 2438 0060 05E0     	 b .L170
 2439              	.L169:
1088:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   } else {
1089:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* check if we have a route to the remote host */
1090:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 2440              	 .loc 1 1090 0
 2441 0062 FB68     	 ldr r3,[r7,#12]
 2442 0064 0433     	 adds r3,r3,#4
 2443 0066 1846     	 mov r0,r3
 2444 0068 FFF7FEFF 	 bl ip4_route
 2445 006c 7862     	 str r0,[r7,#36]
 2446              	.L170:
1091:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1092:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (netif == NULL) {
 2447              	 .loc 1 1092 0
 2448 006e 7B6A     	 ldr r3,[r7,#36]
 2449 0070 002B     	 cmp r3,#0
 2450 0072 01D1     	 bne .L171
1093:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Don't even try to send a SYN packet if we have no route since that will fail. */
1094:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     return ERR_RTE;
 2451              	 .loc 1 1094 0
 2452 0074 FC23     	 movs r3,#252
 2453 0076 ACE0     	 b .L164
 2454              	.L171:
1095:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1096:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1097:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* check if local IP has been assigned to pcb, if not, get one */
1098:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (ip_addr_isany(&pcb->local_ip)) {
 2455              	 .loc 1 1098 0
 2456 0078 FB68     	 ldr r3,[r7,#12]
 2457 007a 002B     	 cmp r3,#0
 2458 007c 03D0     	 beq .L172
 2459              	 .loc 1 1098 0 is_stmt 0 discriminator 1
 2460 007e FB68     	 ldr r3,[r7,#12]
 2461 0080 1B68     	 ldr r3,[r3]
 2462 0082 002B     	 cmp r3,#0
 2463 0084 10D1     	 bne .L173
 2464              	.L172:
 2465              	.LBB8:
1099:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 2466              	 .loc 1 1099 0 is_stmt 1
 2467 0086 7B6A     	 ldr r3,[r7,#36]
 2468 0088 002B     	 cmp r3,#0
 2469 008a 02D0     	 beq .L174
 2470              	 .loc 1 1099 0 is_stmt 0 discriminator 1
 2471 008c 7B6A     	 ldr r3,[r7,#36]
 2472 008e 0433     	 adds r3,r3,#4
 2473 0090 00E0     	 b .L175
 2474              	.L174:
 2475              	 .loc 1 1099 0 discriminator 2
 2476 0092 0023     	 movs r3,#0
 2477              	.L175:
 2478              	 .loc 1 1099 0 discriminator 4
 2479 0094 FB61     	 str r3,[r7,#28]
1100:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (local_ip == NULL) {
 2480              	 .loc 1 1100 0 is_stmt 1 discriminator 4
 2481 0096 FB69     	 ldr r3,[r7,#28]
 2482 0098 002B     	 cmp r3,#0
 2483 009a 01D1     	 bne .L176
1101:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       return ERR_RTE;
 2484              	 .loc 1 1101 0
 2485 009c FC23     	 movs r3,#252
 2486 009e 98E0     	 b .L164
 2487              	.L176:
1102:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1103:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     ip_addr_copy(pcb->local_ip, *local_ip);
 2488              	 .loc 1 1103 0
 2489 00a0 FB69     	 ldr r3,[r7,#28]
 2490 00a2 1A68     	 ldr r2,[r3]
 2491 00a4 FB68     	 ldr r3,[r7,#12]
 2492 00a6 1A60     	 str r2,[r3]
 2493              	.L173:
 2494              	.LBE8:
1104:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1105:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1106:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_IPV6 && LWIP_IPV6_SCOPES
1107:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* If the given IP address should have a zone but doesn't, assign one now.
1108:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****    * Given that we already have the target netif, this is easy and cheap. */
1109:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (IP_IS_V6(&pcb->remote_ip) &&
1110:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
1111:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
1112:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1113:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */
1114:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1115:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   old_local_port = pcb->local_port;
 2495              	 .loc 1 1115 0
 2496 00a8 FB68     	 ldr r3,[r7,#12]
 2497 00aa DB8A     	 ldrh r3,[r3,#22]
 2498 00ac 7B83     	 strh r3,[r7,#26]
1116:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb->local_port == 0) {
 2499              	 .loc 1 1116 0
 2500 00ae FB68     	 ldr r3,[r7,#12]
 2501 00b0 DB8A     	 ldrh r3,[r3,#22]
 2502 00b2 002B     	 cmp r3,#0
 2503 00b4 0BD1     	 bne .L177
1117:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->local_port = tcp_new_port();
 2504              	 .loc 1 1117 0
 2505 00b6 FFF7FEFF 	 bl tcp_new_port
 2506 00ba 0346     	 mov r3,r0
 2507 00bc 1A46     	 mov r2,r3
 2508 00be FB68     	 ldr r3,[r7,#12]
 2509 00c0 DA82     	 strh r2,[r3,#22]
1118:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->local_port == 0) {
 2510              	 .loc 1 1118 0
 2511 00c2 FB68     	 ldr r3,[r7,#12]
 2512 00c4 DB8A     	 ldrh r3,[r3,#22]
 2513 00c6 002B     	 cmp r3,#0
 2514 00c8 01D1     	 bne .L177
1119:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       return ERR_BUF;
 2515              	 .loc 1 1119 0
 2516 00ca FE23     	 movs r3,#254
 2517 00cc 81E0     	 b .L164
 2518              	.L177:
1120:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1121:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   } else {
1122:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if SO_REUSE
1123:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (ip_get_option(pcb, SOF_REUSEADDR)) {
1124:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
1125:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****          now that the 5-tuple is unique. */
1126:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       struct tcp_pcb *cpcb;
1127:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       int i;
1128:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
1129:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
1130:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
1131:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           if ((cpcb->local_port == pcb->local_port) &&
1132:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               (cpcb->remote_port == port) &&
1133:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
1134:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
1135:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             /* linux returns EISCONN here, but ERR_USE should be OK for us */
1136:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             return ERR_USE;
1137:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           }
1138:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         }
1139:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1140:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1141:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* SO_REUSE */
1142:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1143:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1144:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   iss = tcp_next_iss(pcb);
 2519              	 .loc 1 1144 0
 2520 00ce F868     	 ldr r0,[r7,#12]
 2521 00d0 FFF7FEFF 	 bl tcp_next_iss
 2522 00d4 7861     	 str r0,[r7,#20]
1145:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->rcv_nxt = 0;
 2523              	 .loc 1 1145 0
 2524 00d6 FB68     	 ldr r3,[r7,#12]
 2525 00d8 0022     	 movs r2,#0
 2526 00da 5A62     	 str r2,[r3,#36]
1146:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->snd_nxt = iss;
 2527              	 .loc 1 1146 0
 2528 00dc FB68     	 ldr r3,[r7,#12]
 2529 00de 7A69     	 ldr r2,[r7,#20]
 2530 00e0 1A65     	 str r2,[r3,#80]
1147:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->lastack = iss - 1;
 2531              	 .loc 1 1147 0
 2532 00e2 7B69     	 ldr r3,[r7,#20]
 2533 00e4 5A1E     	 subs r2,r3,#1
 2534 00e6 FB68     	 ldr r3,[r7,#12]
 2535 00e8 5A64     	 str r2,[r3,#68]
1148:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->snd_wl2 = iss - 1;
 2536              	 .loc 1 1148 0
 2537 00ea 7B69     	 ldr r3,[r7,#20]
 2538 00ec 5A1E     	 subs r2,r3,#1
 2539 00ee FB68     	 ldr r3,[r7,#12]
 2540 00f0 9A65     	 str r2,[r3,#88]
1149:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->snd_lbb = iss - 1;
 2541              	 .loc 1 1149 0
 2542 00f2 7B69     	 ldr r3,[r7,#20]
 2543 00f4 5A1E     	 subs r2,r3,#1
 2544 00f6 FB68     	 ldr r3,[r7,#12]
 2545 00f8 DA65     	 str r2,[r3,#92]
1150:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* Start with a window that does not need scaling. When window scaling is
1151:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****      enabled and used, the window is enlarged when both sides agree on scaling. */
1152:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 2546              	 .loc 1 1152 0
 2547 00fa FB68     	 ldr r3,[r7,#12]
 2548 00fc 4FF40662 	 mov r2,#2144
 2549 0100 5A85     	 strh r2,[r3,#42]
 2550 0102 FB68     	 ldr r3,[r7,#12]
 2551 0104 5A8D     	 ldrh r2,[r3,#42]
 2552 0106 FB68     	 ldr r3,[r7,#12]
 2553 0108 1A85     	 strh r2,[r3,#40]
1153:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 2554              	 .loc 1 1153 0
 2555 010a FB68     	 ldr r3,[r7,#12]
 2556 010c 5A6A     	 ldr r2,[r3,#36]
 2557 010e FB68     	 ldr r3,[r7,#12]
 2558 0110 DA62     	 str r2,[r3,#44]
1154:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->snd_wnd = TCP_WND;
 2559              	 .loc 1 1154 0
 2560 0112 FB68     	 ldr r3,[r7,#12]
 2561 0114 4FF40662 	 mov r2,#2144
 2562 0118 A3F86020 	 strh r2,[r3,#96]
1155:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* As initial send MSS, we use TCP_MSS but limit it to 536.
1156:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****      The send MSS is updated when an MSS option is received. */
1157:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->mss = INITIAL_MSS;
 2563              	 .loc 1 1157 0
 2564 011c FB68     	 ldr r3,[r7,#12]
 2565 011e 4FF40672 	 mov r2,#536
 2566 0122 5A86     	 strh r2,[r3,#50]
1158:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_CALCULATE_EFF_SEND_MSS
1159:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 2567              	 .loc 1 1159 0
 2568 0124 FB68     	 ldr r3,[r7,#12]
 2569 0126 5A8E     	 ldrh r2,[r3,#50]
 2570 0128 FB68     	 ldr r3,[r7,#12]
 2571 012a 0433     	 adds r3,r3,#4
 2572 012c 1046     	 mov r0,r2
 2573 012e 796A     	 ldr r1,[r7,#36]
 2574 0130 1A46     	 mov r2,r3
 2575 0132 FFF7FEFF 	 bl tcp_eff_send_mss_netif
 2576 0136 0346     	 mov r3,r0
 2577 0138 1A46     	 mov r2,r3
 2578 013a FB68     	 ldr r3,[r7,#12]
 2579 013c 5A86     	 strh r2,[r3,#50]
1160:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* TCP_CALCULATE_EFF_SEND_MSS */
1161:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->cwnd = 1;
 2580              	 .loc 1 1161 0
 2581 013e FB68     	 ldr r3,[r7,#12]
 2582 0140 0122     	 movs r2,#1
 2583 0142 A3F84820 	 strh r2,[r3,#72]
1162:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_CALLBACK_API
1163:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->connected = connected;
 2584              	 .loc 1 1163 0
 2585 0146 FB68     	 ldr r3,[r7,#12]
 2586 0148 3A68     	 ldr r2,[r7]
 2587 014a C3F88820 	 str r2,[r3,#136]
1164:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #else /* LWIP_CALLBACK_API */
1165:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_UNUSED_ARG(connected);
1166:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_CALLBACK_API */
1167:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1168:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* Send a SYN together with the MSS option. */
1169:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   ret = tcp_enqueue_flags(pcb, TCP_SYN);
 2588              	 .loc 1 1169 0
 2589 014e F868     	 ldr r0,[r7,#12]
 2590 0150 0221     	 movs r1,#2
 2591 0152 FFF7FEFF 	 bl tcp_enqueue_flags
 2592 0156 0346     	 mov r3,r0
 2593 0158 FB74     	 strb r3,[r7,#19]
1170:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (ret == ERR_OK) {
 2594              	 .loc 1 1170 0
 2595 015a 97F91330 	 ldrsb r3,[r7,#19]
 2596 015e 002B     	 cmp r3,#0
 2597 0160 36D1     	 bne .L178
1171:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* SYN segment was enqueued, changed the pcbs state now */
1172:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->state = SYN_SENT;
 2598              	 .loc 1 1172 0
 2599 0162 FB68     	 ldr r3,[r7,#12]
 2600 0164 0222     	 movs r2,#2
 2601 0166 1A75     	 strb r2,[r3,#20]
1173:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (old_local_port != 0) {
 2602              	 .loc 1 1173 0
 2603 0168 7B8B     	 ldrh r3,[r7,#26]
 2604 016a 002B     	 cmp r3,#0
 2605 016c 21D0     	 beq .L179
1174:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       TCP_RMV(&tcp_bound_pcbs, pcb);
 2606              	 .loc 1 1174 0
 2607 016e 1B4B     	 ldr r3,.L185
 2608 0170 1A68     	 ldr r2,[r3]
 2609 0172 FB68     	 ldr r3,[r7,#12]
 2610 0174 9A42     	 cmp r2,r3
 2611 0176 05D1     	 bne .L180
 2612              	 .loc 1 1174 0 is_stmt 0 discriminator 1
 2613 0178 184B     	 ldr r3,.L185
 2614 017a 1B68     	 ldr r3,[r3]
 2615 017c DB68     	 ldr r3,[r3,#12]
 2616 017e 174A     	 ldr r2,.L185
 2617 0180 1360     	 str r3,[r2]
 2618 0182 13E0     	 b .L181
 2619              	.L180:
 2620              	.LBB9:
 2621              	 .loc 1 1174 0 discriminator 2
 2622 0184 154B     	 ldr r3,.L185
 2623 0186 1B68     	 ldr r3,[r3]
 2624 0188 3B62     	 str r3,[r7,#32]
 2625 018a 0CE0     	 b .L182
 2626              	.L184:
 2627              	 .loc 1 1174 0 discriminator 9
 2628 018c 3B6A     	 ldr r3,[r7,#32]
 2629 018e DA68     	 ldr r2,[r3,#12]
 2630 0190 FB68     	 ldr r3,[r7,#12]
 2631 0192 9A42     	 cmp r2,r3
 2632 0194 04D1     	 bne .L183
 2633              	 .loc 1 1174 0 discriminator 5
 2634 0196 FB68     	 ldr r3,[r7,#12]
 2635 0198 DA68     	 ldr r2,[r3,#12]
 2636 019a 3B6A     	 ldr r3,[r7,#32]
 2637 019c DA60     	 str r2,[r3,#12]
 2638 019e 05E0     	 b .L181
 2639              	.L183:
 2640              	 .loc 1 1174 0 discriminator 6
 2641 01a0 3B6A     	 ldr r3,[r7,#32]
 2642 01a2 DB68     	 ldr r3,[r3,#12]
 2643 01a4 3B62     	 str r3,[r7,#32]
 2644              	.L182:
 2645              	 .loc 1 1174 0 discriminator 8
 2646 01a6 3B6A     	 ldr r3,[r7,#32]
 2647 01a8 002B     	 cmp r3,#0
 2648 01aa EFD1     	 bne .L184
 2649              	.L181:
 2650              	.LBE9:
 2651              	 .loc 1 1174 0 discriminator 10
 2652 01ac FB68     	 ldr r3,[r7,#12]
 2653 01ae 0022     	 movs r2,#0
 2654 01b0 DA60     	 str r2,[r3,#12]
 2655              	.L179:
1175:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1176:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     TCP_REG_ACTIVE(pcb);
 2656              	 .loc 1 1176 0 is_stmt 1
 2657 01b2 0B4B     	 ldr r3,.L185+4
 2658 01b4 1A68     	 ldr r2,[r3]
 2659 01b6 FB68     	 ldr r3,[r7,#12]
 2660 01b8 DA60     	 str r2,[r3,#12]
 2661 01ba 094A     	 ldr r2,.L185+4
 2662 01bc FB68     	 ldr r3,[r7,#12]
 2663 01be 1360     	 str r3,[r2]
 2664 01c0 FFF7FEFF 	 bl tcp_timer_needed
 2665 01c4 074B     	 ldr r3,.L185+8
 2666 01c6 0122     	 movs r2,#1
 2667 01c8 1A70     	 strb r2,[r3]
1177:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     MIB2_STATS_INC(mib2.tcpactiveopens);
1178:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1179:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_output(pcb);
 2668              	 .loc 1 1179 0
 2669 01ca F868     	 ldr r0,[r7,#12]
 2670 01cc FFF7FEFF 	 bl tcp_output
 2671              	.L178:
1180:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1181:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return ret;
 2672              	 .loc 1 1181 0
 2673 01d0 FB7C     	 ldrb r3,[r7,#19]
 2674              	.L164:
 2675 01d2 5BB2     	 sxtb r3,r3
1182:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 2676              	 .loc 1 1182 0
 2677 01d4 1846     	 mov r0,r3
 2678 01d6 2837     	 adds r7,r7,#40
 2679              	.LCFI113:
 2680              	 .cfi_def_cfa_offset 8
 2681 01d8 BD46     	 mov sp,r7
 2682              	.LCFI114:
 2683              	 .cfi_def_cfa_register 13
 2684              	 
 2685 01da 80BD     	 pop {r7,pc}
 2686              	.L186:
 2687              	 .align 2
 2688              	.L185:
 2689 01dc 00000000 	 .word tcp_bound_pcbs
 2690 01e0 00000000 	 .word tcp_active_pcbs
 2691 01e4 00000000 	 .word tcp_active_pcbs_changed
 2692              	 .cfi_endproc
 2693              	.LFE155:
 2695              	 .section .text.tcp_slowtmr,"ax",%progbits
 2696              	 .align 2
 2697              	 .global tcp_slowtmr
 2698              	 .thumb
 2699              	 .thumb_func
 2701              	tcp_slowtmr:
 2702              	.LFB156:
1183:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1184:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
1185:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Called every 500 ms and implements the retransmission timer and the timer that
1186:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * removes PCBs that have been in TIME-WAIT for enough time. It also increments
1187:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * various timers such as the inactivity timer in each PCB.
1188:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
1189:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Automatically called from tcp_tmr().
1190:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1191:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
1192:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_slowtmr(void)
1193:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 2703              	 .loc 1 1193 0
 2704              	 .cfi_startproc
 2705              	 
 2706              	 
 2707 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 2708              	.LCFI115:
 2709              	 .cfi_def_cfa_offset 20
 2710              	 .cfi_offset 4,-20
 2711              	 .cfi_offset 5,-16
 2712              	 .cfi_offset 6,-12
 2713              	 .cfi_offset 7,-8
 2714              	 .cfi_offset 14,-4
 2715 0002 91B0     	 sub sp,sp,#68
 2716              	.LCFI116:
 2717              	 .cfi_def_cfa_offset 88
 2718 0004 04AF     	 add r7,sp,#16
 2719              	.LCFI117:
 2720              	 .cfi_def_cfa 7,72
1194:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct tcp_pcb *pcb, *prev;
1195:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   tcpwnd_size_t eff_wnd;
1196:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   u8_t pcb_remove;      /* flag if a PCB should be removed */
1197:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   u8_t pcb_reset;       /* flag if a RST should be sent when removing */
1198:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   err_t err;
1199:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1200:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   err = ERR_OK;
 2721              	 .loc 1 1200 0
 2722 0006 0023     	 movs r3,#0
 2723 0008 87F82530 	 strb r3,[r7,#37]
1201:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1202:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   ++tcp_ticks;
 2724              	 .loc 1 1202 0
 2725 000c 784B     	 ldr r3,.L230
 2726 000e 1B68     	 ldr r3,[r3]
 2727 0010 0133     	 adds r3,r3,#1
 2728 0012 774A     	 ldr r2,.L230
 2729 0014 1360     	 str r3,[r2]
1203:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   ++tcp_timer_ctr;
 2730              	 .loc 1 1203 0
 2731 0016 774B     	 ldr r3,.L230+4
 2732 0018 1B78     	 ldrb r3,[r3]
 2733 001a 0133     	 adds r3,r3,#1
 2734 001c DAB2     	 uxtb r2,r3
 2735 001e 754B     	 ldr r3,.L230+4
 2736 0020 1A70     	 strb r2,[r3]
 2737              	.L188:
1204:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1205:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_slowtmr_start:
1206:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* Steps through all of the active PCBs. */
1207:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   prev = NULL;
 2738              	 .loc 1 1207 0
 2739 0022 0023     	 movs r3,#0
 2740 0024 BB62     	 str r3,[r7,#40]
1208:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb = tcp_active_pcbs;
 2741              	 .loc 1 1208 0
 2742 0026 744B     	 ldr r3,.L230+8
 2743 0028 1B68     	 ldr r3,[r3]
 2744 002a FB62     	 str r3,[r7,#44]
1209:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb == NULL) {
1210:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
1211:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1212:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   while (pcb != NULL) {
 2745              	 .loc 1 1212 0
 2746 002c 42E2     	 b .L189
 2747              	.L223:
1213:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
1214:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
1215:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
1216:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
1217:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->last_timer == tcp_timer_ctr) {
 2748              	 .loc 1 1217 0
 2749 002e FB6A     	 ldr r3,[r7,#44]
 2750 0030 9A7F     	 ldrb r2,[r3,#30]
 2751 0032 704B     	 ldr r3,.L230+4
 2752 0034 1B78     	 ldrb r3,[r3]
 2753 0036 9A42     	 cmp r2,r3
 2754 0038 05D1     	 bne .L190
1218:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* skip this pcb, we have already processed it */
1219:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       prev = pcb;
 2755              	 .loc 1 1219 0
 2756 003a FB6A     	 ldr r3,[r7,#44]
 2757 003c BB62     	 str r3,[r7,#40]
1220:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb = pcb->next;
 2758              	 .loc 1 1220 0
 2759 003e FB6A     	 ldr r3,[r7,#44]
 2760 0040 DB68     	 ldr r3,[r3,#12]
 2761 0042 FB62     	 str r3,[r7,#44]
1221:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       continue;
 2762              	 .loc 1 1221 0
 2763 0044 36E2     	 b .L189
 2764              	.L190:
1222:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1223:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->last_timer = tcp_timer_ctr;
 2765              	 .loc 1 1223 0
 2766 0046 6B4B     	 ldr r3,.L230+4
 2767 0048 1A78     	 ldrb r2,[r3]
 2768 004a FB6A     	 ldr r3,[r7,#44]
 2769 004c 9A77     	 strb r2,[r3,#30]
1224:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1225:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb_remove = 0;
 2770              	 .loc 1 1225 0
 2771 004e 0023     	 movs r3,#0
 2772 0050 87F82730 	 strb r3,[r7,#39]
1226:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb_reset = 0;
 2773              	 .loc 1 1226 0
 2774 0054 0023     	 movs r3,#0
 2775 0056 87F82630 	 strb r3,[r7,#38]
1227:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1228:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 2776              	 .loc 1 1228 0
 2777 005a FB6A     	 ldr r3,[r7,#44]
 2778 005c 1B7D     	 ldrb r3,[r3,#20]
 2779 005e 022B     	 cmp r3,#2
 2780 0060 0AD1     	 bne .L191
 2781              	 .loc 1 1228 0 is_stmt 0 discriminator 1
 2782 0062 FB6A     	 ldr r3,[r7,#44]
 2783 0064 93F84230 	 ldrb r3,[r3,#66]
 2784 0068 052B     	 cmp r3,#5
 2785 006a 05D9     	 bls .L191
1229:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       ++pcb_remove;
 2786              	 .loc 1 1229 0 is_stmt 1
 2787 006c 97F82730 	 ldrb r3,[r7,#39]
 2788 0070 0133     	 adds r3,r3,#1
 2789 0072 87F82730 	 strb r3,[r7,#39]
 2790 0076 F9E0     	 b .L192
 2791              	.L191:
1230:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
1231:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     } else if (pcb->nrtx >= TCP_MAXRTX) {
 2792              	 .loc 1 1231 0
 2793 0078 FB6A     	 ldr r3,[r7,#44]
 2794 007a 93F84230 	 ldrb r3,[r3,#66]
 2795 007e 0B2B     	 cmp r3,#11
 2796 0080 05D9     	 bls .L193
1232:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       ++pcb_remove;
 2797              	 .loc 1 1232 0
 2798 0082 97F82730 	 ldrb r3,[r7,#39]
 2799 0086 0133     	 adds r3,r3,#1
 2800 0088 87F82730 	 strb r3,[r7,#39]
 2801 008c EEE0     	 b .L192
 2802              	.L193:
1233:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
1234:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     } else {
1235:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (pcb->persist_backoff > 0) {
 2803              	 .loc 1 1235 0
 2804 008e FB6A     	 ldr r3,[r7,#44]
 2805 0090 93F89930 	 ldrb r3,[r3,#153]
 2806 0094 002B     	 cmp r3,#0
 2807 0096 5DD0     	 beq .L194
1236:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
1237:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
1238:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if (pcb->persist_probe >= TCP_MAXRTX) {
 2808              	 .loc 1 1238 0
 2809 0098 FB6A     	 ldr r3,[r7,#44]
 2810 009a 93F89A30 	 ldrb r3,[r3,#154]
 2811 009e 0B2B     	 cmp r3,#11
 2812 00a0 05D9     	 bls .L195
1239:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           ++pcb_remove; /* max probes reached */
 2813              	 .loc 1 1239 0
 2814 00a2 97F82730 	 ldrb r3,[r7,#39]
 2815 00a6 0133     	 adds r3,r3,#1
 2816 00a8 87F82730 	 strb r3,[r7,#39]
 2817 00ac DEE0     	 b .L192
 2818              	.L195:
 2819              	.LBB10:
1240:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         } else {
1241:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 2820              	 .loc 1 1241 0
 2821 00ae FB6A     	 ldr r3,[r7,#44]
 2822 00b0 93F89930 	 ldrb r3,[r3,#153]
 2823 00b4 013B     	 subs r3,r3,#1
 2824 00b6 514A     	 ldr r2,.L230+12
 2825 00b8 D35C     	 ldrb r3,[r2,r3]
 2826 00ba FB77     	 strb r3,[r7,#31]
1242:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           if (pcb->persist_cnt < backoff_cnt) {
 2827              	 .loc 1 1242 0
 2828 00bc FB6A     	 ldr r3,[r7,#44]
 2829 00be 93F89830 	 ldrb r3,[r3,#152]
 2830 00c2 FA7F     	 ldrb r2,[r7,#31]
 2831 00c4 9A42     	 cmp r2,r3
 2832 00c6 07D9     	 bls .L197
1243:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             pcb->persist_cnt++;
 2833              	 .loc 1 1243 0
 2834 00c8 FB6A     	 ldr r3,[r7,#44]
 2835 00ca 93F89830 	 ldrb r3,[r3,#152]
 2836 00ce 0133     	 adds r3,r3,#1
 2837 00d0 DAB2     	 uxtb r2,r3
 2838 00d2 FB6A     	 ldr r3,[r7,#44]
 2839 00d4 83F89820 	 strb r2,[r3,#152]
 2840              	.L197:
1244:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           }
1245:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           if (pcb->persist_cnt >= backoff_cnt) {
 2841              	 .loc 1 1245 0
 2842 00d8 FB6A     	 ldr r3,[r7,#44]
 2843 00da 93F89830 	 ldrb r3,[r3,#152]
 2844 00de FA7F     	 ldrb r2,[r7,#31]
 2845 00e0 9A42     	 cmp r2,r3
 2846 00e2 36D8     	 bhi .L196
 2847              	.LBB11:
1246:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             int next_slot = 1; /* increment timer to next slot */
 2848              	 .loc 1 1246 0
 2849 00e4 0123     	 movs r3,#1
 2850 00e6 3B62     	 str r3,[r7,#32]
1247:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             /* If snd_wnd is zero, send 1 byte probes */
1248:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             if (pcb->snd_wnd == 0) {
 2851              	 .loc 1 1248 0
 2852 00e8 FB6A     	 ldr r3,[r7,#44]
 2853 00ea B3F86030 	 ldrh r3,[r3,#96]
 2854 00ee 002B     	 cmp r3,#0
 2855 00f0 08D1     	 bne .L198
1249:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               if (tcp_zero_window_probe(pcb) != ERR_OK) {
 2856              	 .loc 1 1249 0
 2857 00f2 F86A     	 ldr r0,[r7,#44]
 2858 00f4 FFF7FEFF 	 bl tcp_zero_window_probe
 2859 00f8 0346     	 mov r3,r0
 2860 00fa 002B     	 cmp r3,#0
 2861 00fc 14D0     	 beq .L200
1250:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                 next_slot = 0; /* try probe again with current slot */
 2862              	 .loc 1 1250 0
 2863 00fe 0023     	 movs r3,#0
 2864 0100 3B62     	 str r3,[r7,#32]
 2865 0102 11E0     	 b .L200
 2866              	.L198:
1251:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               }
1252:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               /* snd_wnd not fully closed, split unsent head and fill window */
1253:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             } else {
1254:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 2867              	 .loc 1 1254 0
 2868 0104 FB6A     	 ldr r3,[r7,#44]
 2869 0106 B3F86030 	 ldrh r3,[r3,#96]
 2870 010a F86A     	 ldr r0,[r7,#44]
 2871 010c 1946     	 mov r1,r3
 2872 010e FFF7FEFF 	 bl tcp_split_unsent_seg
 2873 0112 0346     	 mov r3,r0
 2874 0114 002B     	 cmp r3,#0
 2875 0116 07D1     	 bne .L200
1255:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                 if (tcp_output(pcb) == ERR_OK) {
 2876              	 .loc 1 1255 0
 2877 0118 F86A     	 ldr r0,[r7,#44]
 2878 011a FFF7FEFF 	 bl tcp_output
 2879 011e 0346     	 mov r3,r0
 2880 0120 002B     	 cmp r3,#0
 2881 0122 01D1     	 bne .L200
1256:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                   /* sending will cancel persist timer, else retry with current slot */
1257:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                   next_slot = 0;
 2882              	 .loc 1 1257 0
 2883 0124 0023     	 movs r3,#0
 2884 0126 3B62     	 str r3,[r7,#32]
 2885              	.L200:
1258:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                 }
1259:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               }
1260:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             }
1261:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             if (next_slot) {
 2886              	 .loc 1 1261 0
 2887 0128 3B6A     	 ldr r3,[r7,#32]
 2888 012a 002B     	 cmp r3,#0
 2889 012c 11D0     	 beq .L196
1262:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               pcb->persist_cnt = 0;
 2890              	 .loc 1 1262 0
 2891 012e FB6A     	 ldr r3,[r7,#44]
 2892 0130 0022     	 movs r2,#0
 2893 0132 83F89820 	 strb r2,[r3,#152]
1263:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 2894              	 .loc 1 1263 0
 2895 0136 FB6A     	 ldr r3,[r7,#44]
 2896 0138 93F89930 	 ldrb r3,[r3,#153]
 2897 013c 062B     	 cmp r3,#6
 2898 013e 08D8     	 bhi .L196
1264:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                 pcb->persist_backoff++;
 2899              	 .loc 1 1264 0
 2900 0140 FB6A     	 ldr r3,[r7,#44]
 2901 0142 93F89930 	 ldrb r3,[r3,#153]
 2902 0146 0133     	 adds r3,r3,#1
 2903 0148 DAB2     	 uxtb r2,r3
 2904 014a FB6A     	 ldr r3,[r7,#44]
 2905 014c 83F89920 	 strb r2,[r3,#153]
 2906              	.LBE11:
 2907              	.LBE10:
 2908 0150 8CE0     	 b .L192
 2909              	.L196:
 2910 0152 8BE0     	 b .L192
 2911              	.L194:
1265:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               }
1266:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             }
1267:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           }
1268:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         }
1269:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       } else {
1270:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* Increase the retransmission timer if it is running */
1271:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 2912              	 .loc 1 1271 0
 2913 0154 FB6A     	 ldr r3,[r7,#44]
 2914 0156 1B8E     	 ldrh r3,[r3,#48]
 2915 0158 1BB2     	 sxth r3,r3
 2916 015a 002B     	 cmp r3,#0
 2917 015c 0EDB     	 blt .L201
 2918              	 .loc 1 1271 0 is_stmt 0 discriminator 1
 2919 015e FB6A     	 ldr r3,[r7,#44]
 2920 0160 1B8E     	 ldrh r3,[r3,#48]
 2921 0162 1BB2     	 sxth r3,r3
 2922 0164 47F6FF72 	 movw r2,#32767
 2923 0168 9342     	 cmp r3,r2
 2924 016a 07D0     	 beq .L201
1272:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           ++pcb->rtime;
 2925              	 .loc 1 1272 0 is_stmt 1
 2926 016c FB6A     	 ldr r3,[r7,#44]
 2927 016e 1B8E     	 ldrh r3,[r3,#48]
 2928 0170 9BB2     	 uxth r3,r3
 2929 0172 0133     	 adds r3,r3,#1
 2930 0174 9BB2     	 uxth r3,r3
 2931 0176 9AB2     	 uxth r2,r3
 2932 0178 FB6A     	 ldr r3,[r7,#44]
 2933 017a 1A86     	 strh r2,[r3,#48]
 2934              	.L201:
1273:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         }
1274:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1275:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if (pcb->rtime >= pcb->rto) {
 2935              	 .loc 1 1275 0
 2936 017c FB6A     	 ldr r3,[r7,#44]
 2937 017e 1A8E     	 ldrh r2,[r3,#48]
 2938 0180 FB6A     	 ldr r3,[r7,#44]
 2939 0182 B3F84030 	 ldrh r3,[r3,#64]
 2940 0186 12B2     	 sxth r2,r2
 2941 0188 1BB2     	 sxth r3,r3
 2942 018a 9A42     	 cmp r2,r3
 2943 018c 6EDB     	 blt .L192
1276:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           /* Time for a retransmission. */
1277:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_slowtmr: rtime %"S16_F
1278:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                                       " pcb->rto %"S16_F"\n",
1279:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                                       pcb->rtime, pcb->rto));
1280:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           /* If prepare phase fails but we have unsent data but no unacked data,
1281:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****              still execute the backoff calculations below, as this means we somehow
1282:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****              failed to send segment. */
1283:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent !=
 2944              	 .loc 1 1283 0
 2945 018e F86A     	 ldr r0,[r7,#44]
 2946 0190 FFF7FEFF 	 bl tcp_rexmit_rto_prepare
 2947 0194 0346     	 mov r3,r0
 2948 0196 002B     	 cmp r3,#0
 2949 0198 07D0     	 beq .L202
 2950              	 .loc 1 1283 0 is_stmt 0 discriminator 1
 2951 019a FB6A     	 ldr r3,[r7,#44]
 2952 019c 1B6F     	 ldr r3,[r3,#112]
 2953 019e 002B     	 cmp r3,#0
 2954 01a0 64D1     	 bne .L192
 2955              	 .loc 1 1283 0 discriminator 2
 2956 01a2 FB6A     	 ldr r3,[r7,#44]
 2957 01a4 DB6E     	 ldr r3,[r3,#108]
 2958 01a6 002B     	 cmp r3,#0
 2959 01a8 60D0     	 beq .L192
 2960              	.L202:
1284:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             /* Double retransmission time-out unless we are trying to
1285:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****              * connect to somebody (i.e., we are in SYN_SENT). */
1286:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             if (pcb->state != SYN_SENT) {
 2961              	 .loc 1 1286 0 is_stmt 1
 2962 01aa FB6A     	 ldr r3,[r7,#44]
 2963 01ac 1B7D     	 ldrb r3,[r3,#20]
 2964 01ae 022B     	 cmp r3,#2
 2965 01b0 2DD0     	 beq .L203
 2966              	.LBB12:
1287:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 2967              	 .loc 1 1287 0
 2968 01b2 FB6A     	 ldr r3,[r7,#44]
 2969 01b4 93F84230 	 ldrb r3,[r3,#66]
 2970 01b8 0C2B     	 cmp r3,#12
 2971 01ba 28BF     	 it cs
 2972 01bc 0C23     	 movcs r3,#12
 2973 01be BB77     	 strb r3,[r7,#30]
1288:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 2974              	 .loc 1 1288 0
 2975 01c0 FB6A     	 ldr r3,[r7,#44]
 2976 01c2 9B8F     	 ldrh r3,[r3,#60]
 2977 01c4 1BB2     	 sxth r3,r3
 2978 01c6 DB10     	 asrs r3,r3,#3
 2979 01c8 9BB2     	 uxth r3,r3
 2980 01ca 1AB2     	 sxth r2,r3
 2981 01cc FB6A     	 ldr r3,[r7,#44]
 2982 01ce DB8F     	 ldrh r3,[r3,#62]
 2983 01d0 1BB2     	 sxth r3,r3
 2984 01d2 1344     	 add r3,r3,r2
 2985 01d4 BA7F     	 ldrb r2,[r7,#30]
 2986 01d6 0A49     	 ldr r1,.L230+16
 2987 01d8 8A5C     	 ldrb r2,[r1,r2]
 2988 01da 9340     	 lsls r3,r3,r2
 2989 01dc BB61     	 str r3,[r7,#24]
1289:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 2990              	 .loc 1 1289 0
 2991 01de BB69     	 ldr r3,[r7,#24]
 2992 01e0 47F6FE72 	 movw r2,#32766
 2993 01e4 9342     	 cmp r3,r2
 2994 01e6 0DDC     	 bgt .L204
 2995              	 .loc 1 1289 0 is_stmt 0 discriminator 1
 2996 01e8 BB69     	 ldr r3,[r7,#24]
 2997 01ea 9AB2     	 uxth r2,r3
 2998 01ec 0CE0     	 b .L205
 2999              	.L231:
 3000 01ee 00BF     	 .align 2
 3001              	.L230:
 3002 01f0 00000000 	 .word tcp_ticks
 3003 01f4 00000000 	 .word tcp_timer_ctr
 3004 01f8 00000000 	 .word tcp_active_pcbs
 3005 01fc 00000000 	 .word tcp_persist_backoff
 3006 0200 00000000 	 .word tcp_backoff
 3007              	.L204:
 3008              	 .loc 1 1289 0 discriminator 2
 3009 0204 47F6FF72 	 movw r2,#32767
 3010              	.L205:
 3011              	 .loc 1 1289 0 discriminator 4
 3012 0208 FB6A     	 ldr r3,[r7,#44]
 3013 020a A3F84020 	 strh r2,[r3,#64]
 3014              	.L203:
 3015              	.LBE12:
1290:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             }
1291:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1292:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             /* Reset the retransmission timer. */
1293:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             pcb->rtime = 0;
 3016              	 .loc 1 1293 0 is_stmt 1
 3017 020e FB6A     	 ldr r3,[r7,#44]
 3018 0210 0022     	 movs r2,#0
 3019 0212 1A86     	 strh r2,[r3,#48]
1294:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1295:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             /* Reduce congestion window and ssthresh. */
1296:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 3020              	 .loc 1 1296 0
 3021 0214 FB6A     	 ldr r3,[r7,#44]
 3022 0216 B3F86020 	 ldrh r2,[r3,#96]
 3023 021a FB6A     	 ldr r3,[r7,#44]
 3024 021c B3F84830 	 ldrh r3,[r3,#72]
 3025 0220 9342     	 cmp r3,r2
 3026 0222 28BF     	 it cs
 3027 0224 1346     	 movcs r3,r2
 3028 0226 FB82     	 strh r3,[r7,#22]
1297:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             pcb->ssthresh = eff_wnd >> 1;
 3029              	 .loc 1 1297 0
 3030 0228 FB8A     	 ldrh r3,[r7,#22]
 3031 022a 5B08     	 lsrs r3,r3,#1
 3032 022c 9AB2     	 uxth r2,r3
 3033 022e FB6A     	 ldr r3,[r7,#44]
 3034 0230 A3F84A20 	 strh r2,[r3,#74]
1298:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 3035              	 .loc 1 1298 0
 3036 0234 FB6A     	 ldr r3,[r7,#44]
 3037 0236 B3F84A20 	 ldrh r2,[r3,#74]
 3038 023a FB6A     	 ldr r3,[r7,#44]
 3039 023c 5B8E     	 ldrh r3,[r3,#50]
 3040 023e 5B00     	 lsls r3,r3,#1
 3041 0240 9BB2     	 uxth r3,r3
 3042 0242 9A42     	 cmp r2,r3
 3043 0244 06D2     	 bcs .L206
1299:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****               pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 3044              	 .loc 1 1299 0
 3045 0246 FB6A     	 ldr r3,[r7,#44]
 3046 0248 5B8E     	 ldrh r3,[r3,#50]
 3047 024a 5B00     	 lsls r3,r3,#1
 3048 024c 9AB2     	 uxth r2,r3
 3049 024e FB6A     	 ldr r3,[r7,#44]
 3050 0250 A3F84A20 	 strh r2,[r3,#74]
 3051              	.L206:
1300:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             }
1301:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             pcb->cwnd = pcb->mss;
 3052              	 .loc 1 1301 0
 3053 0254 FB6A     	 ldr r3,[r7,#44]
 3054 0256 5A8E     	 ldrh r2,[r3,#50]
 3055 0258 FB6A     	 ldr r3,[r7,#44]
 3056 025a A3F84820 	 strh r2,[r3,#72]
1302:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
1303:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                                          " ssthresh %"TCPWNDSIZE_F"\n",
1304:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                                          pcb->cwnd, pcb->ssthresh));
1305:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             pcb->bytes_acked = 0;
 3057              	 .loc 1 1305 0
 3058 025e FB6A     	 ldr r3,[r7,#44]
 3059 0260 0022     	 movs r2,#0
 3060 0262 A3F86A20 	 strh r2,[r3,#106]
1306:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1307:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             /* The following needs to be called AFTER cwnd is set to one
1308:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                mss - STJ */
1309:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             tcp_rexmit_rto_commit(pcb);
 3061              	 .loc 1 1309 0
 3062 0266 F86A     	 ldr r0,[r7,#44]
 3063 0268 FFF7FEFF 	 bl tcp_rexmit_rto_commit
 3064              	.L192:
1310:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           }
1311:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         }
1312:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1313:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1314:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Check if this PCB has stayed too long in FIN-WAIT-2 */
1315:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->state == FIN_WAIT_2) {
 3065              	 .loc 1 1315 0
 3066 026c FB6A     	 ldr r3,[r7,#44]
 3067 026e 1B7D     	 ldrb r3,[r3,#20]
 3068 0270 062B     	 cmp r3,#6
 3069 0272 11D1     	 bne .L207
1316:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
1317:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (pcb->flags & TF_RXCLOSED) {
 3070              	 .loc 1 1317 0
 3071 0274 FB6A     	 ldr r3,[r7,#44]
 3072 0276 5B8B     	 ldrh r3,[r3,#26]
 3073 0278 03F01003 	 and r3,r3,#16
 3074 027c 002B     	 cmp r3,#0
 3075 027e 0BD0     	 beq .L207
1318:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* PCB was fully closed (either through close() or SHUT_RDWR):
1319:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****            normal FIN-WAIT timeout handling. */
1320:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if ((u32_t)(tcp_ticks - pcb->tmr) >
 3076              	 .loc 1 1320 0
 3077 0280 A04B     	 ldr r3,.L232
 3078 0282 1A68     	 ldr r2,[r3]
 3079 0284 FB6A     	 ldr r3,[r7,#44]
 3080 0286 1B6A     	 ldr r3,[r3,#32]
 3081 0288 D31A     	 subs r3,r2,r3
 3082 028a 282B     	 cmp r3,#40
 3083 028c 04D9     	 bls .L207
1321:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
1322:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           ++pcb_remove;
 3084              	 .loc 1 1322 0
 3085 028e 97F82730 	 ldrb r3,[r7,#39]
 3086 0292 0133     	 adds r3,r3,#1
 3087 0294 87F82730 	 strb r3,[r7,#39]
 3088              	.L207:
1323:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
1324:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         }
1325:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1326:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1327:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1328:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Check if KEEPALIVE should be sent */
1329:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 3089              	 .loc 1 1329 0
 3090 0298 FB6A     	 ldr r3,[r7,#44]
 3091 029a 5B7A     	 ldrb r3,[r3,#9]
 3092 029c 03F00803 	 and r3,r3,#8
 3093 02a0 002B     	 cmp r3,#0
 3094 02a2 4CD0     	 beq .L208
1330:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         ((pcb->state == ESTABLISHED) ||
 3095              	 .loc 1 1330 0 discriminator 1
 3096 02a4 FB6A     	 ldr r3,[r7,#44]
 3097 02a6 1B7D     	 ldrb r3,[r3,#20]
1329:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         ((pcb->state == ESTABLISHED) ||
 3098              	 .loc 1 1329 0 discriminator 1
 3099 02a8 042B     	 cmp r3,#4
 3100 02aa 03D0     	 beq .L209
1331:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****          (pcb->state == CLOSE_WAIT))) {
 3101              	 .loc 1 1331 0
 3102 02ac FB6A     	 ldr r3,[r7,#44]
 3103 02ae 1B7D     	 ldrb r3,[r3,#20]
1330:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         ((pcb->state == ESTABLISHED) ||
 3104              	 .loc 1 1330 0
 3105 02b0 072B     	 cmp r3,#7
 3106 02b2 44D1     	 bne .L208
 3107              	.L209:
1332:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if ((u32_t)(tcp_ticks - pcb->tmr) >
 3108              	 .loc 1 1332 0
 3109 02b4 934B     	 ldr r3,.L232
 3110 02b6 1A68     	 ldr r2,[r3]
 3111 02b8 FB6A     	 ldr r3,[r7,#44]
 3112 02ba 1B6A     	 ldr r3,[r3,#32]
 3113 02bc D21A     	 subs r2,r2,r3
1333:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 3114              	 .loc 1 1333 0
 3115 02be FB6A     	 ldr r3,[r7,#44]
 3116 02c0 D3F89430 	 ldr r3,[r3,#148]
 3117 02c4 03F52423 	 add r3,r3,#671744
 3118 02c8 03F6B843 	 addw r3,r3,#3256
 3119 02cc 8E49     	 ldr r1,.L232+4
 3120 02ce A1FB0313 	 umull r1,r3,r1,r3
 3121 02d2 5B09     	 lsrs r3,r3,#5
1332:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if ((u32_t)(tcp_ticks - pcb->tmr) >
 3122              	 .loc 1 1332 0
 3123 02d4 9A42     	 cmp r2,r3
 3124 02d6 0AD9     	 bls .L210
1334:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
1335:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
1336:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         LWIP_DEBUGF(TCP_DEBUG, ("\n"));
1337:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1338:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         ++pcb_remove;
 3125              	 .loc 1 1338 0
 3126 02d8 97F82730 	 ldrb r3,[r7,#39]
 3127 02dc 0133     	 adds r3,r3,#1
 3128 02de 87F82730 	 strb r3,[r7,#39]
1339:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         ++pcb_reset;
 3129              	 .loc 1 1339 0
 3130 02e2 97F82630 	 ldrb r3,[r7,#38]
 3131 02e6 0133     	 adds r3,r3,#1
 3132 02e8 87F82630 	 strb r3,[r7,#38]
 3133 02ec 27E0     	 b .L208
 3134              	.L210:
1340:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 3135              	 .loc 1 1340 0
 3136 02ee 854B     	 ldr r3,.L232
 3137 02f0 1A68     	 ldr r2,[r3]
 3138 02f2 FB6A     	 ldr r3,[r7,#44]
 3139 02f4 1B6A     	 ldr r3,[r3,#32]
 3140 02f6 D21A     	 subs r2,r2,r3
1341:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                  (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 3141              	 .loc 1 1341 0
 3142 02f8 FB6A     	 ldr r3,[r7,#44]
 3143 02fa D3F89410 	 ldr r1,[r3,#148]
 3144 02fe FB6A     	 ldr r3,[r7,#44]
 3145 0300 93F89B30 	 ldrb r3,[r3,#155]
 3146 0304 1846     	 mov r0,r3
 3147 0306 814B     	 ldr r3,.L232+8
 3148 0308 03FB00F3 	 mul r3,r3,r0
 3149 030c 0B44     	 add r3,r3,r1
1342:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                  / TCP_SLOW_INTERVAL) {
 3150              	 .loc 1 1342 0
 3151 030e 7E49     	 ldr r1,.L232+4
 3152 0310 A1FB0313 	 umull r1,r3,r1,r3
 3153 0314 5B09     	 lsrs r3,r3,#5
1340:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 3154              	 .loc 1 1340 0
 3155 0316 9A42     	 cmp r2,r3
 3156 0318 11D9     	 bls .L208
1343:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         err = tcp_keepalive(pcb);
 3157              	 .loc 1 1343 0
 3158 031a F86A     	 ldr r0,[r7,#44]
 3159 031c FFF7FEFF 	 bl tcp_keepalive
 3160 0320 0346     	 mov r3,r0
 3161 0322 87F82530 	 strb r3,[r7,#37]
1344:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if (err == ERR_OK) {
 3162              	 .loc 1 1344 0
 3163 0326 97F92530 	 ldrsb r3,[r7,#37]
 3164 032a 002B     	 cmp r3,#0
 3165 032c 07D1     	 bne .L208
1345:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           pcb->keep_cnt_sent++;
 3166              	 .loc 1 1345 0
 3167 032e FB6A     	 ldr r3,[r7,#44]
 3168 0330 93F89B30 	 ldrb r3,[r3,#155]
 3169 0334 0133     	 adds r3,r3,#1
 3170 0336 DAB2     	 uxtb r2,r3
 3171 0338 FB6A     	 ldr r3,[r7,#44]
 3172 033a 83F89B20 	 strb r2,[r3,#155]
 3173              	.L208:
1346:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         }
1347:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1348:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1349:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1350:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* If this PCB has queued out of sequence data, but has been
1351:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        inactive for too long, will drop the data (it will eventually
1352:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        be retransmitted). */
1353:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_QUEUE_OOSEQ
1354:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->ooseq != NULL &&
 3174              	 .loc 1 1354 0
 3175 033e FB6A     	 ldr r3,[r7,#44]
 3176 0340 5B6F     	 ldr r3,[r3,#116]
 3177 0342 002B     	 cmp r3,#0
 3178 0344 11D0     	 beq .L211
1355:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 3179              	 .loc 1 1355 0 discriminator 1
 3180 0346 6F4B     	 ldr r3,.L232
 3181 0348 1A68     	 ldr r2,[r3]
 3182 034a FB6A     	 ldr r3,[r7,#44]
 3183 034c 1B6A     	 ldr r3,[r3,#32]
 3184 034e D11A     	 subs r1,r2,r3
 3185 0350 FB6A     	 ldr r3,[r7,#44]
 3186 0352 B3F84030 	 ldrh r3,[r3,#64]
 3187 0356 1AB2     	 sxth r2,r3
 3188 0358 1346     	 mov r3,r2
 3189 035a 5B00     	 lsls r3,r3,#1
 3190 035c 1344     	 add r3,r3,r2
 3191 035e 5B00     	 lsls r3,r3,#1
1354:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 3192              	 .loc 1 1354 0 discriminator 1
 3193 0360 9942     	 cmp r1,r3
 3194 0362 02D3     	 bcc .L211
1356:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
1357:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_free_ooseq(pcb);
 3195              	 .loc 1 1357 0
 3196 0364 F86A     	 ldr r0,[r7,#44]
 3197 0366 FFF7FEFF 	 bl tcp_free_ooseq
 3198              	.L211:
1358:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1359:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* TCP_QUEUE_OOSEQ */
1360:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1361:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Check if this PCB has stayed too long in SYN-RCVD */
1362:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->state == SYN_RCVD) {
 3199              	 .loc 1 1362 0
 3200 036a FB6A     	 ldr r3,[r7,#44]
 3201 036c 1B7D     	 ldrb r3,[r3,#20]
 3202 036e 032B     	 cmp r3,#3
 3203 0370 0BD1     	 bne .L212
1363:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if ((u32_t)(tcp_ticks - pcb->tmr) >
 3204              	 .loc 1 1363 0
 3205 0372 644B     	 ldr r3,.L232
 3206 0374 1A68     	 ldr r2,[r3]
 3207 0376 FB6A     	 ldr r3,[r7,#44]
 3208 0378 1B6A     	 ldr r3,[r3,#32]
 3209 037a D31A     	 subs r3,r2,r3
 3210 037c 282B     	 cmp r3,#40
 3211 037e 04D9     	 bls .L212
1364:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
1365:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         ++pcb_remove;
 3212              	 .loc 1 1365 0
 3213 0380 97F82730 	 ldrb r3,[r7,#39]
 3214 0384 0133     	 adds r3,r3,#1
 3215 0386 87F82730 	 strb r3,[r7,#39]
 3216              	.L212:
1366:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
1367:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1368:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1369:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1370:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Check if this PCB has stayed too long in LAST-ACK */
1371:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->state == LAST_ACK) {
 3217              	 .loc 1 1371 0
 3218 038a FB6A     	 ldr r3,[r7,#44]
 3219 038c 1B7D     	 ldrb r3,[r3,#20]
 3220 038e 092B     	 cmp r3,#9
 3221 0390 0BD1     	 bne .L213
1372:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 3222              	 .loc 1 1372 0
 3223 0392 5C4B     	 ldr r3,.L232
 3224 0394 1A68     	 ldr r2,[r3]
 3225 0396 FB6A     	 ldr r3,[r7,#44]
 3226 0398 1B6A     	 ldr r3,[r3,#32]
 3227 039a D31A     	 subs r3,r2,r3
 3228 039c F02B     	 cmp r3,#240
 3229 039e 04D9     	 bls .L213
1373:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         ++pcb_remove;
 3230              	 .loc 1 1373 0
 3231 03a0 97F82730 	 ldrb r3,[r7,#39]
 3232 03a4 0133     	 adds r3,r3,#1
 3233 03a6 87F82730 	 strb r3,[r7,#39]
 3234              	.L213:
1374:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
1375:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1376:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1377:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1378:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* If the PCB should be removed, do it. */
1379:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb_remove) {
 3235              	 .loc 1 1379 0
 3236 03aa 97F82730 	 ldrb r3,[r7,#39]
 3237 03ae 002B     	 cmp r3,#0
 3238 03b0 49D0     	 beq .L214
 3239              	.LBB13:
1380:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       struct tcp_pcb *pcb2;
1381:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_CALLBACK_API
1382:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_err_fn err_fn = pcb->errf;
 3240              	 .loc 1 1382 0
 3241 03b2 FB6A     	 ldr r3,[r7,#44]
 3242 03b4 D3F89030 	 ldr r3,[r3,#144]
 3243 03b8 3B61     	 str r3,[r7,#16]
1383:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_CALLBACK_API */
1384:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       void *err_arg;
1385:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       enum tcp_state last_state;
1386:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_pcb_purge(pcb);
 3244              	 .loc 1 1386 0
 3245 03ba F86A     	 ldr r0,[r7,#44]
 3246 03bc FFF7FEFF 	 bl tcp_pcb_purge
1387:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* Remove PCB from tcp_active_pcbs list. */
1388:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (prev != NULL) {
 3247              	 .loc 1 1388 0
 3248 03c0 BB6A     	 ldr r3,[r7,#40]
 3249 03c2 002B     	 cmp r3,#0
 3250 03c4 04D0     	 beq .L215
1389:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
1390:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         prev->next = pcb->next;
 3251              	 .loc 1 1390 0
 3252 03c6 FB6A     	 ldr r3,[r7,#44]
 3253 03c8 DA68     	 ldr r2,[r3,#12]
 3254 03ca BB6A     	 ldr r3,[r7,#40]
 3255 03cc DA60     	 str r2,[r3,#12]
 3256 03ce 03E0     	 b .L216
 3257              	.L215:
1391:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       } else {
1392:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* This PCB was the first. */
1393:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
1394:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         tcp_active_pcbs = pcb->next;
 3258              	 .loc 1 1394 0
 3259 03d0 FB6A     	 ldr r3,[r7,#44]
 3260 03d2 DB68     	 ldr r3,[r3,#12]
 3261 03d4 4E4A     	 ldr r2,.L232+12
 3262 03d6 1360     	 str r3,[r2]
 3263              	.L216:
1395:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1396:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1397:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (pcb_reset) {
 3264              	 .loc 1 1397 0
 3265 03d8 97F82630 	 ldrb r3,[r7,#38]
 3266 03dc 002B     	 cmp r3,#0
 3267 03de 13D0     	 beq .L217
1398:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 3268              	 .loc 1 1398 0
 3269 03e0 FB6A     	 ldr r3,[r7,#44]
 3270 03e2 1E6D     	 ldr r6,[r3,#80]
 3271 03e4 FB6A     	 ldr r3,[r7,#44]
 3272 03e6 5D6A     	 ldr r5,[r3,#36]
 3273 03e8 FC6A     	 ldr r4,[r7,#44]
 3274 03ea FB6A     	 ldr r3,[r7,#44]
 3275 03ec 191D     	 adds r1,r3,#4
 3276 03ee FB6A     	 ldr r3,[r7,#44]
 3277 03f0 DA8A     	 ldrh r2,[r3,#22]
 3278 03f2 FB6A     	 ldr r3,[r7,#44]
 3279 03f4 1B8B     	 ldrh r3,[r3,#24]
 3280 03f6 0091     	 str r1,[sp]
 3281 03f8 0192     	 str r2,[sp,#4]
 3282 03fa 0293     	 str r3,[sp,#8]
 3283 03fc F86A     	 ldr r0,[r7,#44]
 3284 03fe 3146     	 mov r1,r6
 3285 0400 2A46     	 mov r2,r5
 3286 0402 2346     	 mov r3,r4
 3287 0404 FFF7FEFF 	 bl tcp_rst
 3288              	.L217:
1399:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                 pcb->local_port, pcb->remote_port);
1400:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1401:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1402:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       err_arg = pcb->callback_arg;
 3289              	 .loc 1 1402 0
 3290 0408 FB6A     	 ldr r3,[r7,#44]
 3291 040a 1B69     	 ldr r3,[r3,#16]
 3292 040c FB60     	 str r3,[r7,#12]
1403:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       last_state = pcb->state;
 3293              	 .loc 1 1403 0
 3294 040e FB6A     	 ldr r3,[r7,#44]
 3295 0410 1B7D     	 ldrb r3,[r3,#20]
 3296 0412 FB72     	 strb r3,[r7,#11]
1404:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb2 = pcb;
 3297              	 .loc 1 1404 0
 3298 0414 FB6A     	 ldr r3,[r7,#44]
 3299 0416 7B60     	 str r3,[r7,#4]
1405:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb = pcb->next;
 3300              	 .loc 1 1405 0
 3301 0418 FB6A     	 ldr r3,[r7,#44]
 3302 041a DB68     	 ldr r3,[r3,#12]
 3303 041c FB62     	 str r3,[r7,#44]
1406:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_free(pcb2);
 3304              	 .loc 1 1406 0
 3305 041e 7868     	 ldr r0,[r7,#4]
 3306 0420 FFF7FEFF 	 bl tcp_free
1407:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1408:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_active_pcbs_changed = 0;
 3307              	 .loc 1 1408 0
 3308 0424 3B4B     	 ldr r3,.L232+16
 3309 0426 0022     	 movs r2,#0
 3310 0428 1A70     	 strb r2,[r3]
1409:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 3311              	 .loc 1 1409 0
 3312 042a 3B69     	 ldr r3,[r7,#16]
 3313 042c 002B     	 cmp r3,#0
 3314 042e 04D0     	 beq .L218
 3315              	 .loc 1 1409 0 is_stmt 0 discriminator 1
 3316 0430 3B69     	 ldr r3,[r7,#16]
 3317 0432 F868     	 ldr r0,[r7,#12]
 3318 0434 6FF00C01 	 mvn r1,#12
 3319 0438 9847     	 blx r3
 3320              	.L218:
1410:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (tcp_active_pcbs_changed) {
 3321              	 .loc 1 1410 0 is_stmt 1
 3322 043a 364B     	 ldr r3,.L232+16
 3323 043c 1B78     	 ldrb r3,[r3]
 3324 043e 002B     	 cmp r3,#0
 3325 0440 00D0     	 beq .L219
1411:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         goto tcp_slowtmr_start;
 3326              	 .loc 1 1411 0
 3327 0442 EEE5     	 b .L188
 3328              	.L219:
 3329              	.LBE13:
 3330 0444 36E0     	 b .L189
 3331              	.L214:
1412:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1413:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     } else {
1414:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* get the 'next' element now and work with 'prev' below (in case of abort) */
1415:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       prev = pcb;
 3332              	 .loc 1 1415 0
 3333 0446 FB6A     	 ldr r3,[r7,#44]
 3334 0448 BB62     	 str r3,[r7,#40]
1416:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb = pcb->next;
 3335              	 .loc 1 1416 0
 3336 044a FB6A     	 ldr r3,[r7,#44]
 3337 044c DB68     	 ldr r3,[r3,#12]
 3338 044e FB62     	 str r3,[r7,#44]
1417:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1418:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* We check if we should poll the connection. */
1419:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       ++prev->polltmr;
 3339              	 .loc 1 1419 0
 3340 0450 BB6A     	 ldr r3,[r7,#40]
 3341 0452 1B7F     	 ldrb r3,[r3,#28]
 3342 0454 0133     	 adds r3,r3,#1
 3343 0456 DAB2     	 uxtb r2,r3
 3344 0458 BB6A     	 ldr r3,[r7,#40]
 3345 045a 1A77     	 strb r2,[r3,#28]
1420:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (prev->polltmr >= prev->pollinterval) {
 3346              	 .loc 1 1420 0
 3347 045c BB6A     	 ldr r3,[r7,#40]
 3348 045e 1A7F     	 ldrb r2,[r3,#28]
 3349 0460 BB6A     	 ldr r3,[r7,#40]
 3350 0462 5B7F     	 ldrb r3,[r3,#29]
 3351 0464 9A42     	 cmp r2,r3
 3352 0466 25D3     	 bcc .L189
1421:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         prev->polltmr = 0;
 3353              	 .loc 1 1421 0
 3354 0468 BB6A     	 ldr r3,[r7,#40]
 3355 046a 0022     	 movs r2,#0
 3356 046c 1A77     	 strb r2,[r3,#28]
1422:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
1423:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         tcp_active_pcbs_changed = 0;
 3357              	 .loc 1 1423 0
 3358 046e 294B     	 ldr r3,.L232+16
 3359 0470 0022     	 movs r2,#0
 3360 0472 1A70     	 strb r2,[r3]
1424:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         TCP_EVENT_POLL(prev, err);
 3361              	 .loc 1 1424 0
 3362 0474 BB6A     	 ldr r3,[r7,#40]
 3363 0476 D3F88C30 	 ldr r3,[r3,#140]
 3364 047a 002B     	 cmp r3,#0
 3365 047c 0BD0     	 beq .L220
 3366              	 .loc 1 1424 0 is_stmt 0 discriminator 1
 3367 047e BB6A     	 ldr r3,[r7,#40]
 3368 0480 D3F88C30 	 ldr r3,[r3,#140]
 3369 0484 BA6A     	 ldr r2,[r7,#40]
 3370 0486 1269     	 ldr r2,[r2,#16]
 3371 0488 1046     	 mov r0,r2
 3372 048a B96A     	 ldr r1,[r7,#40]
 3373 048c 9847     	 blx r3
 3374 048e 0346     	 mov r3,r0
 3375 0490 87F82530 	 strb r3,[r7,#37]
 3376 0494 02E0     	 b .L221
 3377              	.L220:
 3378              	 .loc 1 1424 0 discriminator 2
 3379 0496 0023     	 movs r3,#0
 3380 0498 87F82530 	 strb r3,[r7,#37]
 3381              	.L221:
1425:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if (tcp_active_pcbs_changed) {
 3382              	 .loc 1 1425 0 is_stmt 1
 3383 049c 1D4B     	 ldr r3,.L232+16
 3384 049e 1B78     	 ldrb r3,[r3]
 3385 04a0 002B     	 cmp r3,#0
 3386 04a2 00D0     	 beq .L222
1426:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           goto tcp_slowtmr_start;
 3387              	 .loc 1 1426 0
 3388 04a4 BDE5     	 b .L188
 3389              	.L222:
1427:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         }
1428:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* if err == ERR_ABRT, 'prev' is already deallocated */
1429:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if (err == ERR_OK) {
 3390              	 .loc 1 1429 0
 3391 04a6 97F92530 	 ldrsb r3,[r7,#37]
 3392 04aa 002B     	 cmp r3,#0
 3393 04ac 02D1     	 bne .L189
1430:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           tcp_output(prev);
 3394              	 .loc 1 1430 0
 3395 04ae B86A     	 ldr r0,[r7,#40]
 3396 04b0 FFF7FEFF 	 bl tcp_output
 3397              	.L189:
1212:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
 3398              	 .loc 1 1212 0
 3399 04b4 FB6A     	 ldr r3,[r7,#44]
 3400 04b6 002B     	 cmp r3,#0
 3401 04b8 7FF4B9AD 	 bne .L223
1431:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         }
1432:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1433:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1434:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1435:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1436:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1437:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* Steps through all of the TIME-WAIT PCBs. */
1438:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   prev = NULL;
 3402              	 .loc 1 1438 0
 3403 04bc 0023     	 movs r3,#0
 3404 04be BB62     	 str r3,[r7,#40]
1439:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb = tcp_tw_pcbs;
 3405              	 .loc 1 1439 0
 3406 04c0 154B     	 ldr r3,.L232+20
 3407 04c2 1B68     	 ldr r3,[r3]
 3408 04c4 FB62     	 str r3,[r7,#44]
1440:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   while (pcb != NULL) {
 3409              	 .loc 1 1440 0
 3410 04c6 3BE0     	 b .L224
 3411              	.L229:
1441:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
1442:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb_remove = 0;
 3412              	 .loc 1 1442 0
 3413 04c8 0023     	 movs r3,#0
 3414 04ca 87F82730 	 strb r3,[r7,#39]
1443:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1444:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Check if this PCB has stayed long enough in TIME-WAIT */
1445:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 3415              	 .loc 1 1445 0
 3416 04ce 0D4B     	 ldr r3,.L232
 3417 04d0 1A68     	 ldr r2,[r3]
 3418 04d2 FB6A     	 ldr r3,[r7,#44]
 3419 04d4 1B6A     	 ldr r3,[r3,#32]
 3420 04d6 D31A     	 subs r3,r2,r3
 3421 04d8 F02B     	 cmp r3,#240
 3422 04da 04D9     	 bls .L225
1446:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       ++pcb_remove;
 3423              	 .loc 1 1446 0
 3424 04dc 97F82730 	 ldrb r3,[r7,#39]
 3425 04e0 0133     	 adds r3,r3,#1
 3426 04e2 87F82730 	 strb r3,[r7,#39]
 3427              	.L225:
1447:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1448:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1449:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* If the PCB should be removed, do it. */
1450:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb_remove) {
 3428              	 .loc 1 1450 0
 3429 04e6 97F82730 	 ldrb r3,[r7,#39]
 3430 04ea 002B     	 cmp r3,#0
 3431 04ec 23D0     	 beq .L226
 3432              	.LBB14:
1451:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       struct tcp_pcb *pcb2;
1452:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_pcb_purge(pcb);
 3433              	 .loc 1 1452 0
 3434 04ee F86A     	 ldr r0,[r7,#44]
 3435 04f0 FFF7FEFF 	 bl tcp_pcb_purge
1453:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* Remove PCB from tcp_tw_pcbs list. */
1454:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (prev != NULL) {
 3436              	 .loc 1 1454 0
 3437 04f4 BB6A     	 ldr r3,[r7,#40]
 3438 04f6 002B     	 cmp r3,#0
 3439 04f8 10D0     	 beq .L227
1455:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
1456:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         prev->next = pcb->next;
 3440              	 .loc 1 1456 0
 3441 04fa FB6A     	 ldr r3,[r7,#44]
 3442 04fc DA68     	 ldr r2,[r3,#12]
 3443 04fe BB6A     	 ldr r3,[r7,#40]
 3444 0500 DA60     	 str r2,[r3,#12]
 3445 0502 0FE0     	 b .L228
 3446              	.L233:
 3447              	 .align 2
 3448              	.L232:
 3449 0504 00000000 	 .word tcp_ticks
 3450 0508 D34D6210 	 .word 274877907
 3451 050c F8240100 	 .word 75000
 3452 0510 00000000 	 .word tcp_active_pcbs
 3453 0514 00000000 	 .word tcp_active_pcbs_changed
 3454 0518 00000000 	 .word tcp_tw_pcbs
 3455              	.L227:
1457:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       } else {
1458:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* This PCB was the first. */
1459:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
1460:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         tcp_tw_pcbs = pcb->next;
 3456              	 .loc 1 1460 0
 3457 051c FB6A     	 ldr r3,[r7,#44]
 3458 051e DB68     	 ldr r3,[r3,#12]
 3459 0520 0A4A     	 ldr r2,.L234
 3460 0522 1360     	 str r3,[r2]
 3461              	.L228:
1461:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1462:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb2 = pcb;
 3462              	 .loc 1 1462 0
 3463 0524 FB6A     	 ldr r3,[r7,#44]
 3464 0526 3B60     	 str r3,[r7]
1463:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb = pcb->next;
 3465              	 .loc 1 1463 0
 3466 0528 FB6A     	 ldr r3,[r7,#44]
 3467 052a DB68     	 ldr r3,[r3,#12]
 3468 052c FB62     	 str r3,[r7,#44]
1464:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_free(pcb2);
 3469              	 .loc 1 1464 0
 3470 052e 3868     	 ldr r0,[r7]
 3471 0530 FFF7FEFF 	 bl tcp_free
 3472              	.LBE14:
 3473 0534 04E0     	 b .L224
 3474              	.L226:
1465:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     } else {
1466:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       prev = pcb;
 3475              	 .loc 1 1466 0
 3476 0536 FB6A     	 ldr r3,[r7,#44]
 3477 0538 BB62     	 str r3,[r7,#40]
1467:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb = pcb->next;
 3478              	 .loc 1 1467 0
 3479 053a FB6A     	 ldr r3,[r7,#44]
 3480 053c DB68     	 ldr r3,[r3,#12]
 3481 053e FB62     	 str r3,[r7,#44]
 3482              	.L224:
1440:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 3483              	 .loc 1 1440 0
 3484 0540 FB6A     	 ldr r3,[r7,#44]
 3485 0542 002B     	 cmp r3,#0
 3486 0544 C0D1     	 bne .L229
1468:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1469:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1470:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 3487              	 .loc 1 1470 0
 3488 0546 3437     	 adds r7,r7,#52
 3489              	.LCFI118:
 3490              	 .cfi_def_cfa_offset 20
 3491 0548 BD46     	 mov sp,r7
 3492              	.LCFI119:
 3493              	 .cfi_def_cfa_register 13
 3494              	 
 3495 054a F0BD     	 pop {r4,r5,r6,r7,pc}
 3496              	.L235:
 3497              	 .align 2
 3498              	.L234:
 3499 054c 00000000 	 .word tcp_tw_pcbs
 3500              	 .cfi_endproc
 3501              	.LFE156:
 3503              	 .section .text.tcp_fasttmr,"ax",%progbits
 3504              	 .align 2
 3505              	 .global tcp_fasttmr
 3506              	 .thumb
 3507              	 .thumb_func
 3509              	tcp_fasttmr:
 3510              	.LFB157:
1471:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1472:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
1473:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Is called every TCP_FAST_INTERVAL (250 ms) and process data previously
1474:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * "refused" by upper layer (application) and sends delayed ACKs or pending FINs.
1475:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
1476:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Automatically called from tcp_tmr().
1477:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1478:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
1479:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_fasttmr(void)
1480:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 3511              	 .loc 1 1480 0
 3512              	 .cfi_startproc
 3513              	 
 3514              	 
 3515 0000 80B5     	 push {r7,lr}
 3516              	.LCFI120:
 3517              	 .cfi_def_cfa_offset 8
 3518              	 .cfi_offset 7,-8
 3519              	 .cfi_offset 14,-4
 3520 0002 82B0     	 sub sp,sp,#8
 3521              	.LCFI121:
 3522              	 .cfi_def_cfa_offset 16
 3523 0004 00AF     	 add r7,sp,#0
 3524              	.LCFI122:
 3525              	 .cfi_def_cfa_register 7
1481:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct tcp_pcb *pcb;
1482:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1483:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   ++tcp_timer_ctr;
 3526              	 .loc 1 1483 0
 3527 0006 2C4B     	 ldr r3,.L244
 3528 0008 1B78     	 ldrb r3,[r3]
 3529 000a 0133     	 adds r3,r3,#1
 3530 000c DAB2     	 uxtb r2,r3
 3531 000e 2A4B     	 ldr r3,.L244
 3532 0010 1A70     	 strb r2,[r3]
 3533              	.L237:
1484:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1485:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_fasttmr_start:
1486:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb = tcp_active_pcbs;
 3534              	 .loc 1 1486 0
 3535 0012 2A4B     	 ldr r3,.L244+4
 3536 0014 1B68     	 ldr r3,[r3]
 3537 0016 7B60     	 str r3,[r7,#4]
1487:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1488:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   while (pcb != NULL) {
 3538              	 .loc 1 1488 0
 3539 0018 48E0     	 b .L238
 3540              	.L243:
1489:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->last_timer != tcp_timer_ctr) {
 3541              	 .loc 1 1489 0
 3542 001a 7B68     	 ldr r3,[r7,#4]
 3543 001c 9A7F     	 ldrb r2,[r3,#30]
 3544 001e 264B     	 ldr r3,.L244
 3545 0020 1B78     	 ldrb r3,[r3]
 3546 0022 9A42     	 cmp r2,r3
 3547 0024 3FD0     	 beq .L239
 3548              	.LBB15:
1490:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       struct tcp_pcb *next;
1491:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb->last_timer = tcp_timer_ctr;
 3549              	 .loc 1 1491 0
 3550 0026 244B     	 ldr r3,.L244
 3551 0028 1A78     	 ldrb r2,[r3]
 3552 002a 7B68     	 ldr r3,[r7,#4]
 3553 002c 9A77     	 strb r2,[r3,#30]
1492:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* send delayed ACKs */
1493:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (pcb->flags & TF_ACK_DELAY) {
 3554              	 .loc 1 1493 0
 3555 002e 7B68     	 ldr r3,[r7,#4]
 3556 0030 5B8B     	 ldrh r3,[r3,#26]
 3557 0032 03F00103 	 and r3,r3,#1
 3558 0036 002B     	 cmp r3,#0
 3559 0038 10D0     	 beq .L240
1494:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
1495:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         tcp_ack_now(pcb);
 3560              	 .loc 1 1495 0
 3561 003a 7B68     	 ldr r3,[r7,#4]
 3562 003c 5B8B     	 ldrh r3,[r3,#26]
 3563 003e 43F00203 	 orr r3,r3,#2
 3564 0042 9AB2     	 uxth r2,r3
 3565 0044 7B68     	 ldr r3,[r7,#4]
 3566 0046 5A83     	 strh r2,[r3,#26]
1496:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         tcp_output(pcb);
 3567              	 .loc 1 1496 0
 3568 0048 7868     	 ldr r0,[r7,#4]
 3569 004a FFF7FEFF 	 bl tcp_output
1497:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 3570              	 .loc 1 1497 0
 3571 004e 7B68     	 ldr r3,[r7,#4]
 3572 0050 5B8B     	 ldrh r3,[r3,#26]
 3573 0052 23F00303 	 bic r3,r3,#3
 3574 0056 9AB2     	 uxth r2,r3
 3575 0058 7B68     	 ldr r3,[r7,#4]
 3576 005a 5A83     	 strh r2,[r3,#26]
 3577              	.L240:
1498:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1499:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* send pending FIN */
1500:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (pcb->flags & TF_CLOSEPEND) {
 3578              	 .loc 1 1500 0
 3579 005c 7B68     	 ldr r3,[r7,#4]
 3580 005e 5B8B     	 ldrh r3,[r3,#26]
 3581 0060 03F00803 	 and r3,r3,#8
 3582 0064 002B     	 cmp r3,#0
 3583 0066 09D0     	 beq .L241
1501:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
1502:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         tcp_clear_flags(pcb, TF_CLOSEPEND);
 3584              	 .loc 1 1502 0
 3585 0068 7B68     	 ldr r3,[r7,#4]
 3586 006a 5B8B     	 ldrh r3,[r3,#26]
 3587 006c 23F00803 	 bic r3,r3,#8
 3588 0070 9AB2     	 uxth r2,r3
 3589 0072 7B68     	 ldr r3,[r7,#4]
 3590 0074 5A83     	 strh r2,[r3,#26]
1503:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         tcp_close_shutdown_fin(pcb);
 3591              	 .loc 1 1503 0
 3592 0076 7868     	 ldr r0,[r7,#4]
 3593 0078 FFF7FEFF 	 bl tcp_close_shutdown_fin
 3594              	.L241:
1504:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1505:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1506:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       next = pcb->next;
 3595              	 .loc 1 1506 0
 3596 007c 7B68     	 ldr r3,[r7,#4]
 3597 007e DB68     	 ldr r3,[r3,#12]
 3598 0080 3B60     	 str r3,[r7]
1507:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1508:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* If there is data which was previously "refused" by upper layer */
1509:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (pcb->refused_data != NULL) {
 3599              	 .loc 1 1509 0
 3600 0082 7B68     	 ldr r3,[r7,#4]
 3601 0084 9B6F     	 ldr r3,[r3,#120]
 3602 0086 002B     	 cmp r3,#0
 3603 0088 0AD0     	 beq .L242
1510:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         tcp_active_pcbs_changed = 0;
 3604              	 .loc 1 1510 0
 3605 008a 0D4B     	 ldr r3,.L244+8
 3606 008c 0022     	 movs r2,#0
 3607 008e 1A70     	 strb r2,[r3]
1511:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         tcp_process_refused_data(pcb);
 3608              	 .loc 1 1511 0
 3609 0090 7868     	 ldr r0,[r7,#4]
 3610 0092 FFF7FEFF 	 bl tcp_process_refused_data
1512:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if (tcp_active_pcbs_changed) {
 3611              	 .loc 1 1512 0
 3612 0096 0A4B     	 ldr r3,.L244+8
 3613 0098 1B78     	 ldrb r3,[r3]
 3614 009a 002B     	 cmp r3,#0
 3615 009c 00D0     	 beq .L242
1513:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           /* application callback has changed the pcb list: restart the loop */
1514:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           goto tcp_fasttmr_start;
 3616              	 .loc 1 1514 0
 3617 009e B8E7     	 b .L237
 3618              	.L242:
1515:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         }
1516:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1517:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb = next;
 3619              	 .loc 1 1517 0
 3620 00a0 3B68     	 ldr r3,[r7]
 3621 00a2 7B60     	 str r3,[r7,#4]
 3622              	.LBE15:
 3623 00a4 02E0     	 b .L238
 3624              	.L239:
1518:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     } else {
1519:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb = pcb->next;
 3625              	 .loc 1 1519 0
 3626 00a6 7B68     	 ldr r3,[r7,#4]
 3627 00a8 DB68     	 ldr r3,[r3,#12]
 3628 00aa 7B60     	 str r3,[r7,#4]
 3629              	.L238:
1488:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->last_timer != tcp_timer_ctr) {
 3630              	 .loc 1 1488 0
 3631 00ac 7B68     	 ldr r3,[r7,#4]
 3632 00ae 002B     	 cmp r3,#0
 3633 00b0 B3D1     	 bne .L243
1520:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1521:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1522:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 3634              	 .loc 1 1522 0
 3635 00b2 0837     	 adds r7,r7,#8
 3636              	.LCFI123:
 3637              	 .cfi_def_cfa_offset 8
 3638 00b4 BD46     	 mov sp,r7
 3639              	.LCFI124:
 3640              	 .cfi_def_cfa_register 13
 3641              	 
 3642 00b6 80BD     	 pop {r7,pc}
 3643              	.L245:
 3644              	 .align 2
 3645              	.L244:
 3646 00b8 00000000 	 .word tcp_timer_ctr
 3647 00bc 00000000 	 .word tcp_active_pcbs
 3648 00c0 00000000 	 .word tcp_active_pcbs_changed
 3649              	 .cfi_endproc
 3650              	.LFE157:
 3652              	 .section .text.tcp_txnow,"ax",%progbits
 3653              	 .align 2
 3654              	 .global tcp_txnow
 3655              	 .thumb
 3656              	 .thumb_func
 3658              	tcp_txnow:
 3659              	.LFB158:
1523:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1524:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /** Call tcp_output for all active pcbs that have TF_NAGLEMEMERR set */
1525:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
1526:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_txnow(void)
1527:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 3660              	 .loc 1 1527 0
 3661              	 .cfi_startproc
 3662              	 
 3663              	 
 3664 0000 80B5     	 push {r7,lr}
 3665              	.LCFI125:
 3666              	 .cfi_def_cfa_offset 8
 3667              	 .cfi_offset 7,-8
 3668              	 .cfi_offset 14,-4
 3669 0002 82B0     	 sub sp,sp,#8
 3670              	.LCFI126:
 3671              	 .cfi_def_cfa_offset 16
 3672 0004 00AF     	 add r7,sp,#0
 3673              	.LCFI127:
 3674              	 .cfi_def_cfa_register 7
1528:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct tcp_pcb *pcb;
1529:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1530:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 3675              	 .loc 1 1530 0
 3676 0006 0B4B     	 ldr r3,.L250
 3677 0008 1B68     	 ldr r3,[r3]
 3678 000a 7B60     	 str r3,[r7,#4]
 3679 000c 0BE0     	 b .L247
 3680              	.L249:
1531:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->flags & TF_NAGLEMEMERR) {
 3681              	 .loc 1 1531 0
 3682 000e 7B68     	 ldr r3,[r7,#4]
 3683 0010 5B8B     	 ldrh r3,[r3,#26]
 3684 0012 03F08003 	 and r3,r3,#128
 3685 0016 002B     	 cmp r3,#0
 3686 0018 02D0     	 beq .L248
1532:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_output(pcb);
 3687              	 .loc 1 1532 0
 3688 001a 7868     	 ldr r0,[r7,#4]
 3689 001c FFF7FEFF 	 bl tcp_output
 3690              	.L248:
1530:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->flags & TF_NAGLEMEMERR) {
 3691              	 .loc 1 1530 0 discriminator 2
 3692 0020 7B68     	 ldr r3,[r7,#4]
 3693 0022 DB68     	 ldr r3,[r3,#12]
 3694 0024 7B60     	 str r3,[r7,#4]
 3695              	.L247:
1530:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->flags & TF_NAGLEMEMERR) {
 3696              	 .loc 1 1530 0 is_stmt 0 discriminator 1
 3697 0026 7B68     	 ldr r3,[r7,#4]
 3698 0028 002B     	 cmp r3,#0
 3699 002a F0D1     	 bne .L249
1533:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1534:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1535:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 3700              	 .loc 1 1535 0 is_stmt 1
 3701 002c 0837     	 adds r7,r7,#8
 3702              	.LCFI128:
 3703              	 .cfi_def_cfa_offset 8
 3704 002e BD46     	 mov sp,r7
 3705              	.LCFI129:
 3706              	 .cfi_def_cfa_register 13
 3707              	 
 3708 0030 80BD     	 pop {r7,pc}
 3709              	.L251:
 3710 0032 00BF     	 .align 2
 3711              	.L250:
 3712 0034 00000000 	 .word tcp_active_pcbs
 3713              	 .cfi_endproc
 3714              	.LFE158:
 3716              	 .section .text.tcp_process_refused_data,"ax",%progbits
 3717              	 .align 2
 3718              	 .global tcp_process_refused_data
 3719              	 .thumb
 3720              	 .thumb_func
 3722              	tcp_process_refused_data:
 3723              	.LFB159:
1536:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1537:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /** Pass pcb->refused_data to the recv callback */
1538:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** err_t
1539:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_process_refused_data(struct tcp_pcb *pcb)
1540:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 3724              	 .loc 1 1540 0
 3725              	 .cfi_startproc
 3726              	 
 3727              	 
 3728 0000 90B5     	 push {r4,r7,lr}
 3729              	.LCFI130:
 3730              	 .cfi_def_cfa_offset 12
 3731              	 .cfi_offset 4,-12
 3732              	 .cfi_offset 7,-8
 3733              	 .cfi_offset 14,-4
 3734 0002 85B0     	 sub sp,sp,#20
 3735              	.LCFI131:
 3736              	 .cfi_def_cfa_offset 32
 3737 0004 00AF     	 add r7,sp,#0
 3738              	.LCFI132:
 3739              	 .cfi_def_cfa_register 7
 3740 0006 7860     	 str r0,[r7,#4]
1541:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
1542:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct pbuf *rest;
1543:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
1544:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1545:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 3741              	 .loc 1 1545 0
 3742 0008 7B68     	 ldr r3,[r7,#4]
 3743 000a 002B     	 cmp r3,#0
 3744 000c 01D1     	 bne .L253
 3745              	 .loc 1 1545 0 is_stmt 0 discriminator 1
 3746 000e F023     	 movs r3,#240
 3747 0010 5FE0     	 b .L254
 3748              	.L253:
 3749              	.LBB16:
1546:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1547:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
1548:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   while (pcb->refused_data != NULL)
1549:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
1550:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   {
1551:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     err_t err;
1552:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     u8_t refused_flags = pcb->refused_data->flags;
 3750              	 .loc 1 1552 0 is_stmt 1
 3751 0012 7B68     	 ldr r3,[r7,#4]
 3752 0014 9B6F     	 ldr r3,[r3,#120]
 3753 0016 5B7B     	 ldrb r3,[r3,#13]
 3754 0018 BB73     	 strb r3,[r7,#14]
1553:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* set pcb->refused_data to NULL in case the callback frees it and then
1554:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        closes the pcb */
1555:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     struct pbuf *refused_data = pcb->refused_data;
 3755              	 .loc 1 1555 0
 3756 001a 7B68     	 ldr r3,[r7,#4]
 3757 001c 9B6F     	 ldr r3,[r3,#120]
 3758 001e BB60     	 str r3,[r7,#8]
1556:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
1557:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pbuf_split_64k(refused_data, &rest);
1558:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->refused_data = rest;
1559:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
1560:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->refused_data = NULL;
 3759              	 .loc 1 1560 0
 3760 0020 7B68     	 ldr r3,[r7,#4]
 3761 0022 0022     	 movs r2,#0
 3762 0024 9A67     	 str r2,[r3,#120]
1561:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
1562:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Notify again application with data previously received. */
1563:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
1564:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 3763              	 .loc 1 1564 0
 3764 0026 7B68     	 ldr r3,[r7,#4]
 3765 0028 D3F88430 	 ldr r3,[r3,#132]
 3766 002c 002B     	 cmp r3,#0
 3767 002e 0CD0     	 beq .L255
 3768              	 .loc 1 1564 0 is_stmt 0 discriminator 1
 3769 0030 7B68     	 ldr r3,[r7,#4]
 3770 0032 D3F88440 	 ldr r4,[r3,#132]
 3771 0036 7B68     	 ldr r3,[r7,#4]
 3772 0038 1B69     	 ldr r3,[r3,#16]
 3773 003a 1846     	 mov r0,r3
 3774 003c 7968     	 ldr r1,[r7,#4]
 3775 003e BA68     	 ldr r2,[r7,#8]
 3776 0040 0023     	 movs r3,#0
 3777 0042 A047     	 blx r4
 3778 0044 0346     	 mov r3,r0
 3779 0046 FB73     	 strb r3,[r7,#15]
 3780 0048 07E0     	 b .L256
 3781              	.L255:
 3782              	 .loc 1 1564 0 discriminator 2
 3783 004a 0020     	 movs r0,#0
 3784 004c 7968     	 ldr r1,[r7,#4]
 3785 004e BA68     	 ldr r2,[r7,#8]
 3786 0050 0023     	 movs r3,#0
 3787 0052 FFF7FEFF 	 bl tcp_recv_null
 3788 0056 0346     	 mov r3,r0
 3789 0058 FB73     	 strb r3,[r7,#15]
 3790              	.L256:
1565:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (err == ERR_OK) {
 3791              	 .loc 1 1565 0 is_stmt 1
 3792 005a 97F90F30 	 ldrsb r3,[r7,#15]
 3793 005e 002B     	 cmp r3,#0
 3794 0060 2AD1     	 bne .L257
1566:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* did refused_data include a FIN? */
1567:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if ((refused_flags & PBUF_FLAG_TCP_FIN)
 3795              	 .loc 1 1567 0
 3796 0062 BB7B     	 ldrb r3,[r7,#14]
 3797 0064 03F02003 	 and r3,r3,#32
 3798 0068 002B     	 cmp r3,#0
 3799 006a 31D0     	 beq .L258
1568:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
1569:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           && (rest == NULL)
1570:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
1571:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****          ) {
1572:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* correct rcv_wnd as the application won't call tcp_recved()
1573:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****            for the FIN's seqno */
1574:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 3800              	 .loc 1 1574 0
 3801 006c 7B68     	 ldr r3,[r7,#4]
 3802 006e 1B8D     	 ldrh r3,[r3,#40]
 3803 0070 B3F5066F 	 cmp r3,#2144
 3804 0074 05D0     	 beq .L259
1575:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           pcb->rcv_wnd++;
 3805              	 .loc 1 1575 0
 3806 0076 7B68     	 ldr r3,[r7,#4]
 3807 0078 1B8D     	 ldrh r3,[r3,#40]
 3808 007a 0133     	 adds r3,r3,#1
 3809 007c 9AB2     	 uxth r2,r3
 3810 007e 7B68     	 ldr r3,[r7,#4]
 3811 0080 1A85     	 strh r2,[r3,#40]
 3812              	.L259:
1576:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         }
1577:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         TCP_EVENT_CLOSED(pcb, err);
 3813              	 .loc 1 1577 0
 3814 0082 7B68     	 ldr r3,[r7,#4]
 3815 0084 D3F88430 	 ldr r3,[r3,#132]
 3816 0088 002B     	 cmp r3,#0
 3817 008a 0CD0     	 beq .L260
 3818              	 .loc 1 1577 0 is_stmt 0 discriminator 1
 3819 008c 7B68     	 ldr r3,[r7,#4]
 3820 008e D3F88440 	 ldr r4,[r3,#132]
 3821 0092 7B68     	 ldr r3,[r7,#4]
 3822 0094 1B69     	 ldr r3,[r3,#16]
 3823 0096 1846     	 mov r0,r3
 3824 0098 7968     	 ldr r1,[r7,#4]
 3825 009a 0022     	 movs r2,#0
 3826 009c 0023     	 movs r3,#0
 3827 009e A047     	 blx r4
 3828 00a0 0346     	 mov r3,r0
 3829 00a2 FB73     	 strb r3,[r7,#15]
 3830 00a4 01E0     	 b .L261
 3831              	.L260:
 3832              	 .loc 1 1577 0 discriminator 2
 3833 00a6 0023     	 movs r3,#0
 3834 00a8 FB73     	 strb r3,[r7,#15]
 3835              	.L261:
1578:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if (err == ERR_ABRT) {
 3836              	 .loc 1 1578 0 is_stmt 1
 3837 00aa 97F90F30 	 ldrsb r3,[r7,#15]
 3838 00ae 13F10D0F 	 cmn r3,#13
 3839 00b2 0DD1     	 bne .L258
1579:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           return ERR_ABRT;
 3840              	 .loc 1 1579 0
 3841 00b4 F323     	 movs r3,#243
 3842 00b6 0CE0     	 b .L254
 3843              	.L257:
1580:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         }
1581:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1582:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     } else if (err == ERR_ABRT) {
 3844              	 .loc 1 1582 0
 3845 00b8 97F90F30 	 ldrsb r3,[r7,#15]
 3846 00bc 13F10D0F 	 cmn r3,#13
 3847 00c0 01D1     	 bne .L262
1583:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* if err == ERR_ABRT, 'pcb' is already deallocated */
1584:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* Drop incoming packets because pcb is "full" (only if the incoming
1585:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****          segment contains data). */
1586:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"))
1587:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       return ERR_ABRT;
 3848              	 .loc 1 1587 0
 3849 00c2 F323     	 movs r3,#243
 3850 00c4 05E0     	 b .L254
 3851              	.L262:
1588:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     } else {
1589:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
1590:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
1591:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (rest != NULL) {
1592:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         pbuf_cat(refused_data, rest);
1593:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1594:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
1595:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb->refused_data = refused_data;
 3852              	 .loc 1 1595 0
 3853 00c6 7B68     	 ldr r3,[r7,#4]
 3854 00c8 BA68     	 ldr r2,[r7,#8]
 3855 00ca 9A67     	 str r2,[r3,#120]
1596:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       return ERR_INPROGRESS;
 3856              	 .loc 1 1596 0
 3857 00cc FB23     	 movs r3,#251
 3858 00ce 00E0     	 b .L254
 3859              	.L258:
 3860              	.LBE16:
1597:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1598:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1599:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return ERR_OK;
 3861              	 .loc 1 1599 0
 3862 00d0 0023     	 movs r3,#0
 3863              	.L254:
 3864 00d2 5BB2     	 sxtb r3,r3
1600:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 3865              	 .loc 1 1600 0
 3866 00d4 1846     	 mov r0,r3
 3867 00d6 1437     	 adds r7,r7,#20
 3868              	.LCFI133:
 3869              	 .cfi_def_cfa_offset 12
 3870 00d8 BD46     	 mov sp,r7
 3871              	.LCFI134:
 3872              	 .cfi_def_cfa_register 13
 3873              	 
 3874 00da 90BD     	 pop {r4,r7,pc}
 3875              	 .cfi_endproc
 3876              	.LFE159:
 3878              	 .section .text.tcp_segs_free,"ax",%progbits
 3879              	 .align 2
 3880              	 .global tcp_segs_free
 3881              	 .thumb
 3882              	 .thumb_func
 3884              	tcp_segs_free:
 3885              	.LFB160:
1601:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1602:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
1603:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Deallocates a list of TCP segments (tcp_seg structures).
1604:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
1605:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param seg tcp_seg list of TCP segments to free
1606:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1607:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
1608:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_segs_free(struct tcp_seg *seg)
1609:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 3886              	 .loc 1 1609 0
 3887              	 .cfi_startproc
 3888              	 
 3889              	 
 3890 0000 80B5     	 push {r7,lr}
 3891              	.LCFI135:
 3892              	 .cfi_def_cfa_offset 8
 3893              	 .cfi_offset 7,-8
 3894              	 .cfi_offset 14,-4
 3895 0002 84B0     	 sub sp,sp,#16
 3896              	.LCFI136:
 3897              	 .cfi_def_cfa_offset 24
 3898 0004 00AF     	 add r7,sp,#0
 3899              	.LCFI137:
 3900              	 .cfi_def_cfa_register 7
 3901 0006 7860     	 str r0,[r7,#4]
1610:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   while (seg != NULL) {
 3902              	 .loc 1 1610 0
 3903 0008 07E0     	 b .L264
 3904              	.L265:
 3905              	.LBB17:
1611:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     struct tcp_seg *next = seg->next;
 3906              	 .loc 1 1611 0
 3907 000a 7B68     	 ldr r3,[r7,#4]
 3908 000c 1B68     	 ldr r3,[r3]
 3909 000e FB60     	 str r3,[r7,#12]
1612:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_seg_free(seg);
 3910              	 .loc 1 1612 0
 3911 0010 7868     	 ldr r0,[r7,#4]
 3912 0012 FFF7FEFF 	 bl tcp_seg_free
1613:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     seg = next;
 3913              	 .loc 1 1613 0
 3914 0016 FB68     	 ldr r3,[r7,#12]
 3915 0018 7B60     	 str r3,[r7,#4]
 3916              	.L264:
 3917              	.LBE17:
1610:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     struct tcp_seg *next = seg->next;
 3918              	 .loc 1 1610 0
 3919 001a 7B68     	 ldr r3,[r7,#4]
 3920 001c 002B     	 cmp r3,#0
 3921 001e F4D1     	 bne .L265
1614:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1615:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 3922              	 .loc 1 1615 0
 3923 0020 1037     	 adds r7,r7,#16
 3924              	.LCFI138:
 3925              	 .cfi_def_cfa_offset 8
 3926 0022 BD46     	 mov sp,r7
 3927              	.LCFI139:
 3928              	 .cfi_def_cfa_register 13
 3929              	 
 3930 0024 80BD     	 pop {r7,pc}
 3931              	 .cfi_endproc
 3932              	.LFE160:
 3934 0026 00BF     	 .section .text.tcp_seg_free,"ax",%progbits
 3935              	 .align 2
 3936              	 .global tcp_seg_free
 3937              	 .thumb
 3938              	 .thumb_func
 3940              	tcp_seg_free:
 3941              	.LFB161:
1616:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1617:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
1618:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Frees a TCP segment (tcp_seg structure).
1619:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
1620:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param seg single tcp_seg to free
1621:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1622:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
1623:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_seg_free(struct tcp_seg *seg)
1624:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 3942              	 .loc 1 1624 0
 3943              	 .cfi_startproc
 3944              	 
 3945              	 
 3946 0000 80B5     	 push {r7,lr}
 3947              	.LCFI140:
 3948              	 .cfi_def_cfa_offset 8
 3949              	 .cfi_offset 7,-8
 3950              	 .cfi_offset 14,-4
 3951 0002 82B0     	 sub sp,sp,#8
 3952              	.LCFI141:
 3953              	 .cfi_def_cfa_offset 16
 3954 0004 00AF     	 add r7,sp,#0
 3955              	.LCFI142:
 3956              	 .cfi_def_cfa_register 7
 3957 0006 7860     	 str r0,[r7,#4]
1625:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (seg != NULL) {
 3958              	 .loc 1 1625 0
 3959 0008 7B68     	 ldr r3,[r7,#4]
 3960 000a 002B     	 cmp r3,#0
 3961 000c 0CD0     	 beq .L266
1626:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (seg->p != NULL) {
 3962              	 .loc 1 1626 0
 3963 000e 7B68     	 ldr r3,[r7,#4]
 3964 0010 5B68     	 ldr r3,[r3,#4]
 3965 0012 002B     	 cmp r3,#0
 3966 0014 04D0     	 beq .L268
1627:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pbuf_free(seg->p);
 3967              	 .loc 1 1627 0
 3968 0016 7B68     	 ldr r3,[r7,#4]
 3969 0018 5B68     	 ldr r3,[r3,#4]
 3970 001a 1846     	 mov r0,r3
 3971 001c FFF7FEFF 	 bl pbuf_free
 3972              	.L268:
1628:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_DEBUG
1629:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       seg->p = NULL;
1630:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* TCP_DEBUG */
1631:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1632:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     memp_free(MEMP_TCP_SEG, seg);
 3973              	 .loc 1 1632 0
 3974 0020 0320     	 movs r0,#3
 3975 0022 7968     	 ldr r1,[r7,#4]
 3976 0024 FFF7FEFF 	 bl memp_free
 3977              	.L266:
1633:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1634:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 3978              	 .loc 1 1634 0
 3979 0028 0837     	 adds r7,r7,#8
 3980              	.LCFI143:
 3981              	 .cfi_def_cfa_offset 8
 3982 002a BD46     	 mov sp,r7
 3983              	.LCFI144:
 3984              	 .cfi_def_cfa_register 13
 3985              	 
 3986 002c 80BD     	 pop {r7,pc}
 3987              	 .cfi_endproc
 3988              	.LFE161:
 3990 002e 00BF     	 .section .text.tcp_setprio,"ax",%progbits
 3991              	 .align 2
 3992              	 .global tcp_setprio
 3993              	 .thumb
 3994              	 .thumb_func
 3996              	tcp_setprio:
 3997              	.LFB162:
1635:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1636:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
1637:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp
1638:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Sets the priority of a connection.
1639:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
1640:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb the tcp_pcb to manipulate
1641:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param prio new priority
1642:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1643:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
1644:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
1645:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 3998              	 .loc 1 1645 0
 3999              	 .cfi_startproc
 4000              	 
 4001              	 
 4002              	 
 4003 0000 80B4     	 push {r7}
 4004              	.LCFI145:
 4005              	 .cfi_def_cfa_offset 4
 4006              	 .cfi_offset 7,-4
 4007 0002 83B0     	 sub sp,sp,#12
 4008              	.LCFI146:
 4009              	 .cfi_def_cfa_offset 16
 4010 0004 00AF     	 add r7,sp,#0
 4011              	.LCFI147:
 4012              	 .cfi_def_cfa_register 7
 4013 0006 7860     	 str r0,[r7,#4]
 4014 0008 0B46     	 mov r3,r1
 4015 000a FB70     	 strb r3,[r7,#3]
1646:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
1647:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1648:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 4016              	 .loc 1 1648 0
 4017 000c 7B68     	 ldr r3,[r7,#4]
 4018 000e 002B     	 cmp r3,#0
 4019 0010 00D1     	 bne .L270
 4020 0012 02E0     	 b .L269
 4021              	.L270:
1649:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1650:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->prio = prio;
 4022              	 .loc 1 1650 0
 4023 0014 7B68     	 ldr r3,[r7,#4]
 4024 0016 FA78     	 ldrb r2,[r7,#3]
 4025 0018 5A75     	 strb r2,[r3,#21]
 4026              	.L269:
1651:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 4027              	 .loc 1 1651 0
 4028 001a 0C37     	 adds r7,r7,#12
 4029              	.LCFI148:
 4030              	 .cfi_def_cfa_offset 4
 4031 001c BD46     	 mov sp,r7
 4032              	.LCFI149:
 4033              	 .cfi_def_cfa_register 13
 4034              	 
 4035 001e 5DF8047B 	 ldr r7,[sp],#4
 4036              	.LCFI150:
 4037              	 .cfi_restore 7
 4038              	 .cfi_def_cfa_offset 0
 4039 0022 7047     	 bx lr
 4040              	 .cfi_endproc
 4041              	.LFE162:
 4043              	 .section .text.tcp_seg_copy,"ax",%progbits
 4044              	 .align 2
 4045              	 .global tcp_seg_copy
 4046              	 .thumb
 4047              	 .thumb_func
 4049              	tcp_seg_copy:
 4050              	.LFB163:
1652:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1653:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_QUEUE_OOSEQ
1654:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
1655:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Returns a copy of the given TCP segment.
1656:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * The pbuf and data are not copied, only the pointers
1657:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
1658:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param seg the old tcp_seg
1659:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @return a copy of seg
1660:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1661:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** struct tcp_seg *
1662:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_seg_copy(struct tcp_seg *seg)
1663:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 4051              	 .loc 1 1663 0
 4052              	 .cfi_startproc
 4053              	 
 4054              	 
 4055 0000 80B5     	 push {r7,lr}
 4056              	.LCFI151:
 4057              	 .cfi_def_cfa_offset 8
 4058              	 .cfi_offset 7,-8
 4059              	 .cfi_offset 14,-4
 4060 0002 84B0     	 sub sp,sp,#16
 4061              	.LCFI152:
 4062              	 .cfi_def_cfa_offset 24
 4063 0004 00AF     	 add r7,sp,#0
 4064              	.LCFI153:
 4065              	 .cfi_def_cfa_register 7
 4066 0006 7860     	 str r0,[r7,#4]
1664:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct tcp_seg *cseg;
1665:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1666:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
1667:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1668:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 4067              	 .loc 1 1668 0
 4068 0008 0320     	 movs r0,#3
 4069 000a FFF7FEFF 	 bl memp_malloc
 4070 000e F860     	 str r0,[r7,#12]
1669:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (cseg == NULL) {
 4071              	 .loc 1 1669 0
 4072 0010 FB68     	 ldr r3,[r7,#12]
 4073 0012 002B     	 cmp r3,#0
 4074 0014 01D1     	 bne .L273
1670:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     return NULL;
 4075              	 .loc 1 1670 0
 4076 0016 0023     	 movs r3,#0
 4077 0018 0AE0     	 b .L274
 4078              	.L273:
1671:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1672:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 4079              	 .loc 1 1672 0
 4080 001a F868     	 ldr r0,[r7,#12]
 4081 001c 7968     	 ldr r1,[r7,#4]
 4082 001e 1022     	 movs r2,#16
 4083 0020 FFF7FEFF 	 bl memcpy
1673:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pbuf_ref(cseg->p);
 4084              	 .loc 1 1673 0
 4085 0024 FB68     	 ldr r3,[r7,#12]
 4086 0026 5B68     	 ldr r3,[r3,#4]
 4087 0028 1846     	 mov r0,r3
 4088 002a FFF7FEFF 	 bl pbuf_ref
1674:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return cseg;
 4089              	 .loc 1 1674 0
 4090 002e FB68     	 ldr r3,[r7,#12]
 4091              	.L274:
1675:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 4092              	 .loc 1 1675 0
 4093 0030 1846     	 mov r0,r3
 4094 0032 1037     	 adds r7,r7,#16
 4095              	.LCFI154:
 4096              	 .cfi_def_cfa_offset 8
 4097 0034 BD46     	 mov sp,r7
 4098              	.LCFI155:
 4099              	 .cfi_def_cfa_register 13
 4100              	 
 4101 0036 80BD     	 pop {r7,pc}
 4102              	 .cfi_endproc
 4103              	.LFE163:
 4105              	 .section .text.tcp_recv_null,"ax",%progbits
 4106              	 .align 2
 4107              	 .global tcp_recv_null
 4108              	 .thumb
 4109              	 .thumb_func
 4111              	tcp_recv_null:
 4112              	.LFB164:
1676:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* TCP_QUEUE_OOSEQ */
1677:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1678:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_CALLBACK_API
1679:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
1680:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Default receive callback that is called if the user didn't register
1681:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * a recv callback for the pcb.
1682:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1683:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** err_t
1684:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
1685:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 4113              	 .loc 1 1685 0
 4114              	 .cfi_startproc
 4115              	 
 4116              	 
 4117 0000 80B5     	 push {r7,lr}
 4118              	.LCFI156:
 4119              	 .cfi_def_cfa_offset 8
 4120              	 .cfi_offset 7,-8
 4121              	 .cfi_offset 14,-4
 4122 0002 84B0     	 sub sp,sp,#16
 4123              	.LCFI157:
 4124              	 .cfi_def_cfa_offset 24
 4125 0004 00AF     	 add r7,sp,#0
 4126              	.LCFI158:
 4127              	 .cfi_def_cfa_register 7
 4128 0006 F860     	 str r0,[r7,#12]
 4129 0008 B960     	 str r1,[r7,#8]
 4130 000a 7A60     	 str r2,[r7,#4]
 4131 000c FB70     	 strb r3,[r7,#3]
1686:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_UNUSED_ARG(arg);
1687:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1688:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 4132              	 .loc 1 1688 0
 4133 000e BB68     	 ldr r3,[r7,#8]
 4134 0010 002B     	 cmp r3,#0
 4135 0012 01D1     	 bne .L276
 4136              	 .loc 1 1688 0 is_stmt 0 discriminator 1
 4137 0014 F023     	 movs r3,#240
 4138 0016 16E0     	 b .L277
 4139              	.L276:
1689:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1690:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (p != NULL) {
 4140              	 .loc 1 1690 0 is_stmt 1
 4141 0018 7B68     	 ldr r3,[r7,#4]
 4142 001a 002B     	 cmp r3,#0
 4143 001c 09D0     	 beq .L278
1691:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_recved(pcb, p->tot_len);
 4144              	 .loc 1 1691 0
 4145 001e 7B68     	 ldr r3,[r7,#4]
 4146 0020 1B89     	 ldrh r3,[r3,#8]
 4147 0022 B868     	 ldr r0,[r7,#8]
 4148 0024 1946     	 mov r1,r3
 4149 0026 FFF7FEFF 	 bl tcp_recved
1692:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pbuf_free(p);
 4150              	 .loc 1 1692 0
 4151 002a 7868     	 ldr r0,[r7,#4]
 4152 002c FFF7FEFF 	 bl pbuf_free
 4153 0030 08E0     	 b .L279
 4154              	.L278:
1693:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   } else if (err == ERR_OK) {
 4155              	 .loc 1 1693 0
 4156 0032 97F90330 	 ldrsb r3,[r7,#3]
 4157 0036 002B     	 cmp r3,#0
 4158 0038 04D1     	 bne .L279
1694:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     return tcp_close(pcb);
 4159              	 .loc 1 1694 0
 4160 003a B868     	 ldr r0,[r7,#8]
 4161 003c FFF7FEFF 	 bl tcp_close
 4162 0040 0346     	 mov r3,r0
 4163 0042 00E0     	 b .L277
 4164              	.L279:
1695:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1696:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return ERR_OK;
 4165              	 .loc 1 1696 0
 4166 0044 0023     	 movs r3,#0
 4167              	.L277:
 4168 0046 5BB2     	 sxtb r3,r3
1697:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 4169              	 .loc 1 1697 0
 4170 0048 1846     	 mov r0,r3
 4171 004a 1037     	 adds r7,r7,#16
 4172              	.LCFI159:
 4173              	 .cfi_def_cfa_offset 8
 4174 004c BD46     	 mov sp,r7
 4175              	.LCFI160:
 4176              	 .cfi_def_cfa_register 13
 4177              	 
 4178 004e 80BD     	 pop {r7,pc}
 4179              	 .cfi_endproc
 4180              	.LFE164:
 4182              	 .section .text.tcp_kill_prio,"ax",%progbits
 4183              	 .align 2
 4184              	 .thumb
 4185              	 .thumb_func
 4187              	tcp_kill_prio:
 4188              	.LFB165:
1698:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_CALLBACK_API */
1699:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1700:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
1701:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Kills the oldest active connection that has a lower priority than 'prio'.
1702:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
1703:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param prio minimum priority
1704:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1705:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static void
1706:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_kill_prio(u8_t prio)
1707:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 4189              	 .loc 1 1707 0
 4190              	 .cfi_startproc
 4191              	 
 4192              	 
 4193 0000 80B5     	 push {r7,lr}
 4194              	.LCFI161:
 4195              	 .cfi_def_cfa_offset 8
 4196              	 .cfi_offset 7,-8
 4197              	 .cfi_offset 14,-4
 4198 0002 86B0     	 sub sp,sp,#24
 4199              	.LCFI162:
 4200              	 .cfi_def_cfa_offset 32
 4201 0004 00AF     	 add r7,sp,#0
 4202              	.LCFI163:
 4203              	 .cfi_def_cfa_register 7
 4204 0006 0346     	 mov r3,r0
 4205 0008 FB71     	 strb r3,[r7,#7]
1708:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct tcp_pcb *pcb, *inactive;
1709:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   u32_t inactivity;
1710:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   u8_t mprio;
1711:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1712:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 4206              	 .loc 1 1712 0
 4207 000a FB79     	 ldrb r3,[r7,#7]
 4208 000c 5BB2     	 sxtb r3,r3
 4209 000e 002B     	 cmp r3,#0
 4210 0010 01DB     	 blt .L281
 4211              	 .loc 1 1712 0 is_stmt 0 discriminator 1
 4212 0012 FB79     	 ldrb r3,[r7,#7]
 4213 0014 00E0     	 b .L282
 4214              	.L281:
 4215              	 .loc 1 1712 0 discriminator 2
 4216 0016 7F23     	 movs r3,#127
 4217              	.L282:
 4218              	 .loc 1 1712 0 discriminator 4
 4219 0018 FB72     	 strb r3,[r7,#11]
1713:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1714:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* We want to kill connections with a lower prio, so bail out if 
1715:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****    * supplied prio is 0 - there can never be a lower prio
1716:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****    */
1717:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (mprio == 0) {
 4220              	 .loc 1 1717 0 is_stmt 1 discriminator 4
 4221 001a FB7A     	 ldrb r3,[r7,#11]
 4222 001c 002B     	 cmp r3,#0
 4223 001e 00D1     	 bne .L283
1718:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     return;
 4224              	 .loc 1 1718 0
 4225 0020 33E0     	 b .L280
 4226              	.L283:
1719:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1720:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1721:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* We only want kill connections with a lower prio, so decrement prio by one 
1722:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****    * and start searching for oldest connection with same or lower priority than mprio.
1723:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****    * We want to find the connections with the lowest possible prio, and among
1724:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****    * these the one with the longest inactivity time.
1725:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****    */
1726:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   mprio--;
 4227              	 .loc 1 1726 0
 4228 0022 FB7A     	 ldrb r3,[r7,#11]
 4229 0024 013B     	 subs r3,r3,#1
 4230 0026 FB72     	 strb r3,[r7,#11]
1727:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1728:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   inactivity = 0;
 4231              	 .loc 1 1728 0
 4232 0028 0023     	 movs r3,#0
 4233 002a FB60     	 str r3,[r7,#12]
1729:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   inactive = NULL;
 4234              	 .loc 1 1729 0
 4235 002c 0023     	 movs r3,#0
 4236 002e 3B61     	 str r3,[r7,#16]
1730:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 4237              	 .loc 1 1730 0
 4238 0030 174B     	 ldr r3,.L289
 4239 0032 1B68     	 ldr r3,[r3]
 4240 0034 7B61     	 str r3,[r7,#20]
 4241 0036 1FE0     	 b .L285
 4242              	.L288:
1731:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* lower prio is always a kill candidate */
1732:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if ((pcb->prio < mprio) ||
 4243              	 .loc 1 1732 0
 4244 0038 7B69     	 ldr r3,[r7,#20]
 4245 003a 5B7D     	 ldrb r3,[r3,#21]
 4246 003c FA7A     	 ldrb r2,[r7,#11]
 4247 003e 9A42     	 cmp r2,r3
 4248 0040 0CD8     	 bhi .L286
1733:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* longer inactivity is also a kill candidate */
1734:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 4249              	 .loc 1 1734 0 discriminator 1
 4250 0042 7B69     	 ldr r3,[r7,#20]
 4251 0044 5B7D     	 ldrb r3,[r3,#21]
1732:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* longer inactivity is also a kill candidate */
 4252              	 .loc 1 1732 0 discriminator 1
 4253 0046 FA7A     	 ldrb r2,[r7,#11]
 4254 0048 9A42     	 cmp r2,r3
 4255 004a 12D1     	 bne .L287
 4256              	 .loc 1 1734 0
 4257 004c 114B     	 ldr r3,.L289+4
 4258 004e 1A68     	 ldr r2,[r3]
 4259 0050 7B69     	 ldr r3,[r7,#20]
 4260 0052 1B6A     	 ldr r3,[r3,#32]
 4261 0054 D21A     	 subs r2,r2,r3
 4262 0056 FB68     	 ldr r3,[r7,#12]
 4263 0058 9A42     	 cmp r2,r3
 4264 005a 0AD3     	 bcc .L287
 4265              	.L286:
1735:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       inactivity = tcp_ticks - pcb->tmr;
 4266              	 .loc 1 1735 0
 4267 005c 0D4B     	 ldr r3,.L289+4
 4268 005e 1A68     	 ldr r2,[r3]
 4269 0060 7B69     	 ldr r3,[r7,#20]
 4270 0062 1B6A     	 ldr r3,[r3,#32]
 4271 0064 D31A     	 subs r3,r2,r3
 4272 0066 FB60     	 str r3,[r7,#12]
1736:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       inactive   = pcb;
 4273              	 .loc 1 1736 0
 4274 0068 7B69     	 ldr r3,[r7,#20]
 4275 006a 3B61     	 str r3,[r7,#16]
1737:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       mprio      = pcb->prio;
 4276              	 .loc 1 1737 0
 4277 006c 7B69     	 ldr r3,[r7,#20]
 4278 006e 5B7D     	 ldrb r3,[r3,#21]
 4279 0070 FB72     	 strb r3,[r7,#11]
 4280              	.L287:
1730:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* lower prio is always a kill candidate */
 4281              	 .loc 1 1730 0 discriminator 2
 4282 0072 7B69     	 ldr r3,[r7,#20]
 4283 0074 DB68     	 ldr r3,[r3,#12]
 4284 0076 7B61     	 str r3,[r7,#20]
 4285              	.L285:
1730:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* lower prio is always a kill candidate */
 4286              	 .loc 1 1730 0 is_stmt 0 discriminator 1
 4287 0078 7B69     	 ldr r3,[r7,#20]
 4288 007a 002B     	 cmp r3,#0
 4289 007c DCD1     	 bne .L288
1738:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1739:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1740:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (inactive != NULL) {
 4290              	 .loc 1 1740 0 is_stmt 1
 4291 007e 3B69     	 ldr r3,[r7,#16]
 4292 0080 002B     	 cmp r3,#0
 4293 0082 02D0     	 beq .L280
1741:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
1742:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                             (void *)inactive, inactivity));
1743:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_abort(inactive);
 4294              	 .loc 1 1743 0
 4295 0084 3869     	 ldr r0,[r7,#16]
 4296 0086 FFF7FEFF 	 bl tcp_abort
 4297              	.L280:
1744:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1745:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 4298              	 .loc 1 1745 0
 4299 008a 1837     	 adds r7,r7,#24
 4300              	.LCFI164:
 4301              	 .cfi_def_cfa_offset 8
 4302 008c BD46     	 mov sp,r7
 4303              	.LCFI165:
 4304              	 .cfi_def_cfa_register 13
 4305              	 
 4306 008e 80BD     	 pop {r7,pc}
 4307              	.L290:
 4308              	 .align 2
 4309              	.L289:
 4310 0090 00000000 	 .word tcp_active_pcbs
 4311 0094 00000000 	 .word tcp_ticks
 4312              	 .cfi_endproc
 4313              	.LFE165:
 4315              	 .section .text.tcp_kill_state,"ax",%progbits
 4316              	 .align 2
 4317              	 .thumb
 4318              	 .thumb_func
 4320              	tcp_kill_state:
 4321              	.LFB166:
1746:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1747:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
1748:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Kills the oldest connection that is in specific state.
1749:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
1750:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1751:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static void
1752:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_kill_state(enum tcp_state state)
1753:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 4322              	 .loc 1 1753 0
 4323              	 .cfi_startproc
 4324              	 
 4325              	 
 4326 0000 80B5     	 push {r7,lr}
 4327              	.LCFI166:
 4328              	 .cfi_def_cfa_offset 8
 4329              	 .cfi_offset 7,-8
 4330              	 .cfi_offset 14,-4
 4331 0002 86B0     	 sub sp,sp,#24
 4332              	.LCFI167:
 4333              	 .cfi_def_cfa_offset 32
 4334 0004 00AF     	 add r7,sp,#0
 4335              	.LCFI168:
 4336              	 .cfi_def_cfa_register 7
 4337 0006 0346     	 mov r3,r0
 4338 0008 FB71     	 strb r3,[r7,#7]
1754:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct tcp_pcb *pcb, *inactive;
1755:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   u32_t inactivity;
1756:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1757:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
1758:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1759:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   inactivity = 0;
 4339              	 .loc 1 1759 0
 4340 000a 0023     	 movs r3,#0
 4341 000c FB60     	 str r3,[r7,#12]
1760:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   inactive = NULL;
 4342              	 .loc 1 1760 0
 4343 000e 0023     	 movs r3,#0
 4344 0010 3B61     	 str r3,[r7,#16]
1761:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* Go through the list of active pcbs and get the oldest pcb that is in state
1762:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****      CLOSING/LAST_ACK. */
1763:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 4345              	 .loc 1 1763 0
 4346 0012 144B     	 ldr r3,.L296
 4347 0014 1B68     	 ldr r3,[r3]
 4348 0016 7B61     	 str r3,[r7,#20]
 4349 0018 17E0     	 b .L292
 4350              	.L294:
1764:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->state == state) {
 4351              	 .loc 1 1764 0
 4352 001a 7B69     	 ldr r3,[r7,#20]
 4353 001c 1B7D     	 ldrb r3,[r3,#20]
 4354 001e FA79     	 ldrb r2,[r7,#7]
 4355 0020 9A42     	 cmp r2,r3
 4356 0022 0FD1     	 bne .L293
1765:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 4357              	 .loc 1 1765 0
 4358 0024 104B     	 ldr r3,.L296+4
 4359 0026 1A68     	 ldr r2,[r3]
 4360 0028 7B69     	 ldr r3,[r7,#20]
 4361 002a 1B6A     	 ldr r3,[r3,#32]
 4362 002c D21A     	 subs r2,r2,r3
 4363 002e FB68     	 ldr r3,[r7,#12]
 4364 0030 9A42     	 cmp r2,r3
 4365 0032 07D3     	 bcc .L293
1766:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         inactivity = tcp_ticks - pcb->tmr;
 4366              	 .loc 1 1766 0
 4367 0034 0C4B     	 ldr r3,.L296+4
 4368 0036 1A68     	 ldr r2,[r3]
 4369 0038 7B69     	 ldr r3,[r7,#20]
 4370 003a 1B6A     	 ldr r3,[r3,#32]
 4371 003c D31A     	 subs r3,r2,r3
 4372 003e FB60     	 str r3,[r7,#12]
1767:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         inactive = pcb;
 4373              	 .loc 1 1767 0
 4374 0040 7B69     	 ldr r3,[r7,#20]
 4375 0042 3B61     	 str r3,[r7,#16]
 4376              	.L293:
1763:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->state == state) {
 4377              	 .loc 1 1763 0 discriminator 2
 4378 0044 7B69     	 ldr r3,[r7,#20]
 4379 0046 DB68     	 ldr r3,[r3,#12]
 4380 0048 7B61     	 str r3,[r7,#20]
 4381              	.L292:
1763:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->state == state) {
 4382              	 .loc 1 1763 0 is_stmt 0 discriminator 1
 4383 004a 7B69     	 ldr r3,[r7,#20]
 4384 004c 002B     	 cmp r3,#0
 4385 004e E4D1     	 bne .L294
1768:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1769:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1770:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1771:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (inactive != NULL) {
 4386              	 .loc 1 1771 0 is_stmt 1
 4387 0050 3B69     	 ldr r3,[r7,#16]
 4388 0052 002B     	 cmp r3,#0
 4389 0054 03D0     	 beq .L291
1772:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
1773:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                             tcp_state_str[state], (void *)inactive, inactivity));
1774:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Don't send a RST, since no data is lost. */
1775:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_abandon(inactive, 0);
 4390              	 .loc 1 1775 0
 4391 0056 3869     	 ldr r0,[r7,#16]
 4392 0058 0021     	 movs r1,#0
 4393 005a FFF7FEFF 	 bl tcp_abandon
 4394              	.L291:
1776:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1777:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 4395              	 .loc 1 1777 0
 4396 005e 1837     	 adds r7,r7,#24
 4397              	.LCFI169:
 4398              	 .cfi_def_cfa_offset 8
 4399 0060 BD46     	 mov sp,r7
 4400              	.LCFI170:
 4401              	 .cfi_def_cfa_register 13
 4402              	 
 4403 0062 80BD     	 pop {r7,pc}
 4404              	.L297:
 4405              	 .align 2
 4406              	.L296:
 4407 0064 00000000 	 .word tcp_active_pcbs
 4408 0068 00000000 	 .word tcp_ticks
 4409              	 .cfi_endproc
 4410              	.LFE166:
 4412              	 .section .text.tcp_kill_timewait,"ax",%progbits
 4413              	 .align 2
 4414              	 .thumb
 4415              	 .thumb_func
 4417              	tcp_kill_timewait:
 4418              	.LFB167:
1778:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1779:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
1780:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Kills the oldest connection that is in TIME_WAIT state.
1781:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Called from tcp_alloc() if no more connections are available.
1782:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1783:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static void
1784:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_kill_timewait(void)
1785:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 4419              	 .loc 1 1785 0
 4420              	 .cfi_startproc
 4421              	 
 4422              	 
 4423 0000 80B5     	 push {r7,lr}
 4424              	.LCFI171:
 4425              	 .cfi_def_cfa_offset 8
 4426              	 .cfi_offset 7,-8
 4427              	 .cfi_offset 14,-4
 4428 0002 84B0     	 sub sp,sp,#16
 4429              	.LCFI172:
 4430              	 .cfi_def_cfa_offset 24
 4431 0004 00AF     	 add r7,sp,#0
 4432              	.LCFI173:
 4433              	 .cfi_def_cfa_register 7
1786:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct tcp_pcb *pcb, *inactive;
1787:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   u32_t inactivity;
1788:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1789:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   inactivity = 0;
 4434              	 .loc 1 1789 0
 4435 0006 0023     	 movs r3,#0
 4436 0008 7B60     	 str r3,[r7,#4]
1790:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   inactive = NULL;
 4437              	 .loc 1 1790 0
 4438 000a 0023     	 movs r3,#0
 4439 000c BB60     	 str r3,[r7,#8]
1791:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
1792:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 4440              	 .loc 1 1792 0
 4441 000e 114B     	 ldr r3,.L303
 4442 0010 1B68     	 ldr r3,[r3]
 4443 0012 FB60     	 str r3,[r7,#12]
 4444 0014 12E0     	 b .L299
 4445              	.L301:
1793:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 4446              	 .loc 1 1793 0
 4447 0016 104B     	 ldr r3,.L303+4
 4448 0018 1A68     	 ldr r2,[r3]
 4449 001a FB68     	 ldr r3,[r7,#12]
 4450 001c 1B6A     	 ldr r3,[r3,#32]
 4451 001e D21A     	 subs r2,r2,r3
 4452 0020 7B68     	 ldr r3,[r7,#4]
 4453 0022 9A42     	 cmp r2,r3
 4454 0024 07D3     	 bcc .L300
1794:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       inactivity = tcp_ticks - pcb->tmr;
 4455              	 .loc 1 1794 0
 4456 0026 0C4B     	 ldr r3,.L303+4
 4457 0028 1A68     	 ldr r2,[r3]
 4458 002a FB68     	 ldr r3,[r7,#12]
 4459 002c 1B6A     	 ldr r3,[r3,#32]
 4460 002e D31A     	 subs r3,r2,r3
 4461 0030 7B60     	 str r3,[r7,#4]
1795:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       inactive = pcb;
 4462              	 .loc 1 1795 0
 4463 0032 FB68     	 ldr r3,[r7,#12]
 4464 0034 BB60     	 str r3,[r7,#8]
 4465              	.L300:
1792:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 4466              	 .loc 1 1792 0 discriminator 2
 4467 0036 FB68     	 ldr r3,[r7,#12]
 4468 0038 DB68     	 ldr r3,[r3,#12]
 4469 003a FB60     	 str r3,[r7,#12]
 4470              	.L299:
1792:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 4471              	 .loc 1 1792 0 is_stmt 0 discriminator 1
 4472 003c FB68     	 ldr r3,[r7,#12]
 4473 003e 002B     	 cmp r3,#0
 4474 0040 E9D1     	 bne .L301
1796:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1797:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1798:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (inactive != NULL) {
 4475              	 .loc 1 1798 0 is_stmt 1
 4476 0042 BB68     	 ldr r3,[r7,#8]
 4477 0044 002B     	 cmp r3,#0
 4478 0046 02D0     	 beq .L298
1799:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
1800:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****                             (void *)inactive, inactivity));
1801:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_abort(inactive);
 4479              	 .loc 1 1801 0
 4480 0048 B868     	 ldr r0,[r7,#8]
 4481 004a FFF7FEFF 	 bl tcp_abort
 4482              	.L298:
1802:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1803:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 4483              	 .loc 1 1803 0
 4484 004e 1037     	 adds r7,r7,#16
 4485              	.LCFI174:
 4486              	 .cfi_def_cfa_offset 8
 4487 0050 BD46     	 mov sp,r7
 4488              	.LCFI175:
 4489              	 .cfi_def_cfa_register 13
 4490              	 
 4491 0052 80BD     	 pop {r7,pc}
 4492              	.L304:
 4493              	 .align 2
 4494              	.L303:
 4495 0054 00000000 	 .word tcp_tw_pcbs
 4496 0058 00000000 	 .word tcp_ticks
 4497              	 .cfi_endproc
 4498              	.LFE167:
 4500              	 .section .text.tcp_handle_closepend,"ax",%progbits
 4501              	 .align 2
 4502              	 .thumb
 4503              	 .thumb_func
 4505              	tcp_handle_closepend:
 4506              	.LFB168:
1804:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1805:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /* Called when allocating a pcb fails.
1806:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * In this case, we want to handle all pcbs that want to close first: if we can
1807:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * now send the FIN (which failed before), the pcb might be in a state that is
1808:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * OK for us to now free it.
1809:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1810:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static void
1811:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_handle_closepend(void)
1812:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 4507              	 .loc 1 1812 0
 4508              	 .cfi_startproc
 4509              	 
 4510              	 
 4511 0000 80B5     	 push {r7,lr}
 4512              	.LCFI176:
 4513              	 .cfi_def_cfa_offset 8
 4514              	 .cfi_offset 7,-8
 4515              	 .cfi_offset 14,-4
 4516 0002 82B0     	 sub sp,sp,#8
 4517              	.LCFI177:
 4518              	 .cfi_def_cfa_offset 16
 4519 0004 00AF     	 add r7,sp,#0
 4520              	.LCFI178:
 4521              	 .cfi_def_cfa_register 7
1813:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct tcp_pcb *pcb = tcp_active_pcbs;
 4522              	 .loc 1 1813 0
 4523 0006 0F4B     	 ldr r3,.L309
 4524 0008 1B68     	 ldr r3,[r3]
 4525 000a 7B60     	 str r3,[r7,#4]
1814:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1815:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   while (pcb != NULL) {
 4526              	 .loc 1 1815 0
 4527 000c 14E0     	 b .L306
 4528              	.L308:
 4529              	.LBB18:
1816:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     struct tcp_pcb *next = pcb->next;
 4530              	 .loc 1 1816 0
 4531 000e 7B68     	 ldr r3,[r7,#4]
 4532 0010 DB68     	 ldr r3,[r3,#12]
 4533 0012 3B60     	 str r3,[r7]
1817:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* send pending FIN */
1818:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->flags & TF_CLOSEPEND) {
 4534              	 .loc 1 1818 0
 4535 0014 7B68     	 ldr r3,[r7,#4]
 4536 0016 5B8B     	 ldrh r3,[r3,#26]
 4537 0018 03F00803 	 and r3,r3,#8
 4538 001c 002B     	 cmp r3,#0
 4539 001e 09D0     	 beq .L307
1819:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
1820:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_clear_flags(pcb, TF_CLOSEPEND);
 4540              	 .loc 1 1820 0
 4541 0020 7B68     	 ldr r3,[r7,#4]
 4542 0022 5B8B     	 ldrh r3,[r3,#26]
 4543 0024 23F00803 	 bic r3,r3,#8
 4544 0028 9AB2     	 uxth r2,r3
 4545 002a 7B68     	 ldr r3,[r7,#4]
 4546 002c 5A83     	 strh r2,[r3,#26]
1821:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_close_shutdown_fin(pcb);
 4547              	 .loc 1 1821 0
 4548 002e 7868     	 ldr r0,[r7,#4]
 4549 0030 FFF7FEFF 	 bl tcp_close_shutdown_fin
 4550              	.L307:
1822:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1823:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb = next;
 4551              	 .loc 1 1823 0
 4552 0034 3B68     	 ldr r3,[r7]
 4553 0036 7B60     	 str r3,[r7,#4]
 4554              	.L306:
 4555              	.LBE18:
1815:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     struct tcp_pcb *next = pcb->next;
 4556              	 .loc 1 1815 0
 4557 0038 7B68     	 ldr r3,[r7,#4]
 4558 003a 002B     	 cmp r3,#0
 4559 003c E7D1     	 bne .L308
1824:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1825:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 4560              	 .loc 1 1825 0
 4561 003e 0837     	 adds r7,r7,#8
 4562              	.LCFI179:
 4563              	 .cfi_def_cfa_offset 8
 4564 0040 BD46     	 mov sp,r7
 4565              	.LCFI180:
 4566              	 .cfi_def_cfa_register 13
 4567              	 
 4568 0042 80BD     	 pop {r7,pc}
 4569              	.L310:
 4570              	 .align 2
 4571              	.L309:
 4572 0044 00000000 	 .word tcp_active_pcbs
 4573              	 .cfi_endproc
 4574              	.LFE168:
 4576              	 .section .text.tcp_alloc,"ax",%progbits
 4577              	 .align 2
 4578              	 .global tcp_alloc
 4579              	 .thumb
 4580              	 .thumb_func
 4582              	tcp_alloc:
 4583              	.LFB169:
1826:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1827:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
1828:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Allocate a new tcp_pcb structure.
1829:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
1830:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param prio priority for the new pcb
1831:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @return a new tcp_pcb that initially is in state CLOSED
1832:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1833:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** struct tcp_pcb *
1834:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_alloc(u8_t prio)
1835:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 4584              	 .loc 1 1835 0
 4585              	 .cfi_startproc
 4586              	 
 4587              	 
 4588 0000 80B5     	 push {r7,lr}
 4589              	.LCFI181:
 4590              	 .cfi_def_cfa_offset 8
 4591              	 .cfi_offset 7,-8
 4592              	 .cfi_offset 14,-4
 4593 0002 84B0     	 sub sp,sp,#16
 4594              	.LCFI182:
 4595              	 .cfi_def_cfa_offset 24
 4596 0004 00AF     	 add r7,sp,#0
 4597              	.LCFI183:
 4598              	 .cfi_def_cfa_register 7
 4599 0006 0346     	 mov r3,r0
 4600 0008 FB71     	 strb r3,[r7,#7]
1836:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct tcp_pcb *pcb;
1837:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1838:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
1839:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1840:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 4601              	 .loc 1 1840 0
 4602 000a 0120     	 movs r0,#1
 4603 000c FFF7FEFF 	 bl memp_malloc
 4604 0010 F860     	 str r0,[r7,#12]
1841:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb == NULL) {
 4605              	 .loc 1 1841 0
 4606 0012 FB68     	 ldr r3,[r7,#12]
 4607 0014 002B     	 cmp r3,#0
 4608 0016 26D1     	 bne .L312
1842:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
1843:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_handle_closepend();
 4609              	 .loc 1 1843 0
 4610 0018 FFF7FEFF 	 bl tcp_handle_closepend
1844:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1845:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Try killing oldest connection in TIME-WAIT. */
1846:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
1847:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_kill_timewait();
 4611              	 .loc 1 1847 0
 4612 001c FFF7FEFF 	 bl tcp_kill_timewait
1848:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Try to allocate a tcp_pcb again. */
1849:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 4613              	 .loc 1 1849 0
 4614 0020 0120     	 movs r0,#1
 4615 0022 FFF7FEFF 	 bl memp_malloc
 4616 0026 F860     	 str r0,[r7,#12]
1850:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb == NULL) {
 4617              	 .loc 1 1850 0
 4618 0028 FB68     	 ldr r3,[r7,#12]
 4619 002a 002B     	 cmp r3,#0
 4620 002c 1BD1     	 bne .L312
1851:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
1852:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
1853:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_kill_state(LAST_ACK);
 4621              	 .loc 1 1853 0
 4622 002e 0920     	 movs r0,#9
 4623 0030 FFF7FEFF 	 bl tcp_kill_state
1854:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* Try to allocate a tcp_pcb again. */
1855:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 4624              	 .loc 1 1855 0
 4625 0034 0120     	 movs r0,#1
 4626 0036 FFF7FEFF 	 bl memp_malloc
 4627 003a F860     	 str r0,[r7,#12]
1856:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (pcb == NULL) {
 4628              	 .loc 1 1856 0
 4629 003c FB68     	 ldr r3,[r7,#12]
 4630 003e 002B     	 cmp r3,#0
 4631 0040 11D1     	 bne .L312
1857:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* Try killing oldest connection in CLOSING. */
1858:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
1859:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         tcp_kill_state(CLOSING);
 4632              	 .loc 1 1859 0
 4633 0042 0820     	 movs r0,#8
 4634 0044 FFF7FEFF 	 bl tcp_kill_state
1860:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* Try to allocate a tcp_pcb again. */
1861:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 4635              	 .loc 1 1861 0
 4636 0048 0120     	 movs r0,#1
 4637 004a FFF7FEFF 	 bl memp_malloc
 4638 004e F860     	 str r0,[r7,#12]
1862:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if (pcb == NULL) {
 4639              	 .loc 1 1862 0
 4640 0050 FB68     	 ldr r3,[r7,#12]
 4641 0052 002B     	 cmp r3,#0
 4642 0054 07D1     	 bne .L312
1863:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           /* Try killing oldest active connection with lower priority than the new one. */
1864:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n",
1865:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           tcp_kill_prio(prio);
 4643              	 .loc 1 1865 0
 4644 0056 FB79     	 ldrb r3,[r7,#7]
 4645 0058 1846     	 mov r0,r3
 4646 005a FFF7FEFF 	 bl tcp_kill_prio
1866:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           /* Try to allocate a tcp_pcb again. */
1867:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 4647              	 .loc 1 1867 0
 4648 005e 0120     	 movs r0,#1
 4649 0060 FFF7FEFF 	 bl memp_malloc
 4650 0064 F860     	 str r0,[r7,#12]
 4651              	.L312:
1868:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           if (pcb != NULL) {
1869:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             /* adjust err stats: memp_malloc failed multiple times before */
1870:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             MEMP_STATS_DEC(err, MEMP_TCP_PCB);
1871:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           }
1872:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         }
1873:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if (pcb != NULL) {
1874:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           /* adjust err stats: memp_malloc failed multiple times before */
1875:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           MEMP_STATS_DEC(err, MEMP_TCP_PCB);
1876:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         }
1877:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1878:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (pcb != NULL) {
1879:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* adjust err stats: memp_malloc failed multiple times before */
1880:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         MEMP_STATS_DEC(err, MEMP_TCP_PCB);
1881:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
1882:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1883:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb != NULL) {
1884:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* adjust err stats: memp_malloc failed above */
1885:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       MEMP_STATS_DEC(err, MEMP_TCP_PCB);
1886:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
1887:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1888:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb != NULL) {
 4652              	 .loc 1 1888 0
 4653 0066 FB68     	 ldr r3,[r7,#12]
 4654 0068 002B     	 cmp r3,#0
 4655 006a 3FD0     	 beq .L313
1889:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* zero out the whole pcb, so there is no need to initialize members to zero */
1890:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     memset(pcb, 0, sizeof(struct tcp_pcb));
 4656              	 .loc 1 1890 0
 4657 006c F868     	 ldr r0,[r7,#12]
 4658 006e 0021     	 movs r1,#0
 4659 0070 9C22     	 movs r2,#156
 4660 0072 FFF7FEFF 	 bl memset
1891:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->prio = prio;
 4661              	 .loc 1 1891 0
 4662 0076 FB68     	 ldr r3,[r7,#12]
 4663 0078 FA79     	 ldrb r2,[r7,#7]
 4664 007a 5A75     	 strb r2,[r3,#21]
1892:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->snd_buf = TCP_SND_BUF;
 4665              	 .loc 1 1892 0
 4666 007c FB68     	 ldr r3,[r7,#12]
 4667 007e 4FF48662 	 mov r2,#1072
 4668 0082 A3F86420 	 strh r2,[r3,#100]
1893:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Start with a window that does not need scaling. When window scaling is
1894:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        enabled and used, the window is enlarged when both sides agree on scaling. */
1895:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 4669              	 .loc 1 1895 0
 4670 0086 FB68     	 ldr r3,[r7,#12]
 4671 0088 4FF40662 	 mov r2,#2144
 4672 008c 5A85     	 strh r2,[r3,#42]
 4673 008e FB68     	 ldr r3,[r7,#12]
 4674 0090 5A8D     	 ldrh r2,[r3,#42]
 4675 0092 FB68     	 ldr r3,[r7,#12]
 4676 0094 1A85     	 strh r2,[r3,#40]
1896:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->ttl = TCP_TTL;
 4677              	 .loc 1 1896 0
 4678 0096 FB68     	 ldr r3,[r7,#12]
 4679 0098 FF22     	 movs r2,#255
 4680 009a DA72     	 strb r2,[r3,#11]
1897:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* As initial send MSS, we use TCP_MSS but limit it to 536.
1898:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        The send MSS is updated when an MSS option is received. */
1899:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->mss = INITIAL_MSS;
 4681              	 .loc 1 1899 0
 4682 009c FB68     	 ldr r3,[r7,#12]
 4683 009e 4FF40672 	 mov r2,#536
 4684 00a2 5A86     	 strh r2,[r3,#50]
1900:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 4685              	 .loc 1 1900 0
 4686 00a4 FB68     	 ldr r3,[r7,#12]
 4687 00a6 0622     	 movs r2,#6
 4688 00a8 A3F84020 	 strh r2,[r3,#64]
1901:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 4689              	 .loc 1 1901 0
 4690 00ac FB68     	 ldr r3,[r7,#12]
 4691 00ae 0622     	 movs r2,#6
 4692 00b0 DA87     	 strh r2,[r3,#62]
1902:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->rtime = -1;
 4693              	 .loc 1 1902 0
 4694 00b2 FB68     	 ldr r3,[r7,#12]
 4695 00b4 4FF6FF72 	 movw r2,#65535
 4696 00b8 1A86     	 strh r2,[r3,#48]
1903:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->cwnd = 1;
 4697              	 .loc 1 1903 0
 4698 00ba FB68     	 ldr r3,[r7,#12]
 4699 00bc 0122     	 movs r2,#1
 4700 00be A3F84820 	 strh r2,[r3,#72]
1904:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->tmr = tcp_ticks;
 4701              	 .loc 1 1904 0
 4702 00c2 0D4B     	 ldr r3,.L315
 4703 00c4 1A68     	 ldr r2,[r3]
 4704 00c6 FB68     	 ldr r3,[r7,#12]
 4705 00c8 1A62     	 str r2,[r3,#32]
1905:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->last_timer = tcp_timer_ctr;
 4706              	 .loc 1 1905 0
 4707 00ca 0C4B     	 ldr r3,.L315+4
 4708 00cc 1A78     	 ldrb r2,[r3]
 4709 00ce FB68     	 ldr r3,[r7,#12]
 4710 00d0 9A77     	 strb r2,[r3,#30]
1906:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1907:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* RFC 5681 recommends setting ssthresh abritrarily high and gives an example
1908:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     of using the largest advertised receive window.  We've seen complications with
1909:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     receiving TCPs that use window scaling and/or window auto-tuning where the
1910:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     initial advertised window is very small and then grows rapidly once the
1911:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     connection is established. To avoid these complications, we set ssthresh to the
1912:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     largest effective cwnd (amount of in-flight data) that the sender can have. */
1913:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->ssthresh = TCP_SND_BUF;
 4711              	 .loc 1 1913 0
 4712 00d2 FB68     	 ldr r3,[r7,#12]
 4713 00d4 4FF48662 	 mov r2,#1072
 4714 00d8 A3F84A20 	 strh r2,[r3,#74]
1914:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1915:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_CALLBACK_API
1916:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->recv = tcp_recv_null;
 4715              	 .loc 1 1916 0
 4716 00dc FB68     	 ldr r3,[r7,#12]
 4717 00de 084A     	 ldr r2,.L315+8
 4718 00e0 C3F88420 	 str r2,[r3,#132]
1917:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_CALLBACK_API */
1918:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1919:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Init KEEPALIVE timer */
1920:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 4719              	 .loc 1 1920 0
 4720 00e4 FB68     	 ldr r3,[r7,#12]
 4721 00e6 074A     	 ldr r2,.L315+12
 4722 00e8 C3F89420 	 str r2,[r3,#148]
 4723              	.L313:
1921:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1922:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_TCP_KEEPALIVE
1923:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
1924:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
1925:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_TCP_KEEPALIVE */
1926:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1927:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return pcb;
 4724              	 .loc 1 1927 0
 4725 00ec FB68     	 ldr r3,[r7,#12]
1928:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 4726              	 .loc 1 1928 0
 4727 00ee 1846     	 mov r0,r3
 4728 00f0 1037     	 adds r7,r7,#16
 4729              	.LCFI184:
 4730              	 .cfi_def_cfa_offset 8
 4731 00f2 BD46     	 mov sp,r7
 4732              	.LCFI185:
 4733              	 .cfi_def_cfa_register 13
 4734              	 
 4735 00f4 80BD     	 pop {r7,pc}
 4736              	.L316:
 4737 00f6 00BF     	 .align 2
 4738              	.L315:
 4739 00f8 00000000 	 .word tcp_ticks
 4740 00fc 00000000 	 .word tcp_timer_ctr
 4741 0100 00000000 	 .word tcp_recv_null
 4742 0104 00DD6D00 	 .word 7200000
 4743              	 .cfi_endproc
 4744              	.LFE169:
 4746              	 .section .text.tcp_new,"ax",%progbits
 4747              	 .align 2
 4748              	 .global tcp_new
 4749              	 .thumb
 4750              	 .thumb_func
 4752              	tcp_new:
 4753              	.LFB170:
1929:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1930:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
1931:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
1932:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Creates a new TCP protocol control block but doesn't place it on
1933:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * any of the TCP PCB lists.
1934:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * The pcb is not put on any list until binding using tcp_bind().
1935:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * If memory is not available for creating the new pcb, NULL is returned.
1936:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
1937:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @internal: Maybe there should be a idle TCP PCB list where these
1938:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * PCBs are put on. Port reservation using tcp_bind() is implemented but
1939:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * allocated pcbs that are not bound can't be killed automatically if wanting
1940:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * to allocate a pcb with higher prio (@see tcp_kill_prio())
1941:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
1942:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @return a new tcp_pcb that initially is in state CLOSED
1943:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1944:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** struct tcp_pcb *
1945:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_new(void)
1946:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 4754              	 .loc 1 1946 0
 4755              	 .cfi_startproc
 4756              	 
 4757              	 
 4758 0000 80B5     	 push {r7,lr}
 4759              	.LCFI186:
 4760              	 .cfi_def_cfa_offset 8
 4761              	 .cfi_offset 7,-8
 4762              	 .cfi_offset 14,-4
 4763 0002 00AF     	 add r7,sp,#0
 4764              	.LCFI187:
 4765              	 .cfi_def_cfa_register 7
1947:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return tcp_alloc(TCP_PRIO_NORMAL);
 4766              	 .loc 1 1947 0
 4767 0004 4020     	 movs r0,#64
 4768 0006 FFF7FEFF 	 bl tcp_alloc
 4769 000a 0346     	 mov r3,r0
1948:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 4770              	 .loc 1 1948 0
 4771 000c 1846     	 mov r0,r3
 4772 000e 80BD     	 pop {r7,pc}
 4773              	 .cfi_endproc
 4774              	.LFE170:
 4776              	 .section .text.tcp_new_ip_type,"ax",%progbits
 4777              	 .align 2
 4778              	 .global tcp_new_ip_type
 4779              	 .thumb
 4780              	 .thumb_func
 4782              	tcp_new_ip_type:
 4783              	.LFB171:
1949:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1950:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
1951:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
1952:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Creates a new TCP protocol control block but doesn't
1953:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * place it on any of the TCP PCB lists.
1954:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * The pcb is not put on any list until binding using tcp_bind().
1955:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
1956:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param type IP address type, see @ref lwip_ip_addr_type definitions.
1957:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * If you want to listen to IPv4 and IPv6 (dual-stack) connections,
1958:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
1959:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @return a new tcp_pcb that initially is in state CLOSED
1960:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1961:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** struct tcp_pcb *
1962:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_new_ip_type(u8_t type)
1963:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 4784              	 .loc 1 1963 0
 4785              	 .cfi_startproc
 4786              	 
 4787              	 
 4788 0000 80B5     	 push {r7,lr}
 4789              	.LCFI188:
 4790              	 .cfi_def_cfa_offset 8
 4791              	 .cfi_offset 7,-8
 4792              	 .cfi_offset 14,-4
 4793 0002 84B0     	 sub sp,sp,#16
 4794              	.LCFI189:
 4795              	 .cfi_def_cfa_offset 24
 4796 0004 00AF     	 add r7,sp,#0
 4797              	.LCFI190:
 4798              	 .cfi_def_cfa_register 7
 4799 0006 0346     	 mov r3,r0
 4800 0008 FB71     	 strb r3,[r7,#7]
1964:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct tcp_pcb *pcb;
1965:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb = tcp_alloc(TCP_PRIO_NORMAL);
 4801              	 .loc 1 1965 0
 4802 000a 4020     	 movs r0,#64
 4803 000c FFF7FEFF 	 bl tcp_alloc
 4804 0010 F860     	 str r0,[r7,#12]
1966:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_IPV4 && LWIP_IPV6
1967:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb != NULL) {
1968:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     IP_SET_TYPE_VAL(pcb->local_ip, type);
1969:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     IP_SET_TYPE_VAL(pcb->remote_ip, type);
1970:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1971:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #else
1972:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_UNUSED_ARG(type);
1973:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_IPV4 && LWIP_IPV6 */
1974:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return pcb;
 4805              	 .loc 1 1974 0
 4806 0012 FB68     	 ldr r3,[r7,#12]
1975:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 4807              	 .loc 1 1975 0
 4808 0014 1846     	 mov r0,r3
 4809 0016 1037     	 adds r7,r7,#16
 4810              	.LCFI191:
 4811              	 .cfi_def_cfa_offset 8
 4812 0018 BD46     	 mov sp,r7
 4813              	.LCFI192:
 4814              	 .cfi_def_cfa_register 13
 4815              	 
 4816 001a 80BD     	 pop {r7,pc}
 4817              	 .cfi_endproc
 4818              	.LFE171:
 4820              	 .section .text.tcp_arg,"ax",%progbits
 4821              	 .align 2
 4822              	 .global tcp_arg
 4823              	 .thumb
 4824              	 .thumb_func
 4826              	tcp_arg:
 4827              	.LFB172:
1976:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1977:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
1978:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
1979:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Specifies the program specific state that should be passed to all
1980:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * other callback functions. The "pcb" argument is the current TCP
1981:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * connection control block, and the "arg" argument is the argument
1982:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * that will be passed to the callbacks.
1983:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
1984:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb tcp_pcb to set the callback argument
1985:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param arg void pointer argument to pass to callback functions
1986:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
1987:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
1988:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_arg(struct tcp_pcb *pcb, void *arg)
1989:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 4828              	 .loc 1 1989 0
 4829              	 .cfi_startproc
 4830              	 
 4831              	 
 4832              	 
 4833 0000 80B4     	 push {r7}
 4834              	.LCFI193:
 4835              	 .cfi_def_cfa_offset 4
 4836              	 .cfi_offset 7,-4
 4837 0002 83B0     	 sub sp,sp,#12
 4838              	.LCFI194:
 4839              	 .cfi_def_cfa_offset 16
 4840 0004 00AF     	 add r7,sp,#0
 4841              	.LCFI195:
 4842              	 .cfi_def_cfa_register 7
 4843 0006 7860     	 str r0,[r7,#4]
 4844 0008 3960     	 str r1,[r7]
1990:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
1991:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* This function is allowed to be called for both listen pcbs and
1992:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****      connection pcbs. */
1993:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb != NULL) {
 4845              	 .loc 1 1993 0
 4846 000a 7B68     	 ldr r3,[r7,#4]
 4847 000c 002B     	 cmp r3,#0
 4848 000e 02D0     	 beq .L321
1994:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->callback_arg = arg;
 4849              	 .loc 1 1994 0
 4850 0010 7B68     	 ldr r3,[r7,#4]
 4851 0012 3A68     	 ldr r2,[r7]
 4852 0014 1A61     	 str r2,[r3,#16]
 4853              	.L321:
1995:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
1996:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 4854              	 .loc 1 1996 0
 4855 0016 0C37     	 adds r7,r7,#12
 4856              	.LCFI196:
 4857              	 .cfi_def_cfa_offset 4
 4858 0018 BD46     	 mov sp,r7
 4859              	.LCFI197:
 4860              	 .cfi_def_cfa_register 13
 4861              	 
 4862 001a 5DF8047B 	 ldr r7,[sp],#4
 4863              	.LCFI198:
 4864              	 .cfi_restore 7
 4865              	 .cfi_def_cfa_offset 0
 4866 001e 7047     	 bx lr
 4867              	 .cfi_endproc
 4868              	.LFE172:
 4870              	 .section .text.tcp_recv,"ax",%progbits
 4871              	 .align 2
 4872              	 .global tcp_recv
 4873              	 .thumb
 4874              	 .thumb_func
 4876              	tcp_recv:
 4877              	.LFB173:
1997:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_CALLBACK_API
1998:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
1999:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
2000:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
2001:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Sets the callback function that will be called when new data
2002:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * arrives. The callback function will be passed a NULL pbuf to
2003:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * indicate that the remote host has closed the connection. If the
2004:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * callback function returns ERR_OK or ERR_ABRT it must have
2005:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * freed the pbuf, otherwise it must not have freed it.
2006:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
2007:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb tcp_pcb to set the recv callback
2008:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param recv callback function to call for this pcb when data is received
2009:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
2010:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
2011:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
2012:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 4878              	 .loc 1 2012 0
 4879              	 .cfi_startproc
 4880              	 
 4881              	 
 4882              	 
 4883 0000 80B4     	 push {r7}
 4884              	.LCFI199:
 4885              	 .cfi_def_cfa_offset 4
 4886              	 .cfi_offset 7,-4
 4887 0002 83B0     	 sub sp,sp,#12
 4888              	.LCFI200:
 4889              	 .cfi_def_cfa_offset 16
 4890 0004 00AF     	 add r7,sp,#0
 4891              	.LCFI201:
 4892              	 .cfi_def_cfa_register 7
 4893 0006 7860     	 str r0,[r7,#4]
 4894 0008 3960     	 str r1,[r7]
2013:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
2014:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb != NULL) {
 4895              	 .loc 1 2014 0
 4896 000a 7B68     	 ldr r3,[r7,#4]
 4897 000c 002B     	 cmp r3,#0
 4898 000e 03D0     	 beq .L323
2015:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
2016:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->recv = recv;
 4899              	 .loc 1 2016 0
 4900 0010 7B68     	 ldr r3,[r7,#4]
 4901 0012 3A68     	 ldr r2,[r7]
 4902 0014 C3F88420 	 str r2,[r3,#132]
 4903              	.L323:
2017:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
2018:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 4904              	 .loc 1 2018 0
 4905 0018 0C37     	 adds r7,r7,#12
 4906              	.LCFI202:
 4907              	 .cfi_def_cfa_offset 4
 4908 001a BD46     	 mov sp,r7
 4909              	.LCFI203:
 4910              	 .cfi_def_cfa_register 13
 4911              	 
 4912 001c 5DF8047B 	 ldr r7,[sp],#4
 4913              	.LCFI204:
 4914              	 .cfi_restore 7
 4915              	 .cfi_def_cfa_offset 0
 4916 0020 7047     	 bx lr
 4917              	 .cfi_endproc
 4918              	.LFE173:
 4920 0022 00BF     	 .section .text.tcp_sent,"ax",%progbits
 4921              	 .align 2
 4922              	 .global tcp_sent
 4923              	 .thumb
 4924              	 .thumb_func
 4926              	tcp_sent:
 4927              	.LFB174:
2019:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2020:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
2021:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
2022:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Specifies the callback function that should be called when data has
2023:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * successfully been received (i.e., acknowledged) by the remote
2024:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * host. The len argument passed to the callback function gives the
2025:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * amount bytes that was acknowledged by the last acknowledgment.
2026:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
2027:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb tcp_pcb to set the sent callback
2028:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param sent callback function to call for this pcb when data is successfully sent
2029:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
2030:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
2031:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
2032:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 4928              	 .loc 1 2032 0
 4929              	 .cfi_startproc
 4930              	 
 4931              	 
 4932              	 
 4933 0000 80B4     	 push {r7}
 4934              	.LCFI205:
 4935              	 .cfi_def_cfa_offset 4
 4936              	 .cfi_offset 7,-4
 4937 0002 83B0     	 sub sp,sp,#12
 4938              	.LCFI206:
 4939              	 .cfi_def_cfa_offset 16
 4940 0004 00AF     	 add r7,sp,#0
 4941              	.LCFI207:
 4942              	 .cfi_def_cfa_register 7
 4943 0006 7860     	 str r0,[r7,#4]
 4944 0008 3960     	 str r1,[r7]
2033:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
2034:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb != NULL) {
 4945              	 .loc 1 2034 0
 4946 000a 7B68     	 ldr r3,[r7,#4]
 4947 000c 002B     	 cmp r3,#0
 4948 000e 03D0     	 beq .L325
2035:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
2036:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->sent = sent;
 4949              	 .loc 1 2036 0
 4950 0010 7B68     	 ldr r3,[r7,#4]
 4951 0012 3A68     	 ldr r2,[r7]
 4952 0014 C3F88020 	 str r2,[r3,#128]
 4953              	.L325:
2037:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
2038:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 4954              	 .loc 1 2038 0
 4955 0018 0C37     	 adds r7,r7,#12
 4956              	.LCFI208:
 4957              	 .cfi_def_cfa_offset 4
 4958 001a BD46     	 mov sp,r7
 4959              	.LCFI209:
 4960              	 .cfi_def_cfa_register 13
 4961              	 
 4962 001c 5DF8047B 	 ldr r7,[sp],#4
 4963              	.LCFI210:
 4964              	 .cfi_restore 7
 4965              	 .cfi_def_cfa_offset 0
 4966 0020 7047     	 bx lr
 4967              	 .cfi_endproc
 4968              	.LFE174:
 4970 0022 00BF     	 .section .text.tcp_err,"ax",%progbits
 4971              	 .align 2
 4972              	 .global tcp_err
 4973              	 .thumb
 4974              	 .thumb_func
 4976              	tcp_err:
 4977              	.LFB175:
2039:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2040:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
2041:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
2042:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Used to specify the function that should be called when a fatal error
2043:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * has occurred on the connection.
2044:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * 
2045:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * If a connection is aborted because of an error, the application is
2046:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * alerted of this event by the err callback. Errors that might abort a
2047:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * connection are when there is a shortage of memory. The callback
2048:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * function to be called is set using the tcp_err() function.
2049:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
2050:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @note The corresponding pcb is already freed when this callback is called!
2051:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
2052:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb tcp_pcb to set the err callback
2053:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param err callback function to call for this pcb when a fatal error
2054:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *        has occurred on the connection
2055:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
2056:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
2057:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
2058:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 4978              	 .loc 1 2058 0
 4979              	 .cfi_startproc
 4980              	 
 4981              	 
 4982              	 
 4983 0000 80B4     	 push {r7}
 4984              	.LCFI211:
 4985              	 .cfi_def_cfa_offset 4
 4986              	 .cfi_offset 7,-4
 4987 0002 83B0     	 sub sp,sp,#12
 4988              	.LCFI212:
 4989              	 .cfi_def_cfa_offset 16
 4990 0004 00AF     	 add r7,sp,#0
 4991              	.LCFI213:
 4992              	 .cfi_def_cfa_register 7
 4993 0006 7860     	 str r0,[r7,#4]
 4994 0008 3960     	 str r1,[r7]
2059:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
2060:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb != NULL) {
 4995              	 .loc 1 2060 0
 4996 000a 7B68     	 ldr r3,[r7,#4]
 4997 000c 002B     	 cmp r3,#0
 4998 000e 03D0     	 beq .L327
2061:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
2062:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->errf = err;
 4999              	 .loc 1 2062 0
 5000 0010 7B68     	 ldr r3,[r7,#4]
 5001 0012 3A68     	 ldr r2,[r7]
 5002 0014 C3F89020 	 str r2,[r3,#144]
 5003              	.L327:
2063:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
2064:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 5004              	 .loc 1 2064 0
 5005 0018 0C37     	 adds r7,r7,#12
 5006              	.LCFI214:
 5007              	 .cfi_def_cfa_offset 4
 5008 001a BD46     	 mov sp,r7
 5009              	.LCFI215:
 5010              	 .cfi_def_cfa_register 13
 5011              	 
 5012 001c 5DF8047B 	 ldr r7,[sp],#4
 5013              	.LCFI216:
 5014              	 .cfi_restore 7
 5015              	 .cfi_def_cfa_offset 0
 5016 0020 7047     	 bx lr
 5017              	 .cfi_endproc
 5018              	.LFE175:
 5020 0022 00BF     	 .section .text.tcp_accept,"ax",%progbits
 5021              	 .align 2
 5022              	 .global tcp_accept
 5023              	 .thumb
 5024              	 .thumb_func
 5026              	tcp_accept:
 5027              	.LFB176:
2065:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2066:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
2067:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
2068:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Used for specifying the function that should be called when a
2069:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * LISTENing connection has been connected to another host.
2070:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
2071:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb tcp_pcb to set the accept callback
2072:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param accept callback function to call for this pcb when LISTENing
2073:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *        connection has been connected to another host
2074:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
2075:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
2076:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
2077:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 5028              	 .loc 1 2077 0
 5029              	 .cfi_startproc
 5030              	 
 5031              	 
 5032              	 
 5033 0000 80B4     	 push {r7}
 5034              	.LCFI217:
 5035              	 .cfi_def_cfa_offset 4
 5036              	 .cfi_offset 7,-4
 5037 0002 85B0     	 sub sp,sp,#20
 5038              	.LCFI218:
 5039              	 .cfi_def_cfa_offset 24
 5040 0004 00AF     	 add r7,sp,#0
 5041              	.LCFI219:
 5042              	 .cfi_def_cfa_register 7
 5043 0006 7860     	 str r0,[r7,#4]
 5044 0008 3960     	 str r1,[r7]
2078:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
2079:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if ((pcb != NULL) && (pcb->state == LISTEN)) {
 5045              	 .loc 1 2079 0
 5046 000a 7B68     	 ldr r3,[r7,#4]
 5047 000c 002B     	 cmp r3,#0
 5048 000e 08D0     	 beq .L329
 5049              	 .loc 1 2079 0 is_stmt 0 discriminator 1
 5050 0010 7B68     	 ldr r3,[r7,#4]
 5051 0012 1B7D     	 ldrb r3,[r3,#20]
 5052 0014 012B     	 cmp r3,#1
 5053 0016 04D1     	 bne .L329
 5054              	.LBB19:
2080:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 5055              	 .loc 1 2080 0 is_stmt 1
 5056 0018 7B68     	 ldr r3,[r7,#4]
 5057 001a FB60     	 str r3,[r7,#12]
2081:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     lpcb->accept = accept;
 5058              	 .loc 1 2081 0
 5059 001c FB68     	 ldr r3,[r7,#12]
 5060 001e 3A68     	 ldr r2,[r7]
 5061 0020 9A61     	 str r2,[r3,#24]
 5062              	.L329:
 5063              	.LBE19:
2082:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
2083:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 5064              	 .loc 1 2083 0
 5065 0022 1437     	 adds r7,r7,#20
 5066              	.LCFI220:
 5067              	 .cfi_def_cfa_offset 4
 5068 0024 BD46     	 mov sp,r7
 5069              	.LCFI221:
 5070              	 .cfi_def_cfa_register 13
 5071              	 
 5072 0026 5DF8047B 	 ldr r7,[sp],#4
 5073              	.LCFI222:
 5074              	 .cfi_restore 7
 5075              	 .cfi_def_cfa_offset 0
 5076 002a 7047     	 bx lr
 5077              	 .cfi_endproc
 5078              	.LFE176:
 5080              	 .section .text.tcp_poll,"ax",%progbits
 5081              	 .align 2
 5082              	 .global tcp_poll
 5083              	 .thumb
 5084              	 .thumb_func
 5086              	tcp_poll:
 5087              	.LFB177:
2084:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_CALLBACK_API */
2085:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2086:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2087:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
2088:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @ingroup tcp_raw
2089:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Specifies the polling interval and the callback function that should
2090:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * be called to poll the application. The interval is specified in
2091:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * number of TCP coarse grained timer shots, which typically occurs
2092:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * twice a second. An interval of 10 means that the application would
2093:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * be polled every 5 seconds.
2094:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * 
2095:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * When a connection is idle (i.e., no data is either transmitted or
2096:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * received), lwIP will repeatedly poll the application by calling a
2097:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * specified callback function. This can be used either as a watchdog
2098:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * timer for killing connections that have stayed idle for too long, or
2099:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * as a method of waiting for memory to become available. For instance,
2100:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * if a call to tcp_write() has failed because memory wasn't available,
2101:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * the application may use the polling functionality to call tcp_write()
2102:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * again when the connection has been idle for a while.
2103:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
2104:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
2105:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
2106:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 5088              	 .loc 1 2106 0
 5089              	 .cfi_startproc
 5090              	 
 5091              	 
 5092              	 
 5093 0000 80B4     	 push {r7}
 5094              	.LCFI223:
 5095              	 .cfi_def_cfa_offset 4
 5096              	 .cfi_offset 7,-4
 5097 0002 85B0     	 sub sp,sp,#20
 5098              	.LCFI224:
 5099              	 .cfi_def_cfa_offset 24
 5100 0004 00AF     	 add r7,sp,#0
 5101              	.LCFI225:
 5102              	 .cfi_def_cfa_register 7
 5103 0006 F860     	 str r0,[r7,#12]
 5104 0008 B960     	 str r1,[r7,#8]
 5105 000a 1346     	 mov r3,r2
 5106 000c FB71     	 strb r3,[r7,#7]
2107:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT_CORE_LOCKED();
2108:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2109:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 5107              	 .loc 1 2109 0
 5108 000e FB68     	 ldr r3,[r7,#12]
 5109 0010 002B     	 cmp r3,#0
 5110 0012 00D1     	 bne .L332
 5111 0014 06E0     	 b .L331
 5112              	.L332:
2110:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
2111:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2112:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_CALLBACK_API
2113:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->poll = poll;
 5113              	 .loc 1 2113 0
 5114 0016 FB68     	 ldr r3,[r7,#12]
 5115 0018 BA68     	 ldr r2,[r7,#8]
 5116 001a C3F88C20 	 str r2,[r3,#140]
2114:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #else /* LWIP_CALLBACK_API */
2115:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_UNUSED_ARG(poll);
2116:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_CALLBACK_API */
2117:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->pollinterval = interval;
 5117              	 .loc 1 2117 0
 5118 001e FB68     	 ldr r3,[r7,#12]
 5119 0020 FA79     	 ldrb r2,[r7,#7]
 5120 0022 5A77     	 strb r2,[r3,#29]
 5121              	.L331:
2118:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 5122              	 .loc 1 2118 0
 5123 0024 1437     	 adds r7,r7,#20
 5124              	.LCFI226:
 5125              	 .cfi_def_cfa_offset 4
 5126 0026 BD46     	 mov sp,r7
 5127              	.LCFI227:
 5128              	 .cfi_def_cfa_register 13
 5129              	 
 5130 0028 5DF8047B 	 ldr r7,[sp],#4
 5131              	.LCFI228:
 5132              	 .cfi_restore 7
 5133              	 .cfi_def_cfa_offset 0
 5134 002c 7047     	 bx lr
 5135              	 .cfi_endproc
 5136              	.LFE177:
 5138 002e 00BF     	 .section .text.tcp_pcb_purge,"ax",%progbits
 5139              	 .align 2
 5140              	 .global tcp_pcb_purge
 5141              	 .thumb
 5142              	 .thumb_func
 5144              	tcp_pcb_purge:
 5145              	.LFB178:
2119:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2120:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
2121:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Purges a TCP PCB. Removes any buffered data and frees the buffer memory
2122:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * (pcb->ooseq, pcb->unsent and pcb->unacked are freed).
2123:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
2124:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
2125:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
2126:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
2127:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_pcb_purge(struct tcp_pcb *pcb)
2128:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 5146              	 .loc 1 2128 0
 5147              	 .cfi_startproc
 5148              	 
 5149              	 
 5150 0000 80B5     	 push {r7,lr}
 5151              	.LCFI229:
 5152              	 .cfi_def_cfa_offset 8
 5153              	 .cfi_offset 7,-8
 5154              	 .cfi_offset 14,-4
 5155 0002 82B0     	 sub sp,sp,#8
 5156              	.LCFI230:
 5157              	 .cfi_def_cfa_offset 16
 5158 0004 00AF     	 add r7,sp,#0
 5159              	.LCFI231:
 5160              	 .cfi_def_cfa_register 7
 5161 0006 7860     	 str r0,[r7,#4]
2129:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 5162              	 .loc 1 2129 0
 5163 0008 7B68     	 ldr r3,[r7,#4]
 5164 000a 002B     	 cmp r3,#0
 5165 000c 00D1     	 bne .L335
 5166 000e 3AE0     	 b .L334
 5167              	.L335:
2130:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2131:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb->state != CLOSED &&
 5168              	 .loc 1 2131 0
 5169 0010 7B68     	 ldr r3,[r7,#4]
 5170 0012 1B7D     	 ldrb r3,[r3,#20]
 5171 0014 002B     	 cmp r3,#0
 5172 0016 36D0     	 beq .L334
2132:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb->state != TIME_WAIT &&
 5173              	 .loc 1 2132 0 discriminator 1
 5174 0018 7B68     	 ldr r3,[r7,#4]
 5175 001a 1B7D     	 ldrb r3,[r3,#20]
2131:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb->state != TIME_WAIT &&
 5176              	 .loc 1 2131 0 discriminator 1
 5177 001c 0A2B     	 cmp r3,#10
 5178 001e 32D0     	 beq .L334
2133:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb->state != LISTEN) {
 5179              	 .loc 1 2133 0
 5180 0020 7B68     	 ldr r3,[r7,#4]
 5181 0022 1B7D     	 ldrb r3,[r3,#20]
2132:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb->state != TIME_WAIT &&
 5182              	 .loc 1 2132 0
 5183 0024 012B     	 cmp r3,#1
 5184 0026 2ED0     	 beq .L334
2134:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2135:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));
2136:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2137:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_backlog_accepted(pcb);
 5185              	 .loc 1 2137 0
 5186 0028 7868     	 ldr r0,[r7,#4]
 5187 002a FFF7FEFF 	 bl tcp_backlog_accepted
2138:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2139:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->refused_data != NULL) {
 5188              	 .loc 1 2139 0
 5189 002e 7B68     	 ldr r3,[r7,#4]
 5190 0030 9B6F     	 ldr r3,[r3,#120]
 5191 0032 002B     	 cmp r3,#0
 5192 0034 07D0     	 beq .L337
2140:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
2141:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pbuf_free(pcb->refused_data);
 5193              	 .loc 1 2141 0
 5194 0036 7B68     	 ldr r3,[r7,#4]
 5195 0038 9B6F     	 ldr r3,[r3,#120]
 5196 003a 1846     	 mov r0,r3
 5197 003c FFF7FEFF 	 bl pbuf_free
2142:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb->refused_data = NULL;
 5198              	 .loc 1 2142 0
 5199 0040 7B68     	 ldr r3,[r7,#4]
 5200 0042 0022     	 movs r2,#0
 5201 0044 9A67     	 str r2,[r3,#120]
 5202              	.L337:
2143:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
2144:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->unsent != NULL) {
2145:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: not all data sent\n"));
2146:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
2147:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->unacked != NULL) {
2148:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
2149:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
2150:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_QUEUE_OOSEQ
2151:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (pcb->ooseq != NULL) {
 5203              	 .loc 1 2151 0
 5204 0046 7B68     	 ldr r3,[r7,#4]
 5205 0048 5B6F     	 ldr r3,[r3,#116]
 5206 004a 002B     	 cmp r3,#0
 5207 004c 02D0     	 beq .L338
2152:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
2153:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_free_ooseq(pcb);
 5208              	 .loc 1 2153 0
 5209 004e 7868     	 ldr r0,[r7,#4]
 5210 0050 FFF7FEFF 	 bl tcp_free_ooseq
 5211              	.L338:
2154:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
2155:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* TCP_QUEUE_OOSEQ */
2156:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2157:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* Stop the retransmission timer as it will expect data on unacked
2158:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        queue if it fires */
2159:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->rtime = -1;
 5212              	 .loc 1 2159 0
 5213 0054 7B68     	 ldr r3,[r7,#4]
 5214 0056 4FF6FF72 	 movw r2,#65535
 5215 005a 1A86     	 strh r2,[r3,#48]
2160:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2161:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_segs_free(pcb->unsent);
 5216              	 .loc 1 2161 0
 5217 005c 7B68     	 ldr r3,[r7,#4]
 5218 005e DB6E     	 ldr r3,[r3,#108]
 5219 0060 1846     	 mov r0,r3
 5220 0062 FFF7FEFF 	 bl tcp_segs_free
2162:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_segs_free(pcb->unacked);
 5221              	 .loc 1 2162 0
 5222 0066 7B68     	 ldr r3,[r7,#4]
 5223 0068 1B6F     	 ldr r3,[r3,#112]
 5224 006a 1846     	 mov r0,r3
 5225 006c FFF7FEFF 	 bl tcp_segs_free
2163:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->unacked = pcb->unsent = NULL;
 5226              	 .loc 1 2163 0
 5227 0070 7B68     	 ldr r3,[r7,#4]
 5228 0072 0022     	 movs r2,#0
 5229 0074 DA66     	 str r2,[r3,#108]
 5230 0076 7B68     	 ldr r3,[r7,#4]
 5231 0078 DA6E     	 ldr r2,[r3,#108]
 5232 007a 7B68     	 ldr r3,[r7,#4]
 5233 007c 1A67     	 str r2,[r3,#112]
2164:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_OVERSIZE
2165:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->unsent_oversize = 0;
 5234              	 .loc 1 2165 0
 5235 007e 7B68     	 ldr r3,[r7,#4]
 5236 0080 0022     	 movs r2,#0
 5237 0082 A3F86820 	 strh r2,[r3,#104]
 5238              	.L334:
2166:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* TCP_OVERSIZE */
2167:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
2168:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 5239              	 .loc 1 2168 0
 5240 0086 0837     	 adds r7,r7,#8
 5241              	.LCFI232:
 5242              	 .cfi_def_cfa_offset 8
 5243 0088 BD46     	 mov sp,r7
 5244              	.LCFI233:
 5245              	 .cfi_def_cfa_register 13
 5246              	 
 5247 008a 80BD     	 pop {r7,pc}
 5248              	 .cfi_endproc
 5249              	.LFE178:
 5251              	 .section .text.tcp_pcb_remove,"ax",%progbits
 5252              	 .align 2
 5253              	 .global tcp_pcb_remove
 5254              	 .thumb
 5255              	 .thumb_func
 5257              	tcp_pcb_remove:
 5258              	.LFB179:
2169:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2170:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
2171:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Purges the PCB and removes it from a PCB list. Any delayed ACKs are sent first.
2172:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
2173:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcblist PCB list to purge.
2174:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
2175:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
2176:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
2177:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
2178:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 5259              	 .loc 1 2178 0
 5260              	 .cfi_startproc
 5261              	 
 5262              	 
 5263 0000 80B5     	 push {r7,lr}
 5264              	.LCFI234:
 5265              	 .cfi_def_cfa_offset 8
 5266              	 .cfi_offset 7,-8
 5267              	 .cfi_offset 14,-4
 5268 0002 84B0     	 sub sp,sp,#16
 5269              	.LCFI235:
 5270              	 .cfi_def_cfa_offset 24
 5271 0004 00AF     	 add r7,sp,#0
 5272              	.LCFI236:
 5273              	 .cfi_def_cfa_register 7
 5274 0006 7860     	 str r0,[r7,#4]
 5275 0008 3960     	 str r1,[r7]
2179:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
2180:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
2181:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2182:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   TCP_RMV(pcblist, pcb);
 5276              	 .loc 1 2182 0
 5277 000a 7B68     	 ldr r3,[r7,#4]
 5278 000c 1A68     	 ldr r2,[r3]
 5279 000e 3B68     	 ldr r3,[r7]
 5280 0010 9A42     	 cmp r2,r3
 5281 0012 05D1     	 bne .L340
 5282              	 .loc 1 2182 0 is_stmt 0 discriminator 1
 5283 0014 7B68     	 ldr r3,[r7,#4]
 5284 0016 1B68     	 ldr r3,[r3]
 5285 0018 DA68     	 ldr r2,[r3,#12]
 5286 001a 7B68     	 ldr r3,[r7,#4]
 5287 001c 1A60     	 str r2,[r3]
 5288 001e 13E0     	 b .L341
 5289              	.L340:
 5290              	.LBB20:
 5291              	 .loc 1 2182 0 discriminator 2
 5292 0020 7B68     	 ldr r3,[r7,#4]
 5293 0022 1B68     	 ldr r3,[r3]
 5294 0024 FB60     	 str r3,[r7,#12]
 5295 0026 0CE0     	 b .L342
 5296              	.L344:
 5297              	 .loc 1 2182 0 discriminator 9
 5298 0028 FB68     	 ldr r3,[r7,#12]
 5299 002a DA68     	 ldr r2,[r3,#12]
 5300 002c 3B68     	 ldr r3,[r7]
 5301 002e 9A42     	 cmp r2,r3
 5302 0030 04D1     	 bne .L343
 5303              	 .loc 1 2182 0 discriminator 5
 5304 0032 3B68     	 ldr r3,[r7]
 5305 0034 DA68     	 ldr r2,[r3,#12]
 5306 0036 FB68     	 ldr r3,[r7,#12]
 5307 0038 DA60     	 str r2,[r3,#12]
 5308 003a 05E0     	 b .L341
 5309              	.L343:
 5310              	 .loc 1 2182 0 discriminator 6
 5311 003c FB68     	 ldr r3,[r7,#12]
 5312 003e DB68     	 ldr r3,[r3,#12]
 5313 0040 FB60     	 str r3,[r7,#12]
 5314              	.L342:
 5315              	 .loc 1 2182 0 discriminator 8
 5316 0042 FB68     	 ldr r3,[r7,#12]
 5317 0044 002B     	 cmp r3,#0
 5318 0046 EFD1     	 bne .L344
 5319              	.L341:
 5320              	.LBE20:
 5321              	 .loc 1 2182 0 discriminator 10
 5322 0048 3B68     	 ldr r3,[r7]
 5323 004a 0022     	 movs r2,#0
 5324 004c DA60     	 str r2,[r3,#12]
2183:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2184:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   tcp_pcb_purge(pcb);
 5325              	 .loc 1 2184 0 is_stmt 1 discriminator 10
 5326 004e 3868     	 ldr r0,[r7]
 5327 0050 FFF7FEFF 	 bl tcp_pcb_purge
2185:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2186:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* if there is an outstanding delayed ACKs, send it */
2187:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if ((pcb->state != TIME_WAIT) &&
 5328              	 .loc 1 2187 0 discriminator 10
 5329 0054 3B68     	 ldr r3,[r7]
 5330 0056 1B7D     	 ldrb r3,[r3,#20]
 5331 0058 0A2B     	 cmp r3,#10
 5332 005a 13D0     	 beq .L345
2188:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       (pcb->state != LISTEN) &&
 5333              	 .loc 1 2188 0 discriminator 1
 5334 005c 3B68     	 ldr r3,[r7]
 5335 005e 1B7D     	 ldrb r3,[r3,#20]
2187:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       (pcb->state != LISTEN) &&
 5336              	 .loc 1 2187 0 discriminator 1
 5337 0060 012B     	 cmp r3,#1
 5338 0062 0FD0     	 beq .L345
2189:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       (pcb->flags & TF_ACK_DELAY)) {
 5339              	 .loc 1 2189 0
 5340 0064 3B68     	 ldr r3,[r7]
 5341 0066 5B8B     	 ldrh r3,[r3,#26]
 5342 0068 03F00103 	 and r3,r3,#1
2188:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       (pcb->state != LISTEN) &&
 5343              	 .loc 1 2188 0
 5344 006c 002B     	 cmp r3,#0
 5345 006e 09D0     	 beq .L345
2190:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_ack_now(pcb);
 5346              	 .loc 1 2190 0
 5347 0070 3B68     	 ldr r3,[r7]
 5348 0072 5B8B     	 ldrh r3,[r3,#26]
 5349 0074 43F00203 	 orr r3,r3,#2
 5350 0078 9AB2     	 uxth r2,r3
 5351 007a 3B68     	 ldr r3,[r7]
 5352 007c 5A83     	 strh r2,[r3,#26]
2191:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_output(pcb);
 5353              	 .loc 1 2191 0
 5354 007e 3868     	 ldr r0,[r7]
 5355 0080 FFF7FEFF 	 bl tcp_output
 5356              	.L345:
2192:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
2193:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2194:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb->state != LISTEN) {
2195:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
2196:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
2197:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_QUEUE_OOSEQ
2198:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
2199:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* TCP_QUEUE_OOSEQ */
2200:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
2201:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2202:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->state = CLOSED;
 5357              	 .loc 1 2202 0
 5358 0084 3B68     	 ldr r3,[r7]
 5359 0086 0022     	 movs r2,#0
 5360 0088 1A75     	 strb r2,[r3,#20]
2203:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   /* reset the local port to prevent the pcb from being 'bound' */
2204:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb->local_port = 0;
 5361              	 .loc 1 2204 0
 5362 008a 3B68     	 ldr r3,[r7]
 5363 008c 0022     	 movs r2,#0
 5364 008e DA82     	 strh r2,[r3,#22]
2205:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2206:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
2207:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 5365              	 .loc 1 2207 0
 5366 0090 1037     	 adds r7,r7,#16
 5367              	.LCFI237:
 5368              	 .cfi_def_cfa_offset 8
 5369 0092 BD46     	 mov sp,r7
 5370              	.LCFI238:
 5371              	 .cfi_def_cfa_register 13
 5372              	 
 5373 0094 80BD     	 pop {r7,pc}
 5374              	 .cfi_endproc
 5375              	.LFE179:
 5377 0096 00BF     	 .section .text.tcp_next_iss,"ax",%progbits
 5378              	 .align 2
 5379              	 .global tcp_next_iss
 5380              	 .thumb
 5381              	 .thumb_func
 5383              	tcp_next_iss:
 5384              	.LFB180:
2208:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2209:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
2210:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Calculates a new initial sequence number for new connections.
2211:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
2212:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @return u32_t pseudo random sequence number
2213:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
2214:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** u32_t
2215:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_next_iss(struct tcp_pcb *pcb)
2216:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 5385              	 .loc 1 2216 0
 5386              	 .cfi_startproc
 5387              	 
 5388              	 
 5389              	 
 5390 0000 80B4     	 push {r7}
 5391              	.LCFI239:
 5392              	 .cfi_def_cfa_offset 4
 5393              	 .cfi_offset 7,-4
 5394 0002 83B0     	 sub sp,sp,#12
 5395              	.LCFI240:
 5396              	 .cfi_def_cfa_offset 16
 5397 0004 00AF     	 add r7,sp,#0
 5398              	.LCFI241:
 5399              	 .cfi_def_cfa_register 7
 5400 0006 7860     	 str r0,[r7,#4]
2217:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #ifdef LWIP_HOOK_TCP_ISN
2218:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
2219:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
2220:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #else /* LWIP_HOOK_TCP_ISN */
2221:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   static u32_t iss = 6510;
2222:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2223:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
2224:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_UNUSED_ARG(pcb);
2225:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2226:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   iss += tcp_ticks;       /* XXX */
 5401              	 .loc 1 2226 0
 5402 0008 074B     	 ldr r3,.L348
 5403 000a 1A68     	 ldr r2,[r3]
 5404 000c 074B     	 ldr r3,.L348+4
 5405 000e 1B68     	 ldr r3,[r3]
 5406 0010 1344     	 add r3,r3,r2
 5407 0012 054A     	 ldr r2,.L348
 5408 0014 1360     	 str r3,[r2]
2227:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return iss;
 5409              	 .loc 1 2227 0
 5410 0016 044B     	 ldr r3,.L348
 5411 0018 1B68     	 ldr r3,[r3]
2228:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_HOOK_TCP_ISN */
2229:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 5412              	 .loc 1 2229 0
 5413 001a 1846     	 mov r0,r3
 5414 001c 0C37     	 adds r7,r7,#12
 5415              	.LCFI242:
 5416              	 .cfi_def_cfa_offset 4
 5417 001e BD46     	 mov sp,r7
 5418              	.LCFI243:
 5419              	 .cfi_def_cfa_register 13
 5420              	 
 5421 0020 5DF8047B 	 ldr r7,[sp],#4
 5422              	.LCFI244:
 5423              	 .cfi_restore 7
 5424              	 .cfi_def_cfa_offset 0
 5425 0024 7047     	 bx lr
 5426              	.L349:
 5427 0026 00BF     	 .align 2
 5428              	.L348:
 5429 0028 00000000 	 .word iss.9150
 5430 002c 00000000 	 .word tcp_ticks
 5431              	 .cfi_endproc
 5432              	.LFE180:
 5434              	 .section .text.tcp_eff_send_mss_netif,"ax",%progbits
 5435              	 .align 2
 5436              	 .global tcp_eff_send_mss_netif
 5437              	 .thumb
 5438              	 .thumb_func
 5440              	tcp_eff_send_mss_netif:
 5441              	.LFB181:
2230:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2231:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_CALCULATE_EFF_SEND_MSS
2232:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /**
2233:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * Calculates the effective send mss that can be used for a specific IP address
2234:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
2235:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * netif (if not NULL).
2236:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
2237:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** u16_t
2238:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
2239:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 5442              	 .loc 1 2239 0
 5443              	 .cfi_startproc
 5444              	 
 5445              	 
 5446              	 
 5447 0000 80B4     	 push {r7}
 5448              	.LCFI245:
 5449              	 .cfi_def_cfa_offset 4
 5450              	 .cfi_offset 7,-4
 5451 0002 87B0     	 sub sp,sp,#28
 5452              	.LCFI246:
 5453              	 .cfi_def_cfa_offset 32
 5454 0004 00AF     	 add r7,sp,#0
 5455              	.LCFI247:
 5456              	 .cfi_def_cfa_register 7
 5457 0006 0346     	 mov r3,r0
 5458 0008 B960     	 str r1,[r7,#8]
 5459 000a 7A60     	 str r2,[r7,#4]
 5460 000c FB81     	 strh r3,[r7,#14]
2240:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   u16_t mss_s;
2241:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   u16_t mtu;
2242:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2243:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */
2244:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2245:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
2246:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2247:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_IPV6
2248:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_IPV4
2249:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (IP_IS_V6(dest))
2250:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_IPV4 */
2251:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   {
2252:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* First look in destination cache, to see if there is a Path MTU. */
2253:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     mtu = nd6_get_destination_mtu(ip_2_ip6(dest), outif);
2254:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
2255:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_IPV4
2256:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   else
2257:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_IPV4 */
2258:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_IPV6 */
2259:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_IPV4
2260:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   {
2261:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (outif == NULL) {
 5461              	 .loc 1 2261 0
 5462 000e BB68     	 ldr r3,[r7,#8]
 5463 0010 002B     	 cmp r3,#0
 5464 0012 01D1     	 bne .L351
2262:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       return sendmss;
 5465              	 .loc 1 2262 0
 5466 0014 FB89     	 ldrh r3,[r7,#14]
 5467 0016 19E0     	 b .L352
 5468              	.L351:
2263:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
2264:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     mtu = outif->mtu;
 5469              	 .loc 1 2264 0
 5470 0018 BB68     	 ldr r3,[r7,#8]
 5471 001a 9B8C     	 ldrh r3,[r3,#36]
 5472 001c FB82     	 strh r3,[r7,#22]
2265:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
2266:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_IPV4 */
2267:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2268:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (mtu != 0) {
 5473              	 .loc 1 2268 0
 5474 001e FB8A     	 ldrh r3,[r7,#22]
 5475 0020 002B     	 cmp r3,#0
 5476 0022 12D0     	 beq .L353
 5477              	.LBB21:
2269:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     u16_t offset;
2270:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_IPV6
2271:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_IPV4
2272:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (IP_IS_V6(dest))
2273:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_IPV4 */
2274:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     {
2275:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       offset = IP6_HLEN + TCP_HLEN;
2276:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
2277:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_IPV4
2278:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     else
2279:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_IPV4 */
2280:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_IPV6 */
2281:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_IPV4
2282:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     {
2283:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       offset = IP_HLEN + TCP_HLEN;
 5478              	 .loc 1 2283 0
 5479 0024 2823     	 movs r3,#40
 5480 0026 BB82     	 strh r3,[r7,#20]
2284:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
2285:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_IPV4 */
2286:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 5481              	 .loc 1 2286 0
 5482 0028 FA8A     	 ldrh r2,[r7,#22]
 5483 002a BB8A     	 ldrh r3,[r7,#20]
 5484 002c 9A42     	 cmp r2,r3
 5485 002e 04D9     	 bls .L354
 5486              	 .loc 1 2286 0 is_stmt 0 discriminator 1
 5487 0030 FA8A     	 ldrh r2,[r7,#22]
 5488 0032 BB8A     	 ldrh r3,[r7,#20]
 5489 0034 D31A     	 subs r3,r2,r3
 5490 0036 9BB2     	 uxth r3,r3
 5491 0038 00E0     	 b .L355
 5492              	.L354:
 5493              	 .loc 1 2286 0 discriminator 2
 5494 003a 0023     	 movs r3,#0
 5495              	.L355:
 5496              	 .loc 1 2286 0 discriminator 4
 5497 003c 7B82     	 strh r3,[r7,#18]
2287:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* RFC 1122, chap 4.2.2.6:
2288:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****      * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
2289:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****      * We correct for TCP options in tcp_write(), and don't support IP options.
2290:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****      */
2291:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     sendmss = LWIP_MIN(sendmss, mss_s);
 5498              	 .loc 1 2291 0 is_stmt 1 discriminator 4
 5499 003e 7A8A     	 ldrh r2,[r7,#18]
 5500 0040 FB89     	 ldrh r3,[r7,#14]
 5501 0042 9342     	 cmp r3,r2
 5502 0044 28BF     	 it cs
 5503 0046 1346     	 movcs r3,r2
 5504 0048 FB81     	 strh r3,[r7,#14]
 5505              	.L353:
 5506              	.LBE21:
2292:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
2293:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return sendmss;
 5507              	 .loc 1 2293 0
 5508 004a FB89     	 ldrh r3,[r7,#14]
 5509              	.L352:
2294:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 5510              	 .loc 1 2294 0
 5511 004c 1846     	 mov r0,r3
 5512 004e 1C37     	 adds r7,r7,#28
 5513              	.LCFI248:
 5514              	 .cfi_def_cfa_offset 4
 5515 0050 BD46     	 mov sp,r7
 5516              	.LCFI249:
 5517              	 .cfi_def_cfa_register 13
 5518              	 
 5519 0052 5DF8047B 	 ldr r7,[sp],#4
 5520              	.LCFI250:
 5521              	 .cfi_restore 7
 5522              	 .cfi_def_cfa_offset 0
 5523 0056 7047     	 bx lr
 5524              	 .cfi_endproc
 5525              	.LFE181:
 5527              	 .section .text.tcp_netif_ip_addr_changed_pcblist,"ax",%progbits
 5528              	 .align 2
 5529              	 .thumb
 5530              	 .thumb_func
 5532              	tcp_netif_ip_addr_changed_pcblist:
 5533              	.LFB182:
2295:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* TCP_CALCULATE_EFF_SEND_MSS */
2296:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2297:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
2298:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** static void
2299:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
2300:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 5534              	 .loc 1 2300 0
 5535              	 .cfi_startproc
 5536              	 
 5537              	 
 5538 0000 80B5     	 push {r7,lr}
 5539              	.LCFI251:
 5540              	 .cfi_def_cfa_offset 8
 5541              	 .cfi_offset 7,-8
 5542              	 .cfi_offset 14,-4
 5543 0002 84B0     	 sub sp,sp,#16
 5544              	.LCFI252:
 5545              	 .cfi_def_cfa_offset 24
 5546 0004 00AF     	 add r7,sp,#0
 5547              	.LCFI253:
 5548              	 .cfi_def_cfa_register 7
 5549 0006 7860     	 str r0,[r7,#4]
 5550 0008 3960     	 str r1,[r7]
2301:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct tcp_pcb *pcb;
2302:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   pcb = pcb_list;
 5551              	 .loc 1 2302 0
 5552 000a 3B68     	 ldr r3,[r7]
 5553 000c FB60     	 str r3,[r7,#12]
2303:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2304:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
2305:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2306:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   while (pcb != NULL) {
 5554              	 .loc 1 2306 0
 5555 000e 11E0     	 b .L357
 5556              	.L359:
2307:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* PCB bound to current local interface address? */
2308:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (ip_addr_cmp(&pcb->local_ip, old_addr)
 5557              	 .loc 1 2308 0
 5558 0010 FB68     	 ldr r3,[r7,#12]
 5559 0012 1A68     	 ldr r2,[r3]
 5560 0014 7B68     	 ldr r3,[r7,#4]
 5561 0016 1B68     	 ldr r3,[r3]
 5562 0018 9A42     	 cmp r2,r3
 5563 001a 08D1     	 bne .L358
 5564              	.LBB22:
2309:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_AUTOIP
2310:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
2311:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
2312:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_AUTOIP */
2313:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****        ) {
2314:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* this connection must be aborted */
2315:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       struct tcp_pcb *next = pcb->next;
 5565              	 .loc 1 2315 0
 5566 001c FB68     	 ldr r3,[r7,#12]
 5567 001e DB68     	 ldr r3,[r3,#12]
 5568 0020 BB60     	 str r3,[r7,#8]
2316:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *
2317:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       tcp_abort(pcb);
 5569              	 .loc 1 2317 0
 5570 0022 F868     	 ldr r0,[r7,#12]
 5571 0024 FFF7FEFF 	 bl tcp_abort
2318:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb = next;
 5572              	 .loc 1 2318 0
 5573 0028 BB68     	 ldr r3,[r7,#8]
 5574 002a FB60     	 str r3,[r7,#12]
 5575              	.LBE22:
 5576 002c 02E0     	 b .L357
 5577              	.L358:
2319:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     } else {
2320:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       pcb = pcb->next;
 5578              	 .loc 1 2320 0
 5579 002e FB68     	 ldr r3,[r7,#12]
 5580 0030 DB68     	 ldr r3,[r3,#12]
 5581 0032 FB60     	 str r3,[r7,#12]
 5582              	.L357:
2306:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     /* PCB bound to current local interface address? */
 5583              	 .loc 1 2306 0
 5584 0034 FB68     	 ldr r3,[r7,#12]
 5585 0036 002B     	 cmp r3,#0
 5586 0038 EAD1     	 bne .L359
2321:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
2322:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
2323:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 5587              	 .loc 1 2323 0
 5588 003a 1037     	 adds r7,r7,#16
 5589              	.LCFI254:
 5590              	 .cfi_def_cfa_offset 8
 5591 003c BD46     	 mov sp,r7
 5592              	.LCFI255:
 5593              	 .cfi_def_cfa_register 13
 5594              	 
 5595 003e 80BD     	 pop {r7,pc}
 5596              	 .cfi_endproc
 5597              	.LFE182:
 5599              	 .section .text.tcp_netif_ip_addr_changed,"ax",%progbits
 5600              	 .align 2
 5601              	 .global tcp_netif_ip_addr_changed
 5602              	 .thumb
 5603              	 .thumb_func
 5605              	tcp_netif_ip_addr_changed:
 5606              	.LFB183:
2324:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2325:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /** This function is called from netif.c when address is changed or netif is removed
2326:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  *
2327:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param old_addr IP address of the netif before change
2328:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  * @param new_addr IP address of the netif after change or NULL if netif has been removed
2329:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****  */
2330:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
2331:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
2332:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 5607              	 .loc 1 2332 0
 5608              	 .cfi_startproc
 5609              	 
 5610              	 
 5611 0000 80B5     	 push {r7,lr}
 5612              	.LCFI256:
 5613              	 .cfi_def_cfa_offset 8
 5614              	 .cfi_offset 7,-8
 5615              	 .cfi_offset 14,-4
 5616 0002 84B0     	 sub sp,sp,#16
 5617              	.LCFI257:
 5618              	 .cfi_def_cfa_offset 24
 5619 0004 00AF     	 add r7,sp,#0
 5620              	.LCFI258:
 5621              	 .cfi_def_cfa_register 7
 5622 0006 7860     	 str r0,[r7,#4]
 5623 0008 3960     	 str r1,[r7]
2333:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   struct tcp_pcb_listen *lpcb;
2334:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2335:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (!ip_addr_isany(old_addr)) {
 5624              	 .loc 1 2335 0
 5625 000a 7B68     	 ldr r3,[r7,#4]
 5626 000c 002B     	 cmp r3,#0
 5627 000e 2AD0     	 beq .L360
 5628              	 .loc 1 2335 0 is_stmt 0 discriminator 1
 5629 0010 7B68     	 ldr r3,[r7,#4]
 5630 0012 1B68     	 ldr r3,[r3]
 5631 0014 002B     	 cmp r3,#0
 5632 0016 26D0     	 beq .L360
2336:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 5633              	 .loc 1 2336 0 is_stmt 1
 5634 0018 144B     	 ldr r3,.L365
 5635 001a 1B68     	 ldr r3,[r3]
 5636 001c 7868     	 ldr r0,[r7,#4]
 5637 001e 1946     	 mov r1,r3
 5638 0020 FFF7FEFF 	 bl tcp_netif_ip_addr_changed_pcblist
2337:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 5639              	 .loc 1 2337 0
 5640 0024 124B     	 ldr r3,.L365+4
 5641 0026 1B68     	 ldr r3,[r3]
 5642 0028 7868     	 ldr r0,[r7,#4]
 5643 002a 1946     	 mov r1,r3
 5644 002c FFF7FEFF 	 bl tcp_netif_ip_addr_changed_pcblist
2338:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2339:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (!ip_addr_isany(new_addr)) {
 5645              	 .loc 1 2339 0
 5646 0030 3B68     	 ldr r3,[r7]
 5647 0032 002B     	 cmp r3,#0
 5648 0034 17D0     	 beq .L360
 5649              	 .loc 1 2339 0 is_stmt 0 discriminator 1
 5650 0036 3B68     	 ldr r3,[r7]
 5651 0038 1B68     	 ldr r3,[r3]
 5652 003a 002B     	 cmp r3,#0
 5653 003c 13D0     	 beq .L360
2340:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       /* PCB bound to current local interface address? */
2341:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 5654              	 .loc 1 2341 0 is_stmt 1
 5655 003e 0D4B     	 ldr r3,.L365+8
 5656 0040 1B68     	 ldr r3,[r3]
 5657 0042 FB60     	 str r3,[r7,#12]
 5658 0044 0CE0     	 b .L362
 5659              	.L364:
2342:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* PCB bound to current local interface address? */
2343:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 5660              	 .loc 1 2343 0
 5661 0046 FB68     	 ldr r3,[r7,#12]
 5662 0048 1A68     	 ldr r2,[r3]
 5663 004a 7B68     	 ldr r3,[r7,#4]
 5664 004c 1B68     	 ldr r3,[r3]
 5665 004e 9A42     	 cmp r2,r3
 5666 0050 03D1     	 bne .L363
2344:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           /* The PCB is listening to the old ipaddr and
2345:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****             * is set to listen to the new one instead */
2346:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****           ip_addr_copy(lpcb->local_ip, *new_addr);
 5667              	 .loc 1 2346 0
 5668 0052 3B68     	 ldr r3,[r7]
 5669 0054 1A68     	 ldr r2,[r3]
 5670 0056 FB68     	 ldr r3,[r7,#12]
 5671 0058 1A60     	 str r2,[r3]
 5672              	.L363:
2341:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* PCB bound to current local interface address? */
 5673              	 .loc 1 2341 0 discriminator 2
 5674 005a FB68     	 ldr r3,[r7,#12]
 5675 005c DB68     	 ldr r3,[r3,#12]
 5676 005e FB60     	 str r3,[r7,#12]
 5677              	.L362:
2341:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         /* PCB bound to current local interface address? */
 5678              	 .loc 1 2341 0 is_stmt 0 discriminator 1
 5679 0060 FB68     	 ldr r3,[r7,#12]
 5680 0062 002B     	 cmp r3,#0
 5681 0064 EFD1     	 bne .L364
 5682              	.L360:
2347:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         }
2348:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
2349:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
2350:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
2351:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 5683              	 .loc 1 2351 0 is_stmt 1
 5684 0066 1037     	 adds r7,r7,#16
 5685              	.LCFI259:
 5686              	 .cfi_def_cfa_offset 8
 5687 0068 BD46     	 mov sp,r7
 5688              	.LCFI260:
 5689              	 .cfi_def_cfa_register 13
 5690              	 
 5691 006a 80BD     	 pop {r7,pc}
 5692              	.L366:
 5693              	 .align 2
 5694              	.L365:
 5695 006c 00000000 	 .word tcp_active_pcbs
 5696 0070 00000000 	 .word tcp_bound_pcbs
 5697 0074 00000000 	 .word tcp_listen_pcbs
 5698              	 .cfi_endproc
 5699              	.LFE183:
 5701              	 .section .text.tcp_debug_state_str,"ax",%progbits
 5702              	 .align 2
 5703              	 .global tcp_debug_state_str
 5704              	 .thumb
 5705              	 .thumb_func
 5707              	tcp_debug_state_str:
 5708              	.LFB184:
2352:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2353:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** const char *
2354:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_debug_state_str(enum tcp_state s)
2355:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 5709              	 .loc 1 2355 0
 5710              	 .cfi_startproc
 5711              	 
 5712              	 
 5713              	 
 5714 0000 80B4     	 push {r7}
 5715              	.LCFI261:
 5716              	 .cfi_def_cfa_offset 4
 5717              	 .cfi_offset 7,-4
 5718 0002 83B0     	 sub sp,sp,#12
 5719              	.LCFI262:
 5720              	 .cfi_def_cfa_offset 16
 5721 0004 00AF     	 add r7,sp,#0
 5722              	.LCFI263:
 5723              	 .cfi_def_cfa_register 7
 5724 0006 0346     	 mov r3,r0
 5725 0008 FB71     	 strb r3,[r7,#7]
2356:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return tcp_state_str[s];
 5726              	 .loc 1 2356 0
 5727 000a FB79     	 ldrb r3,[r7,#7]
 5728 000c 044A     	 ldr r2,.L369
 5729 000e 52F82330 	 ldr r3,[r2,r3,lsl#2]
2357:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 5730              	 .loc 1 2357 0
 5731 0012 1846     	 mov r0,r3
 5732 0014 0C37     	 adds r7,r7,#12
 5733              	.LCFI264:
 5734              	 .cfi_def_cfa_offset 4
 5735 0016 BD46     	 mov sp,r7
 5736              	.LCFI265:
 5737              	 .cfi_def_cfa_register 13
 5738              	 
 5739 0018 5DF8047B 	 ldr r7,[sp],#4
 5740              	.LCFI266:
 5741              	 .cfi_restore 7
 5742              	 .cfi_def_cfa_offset 0
 5743 001c 7047     	 bx lr
 5744              	.L370:
 5745 001e 00BF     	 .align 2
 5746              	.L369:
 5747 0020 00000000 	 .word tcp_state_str
 5748              	 .cfi_endproc
 5749              	.LFE184:
 5751              	 .section .text.tcp_tcp_get_tcp_addrinfo,"ax",%progbits
 5752              	 .align 2
 5753              	 .global tcp_tcp_get_tcp_addrinfo
 5754              	 .thumb
 5755              	 .thumb_func
 5757              	tcp_tcp_get_tcp_addrinfo:
 5758              	.LFB185:
2358:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2359:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** err_t
2360:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_tcp_get_tcp_addrinfo(struct tcp_pcb *pcb, int local, ip_addr_t *addr, u16_t *port)
2361:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 5759              	 .loc 1 2361 0
 5760              	 .cfi_startproc
 5761              	 
 5762              	 
 5763              	 
 5764 0000 80B4     	 push {r7}
 5765              	.LCFI267:
 5766              	 .cfi_def_cfa_offset 4
 5767              	 .cfi_offset 7,-4
 5768 0002 85B0     	 sub sp,sp,#20
 5769              	.LCFI268:
 5770              	 .cfi_def_cfa_offset 24
 5771 0004 00AF     	 add r7,sp,#0
 5772              	.LCFI269:
 5773              	 .cfi_def_cfa_register 7
 5774 0006 F860     	 str r0,[r7,#12]
 5775 0008 B960     	 str r1,[r7,#8]
 5776 000a 7A60     	 str r2,[r7,#4]
 5777 000c 3B60     	 str r3,[r7]
2362:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb) {
 5778              	 .loc 1 2362 0
 5779 000e FB68     	 ldr r3,[r7,#12]
 5780 0010 002B     	 cmp r3,#0
 5781 0012 21D0     	 beq .L372
2363:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     if (local) {
 5782              	 .loc 1 2363 0
 5783 0014 BB68     	 ldr r3,[r7,#8]
 5784 0016 002B     	 cmp r3,#0
 5785 0018 0ED0     	 beq .L373
2364:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (addr) {
 5786              	 .loc 1 2364 0
 5787 001a 7B68     	 ldr r3,[r7,#4]
 5788 001c 002B     	 cmp r3,#0
 5789 001e 03D0     	 beq .L374
2365:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         *addr = pcb->local_ip;
 5790              	 .loc 1 2365 0
 5791 0020 7B68     	 ldr r3,[r7,#4]
 5792 0022 FA68     	 ldr r2,[r7,#12]
 5793 0024 1268     	 ldr r2,[r2]
 5794 0026 1A60     	 str r2,[r3]
 5795              	.L374:
2366:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
2367:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (port) {
 5796              	 .loc 1 2367 0
 5797 0028 3B68     	 ldr r3,[r7]
 5798 002a 002B     	 cmp r3,#0
 5799 002c 12D0     	 beq .L376
2368:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         *port = pcb->local_port;
 5800              	 .loc 1 2368 0
 5801 002e FB68     	 ldr r3,[r7,#12]
 5802 0030 DA8A     	 ldrh r2,[r3,#22]
 5803 0032 3B68     	 ldr r3,[r7]
 5804 0034 1A80     	 strh r2,[r3]
 5805 0036 0DE0     	 b .L376
 5806              	.L373:
2369:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
2370:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     } else {
2371:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (addr) {
 5807              	 .loc 1 2371 0
 5808 0038 7B68     	 ldr r3,[r7,#4]
 5809 003a 002B     	 cmp r3,#0
 5810 003c 03D0     	 beq .L377
2372:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         *addr = pcb->remote_ip;
 5811              	 .loc 1 2372 0
 5812 003e 7B68     	 ldr r3,[r7,#4]
 5813 0040 FA68     	 ldr r2,[r7,#12]
 5814 0042 5268     	 ldr r2,[r2,#4]
 5815 0044 1A60     	 str r2,[r3]
 5816              	.L377:
2373:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
2374:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       if (port) {
 5817              	 .loc 1 2374 0
 5818 0046 3B68     	 ldr r3,[r7]
 5819 0048 002B     	 cmp r3,#0
 5820 004a 03D0     	 beq .L376
2375:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****         *port = pcb->remote_port;
 5821              	 .loc 1 2375 0
 5822 004c FB68     	 ldr r3,[r7,#12]
 5823 004e 1A8B     	 ldrh r2,[r3,#24]
 5824 0050 3B68     	 ldr r3,[r7]
 5825 0052 1A80     	 strh r2,[r3]
 5826              	.L376:
2376:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****       }
2377:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     }
2378:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     return ERR_OK;
 5827              	 .loc 1 2378 0
 5828 0054 0023     	 movs r3,#0
 5829 0056 00E0     	 b .L378
 5830              	.L372:
2379:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
2380:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   return ERR_VAL;
 5831              	 .loc 1 2380 0
 5832 0058 FA23     	 movs r3,#250
 5833              	.L378:
 5834 005a 5BB2     	 sxtb r3,r3
2381:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 5835              	 .loc 1 2381 0
 5836 005c 1846     	 mov r0,r3
 5837 005e 1437     	 adds r7,r7,#20
 5838              	.LCFI270:
 5839              	 .cfi_def_cfa_offset 4
 5840 0060 BD46     	 mov sp,r7
 5841              	.LCFI271:
 5842              	 .cfi_def_cfa_register 13
 5843              	 
 5844 0062 5DF8047B 	 ldr r7,[sp],#4
 5845              	.LCFI272:
 5846              	 .cfi_restore 7
 5847              	 .cfi_def_cfa_offset 0
 5848 0066 7047     	 bx lr
 5849              	 .cfi_endproc
 5850              	.LFE185:
 5852              	 .section .text.tcp_free_ooseq,"ax",%progbits
 5853              	 .align 2
 5854              	 .global tcp_free_ooseq
 5855              	 .thumb
 5856              	 .thumb_func
 5858              	tcp_free_ooseq:
 5859              	.LFB186:
2382:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** 
2383:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if TCP_QUEUE_OOSEQ
2384:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** /* Free all ooseq pbufs (and possibly reset SACK state) */
2385:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** void
2386:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** tcp_free_ooseq(struct tcp_pcb *pcb)
2387:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** {
 5860              	 .loc 1 2387 0
 5861              	 .cfi_startproc
 5862              	 
 5863              	 
 5864 0000 80B5     	 push {r7,lr}
 5865              	.LCFI273:
 5866              	 .cfi_def_cfa_offset 8
 5867              	 .cfi_offset 7,-8
 5868              	 .cfi_offset 14,-4
 5869 0002 82B0     	 sub sp,sp,#8
 5870              	.LCFI274:
 5871              	 .cfi_def_cfa_offset 16
 5872 0004 00AF     	 add r7,sp,#0
 5873              	.LCFI275:
 5874              	 .cfi_def_cfa_register 7
 5875 0006 7860     	 str r0,[r7,#4]
2388:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   if (pcb->ooseq) {
 5876              	 .loc 1 2388 0
 5877 0008 7B68     	 ldr r3,[r7,#4]
 5878 000a 5B6F     	 ldr r3,[r3,#116]
 5879 000c 002B     	 cmp r3,#0
 5880 000e 07D0     	 beq .L379
2389:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     tcp_segs_free(pcb->ooseq);
 5881              	 .loc 1 2389 0
 5882 0010 7B68     	 ldr r3,[r7,#4]
 5883 0012 5B6F     	 ldr r3,[r3,#116]
 5884 0014 1846     	 mov r0,r3
 5885 0016 FFF7FEFF 	 bl tcp_segs_free
2390:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     pcb->ooseq = NULL;
 5886              	 .loc 1 2390 0
 5887 001a 7B68     	 ldr r3,[r7,#4]
 5888 001c 0022     	 movs r2,#0
 5889 001e 5A67     	 str r2,[r3,#116]
 5890              	.L379:
2391:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #if LWIP_TCP_SACK_OUT
2392:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****     memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
2393:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** #endif /* LWIP_TCP_SACK_OUT */
2394:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c ****   }
2395:../Dave/Generated/ETH_LWIP/lwip/core/tcp.c **** }
 5891              	 .loc 1 2395 0
 5892 0020 0837     	 adds r7,r7,#8
 5893              	.LCFI276:
 5894              	 .cfi_def_cfa_offset 8
 5895 0022 BD46     	 mov sp,r7
 5896              	.LCFI277:
 5897              	 .cfi_def_cfa_register 13
 5898              	 
 5899 0024 80BD     	 pop {r7,pc}
 5900              	 .cfi_endproc
 5901              	.LFE186:
 5903 0026 00BF     	 .section .data.iss.9150,"aw",%progbits
 5904              	 .align 2
 5907              	iss.9150:
 5908 0000 6E190000 	 .word 6510
 5909              	 .text
 5910              	.Letext0:
 5911              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 5912              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 5913              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 5914              	 .file 5 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/arch.h"
 5915              	 .file 6 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/tcpbase.h"
 5916              	 .file 7 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/memp.h"
 5917              	 .file 8 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/err.h"
 5918              	 .file 9 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/pbuf.h"
 5919              	 .file 10 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/ip4_addr.h"
 5920              	 .file 11 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/ip_addr.h"
 5921              	 .file 12 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/netif.h"
 5922              	 .file 13 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/tcp.h"
 5923              	 .file 14 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/priv/tcp_priv.h"
 5924              	 .file 15 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/prot/tcp.h"
 5925              	 .file 16 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Libraries/CMSIS/Include/cmsis_gcc.h"
 5926              	 .file 17 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 tcp.c
    {standard input}:20     .rodata:00000000 $d
    {standard input}:54     .rodata.tcp_state_str:00000000 $d
    {standard input}:57     .rodata.tcp_state_str:00000000 tcp_state_str
    {standard input}:70     .data.tcp_port:00000000 $d
    {standard input}:73     .data.tcp_port:00000000 tcp_port
                            *COM*:00000004 tcp_ticks
    {standard input}:77     .rodata.tcp_backoff:00000000 $d
    {standard input}:80     .rodata.tcp_backoff:00000000 tcp_backoff
    {standard input}:95     .rodata.tcp_persist_backoff:00000000 $d
    {standard input}:98     .rodata.tcp_persist_backoff:00000000 tcp_persist_backoff
                            *COM*:00000004 tcp_bound_pcbs
                            *COM*:00000004 tcp_listen_pcbs
                            *COM*:00000004 tcp_active_pcbs
                            *COM*:00000004 tcp_tw_pcbs
    {standard input}:115    .rodata.tcp_pcb_lists:00000000 tcp_pcb_lists
    {standard input}:112    .rodata.tcp_pcb_lists:00000000 $d
                            *COM*:00000001 tcp_active_pcbs_changed
    {standard input}:124    .bss.tcp_timer:00000000 tcp_timer
    {standard input}:125    .bss.tcp_timer:00000000 $d
    {standard input}:129    .bss.tcp_timer_ctr:00000000 tcp_timer_ctr
    {standard input}:130    .bss.tcp_timer_ctr:00000000 $d
    {standard input}:132    .text.tcp_init:00000000 $t
    {standard input}:137    .text.tcp_init:00000000 tcp_init
    {standard input}:167    .text.tcp_init:00000020 $d
    {standard input}:172    .text.tcp_free:00000000 $t
    {standard input}:177    .text.tcp_free:00000000 tcp_free
    {standard input}:212    .text.tcp_free_listen:00000000 $t
    {standard input}:216    .text.tcp_free_listen:00000000 tcp_free_listen
    {standard input}:251    .text.tcp_tmr:00000000 $t
    {standard input}:256    .text.tcp_tmr:00000000 tcp_tmr
    {standard input}:3509   .text.tcp_fasttmr:00000000 tcp_fasttmr
    {standard input}:2701   .text.tcp_slowtmr:00000000 tcp_slowtmr
    {standard input}:292    .text.tcp_tmr:00000028 $d
    {standard input}:297    .text.tcp_remove_listener:00000000 $t
    {standard input}:301    .text.tcp_remove_listener:00000000 tcp_remove_listener
    {standard input}:362    .text.tcp_listen_closed:00000000 $t
    {standard input}:366    .text.tcp_listen_closed:00000000 tcp_listen_closed
    {standard input}:418    .text.tcp_listen_closed:00000034 $d
    {standard input}:423    .text.tcp_backlog_delayed:00000000 $t
    {standard input}:428    .text.tcp_backlog_delayed:00000000 tcp_backlog_delayed
    {standard input}:489    .text.tcp_backlog_accepted:00000000 $t
    {standard input}:494    .text.tcp_backlog_accepted:00000000 tcp_backlog_accepted
    {standard input}:555    .text.tcp_close_shutdown:00000000 $t
    {standard input}:559    .text.tcp_close_shutdown:00000000 tcp_close_shutdown
    {standard input}:5144   .text.tcp_pcb_purge:00000000 tcp_pcb_purge
    {standard input}:5257   .text.tcp_pcb_remove:00000000 tcp_pcb_remove
    {standard input}:833    .text.tcp_close_shutdown_fin:00000000 tcp_close_shutdown_fin
    {standard input}:820    .text.tcp_close_shutdown:0000016c $d
    {standard input}:829    .text.tcp_close_shutdown_fin:00000000 $t
    {standard input}:963    .text.tcp_close:00000000 $t
    {standard input}:968    .text.tcp_close:00000000 tcp_close
    {standard input}:1028   .text.tcp_shutdown:00000000 $t
    {standard input}:1033   .text.tcp_shutdown:00000000 tcp_shutdown
    {standard input}:1152   .text.tcp_abandon:00000000 $t
    {standard input}:1157   .text.tcp_abandon:00000000 tcp_abandon
    {standard input}:3884   .text.tcp_segs_free:00000000 tcp_segs_free
    {standard input}:1382   .text.tcp_abandon:0000013c $d
    {standard input}:1390   .text.tcp_abort:00000000 $t
    {standard input}:1395   .text.tcp_abort:00000000 tcp_abort
    {standard input}:1430   .text.tcp_bind:00000000 $t
    {standard input}:1435   .text.tcp_bind:00000000 tcp_bind
    {standard input}:2234   .text.tcp_new_port:00000000 tcp_new_port
    {standard input}:1626   .text.tcp_bind:000000f4 $d
    {standard input}:1633   .text.tcp_bind_netif:00000000 $t
    {standard input}:1638   .text.tcp_bind_netif:00000000 tcp_bind_netif
    {standard input}:1692   .text.tcp_accept_null:00000000 $t
    {standard input}:1696   .text.tcp_accept_null:00000000 tcp_accept_null
    {standard input}:1737   .text.tcp_listen_with_backlog:00000000 $t
    {standard input}:1742   .text.tcp_listen_with_backlog:00000000 tcp_listen_with_backlog
    {standard input}:1788   .text.tcp_listen_with_backlog_and_err:00000000 tcp_listen_with_backlog_and_err
    {standard input}:1783   .text.tcp_listen_with_backlog_and_err:00000000 $t
    {standard input}:2019   .text.tcp_listen_with_backlog_and_err:00000130 $d
    {standard input}:2026   .text.tcp_update_rcv_ann_wnd:00000000 $t
    {standard input}:2031   .text.tcp_update_rcv_ann_wnd:00000000 tcp_update_rcv_ann_wnd
    {standard input}:2139   .text.tcp_recved:00000000 $t
    {standard input}:2144   .text.tcp_recved:00000000 tcp_recved
    {standard input}:2230   .text.tcp_new_port:00000000 $t
    {standard input}:2347   .text.tcp_new_port:00000088 $d
    {standard input}:2353   .text.tcp_connect:00000000 $t
    {standard input}:2358   .text.tcp_connect:00000000 tcp_connect
    {standard input}:5383   .text.tcp_next_iss:00000000 tcp_next_iss
    {standard input}:5440   .text.tcp_eff_send_mss_netif:00000000 tcp_eff_send_mss_netif
    {standard input}:2689   .text.tcp_connect:000001dc $d
    {standard input}:2696   .text.tcp_slowtmr:00000000 $t
    {standard input}:3002   .text.tcp_slowtmr:000001f0 $d
    {standard input}:3009   .text.tcp_slowtmr:00000204 $t
    {standard input}:5858   .text.tcp_free_ooseq:00000000 tcp_free_ooseq
    {standard input}:3449   .text.tcp_slowtmr:00000504 $d
    {standard input}:3457   .text.tcp_slowtmr:0000051c $t
    {standard input}:3499   .text.tcp_slowtmr:0000054c $d
    {standard input}:3504   .text.tcp_fasttmr:00000000 $t
    {standard input}:3722   .text.tcp_process_refused_data:00000000 tcp_process_refused_data
    {standard input}:3646   .text.tcp_fasttmr:000000b8 $d
    {standard input}:3653   .text.tcp_txnow:00000000 $t
    {standard input}:3658   .text.tcp_txnow:00000000 tcp_txnow
    {standard input}:3712   .text.tcp_txnow:00000034 $d
    {standard input}:3717   .text.tcp_process_refused_data:00000000 $t
    {standard input}:4111   .text.tcp_recv_null:00000000 tcp_recv_null
    {standard input}:3879   .text.tcp_segs_free:00000000 $t
    {standard input}:3940   .text.tcp_seg_free:00000000 tcp_seg_free
    {standard input}:3935   .text.tcp_seg_free:00000000 $t
    {standard input}:3991   .text.tcp_setprio:00000000 $t
    {standard input}:3996   .text.tcp_setprio:00000000 tcp_setprio
    {standard input}:4044   .text.tcp_seg_copy:00000000 $t
    {standard input}:4049   .text.tcp_seg_copy:00000000 tcp_seg_copy
    {standard input}:4106   .text.tcp_recv_null:00000000 $t
    {standard input}:4183   .text.tcp_kill_prio:00000000 $t
    {standard input}:4187   .text.tcp_kill_prio:00000000 tcp_kill_prio
    {standard input}:4310   .text.tcp_kill_prio:00000090 $d
    {standard input}:4316   .text.tcp_kill_state:00000000 $t
    {standard input}:4320   .text.tcp_kill_state:00000000 tcp_kill_state
    {standard input}:4407   .text.tcp_kill_state:00000064 $d
    {standard input}:4413   .text.tcp_kill_timewait:00000000 $t
    {standard input}:4417   .text.tcp_kill_timewait:00000000 tcp_kill_timewait
    {standard input}:4495   .text.tcp_kill_timewait:00000054 $d
    {standard input}:4501   .text.tcp_handle_closepend:00000000 $t
    {standard input}:4505   .text.tcp_handle_closepend:00000000 tcp_handle_closepend
    {standard input}:4572   .text.tcp_handle_closepend:00000044 $d
    {standard input}:4577   .text.tcp_alloc:00000000 $t
    {standard input}:4582   .text.tcp_alloc:00000000 tcp_alloc
    {standard input}:4739   .text.tcp_alloc:000000f8 $d
    {standard input}:4747   .text.tcp_new:00000000 $t
    {standard input}:4752   .text.tcp_new:00000000 tcp_new
    {standard input}:4777   .text.tcp_new_ip_type:00000000 $t
    {standard input}:4782   .text.tcp_new_ip_type:00000000 tcp_new_ip_type
    {standard input}:4821   .text.tcp_arg:00000000 $t
    {standard input}:4826   .text.tcp_arg:00000000 tcp_arg
    {standard input}:4871   .text.tcp_recv:00000000 $t
    {standard input}:4876   .text.tcp_recv:00000000 tcp_recv
    {standard input}:4921   .text.tcp_sent:00000000 $t
    {standard input}:4926   .text.tcp_sent:00000000 tcp_sent
    {standard input}:4971   .text.tcp_err:00000000 $t
    {standard input}:4976   .text.tcp_err:00000000 tcp_err
    {standard input}:5021   .text.tcp_accept:00000000 $t
    {standard input}:5026   .text.tcp_accept:00000000 tcp_accept
    {standard input}:5081   .text.tcp_poll:00000000 $t
    {standard input}:5086   .text.tcp_poll:00000000 tcp_poll
    {standard input}:5139   .text.tcp_pcb_purge:00000000 $t
    {standard input}:5252   .text.tcp_pcb_remove:00000000 $t
    {standard input}:5378   .text.tcp_next_iss:00000000 $t
    {standard input}:5429   .text.tcp_next_iss:00000028 $d
    {standard input}:5907   .data.iss.9150:00000000 iss.9150
    {standard input}:5435   .text.tcp_eff_send_mss_netif:00000000 $t
    {standard input}:5528   .text.tcp_netif_ip_addr_changed_pcblist:00000000 $t
    {standard input}:5532   .text.tcp_netif_ip_addr_changed_pcblist:00000000 tcp_netif_ip_addr_changed_pcblist
    {standard input}:5600   .text.tcp_netif_ip_addr_changed:00000000 $t
    {standard input}:5605   .text.tcp_netif_ip_addr_changed:00000000 tcp_netif_ip_addr_changed
    {standard input}:5695   .text.tcp_netif_ip_addr_changed:0000006c $d
    {standard input}:5702   .text.tcp_debug_state_str:00000000 $t
    {standard input}:5707   .text.tcp_debug_state_str:00000000 tcp_debug_state_str
    {standard input}:5747   .text.tcp_debug_state_str:00000020 $d
    {standard input}:5752   .text.tcp_tcp_get_tcp_addrinfo:00000000 $t
    {standard input}:5757   .text.tcp_tcp_get_tcp_addrinfo:00000000 tcp_tcp_get_tcp_addrinfo
    {standard input}:5853   .text.tcp_free_ooseq:00000000 $t
    {standard input}:5904   .data.iss.9150:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
rand
memp_free
tcp_rst
tcp_trigger_input_pcb_close
tcp_input_pcb
tcp_send_fin
tcp_output
pbuf_free
tcp_timer_needed
ip_addr_any
memp_malloc
netif_get_by_index
ip4_route
tcp_enqueue_flags
tcp_zero_window_probe
tcp_split_unsent_seg
tcp_rexmit_rto_prepare
tcp_rexmit_rto_commit
tcp_keepalive
memcpy
pbuf_ref
memset
