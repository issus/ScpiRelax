   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "inet_chksum.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.lwip_standard_chksum,"ax",%progbits
  20              	 .align 2
  21              	 .global lwip_standard_chksum
  22              	 .thumb
  23              	 .thumb_func
  25              	lwip_standard_chksum:
  26              	.LFB133:
  27              	 .file 1 "../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c"
   1:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** /**
   2:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @file
   3:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * Internet checksum functions.\n
   4:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
   5:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * These are some reference implementations of the checksum algorithm, with the
   6:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * aim of being simple, correct and fully portable. Checksumming is the
   7:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * first thing you would want to optimize for your platform. If you create
   8:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * your own version, link it in and in your cc.h put:
   9:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
  10:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * \#define LWIP_CHKSUM your_checksum_routine
  11:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
  12:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * Or you can select from the implementations below by defining
  13:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * LWIP_CHKSUM_ALGORITHM to 1, 2 or 3.
  14:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  */
  15:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
  16:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** /*
  17:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
  18:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * All rights reserved.
  19:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
  20:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * Redistribution and use in source and binary forms, with or without modification,
  21:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * are permitted provided that the following conditions are met:
  22:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
  23:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  24:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *    this list of conditions and the following disclaimer.
  25:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  26:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *    this list of conditions and the following disclaimer in the documentation
  27:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *    and/or other materials provided with the distribution.
  28:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * 3. The name of the author may not be used to endorse or promote products
  29:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *    derived from this software without specific prior written permission.
  30:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
  31:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  32:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  33:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  34:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  35:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  36:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  37:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  38:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  39:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  40:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * OF SUCH DAMAGE.
  41:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
  42:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * This file is part of the lwIP TCP/IP stack.
  43:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
  44:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * Author: Adam Dunkels <adam@sics.se>
  45:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
  46:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  */
  47:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
  48:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #include "ETH_LWIP/lwip/include/lwip/opt.h"
  49:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
  50:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #include "ETH_LWIP/lwip/include/lwip/inet_chksum.h"
  51:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #include "ETH_LWIP/lwip/include/lwip/def.h"
  52:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #include "ETH_LWIP/lwip/include/lwip/ip_addr.h"
  53:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
  54:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #include <string.h>
  55:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
  56:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #ifndef LWIP_CHKSUM
  57:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** # define LWIP_CHKSUM lwip_standard_chksum
  58:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** # ifndef LWIP_CHKSUM_ALGORITHM
  59:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #  define LWIP_CHKSUM_ALGORITHM 2
  60:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** # endif
  61:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** u16_t lwip_standard_chksum(const void *dataptr, int len);
  62:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #endif
  63:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** /* If none set: */
  64:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #ifndef LWIP_CHKSUM_ALGORITHM
  65:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** # define LWIP_CHKSUM_ALGORITHM 0
  66:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #endif
  67:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
  68:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #if (LWIP_CHKSUM_ALGORITHM == 1) /* Version #1 */
  69:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** /**
  70:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * lwip checksum
  71:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
  72:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param dataptr points to start of data to be summed at any boundary
  73:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param len length of data to be summed
  74:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @return host order (!) lwip checksum (non-inverted Internet sum)
  75:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
  76:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @note accumulator size limits summable length to 64k
  77:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @note host endianess is irrelevant (p3 RFC1071)
  78:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  */
  79:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** u16_t
  80:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** lwip_standard_chksum(const void *dataptr, int len)
  81:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** {
  82:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u32_t acc;
  83:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u16_t src;
  84:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   const u8_t *octetptr;
  85:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
  86:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = 0;
  87:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* dataptr may be at odd or even addresses */
  88:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   octetptr = (const u8_t *)dataptr;
  89:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   while (len > 1) {
  90:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     /* declare first octet as most significant
  91:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****        thus assume network order, ignoring host order */
  92:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     src = (*octetptr) << 8;
  93:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     octetptr++;
  94:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     /* declare second octet as least significant */
  95:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     src |= (*octetptr);
  96:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     octetptr++;
  97:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc += src;
  98:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     len -= 2;
  99:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 100:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   if (len > 0) {
 101:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     /* accumulate remaining octet */
 102:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     src = (*octetptr) << 8;
 103:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc += src;
 104:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 105:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* add deferred carry bits */
 106:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = (acc >> 16) + (acc & 0x0000ffffUL);
 107:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   if ((acc & 0xffff0000UL) != 0) {
 108:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc = (acc >> 16) + (acc & 0x0000ffffUL);
 109:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 110:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* This maybe a little confusing: reorder sum using lwip_htons()
 111:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****      instead of lwip_ntohs() since it has a little less call overhead.
 112:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****      The caller must invert bits for Internet sum ! */
 113:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   return lwip_htons((u16_t)acc);
 114:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** }
 115:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #endif
 116:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 117:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #if (LWIP_CHKSUM_ALGORITHM == 2) /* Alternative version #2 */
 118:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** /*
 119:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * Curt McDowell
 120:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * Broadcom Corp.
 121:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * csm@broadcom.com
 122:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 123:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * IP checksum two bytes at a time with support for
 124:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * unaligned buffer.
 125:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * Works for len up to and including 0x20000.
 126:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * by Curt McDowell, Broadcom Corp. 12/08/2005
 127:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 128:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param dataptr points to start of data to be summed at any boundary
 129:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param len length of data to be summed
 130:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @return host order (!) lwip checksum (non-inverted Internet sum)
 131:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  */
 132:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** u16_t
 133:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** lwip_standard_chksum(const void *dataptr, int len)
 134:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** {
  28              	 .loc 1 134 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 89B0     	 sub sp,sp,#36
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 40
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 7860     	 str r0,[r7,#4]
  44 0008 3960     	 str r1,[r7]
 135:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   const u8_t *pb = (const u8_t *)dataptr;
  45              	 .loc 1 135 0
  46 000a 7B68     	 ldr r3,[r7,#4]
  47 000c FB61     	 str r3,[r7,#28]
 136:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   const u16_t *ps;
 137:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u16_t t = 0;
  48              	 .loc 1 137 0
  49 000e 0023     	 movs r3,#0
  50 0010 FB81     	 strh r3,[r7,#14]
 138:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u32_t sum = 0;
  51              	 .loc 1 138 0
  52 0012 0023     	 movs r3,#0
  53 0014 7B61     	 str r3,[r7,#20]
 139:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   int odd = ((mem_ptr_t)pb & 1);
  54              	 .loc 1 139 0
  55 0016 FB69     	 ldr r3,[r7,#28]
  56 0018 03F00103 	 and r3,r3,#1
  57 001c 3B61     	 str r3,[r7,#16]
 140:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 141:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* Get aligned to u16_t */
 142:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   if (odd && len > 0) {
  58              	 .loc 1 142 0
  59 001e 3B69     	 ldr r3,[r7,#16]
  60 0020 002B     	 cmp r3,#0
  61 0022 0DD0     	 beq .L2
  62              	 .loc 1 142 0 is_stmt 0 discriminator 1
  63 0024 3B68     	 ldr r3,[r7]
  64 0026 002B     	 cmp r3,#0
  65 0028 0ADD     	 ble .L2
 143:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     ((u8_t *)&t)[1] = *pb++;
  66              	 .loc 1 143 0 is_stmt 1
  67 002a 07F10E03 	 add r3,r7,#14
  68 002e 0133     	 adds r3,r3,#1
  69 0030 FA69     	 ldr r2,[r7,#28]
  70 0032 511C     	 adds r1,r2,#1
  71 0034 F961     	 str r1,[r7,#28]
  72 0036 1278     	 ldrb r2,[r2]
  73 0038 1A70     	 strb r2,[r3]
 144:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     len--;
  74              	 .loc 1 144 0
  75 003a 3B68     	 ldr r3,[r7]
  76 003c 013B     	 subs r3,r3,#1
  77 003e 3B60     	 str r3,[r7]
  78              	.L2:
 145:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 146:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 147:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* Add the bulk of the data */
 148:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   ps = (const u16_t *)(const void *)pb;
  79              	 .loc 1 148 0
  80 0040 FB69     	 ldr r3,[r7,#28]
  81 0042 BB61     	 str r3,[r7,#24]
 149:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   while (len > 1) {
  82              	 .loc 1 149 0
  83 0044 0AE0     	 b .L3
  84              	.L4:
 150:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     sum += *ps++;
  85              	 .loc 1 150 0
  86 0046 BB69     	 ldr r3,[r7,#24]
  87 0048 9A1C     	 adds r2,r3,#2
  88 004a BA61     	 str r2,[r7,#24]
  89 004c 1B88     	 ldrh r3,[r3]
  90 004e 1A46     	 mov r2,r3
  91 0050 7B69     	 ldr r3,[r7,#20]
  92 0052 1344     	 add r3,r3,r2
  93 0054 7B61     	 str r3,[r7,#20]
 151:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     len -= 2;
  94              	 .loc 1 151 0
  95 0056 3B68     	 ldr r3,[r7]
  96 0058 023B     	 subs r3,r3,#2
  97 005a 3B60     	 str r3,[r7]
  98              	.L3:
 149:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   while (len > 1) {
  99              	 .loc 1 149 0
 100 005c 3B68     	 ldr r3,[r7]
 101 005e 012B     	 cmp r3,#1
 102 0060 F1DC     	 bgt .L4
 152:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 153:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 154:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* Consume left-over byte, if any */
 155:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   if (len > 0) {
 103              	 .loc 1 155 0
 104 0062 3B68     	 ldr r3,[r7]
 105 0064 002B     	 cmp r3,#0
 106 0066 04DD     	 ble .L5
 156:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     ((u8_t *)&t)[0] = *(const u8_t *)ps;
 107              	 .loc 1 156 0
 108 0068 07F10E03 	 add r3,r7,#14
 109 006c BA69     	 ldr r2,[r7,#24]
 110 006e 1278     	 ldrb r2,[r2]
 111 0070 1A70     	 strb r2,[r3]
 112              	.L5:
 157:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 158:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 159:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* Add end bytes */
 160:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   sum += t;
 113              	 .loc 1 160 0
 114 0072 FB89     	 ldrh r3,[r7,#14]
 115 0074 1A46     	 mov r2,r3
 116 0076 7B69     	 ldr r3,[r7,#20]
 117 0078 1344     	 add r3,r3,r2
 118 007a 7B61     	 str r3,[r7,#20]
 161:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 162:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* Fold 32-bit sum to 16 bits
 163:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****      calling this twice is probably faster than if statements... */
 164:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   sum = FOLD_U32T(sum);
 119              	 .loc 1 164 0
 120 007c 7B69     	 ldr r3,[r7,#20]
 121 007e 1A0C     	 lsrs r2,r3,#16
 122 0080 7B69     	 ldr r3,[r7,#20]
 123 0082 9BB2     	 uxth r3,r3
 124 0084 1344     	 add r3,r3,r2
 125 0086 7B61     	 str r3,[r7,#20]
 165:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   sum = FOLD_U32T(sum);
 126              	 .loc 1 165 0
 127 0088 7B69     	 ldr r3,[r7,#20]
 128 008a 1A0C     	 lsrs r2,r3,#16
 129 008c 7B69     	 ldr r3,[r7,#20]
 130 008e 9BB2     	 uxth r3,r3
 131 0090 1344     	 add r3,r3,r2
 132 0092 7B61     	 str r3,[r7,#20]
 166:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 167:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* Swap if alignment was odd */
 168:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   if (odd) {
 133              	 .loc 1 168 0
 134 0094 3B69     	 ldr r3,[r7,#16]
 135 0096 002B     	 cmp r3,#0
 136 0098 08D0     	 beq .L6
 169:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     sum = SWAP_BYTES_IN_WORD(sum);
 137              	 .loc 1 169 0
 138 009a 7B69     	 ldr r3,[r7,#20]
 139 009c 1B02     	 lsls r3,r3,#8
 140 009e 9AB2     	 uxth r2,r3
 141 00a0 7B69     	 ldr r3,[r7,#20]
 142 00a2 03F47F43 	 and r3,r3,#65280
 143 00a6 1B0A     	 lsrs r3,r3,#8
 144 00a8 1343     	 orrs r3,r3,r2
 145 00aa 7B61     	 str r3,[r7,#20]
 146              	.L6:
 170:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 171:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 172:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   return (u16_t)sum;
 147              	 .loc 1 172 0
 148 00ac 7B69     	 ldr r3,[r7,#20]
 149 00ae 9BB2     	 uxth r3,r3
 173:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** }
 150              	 .loc 1 173 0
 151 00b0 1846     	 mov r0,r3
 152 00b2 2437     	 adds r7,r7,#36
 153              	.LCFI3:
 154              	 .cfi_def_cfa_offset 4
 155 00b4 BD46     	 mov sp,r7
 156              	.LCFI4:
 157              	 .cfi_def_cfa_register 13
 158              	 
 159 00b6 5DF8047B 	 ldr r7,[sp],#4
 160              	.LCFI5:
 161              	 .cfi_restore 7
 162              	 .cfi_def_cfa_offset 0
 163 00ba 7047     	 bx lr
 164              	 .cfi_endproc
 165              	.LFE133:
 167              	 .section .text.inet_cksum_pseudo_base,"ax",%progbits
 168              	 .align 2
 169              	 .thumb
 170              	 .thumb_func
 172              	inet_cksum_pseudo_base:
 173              	.LFB134:
 174:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #endif
 175:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 176:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #if (LWIP_CHKSUM_ALGORITHM == 3) /* Alternative version #3 */
 177:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** /**
 178:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * An optimized checksum routine. Basically, it uses loop-unrolling on
 179:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * the checksum loop, treating the head and tail bytes specially, whereas
 180:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * the inner loop acts on 8 bytes at a time.
 181:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 182:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @arg start of buffer to be checksummed. May be an odd byte address.
 183:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @len number of bytes in the buffer to be checksummed.
 184:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @return host order (!) lwip checksum (non-inverted Internet sum)
 185:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 186:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * by Curt McDowell, Broadcom Corp. December 8th, 2005
 187:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  */
 188:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** u16_t
 189:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** lwip_standard_chksum(const void *dataptr, int len)
 190:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** {
 191:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   const u8_t *pb = (const u8_t *)dataptr;
 192:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   const u16_t *ps;
 193:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u16_t t = 0;
 194:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   const u32_t *pl;
 195:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u32_t sum = 0, tmp;
 196:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* starts at odd byte address? */
 197:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   int odd = ((mem_ptr_t)pb & 1);
 198:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 199:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   if (odd && len > 0) {
 200:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     ((u8_t *)&t)[1] = *pb++;
 201:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     len--;
 202:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 203:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 204:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   ps = (const u16_t *)(const void *)pb;
 205:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 206:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   if (((mem_ptr_t)ps & 3) && len > 1) {
 207:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     sum += *ps++;
 208:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     len -= 2;
 209:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 210:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 211:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   pl = (const u32_t *)(const void *)ps;
 212:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 213:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   while (len > 7)  {
 214:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     tmp = sum + *pl++;          /* ping */
 215:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     if (tmp < sum) {
 216:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****       tmp++;                    /* add back carry */
 217:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     }
 218:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 219:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     sum = tmp + *pl++;          /* pong */
 220:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     if (sum < tmp) {
 221:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****       sum++;                    /* add back carry */
 222:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     }
 223:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 224:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     len -= 8;
 225:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 226:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 227:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* make room in upper bits */
 228:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   sum = FOLD_U32T(sum);
 229:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 230:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   ps = (const u16_t *)pl;
 231:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 232:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* 16-bit aligned word remaining? */
 233:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   while (len > 1) {
 234:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     sum += *ps++;
 235:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     len -= 2;
 236:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 237:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 238:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* dangling tail byte remaining? */
 239:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   if (len > 0) {                /* include odd byte */
 240:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     ((u8_t *)&t)[0] = *(const u8_t *)ps;
 241:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 242:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 243:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   sum += t;                     /* add end bytes */
 244:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 245:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* Fold 32-bit sum to 16 bits
 246:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****      calling this twice is probably faster than if statements... */
 247:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   sum = FOLD_U32T(sum);
 248:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   sum = FOLD_U32T(sum);
 249:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 250:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   if (odd) {
 251:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     sum = SWAP_BYTES_IN_WORD(sum);
 252:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 253:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 254:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   return (u16_t)sum;
 255:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** }
 256:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #endif
 257:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 258:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** /** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
 259:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** static u16_t
 260:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
 261:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** {
 174              	 .loc 1 261 0
 175              	 .cfi_startproc
 176              	 
 177              	 
 178 0000 80B5     	 push {r7,lr}
 179              	.LCFI6:
 180              	 .cfi_def_cfa_offset 8
 181              	 .cfi_offset 7,-8
 182              	 .cfi_offset 14,-4
 183 0002 86B0     	 sub sp,sp,#24
 184              	.LCFI7:
 185              	 .cfi_def_cfa_offset 32
 186 0004 00AF     	 add r7,sp,#0
 187              	.LCFI8:
 188              	 .cfi_def_cfa_register 7
 189 0006 F860     	 str r0,[r7,#12]
 190 0008 7B60     	 str r3,[r7,#4]
 191 000a 0B46     	 mov r3,r1
 192 000c FB72     	 strb r3,[r7,#11]
 193 000e 1346     	 mov r3,r2
 194 0010 3B81     	 strh r3,[r7,#8]
 262:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   struct pbuf *q;
 263:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   int swapped = 0;
 195              	 .loc 1 263 0
 196 0012 0023     	 movs r3,#0
 197 0014 3B61     	 str r3,[r7,#16]
 264:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 265:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* iterate through all pbuf in chain */
 266:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   for (q = p; q != NULL; q = q->next) {
 198              	 .loc 1 266 0
 199 0016 FB68     	 ldr r3,[r7,#12]
 200 0018 7B61     	 str r3,[r7,#20]
 201 001a 2CE0     	 b .L9
 202              	.L11:
 267:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 268:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****                              (void *)q, (void *)q->next));
 269:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc += LWIP_CHKSUM(q->payload, q->len);
 203              	 .loc 1 269 0
 204 001c 7B69     	 ldr r3,[r7,#20]
 205 001e 5A68     	 ldr r2,[r3,#4]
 206 0020 7B69     	 ldr r3,[r7,#20]
 207 0022 5B89     	 ldrh r3,[r3,#10]
 208 0024 1046     	 mov r0,r2
 209 0026 1946     	 mov r1,r3
 210 0028 FFF7FEFF 	 bl lwip_standard_chksum
 211 002c 0346     	 mov r3,r0
 212 002e 1A46     	 mov r2,r3
 213 0030 7B68     	 ldr r3,[r7,#4]
 214 0032 1344     	 add r3,r3,r2
 215 0034 7B60     	 str r3,[r7,#4]
 270:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 271:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     /* just executing this next line is probably faster that the if statement needed
 272:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****        to check whether we really need to execute it, and does no harm */
 273:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc = FOLD_U32T(acc);
 216              	 .loc 1 273 0
 217 0036 7B68     	 ldr r3,[r7,#4]
 218 0038 1A0C     	 lsrs r2,r3,#16
 219 003a 7B68     	 ldr r3,[r7,#4]
 220 003c 9BB2     	 uxth r3,r3
 221 003e 1344     	 add r3,r3,r2
 222 0040 7B60     	 str r3,[r7,#4]
 274:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     if (q->len % 2 != 0) {
 223              	 .loc 1 274 0
 224 0042 7B69     	 ldr r3,[r7,#20]
 225 0044 5B89     	 ldrh r3,[r3,#10]
 226 0046 03F00103 	 and r3,r3,#1
 227 004a 9BB2     	 uxth r3,r3
 228 004c 002B     	 cmp r3,#0
 229 004e 0FD0     	 beq .L10
 275:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****       swapped = !swapped;
 230              	 .loc 1 275 0
 231 0050 3B69     	 ldr r3,[r7,#16]
 232 0052 002B     	 cmp r3,#0
 233 0054 0CBF     	 ite eq
 234 0056 0123     	 moveq r3,#1
 235 0058 0023     	 movne r3,#0
 236 005a DBB2     	 uxtb r3,r3
 237 005c 3B61     	 str r3,[r7,#16]
 276:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****       acc = SWAP_BYTES_IN_WORD(acc);
 238              	 .loc 1 276 0
 239 005e 7B68     	 ldr r3,[r7,#4]
 240 0060 1B02     	 lsls r3,r3,#8
 241 0062 9AB2     	 uxth r2,r3
 242 0064 7B68     	 ldr r3,[r7,#4]
 243 0066 03F47F43 	 and r3,r3,#65280
 244 006a 1B0A     	 lsrs r3,r3,#8
 245 006c 1343     	 orrs r3,r3,r2
 246 006e 7B60     	 str r3,[r7,#4]
 247              	.L10:
 266:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 248              	 .loc 1 266 0 discriminator 2
 249 0070 7B69     	 ldr r3,[r7,#20]
 250 0072 1B68     	 ldr r3,[r3]
 251 0074 7B61     	 str r3,[r7,#20]
 252              	.L9:
 266:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 253              	 .loc 1 266 0 is_stmt 0 discriminator 1
 254 0076 7B69     	 ldr r3,[r7,#20]
 255 0078 002B     	 cmp r3,#0
 256 007a CFD1     	 bne .L11
 277:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     }
 278:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
 279:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 280:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 281:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   if (swapped) {
 257              	 .loc 1 281 0 is_stmt 1
 258 007c 3B69     	 ldr r3,[r7,#16]
 259 007e 002B     	 cmp r3,#0
 260 0080 08D0     	 beq .L12
 282:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc = SWAP_BYTES_IN_WORD(acc);
 261              	 .loc 1 282 0
 262 0082 7B68     	 ldr r3,[r7,#4]
 263 0084 1B02     	 lsls r3,r3,#8
 264 0086 9AB2     	 uxth r2,r3
 265 0088 7B68     	 ldr r3,[r7,#4]
 266 008a 03F47F43 	 and r3,r3,#65280
 267 008e 1B0A     	 lsrs r3,r3,#8
 268 0090 1343     	 orrs r3,r3,r2
 269 0092 7B60     	 str r3,[r7,#4]
 270              	.L12:
 283:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 284:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 285:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc += (u32_t)lwip_htons((u16_t)proto);
 271              	 .loc 1 285 0
 272 0094 FB7A     	 ldrb r3,[r7,#11]
 273 0096 9BB2     	 uxth r3,r3
 274 0098 1846     	 mov r0,r3
 275 009a FFF7FEFF 	 bl lwip_htons
 276 009e 0346     	 mov r3,r0
 277 00a0 1A46     	 mov r2,r3
 278 00a2 7B68     	 ldr r3,[r7,#4]
 279 00a4 1344     	 add r3,r3,r2
 280 00a6 7B60     	 str r3,[r7,#4]
 286:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc += (u32_t)lwip_htons(proto_len);
 281              	 .loc 1 286 0
 282 00a8 3B89     	 ldrh r3,[r7,#8]
 283 00aa 1846     	 mov r0,r3
 284 00ac FFF7FEFF 	 bl lwip_htons
 285 00b0 0346     	 mov r3,r0
 286 00b2 1A46     	 mov r2,r3
 287 00b4 7B68     	 ldr r3,[r7,#4]
 288 00b6 1344     	 add r3,r3,r2
 289 00b8 7B60     	 str r3,[r7,#4]
 287:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 288:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* Fold 32-bit sum to 16 bits
 289:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****      calling this twice is probably faster than if statements... */
 290:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 290              	 .loc 1 290 0
 291 00ba 7B68     	 ldr r3,[r7,#4]
 292 00bc 1A0C     	 lsrs r2,r3,#16
 293 00be 7B68     	 ldr r3,[r7,#4]
 294 00c0 9BB2     	 uxth r3,r3
 295 00c2 1344     	 add r3,r3,r2
 296 00c4 7B60     	 str r3,[r7,#4]
 291:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 297              	 .loc 1 291 0
 298 00c6 7B68     	 ldr r3,[r7,#4]
 299 00c8 1A0C     	 lsrs r2,r3,#16
 300 00ca 7B68     	 ldr r3,[r7,#4]
 301 00cc 9BB2     	 uxth r3,r3
 302 00ce 1344     	 add r3,r3,r2
 303 00d0 7B60     	 str r3,[r7,#4]
 292:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
 293:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   return (u16_t)~(acc & 0xffffUL);
 304              	 .loc 1 293 0
 305 00d2 7B68     	 ldr r3,[r7,#4]
 306 00d4 9BB2     	 uxth r3,r3
 307 00d6 DB43     	 mvns r3,r3
 308 00d8 9BB2     	 uxth r3,r3
 294:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** }
 309              	 .loc 1 294 0
 310 00da 1846     	 mov r0,r3
 311 00dc 1837     	 adds r7,r7,#24
 312              	.LCFI9:
 313              	 .cfi_def_cfa_offset 8
 314 00de BD46     	 mov sp,r7
 315              	.LCFI10:
 316              	 .cfi_def_cfa_register 13
 317              	 
 318 00e0 80BD     	 pop {r7,pc}
 319              	 .cfi_endproc
 320              	.LFE134:
 322 00e2 00BF     	 .section .text.inet_chksum_pseudo,"ax",%progbits
 323              	 .align 2
 324              	 .global inet_chksum_pseudo
 325              	 .thumb
 326              	 .thumb_func
 328              	inet_chksum_pseudo:
 329              	.LFB135:
 295:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 296:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #if LWIP_IPV4
 297:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** /* inet_chksum_pseudo:
 298:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 299:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * Calculates the IPv4 pseudo Internet checksum used by TCP and UDP for a pbuf chain.
 300:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * IP addresses are expected to be in network byte order.
 301:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 302:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param p chain of pbufs over that a checksum should be calculated (ip data part)
 303:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param src source ip address (used for checksum of pseudo header)
 304:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param dst destination ip address (used for checksum of pseudo header)
 305:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param proto ip protocol (used for checksum of pseudo header)
 306:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param proto_len length of the ip data part (used for checksum of pseudo header)
 307:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @return checksum (as u16_t) to be saved directly in the protocol header
 308:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  */
 309:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** u16_t
 310:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
 311:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****                    const ip4_addr_t *src, const ip4_addr_t *dest)
 312:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** {
 330              	 .loc 1 312 0
 331              	 .cfi_startproc
 332              	 
 333              	 
 334 0000 80B5     	 push {r7,lr}
 335              	.LCFI11:
 336              	 .cfi_def_cfa_offset 8
 337              	 .cfi_offset 7,-8
 338              	 .cfi_offset 14,-4
 339 0002 86B0     	 sub sp,sp,#24
 340              	.LCFI12:
 341              	 .cfi_def_cfa_offset 32
 342 0004 00AF     	 add r7,sp,#0
 343              	.LCFI13:
 344              	 .cfi_def_cfa_register 7
 345 0006 F860     	 str r0,[r7,#12]
 346 0008 7B60     	 str r3,[r7,#4]
 347 000a 0B46     	 mov r3,r1
 348 000c FB72     	 strb r3,[r7,#11]
 349 000e 1346     	 mov r3,r2
 350 0010 3B81     	 strh r3,[r7,#8]
 313:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u32_t acc;
 314:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u32_t addr;
 315:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 316:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   addr = ip4_addr_get_u32(src);
 351              	 .loc 1 316 0
 352 0012 7B68     	 ldr r3,[r7,#4]
 353 0014 1B68     	 ldr r3,[r3]
 354 0016 7B61     	 str r3,[r7,#20]
 317:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = (addr & 0xffffUL);
 355              	 .loc 1 317 0
 356 0018 7B69     	 ldr r3,[r7,#20]
 357 001a 9BB2     	 uxth r3,r3
 358 001c 3B61     	 str r3,[r7,#16]
 318:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 359              	 .loc 1 318 0
 360 001e 7B69     	 ldr r3,[r7,#20]
 361 0020 1B0C     	 lsrs r3,r3,#16
 362 0022 3A69     	 ldr r2,[r7,#16]
 363 0024 1344     	 add r3,r3,r2
 364 0026 3B61     	 str r3,[r7,#16]
 319:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   addr = ip4_addr_get_u32(dest);
 365              	 .loc 1 319 0
 366 0028 3B6A     	 ldr r3,[r7,#32]
 367 002a 1B68     	 ldr r3,[r3]
 368 002c 7B61     	 str r3,[r7,#20]
 320:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = (u32_t)(acc + (addr & 0xffffUL));
 369              	 .loc 1 320 0
 370 002e 7B69     	 ldr r3,[r7,#20]
 371 0030 9BB2     	 uxth r3,r3
 372 0032 3A69     	 ldr r2,[r7,#16]
 373 0034 1344     	 add r3,r3,r2
 374 0036 3B61     	 str r3,[r7,#16]
 321:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 375              	 .loc 1 321 0
 376 0038 7B69     	 ldr r3,[r7,#20]
 377 003a 1B0C     	 lsrs r3,r3,#16
 378 003c 3A69     	 ldr r2,[r7,#16]
 379 003e 1344     	 add r3,r3,r2
 380 0040 3B61     	 str r3,[r7,#16]
 322:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* fold down to 16 bits */
 323:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 381              	 .loc 1 323 0
 382 0042 3B69     	 ldr r3,[r7,#16]
 383 0044 1A0C     	 lsrs r2,r3,#16
 384 0046 3B69     	 ldr r3,[r7,#16]
 385 0048 9BB2     	 uxth r3,r3
 386 004a 1344     	 add r3,r3,r2
 387 004c 3B61     	 str r3,[r7,#16]
 324:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 388              	 .loc 1 324 0
 389 004e 3B69     	 ldr r3,[r7,#16]
 390 0050 1A0C     	 lsrs r2,r3,#16
 391 0052 3B69     	 ldr r3,[r7,#16]
 392 0054 9BB2     	 uxth r3,r3
 393 0056 1344     	 add r3,r3,r2
 394 0058 3B61     	 str r3,[r7,#16]
 325:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 326:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 395              	 .loc 1 326 0
 396 005a FA7A     	 ldrb r2,[r7,#11]
 397 005c 3B89     	 ldrh r3,[r7,#8]
 398 005e F868     	 ldr r0,[r7,#12]
 399 0060 1146     	 mov r1,r2
 400 0062 1A46     	 mov r2,r3
 401 0064 3B69     	 ldr r3,[r7,#16]
 402 0066 FFF7FEFF 	 bl inet_cksum_pseudo_base
 403 006a 0346     	 mov r3,r0
 327:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** }
 404              	 .loc 1 327 0
 405 006c 1846     	 mov r0,r3
 406 006e 1837     	 adds r7,r7,#24
 407              	.LCFI14:
 408              	 .cfi_def_cfa_offset 8
 409 0070 BD46     	 mov sp,r7
 410              	.LCFI15:
 411              	 .cfi_def_cfa_register 13
 412              	 
 413 0072 80BD     	 pop {r7,pc}
 414              	 .cfi_endproc
 415              	.LFE135:
 417              	 .section .text.ip_chksum_pseudo,"ax",%progbits
 418              	 .align 2
 419              	 .global ip_chksum_pseudo
 420              	 .thumb
 421              	 .thumb_func
 423              	ip_chksum_pseudo:
 424              	.LFB136:
 328:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #endif /* LWIP_IPV4 */
 329:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 330:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #if LWIP_IPV6
 331:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** /**
 332:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * Calculates the checksum with IPv6 pseudo header used by TCP and UDP for a pbuf chain.
 333:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * IPv6 addresses are expected to be in network byte order.
 334:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 335:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param p chain of pbufs over that a checksum should be calculated (ip data part)
 336:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param proto ipv6 protocol/next header (used for checksum of pseudo header)
 337:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param proto_len length of the ipv6 payload (used for checksum of pseudo header)
 338:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param src source ipv6 address (used for checksum of pseudo header)
 339:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param dest destination ipv6 address (used for checksum of pseudo header)
 340:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @return checksum (as u16_t) to be saved directly in the protocol header
 341:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  */
 342:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** u16_t
 343:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** ip6_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
 344:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****                   const ip6_addr_t *src, const ip6_addr_t *dest)
 345:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** {
 346:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u32_t acc = 0;
 347:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u32_t addr;
 348:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u8_t addr_part;
 349:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 350:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   for (addr_part = 0; addr_part < 4; addr_part++) {
 351:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     addr = src->addr[addr_part];
 352:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc = (u32_t)(acc + (addr & 0xffffUL));
 353:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 354:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     addr = dest->addr[addr_part];
 355:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc = (u32_t)(acc + (addr & 0xffffUL));
 356:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 357:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 358:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* fold down to 16 bits */
 359:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 360:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 361:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 362:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 363:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** }
 364:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #endif /* LWIP_IPV6 */
 365:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 366:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** /* ip_chksum_pseudo:
 367:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 368:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * Calculates the IPv4 or IPv6 pseudo Internet checksum used by TCP and UDP for a pbuf chain.
 369:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * IP addresses are expected to be in network byte order.
 370:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 371:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param p chain of pbufs over that a checksum should be calculated (ip data part)
 372:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param src source ip address (used for checksum of pseudo header)
 373:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param dst destination ip address (used for checksum of pseudo header)
 374:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param proto ip protocol (used for checksum of pseudo header)
 375:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param proto_len length of the ip data part (used for checksum of pseudo header)
 376:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @return checksum (as u16_t) to be saved directly in the protocol header
 377:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  */
 378:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** u16_t
 379:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
 380:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****                  const ip_addr_t *src, const ip_addr_t *dest)
 381:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** {
 425              	 .loc 1 381 0
 426              	 .cfi_startproc
 427              	 
 428              	 
 429 0000 80B5     	 push {r7,lr}
 430              	.LCFI16:
 431              	 .cfi_def_cfa_offset 8
 432              	 .cfi_offset 7,-8
 433              	 .cfi_offset 14,-4
 434 0002 86B0     	 sub sp,sp,#24
 435              	.LCFI17:
 436              	 .cfi_def_cfa_offset 32
 437 0004 02AF     	 add r7,sp,#8
 438              	.LCFI18:
 439              	 .cfi_def_cfa 7,24
 440 0006 F860     	 str r0,[r7,#12]
 441 0008 7B60     	 str r3,[r7,#4]
 442 000a 0B46     	 mov r3,r1
 443 000c FB72     	 strb r3,[r7,#11]
 444 000e 1346     	 mov r3,r2
 445 0010 3B81     	 strh r3,[r7,#8]
 382:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #if LWIP_IPV6
 383:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   if (IP_IS_V6(dest)) {
 384:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     return ip6_chksum_pseudo(p, proto, proto_len, ip_2_ip6(src), ip_2_ip6(dest));
 385:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 386:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #endif /* LWIP_IPV6 */
 387:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #if LWIP_IPV4 && LWIP_IPV6
 388:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   else
 389:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #endif /* LWIP_IPV4 && LWIP_IPV6 */
 390:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #if LWIP_IPV4
 391:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   {
 392:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 446              	 .loc 1 392 0
 447 0012 F97A     	 ldrb r1,[r7,#11]
 448 0014 3A89     	 ldrh r2,[r7,#8]
 449 0016 BB69     	 ldr r3,[r7,#24]
 450 0018 0093     	 str r3,[sp]
 451 001a F868     	 ldr r0,[r7,#12]
 452 001c 7B68     	 ldr r3,[r7,#4]
 453 001e FFF7FEFF 	 bl inet_chksum_pseudo
 454 0022 0346     	 mov r3,r0
 393:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 394:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #endif /* LWIP_IPV4 */
 395:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** }
 455              	 .loc 1 395 0
 456 0024 1846     	 mov r0,r3
 457 0026 1037     	 adds r7,r7,#16
 458              	.LCFI19:
 459              	 .cfi_def_cfa_offset 8
 460 0028 BD46     	 mov sp,r7
 461              	.LCFI20:
 462              	 .cfi_def_cfa_register 13
 463              	 
 464 002a 80BD     	 pop {r7,pc}
 465              	 .cfi_endproc
 466              	.LFE136:
 468              	 .section .text.inet_cksum_pseudo_partial_base,"ax",%progbits
 469              	 .align 2
 470              	 .thumb
 471              	 .thumb_func
 473              	inet_cksum_pseudo_partial_base:
 474              	.LFB137:
 396:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 397:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** /** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
 398:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** static u16_t
 399:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** inet_cksum_pseudo_partial_base(struct pbuf *p, u8_t proto, u16_t proto_len,
 400:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****                                u16_t chksum_len, u32_t acc)
 401:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** {
 475              	 .loc 1 401 0
 476              	 .cfi_startproc
 477              	 
 478              	 
 479 0000 80B5     	 push {r7,lr}
 480              	.LCFI21:
 481              	 .cfi_def_cfa_offset 8
 482              	 .cfi_offset 7,-8
 483              	 .cfi_offset 14,-4
 484 0002 88B0     	 sub sp,sp,#32
 485              	.LCFI22:
 486              	 .cfi_def_cfa_offset 40
 487 0004 00AF     	 add r7,sp,#0
 488              	.LCFI23:
 489              	 .cfi_def_cfa_register 7
 490 0006 F860     	 str r0,[r7,#12]
 491 0008 0846     	 mov r0,r1
 492 000a 1146     	 mov r1,r2
 493 000c 1A46     	 mov r2,r3
 494 000e 0346     	 mov r3,r0
 495 0010 FB72     	 strb r3,[r7,#11]
 496 0012 0B46     	 mov r3,r1
 497 0014 3B81     	 strh r3,[r7,#8]
 498 0016 1346     	 mov r3,r2
 499 0018 FB80     	 strh r3,[r7,#6]
 402:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   struct pbuf *q;
 403:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   int swapped = 0;
 500              	 .loc 1 403 0
 501 001a 0023     	 movs r3,#0
 502 001c BB61     	 str r3,[r7,#24]
 404:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u16_t chklen;
 405:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 406:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* iterate through all pbuf in chain */
 407:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
 503              	 .loc 1 407 0
 504 001e FB68     	 ldr r3,[r7,#12]
 505 0020 FB61     	 str r3,[r7,#28]
 506 0022 38E0     	 b .L19
 507              	.L23:
 408:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 409:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****                              (void *)q, (void *)q->next));
 410:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     chklen = q->len;
 508              	 .loc 1 410 0
 509 0024 FB69     	 ldr r3,[r7,#28]
 510 0026 5B89     	 ldrh r3,[r3,#10]
 511 0028 FB82     	 strh r3,[r7,#22]
 411:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     if (chklen > chksum_len) {
 512              	 .loc 1 411 0
 513 002a FA8A     	 ldrh r2,[r7,#22]
 514 002c FB88     	 ldrh r3,[r7,#6]
 515 002e 9A42     	 cmp r2,r3
 516 0030 01D9     	 bls .L20
 412:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****       chklen = chksum_len;
 517              	 .loc 1 412 0
 518 0032 FB88     	 ldrh r3,[r7,#6]
 519 0034 FB82     	 strh r3,[r7,#22]
 520              	.L20:
 413:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     }
 414:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc += LWIP_CHKSUM(q->payload, chklen);
 521              	 .loc 1 414 0
 522 0036 FB69     	 ldr r3,[r7,#28]
 523 0038 5A68     	 ldr r2,[r3,#4]
 524 003a FB8A     	 ldrh r3,[r7,#22]
 525 003c 1046     	 mov r0,r2
 526 003e 1946     	 mov r1,r3
 527 0040 FFF7FEFF 	 bl lwip_standard_chksum
 528 0044 0346     	 mov r3,r0
 529 0046 1A46     	 mov r2,r3
 530 0048 BB6A     	 ldr r3,[r7,#40]
 531 004a 1344     	 add r3,r3,r2
 532 004c BB62     	 str r3,[r7,#40]
 415:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     chksum_len = (u16_t)(chksum_len - chklen);
 533              	 .loc 1 415 0
 534 004e FA88     	 ldrh r2,[r7,#6]
 535 0050 FB8A     	 ldrh r3,[r7,#22]
 536 0052 D31A     	 subs r3,r2,r3
 537 0054 FB80     	 strh r3,[r7,#6]
 416:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     LWIP_ASSERT("delete me", chksum_len < 0x7fff);
 417:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 418:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     /* fold the upper bit down */
 419:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc = FOLD_U32T(acc);
 538              	 .loc 1 419 0
 539 0056 BB6A     	 ldr r3,[r7,#40]
 540 0058 1A0C     	 lsrs r2,r3,#16
 541 005a BB6A     	 ldr r3,[r7,#40]
 542 005c 9BB2     	 uxth r3,r3
 543 005e 1344     	 add r3,r3,r2
 544 0060 BB62     	 str r3,[r7,#40]
 420:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     if (q->len % 2 != 0) {
 545              	 .loc 1 420 0
 546 0062 FB69     	 ldr r3,[r7,#28]
 547 0064 5B89     	 ldrh r3,[r3,#10]
 548 0066 03F00103 	 and r3,r3,#1
 549 006a 9BB2     	 uxth r3,r3
 550 006c 002B     	 cmp r3,#0
 551 006e 0FD0     	 beq .L21
 421:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****       swapped = !swapped;
 552              	 .loc 1 421 0
 553 0070 BB69     	 ldr r3,[r7,#24]
 554 0072 002B     	 cmp r3,#0
 555 0074 0CBF     	 ite eq
 556 0076 0123     	 moveq r3,#1
 557 0078 0023     	 movne r3,#0
 558 007a DBB2     	 uxtb r3,r3
 559 007c BB61     	 str r3,[r7,#24]
 422:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****       acc = SWAP_BYTES_IN_WORD(acc);
 560              	 .loc 1 422 0
 561 007e BB6A     	 ldr r3,[r7,#40]
 562 0080 1B02     	 lsls r3,r3,#8
 563 0082 9AB2     	 uxth r2,r3
 564 0084 BB6A     	 ldr r3,[r7,#40]
 565 0086 03F47F43 	 and r3,r3,#65280
 566 008a 1B0A     	 lsrs r3,r3,#8
 567 008c 1343     	 orrs r3,r3,r2
 568 008e BB62     	 str r3,[r7,#40]
 569              	.L21:
 407:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 570              	 .loc 1 407 0 discriminator 2
 571 0090 FB69     	 ldr r3,[r7,#28]
 572 0092 1B68     	 ldr r3,[r3]
 573 0094 FB61     	 str r3,[r7,#28]
 574              	.L19:
 407:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 575              	 .loc 1 407 0 is_stmt 0 discriminator 1
 576 0096 FB69     	 ldr r3,[r7,#28]
 577 0098 002B     	 cmp r3,#0
 578 009a 02D0     	 beq .L22
 407:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 579              	 .loc 1 407 0 discriminator 3
 580 009c FB88     	 ldrh r3,[r7,#6]
 581 009e 002B     	 cmp r3,#0
 582 00a0 C0D1     	 bne .L23
 583              	.L22:
 423:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     }
 424:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
 425:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 426:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 427:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   if (swapped) {
 584              	 .loc 1 427 0 is_stmt 1
 585 00a2 BB69     	 ldr r3,[r7,#24]
 586 00a4 002B     	 cmp r3,#0
 587 00a6 08D0     	 beq .L24
 428:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc = SWAP_BYTES_IN_WORD(acc);
 588              	 .loc 1 428 0
 589 00a8 BB6A     	 ldr r3,[r7,#40]
 590 00aa 1B02     	 lsls r3,r3,#8
 591 00ac 9AB2     	 uxth r2,r3
 592 00ae BB6A     	 ldr r3,[r7,#40]
 593 00b0 03F47F43 	 and r3,r3,#65280
 594 00b4 1B0A     	 lsrs r3,r3,#8
 595 00b6 1343     	 orrs r3,r3,r2
 596 00b8 BB62     	 str r3,[r7,#40]
 597              	.L24:
 429:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 430:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 431:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc += (u32_t)lwip_htons((u16_t)proto);
 598              	 .loc 1 431 0
 599 00ba FB7A     	 ldrb r3,[r7,#11]
 600 00bc 9BB2     	 uxth r3,r3
 601 00be 1846     	 mov r0,r3
 602 00c0 FFF7FEFF 	 bl lwip_htons
 603 00c4 0346     	 mov r3,r0
 604 00c6 1A46     	 mov r2,r3
 605 00c8 BB6A     	 ldr r3,[r7,#40]
 606 00ca 1344     	 add r3,r3,r2
 607 00cc BB62     	 str r3,[r7,#40]
 432:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc += (u32_t)lwip_htons(proto_len);
 608              	 .loc 1 432 0
 609 00ce 3B89     	 ldrh r3,[r7,#8]
 610 00d0 1846     	 mov r0,r3
 611 00d2 FFF7FEFF 	 bl lwip_htons
 612 00d6 0346     	 mov r3,r0
 613 00d8 1A46     	 mov r2,r3
 614 00da BB6A     	 ldr r3,[r7,#40]
 615 00dc 1344     	 add r3,r3,r2
 616 00de BB62     	 str r3,[r7,#40]
 433:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 434:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* Fold 32-bit sum to 16 bits
 435:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****      calling this twice is probably faster than if statements... */
 436:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 617              	 .loc 1 436 0
 618 00e0 BB6A     	 ldr r3,[r7,#40]
 619 00e2 1A0C     	 lsrs r2,r3,#16
 620 00e4 BB6A     	 ldr r3,[r7,#40]
 621 00e6 9BB2     	 uxth r3,r3
 622 00e8 1344     	 add r3,r3,r2
 623 00ea BB62     	 str r3,[r7,#40]
 437:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 624              	 .loc 1 437 0
 625 00ec BB6A     	 ldr r3,[r7,#40]
 626 00ee 1A0C     	 lsrs r2,r3,#16
 627 00f0 BB6A     	 ldr r3,[r7,#40]
 628 00f2 9BB2     	 uxth r3,r3
 629 00f4 1344     	 add r3,r3,r2
 630 00f6 BB62     	 str r3,[r7,#40]
 438:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
 439:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   return (u16_t)~(acc & 0xffffUL);
 631              	 .loc 1 439 0
 632 00f8 BB6A     	 ldr r3,[r7,#40]
 633 00fa 9BB2     	 uxth r3,r3
 634 00fc DB43     	 mvns r3,r3
 635 00fe 9BB2     	 uxth r3,r3
 440:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** }
 636              	 .loc 1 440 0
 637 0100 1846     	 mov r0,r3
 638 0102 2037     	 adds r7,r7,#32
 639              	.LCFI24:
 640              	 .cfi_def_cfa_offset 8
 641 0104 BD46     	 mov sp,r7
 642              	.LCFI25:
 643              	 .cfi_def_cfa_register 13
 644              	 
 645 0106 80BD     	 pop {r7,pc}
 646              	 .cfi_endproc
 647              	.LFE137:
 649              	 .section .text.inet_chksum_pseudo_partial,"ax",%progbits
 650              	 .align 2
 651              	 .global inet_chksum_pseudo_partial
 652              	 .thumb
 653              	 .thumb_func
 655              	inet_chksum_pseudo_partial:
 656              	.LFB138:
 441:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 442:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #if LWIP_IPV4
 443:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** /* inet_chksum_pseudo_partial:
 444:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 445:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * Calculates the IPv4 pseudo Internet checksum used by TCP and UDP for a pbuf chain.
 446:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * IP addresses are expected to be in network byte order.
 447:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 448:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param p chain of pbufs over that a checksum should be calculated (ip data part)
 449:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param src source ip address (used for checksum of pseudo header)
 450:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param dst destination ip address (used for checksum of pseudo header)
 451:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param proto ip protocol (used for checksum of pseudo header)
 452:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param proto_len length of the ip data part (used for checksum of pseudo header)
 453:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @return checksum (as u16_t) to be saved directly in the protocol header
 454:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  */
 455:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** u16_t
 456:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** inet_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
 457:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****                            u16_t chksum_len, const ip4_addr_t *src, const ip4_addr_t *dest)
 458:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** {
 657              	 .loc 1 458 0
 658              	 .cfi_startproc
 659              	 
 660              	 
 661 0000 90B5     	 push {r4,r7,lr}
 662              	.LCFI26:
 663              	 .cfi_def_cfa_offset 12
 664              	 .cfi_offset 4,-12
 665              	 .cfi_offset 7,-8
 666              	 .cfi_offset 14,-4
 667 0002 89B0     	 sub sp,sp,#36
 668              	.LCFI27:
 669              	 .cfi_def_cfa_offset 48
 670 0004 02AF     	 add r7,sp,#8
 671              	.LCFI28:
 672              	 .cfi_def_cfa 7,40
 673 0006 F860     	 str r0,[r7,#12]
 674 0008 0846     	 mov r0,r1
 675 000a 1146     	 mov r1,r2
 676 000c 1A46     	 mov r2,r3
 677 000e 0346     	 mov r3,r0
 678 0010 FB72     	 strb r3,[r7,#11]
 679 0012 0B46     	 mov r3,r1
 680 0014 3B81     	 strh r3,[r7,#8]
 681 0016 1346     	 mov r3,r2
 682 0018 FB80     	 strh r3,[r7,#6]
 459:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u32_t acc;
 460:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u32_t addr;
 461:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 462:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   addr = ip4_addr_get_u32(src);
 683              	 .loc 1 462 0
 684 001a BB6A     	 ldr r3,[r7,#40]
 685 001c 1B68     	 ldr r3,[r3]
 686 001e 7B61     	 str r3,[r7,#20]
 463:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = (addr & 0xffffUL);
 687              	 .loc 1 463 0
 688 0020 7B69     	 ldr r3,[r7,#20]
 689 0022 9BB2     	 uxth r3,r3
 690 0024 3B61     	 str r3,[r7,#16]
 464:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 691              	 .loc 1 464 0
 692 0026 7B69     	 ldr r3,[r7,#20]
 693 0028 1B0C     	 lsrs r3,r3,#16
 694 002a 3A69     	 ldr r2,[r7,#16]
 695 002c 1344     	 add r3,r3,r2
 696 002e 3B61     	 str r3,[r7,#16]
 465:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   addr = ip4_addr_get_u32(dest);
 697              	 .loc 1 465 0
 698 0030 FB6A     	 ldr r3,[r7,#44]
 699 0032 1B68     	 ldr r3,[r3]
 700 0034 7B61     	 str r3,[r7,#20]
 466:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = (u32_t)(acc + (addr & 0xffffUL));
 701              	 .loc 1 466 0
 702 0036 7B69     	 ldr r3,[r7,#20]
 703 0038 9BB2     	 uxth r3,r3
 704 003a 3A69     	 ldr r2,[r7,#16]
 705 003c 1344     	 add r3,r3,r2
 706 003e 3B61     	 str r3,[r7,#16]
 467:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 707              	 .loc 1 467 0
 708 0040 7B69     	 ldr r3,[r7,#20]
 709 0042 1B0C     	 lsrs r3,r3,#16
 710 0044 3A69     	 ldr r2,[r7,#16]
 711 0046 1344     	 add r3,r3,r2
 712 0048 3B61     	 str r3,[r7,#16]
 468:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* fold down to 16 bits */
 469:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 713              	 .loc 1 469 0
 714 004a 3B69     	 ldr r3,[r7,#16]
 715 004c 1A0C     	 lsrs r2,r3,#16
 716 004e 3B69     	 ldr r3,[r7,#16]
 717 0050 9BB2     	 uxth r3,r3
 718 0052 1344     	 add r3,r3,r2
 719 0054 3B61     	 str r3,[r7,#16]
 470:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 720              	 .loc 1 470 0
 721 0056 3B69     	 ldr r3,[r7,#16]
 722 0058 1A0C     	 lsrs r2,r3,#16
 723 005a 3B69     	 ldr r3,[r7,#16]
 724 005c 9BB2     	 uxth r3,r3
 725 005e 1344     	 add r3,r3,r2
 726 0060 3B61     	 str r3,[r7,#16]
 471:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 472:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   return inet_cksum_pseudo_partial_base(p, proto, proto_len, chksum_len, acc);
 727              	 .loc 1 472 0
 728 0062 F97A     	 ldrb r1,[r7,#11]
 729 0064 3A89     	 ldrh r2,[r7,#8]
 730 0066 FC88     	 ldrh r4,[r7,#6]
 731 0068 3B69     	 ldr r3,[r7,#16]
 732 006a 0093     	 str r3,[sp]
 733 006c F868     	 ldr r0,[r7,#12]
 734 006e 2346     	 mov r3,r4
 735 0070 FFF7FEFF 	 bl inet_cksum_pseudo_partial_base
 736 0074 0346     	 mov r3,r0
 473:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** }
 737              	 .loc 1 473 0
 738 0076 1846     	 mov r0,r3
 739 0078 1C37     	 adds r7,r7,#28
 740              	.LCFI29:
 741              	 .cfi_def_cfa_offset 12
 742 007a BD46     	 mov sp,r7
 743              	.LCFI30:
 744              	 .cfi_def_cfa_register 13
 745              	 
 746 007c 90BD     	 pop {r4,r7,pc}
 747              	 .cfi_endproc
 748              	.LFE138:
 750 007e 00BF     	 .section .text.ip_chksum_pseudo_partial,"ax",%progbits
 751              	 .align 2
 752              	 .global ip_chksum_pseudo_partial
 753              	 .thumb
 754              	 .thumb_func
 756              	ip_chksum_pseudo_partial:
 757              	.LFB139:
 474:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #endif /* LWIP_IPV4 */
 475:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 476:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #if LWIP_IPV6
 477:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** /**
 478:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * Calculates the checksum with IPv6 pseudo header used by TCP and UDP for a pbuf chain.
 479:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * IPv6 addresses are expected to be in network byte order. Will only compute for a
 480:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * portion of the payload.
 481:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 482:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param p chain of pbufs over that a checksum should be calculated (ip data part)
 483:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param proto ipv6 protocol/next header (used for checksum of pseudo header)
 484:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param proto_len length of the ipv6 payload (used for checksum of pseudo header)
 485:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param chksum_len number of payload bytes used to compute chksum
 486:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param src source ipv6 address (used for checksum of pseudo header)
 487:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param dest destination ipv6 address (used for checksum of pseudo header)
 488:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @return checksum (as u16_t) to be saved directly in the protocol header
 489:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  */
 490:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** u16_t
 491:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** ip6_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
 492:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****                           u16_t chksum_len, const ip6_addr_t *src, const ip6_addr_t *dest)
 493:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** {
 494:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u32_t acc = 0;
 495:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u32_t addr;
 496:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u8_t addr_part;
 497:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 498:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   for (addr_part = 0; addr_part < 4; addr_part++) {
 499:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     addr = src->addr[addr_part];
 500:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc = (u32_t)(acc + (addr & 0xffffUL));
 501:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 502:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     addr = dest->addr[addr_part];
 503:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc = (u32_t)(acc + (addr & 0xffffUL));
 504:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 505:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 506:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   /* fold down to 16 bits */
 507:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 508:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 509:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 510:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   return inet_cksum_pseudo_partial_base(p, proto, proto_len, chksum_len, acc);
 511:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** }
 512:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #endif /* LWIP_IPV6 */
 513:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 514:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** /* ip_chksum_pseudo_partial:
 515:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 516:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * Calculates the IPv4 or IPv6 pseudo Internet checksum used by TCP and UDP for a pbuf chain.
 517:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 518:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param p chain of pbufs over that a checksum should be calculated (ip data part)
 519:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param src source ip address (used for checksum of pseudo header)
 520:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param dst destination ip address (used for checksum of pseudo header)
 521:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param proto ip protocol (used for checksum of pseudo header)
 522:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param proto_len length of the ip data part (used for checksum of pseudo header)
 523:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @return checksum (as u16_t) to be saved directly in the protocol header
 524:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  */
 525:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** u16_t
 526:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** ip_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
 527:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****                          u16_t chksum_len, const ip_addr_t *src, const ip_addr_t *dest)
 528:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** {
 758              	 .loc 1 528 0
 759              	 .cfi_startproc
 760              	 
 761              	 
 762 0000 90B5     	 push {r4,r7,lr}
 763              	.LCFI31:
 764              	 .cfi_def_cfa_offset 12
 765              	 .cfi_offset 4,-12
 766              	 .cfi_offset 7,-8
 767              	 .cfi_offset 14,-4
 768 0002 87B0     	 sub sp,sp,#28
 769              	.LCFI32:
 770              	 .cfi_def_cfa_offset 40
 771 0004 02AF     	 add r7,sp,#8
 772              	.LCFI33:
 773              	 .cfi_def_cfa 7,32
 774 0006 F860     	 str r0,[r7,#12]
 775 0008 0846     	 mov r0,r1
 776 000a 1146     	 mov r1,r2
 777 000c 1A46     	 mov r2,r3
 778 000e 0346     	 mov r3,r0
 779 0010 FB72     	 strb r3,[r7,#11]
 780 0012 0B46     	 mov r3,r1
 781 0014 3B81     	 strh r3,[r7,#8]
 782 0016 1346     	 mov r3,r2
 783 0018 FB80     	 strh r3,[r7,#6]
 529:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #if LWIP_IPV6
 530:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   if (IP_IS_V6(dest)) {
 531:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     return ip6_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip6(src), ip_2_ip6(dest)
 532:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 533:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #endif /* LWIP_IPV6 */
 534:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #if LWIP_IPV4 && LWIP_IPV6
 535:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   else
 536:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #endif /* LWIP_IPV4 && LWIP_IPV6 */
 537:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #if LWIP_IPV4
 538:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   {
 539:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     return inet_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip4(src), ip_2_ip4(dest
 784              	 .loc 1 539 0
 785 001a F97A     	 ldrb r1,[r7,#11]
 786 001c 3A89     	 ldrh r2,[r7,#8]
 787 001e FC88     	 ldrh r4,[r7,#6]
 788 0020 3B6A     	 ldr r3,[r7,#32]
 789 0022 0093     	 str r3,[sp]
 790 0024 7B6A     	 ldr r3,[r7,#36]
 791 0026 0193     	 str r3,[sp,#4]
 792 0028 F868     	 ldr r0,[r7,#12]
 793 002a 2346     	 mov r3,r4
 794 002c FFF7FEFF 	 bl inet_chksum_pseudo_partial
 795 0030 0346     	 mov r3,r0
 540:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 541:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** #endif /* LWIP_IPV4 */
 542:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** }
 796              	 .loc 1 542 0
 797 0032 1846     	 mov r0,r3
 798 0034 1437     	 adds r7,r7,#20
 799              	.LCFI34:
 800              	 .cfi_def_cfa_offset 12
 801 0036 BD46     	 mov sp,r7
 802              	.LCFI35:
 803              	 .cfi_def_cfa_register 13
 804              	 
 805 0038 90BD     	 pop {r4,r7,pc}
 806              	 .cfi_endproc
 807              	.LFE139:
 809 003a 00BF     	 .section .text.inet_chksum,"ax",%progbits
 810              	 .align 2
 811              	 .global inet_chksum
 812              	 .thumb
 813              	 .thumb_func
 815              	inet_chksum:
 816              	.LFB140:
 543:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 544:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** /* inet_chksum:
 545:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 546:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * Calculates the Internet checksum over a portion of memory. Used primarily for IP
 547:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * and ICMP.
 548:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 549:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param dataptr start of the buffer to calculate the checksum (no alignment needed)
 550:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param len length of the buffer to calculate the checksum
 551:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @return checksum (as u16_t) to be saved directly in the protocol header
 552:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  */
 553:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 554:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** u16_t
 555:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** inet_chksum(const void *dataptr, u16_t len)
 556:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** {
 817              	 .loc 1 556 0
 818              	 .cfi_startproc
 819              	 
 820              	 
 821 0000 80B5     	 push {r7,lr}
 822              	.LCFI36:
 823              	 .cfi_def_cfa_offset 8
 824              	 .cfi_offset 7,-8
 825              	 .cfi_offset 14,-4
 826 0002 82B0     	 sub sp,sp,#8
 827              	.LCFI37:
 828              	 .cfi_def_cfa_offset 16
 829 0004 00AF     	 add r7,sp,#0
 830              	.LCFI38:
 831              	 .cfi_def_cfa_register 7
 832 0006 7860     	 str r0,[r7,#4]
 833 0008 0B46     	 mov r3,r1
 834 000a 7B80     	 strh r3,[r7,#2]
 557:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 835              	 .loc 1 557 0
 836 000c 7B88     	 ldrh r3,[r7,#2]
 837 000e 7868     	 ldr r0,[r7,#4]
 838 0010 1946     	 mov r1,r3
 839 0012 FFF7FEFF 	 bl lwip_standard_chksum
 840 0016 0346     	 mov r3,r0
 841 0018 DB43     	 mvns r3,r3
 842 001a 9BB2     	 uxth r3,r3
 558:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** }
 843              	 .loc 1 558 0
 844 001c 1846     	 mov r0,r3
 845 001e 0837     	 adds r7,r7,#8
 846              	.LCFI39:
 847              	 .cfi_def_cfa_offset 8
 848 0020 BD46     	 mov sp,r7
 849              	.LCFI40:
 850              	 .cfi_def_cfa_register 13
 851              	 
 852 0022 80BD     	 pop {r7,pc}
 853              	 .cfi_endproc
 854              	.LFE140:
 856              	 .section .text.inet_chksum_pbuf,"ax",%progbits
 857              	 .align 2
 858              	 .global inet_chksum_pbuf
 859              	 .thumb
 860              	 .thumb_func
 862              	inet_chksum_pbuf:
 863              	.LFB141:
 559:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 560:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** /**
 561:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * Calculate a checksum over a chain of pbufs (without pseudo-header, much like
 562:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * inet_chksum only pbufs are used).
 563:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  *
 564:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @param p pbuf chain over that the checksum should be calculated
 565:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  * @return checksum (as u16_t) to be saved directly in the protocol header
 566:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****  */
 567:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** u16_t
 568:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** inet_chksum_pbuf(struct pbuf *p)
 569:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** {
 864              	 .loc 1 569 0
 865              	 .cfi_startproc
 866              	 
 867              	 
 868 0000 80B5     	 push {r7,lr}
 869              	.LCFI41:
 870              	 .cfi_def_cfa_offset 8
 871              	 .cfi_offset 7,-8
 872              	 .cfi_offset 14,-4
 873 0002 86B0     	 sub sp,sp,#24
 874              	.LCFI42:
 875              	 .cfi_def_cfa_offset 32
 876 0004 00AF     	 add r7,sp,#0
 877              	.LCFI43:
 878              	 .cfi_def_cfa_register 7
 879 0006 7860     	 str r0,[r7,#4]
 570:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   u32_t acc;
 571:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   struct pbuf *q;
 572:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   int swapped = 0;
 880              	 .loc 1 572 0
 881 0008 0023     	 movs r3,#0
 882 000a FB60     	 str r3,[r7,#12]
 573:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 574:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   acc = 0;
 883              	 .loc 1 574 0
 884 000c 0023     	 movs r3,#0
 885 000e 7B61     	 str r3,[r7,#20]
 575:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   for (q = p; q != NULL; q = q->next) {
 886              	 .loc 1 575 0
 887 0010 7B68     	 ldr r3,[r7,#4]
 888 0012 3B61     	 str r3,[r7,#16]
 889 0014 2CE0     	 b .L33
 890              	.L35:
 576:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc += LWIP_CHKSUM(q->payload, q->len);
 891              	 .loc 1 576 0
 892 0016 3B69     	 ldr r3,[r7,#16]
 893 0018 5A68     	 ldr r2,[r3,#4]
 894 001a 3B69     	 ldr r3,[r7,#16]
 895 001c 5B89     	 ldrh r3,[r3,#10]
 896 001e 1046     	 mov r0,r2
 897 0020 1946     	 mov r1,r3
 898 0022 FFF7FEFF 	 bl lwip_standard_chksum
 899 0026 0346     	 mov r3,r0
 900 0028 1A46     	 mov r2,r3
 901 002a 7B69     	 ldr r3,[r7,#20]
 902 002c 1344     	 add r3,r3,r2
 903 002e 7B61     	 str r3,[r7,#20]
 577:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc = FOLD_U32T(acc);
 904              	 .loc 1 577 0
 905 0030 7B69     	 ldr r3,[r7,#20]
 906 0032 1A0C     	 lsrs r2,r3,#16
 907 0034 7B69     	 ldr r3,[r7,#20]
 908 0036 9BB2     	 uxth r3,r3
 909 0038 1344     	 add r3,r3,r2
 910 003a 7B61     	 str r3,[r7,#20]
 578:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     if (q->len % 2 != 0) {
 911              	 .loc 1 578 0
 912 003c 3B69     	 ldr r3,[r7,#16]
 913 003e 5B89     	 ldrh r3,[r3,#10]
 914 0040 03F00103 	 and r3,r3,#1
 915 0044 9BB2     	 uxth r3,r3
 916 0046 002B     	 cmp r3,#0
 917 0048 0FD0     	 beq .L34
 579:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****       swapped = !swapped;
 918              	 .loc 1 579 0
 919 004a FB68     	 ldr r3,[r7,#12]
 920 004c 002B     	 cmp r3,#0
 921 004e 0CBF     	 ite eq
 922 0050 0123     	 moveq r3,#1
 923 0052 0023     	 movne r3,#0
 924 0054 DBB2     	 uxtb r3,r3
 925 0056 FB60     	 str r3,[r7,#12]
 580:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****       acc = SWAP_BYTES_IN_WORD(acc);
 926              	 .loc 1 580 0
 927 0058 7B69     	 ldr r3,[r7,#20]
 928 005a 1B02     	 lsls r3,r3,#8
 929 005c 9AB2     	 uxth r2,r3
 930 005e 7B69     	 ldr r3,[r7,#20]
 931 0060 03F47F43 	 and r3,r3,#65280
 932 0064 1B0A     	 lsrs r3,r3,#8
 933 0066 1343     	 orrs r3,r3,r2
 934 0068 7B61     	 str r3,[r7,#20]
 935              	.L34:
 575:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc += LWIP_CHKSUM(q->payload, q->len);
 936              	 .loc 1 575 0 discriminator 2
 937 006a 3B69     	 ldr r3,[r7,#16]
 938 006c 1B68     	 ldr r3,[r3]
 939 006e 3B61     	 str r3,[r7,#16]
 940              	.L33:
 575:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc += LWIP_CHKSUM(q->payload, q->len);
 941              	 .loc 1 575 0 is_stmt 0 discriminator 1
 942 0070 3B69     	 ldr r3,[r7,#16]
 943 0072 002B     	 cmp r3,#0
 944 0074 CFD1     	 bne .L35
 581:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     }
 582:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 583:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** 
 584:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   if (swapped) {
 945              	 .loc 1 584 0 is_stmt 1
 946 0076 FB68     	 ldr r3,[r7,#12]
 947 0078 002B     	 cmp r3,#0
 948 007a 08D0     	 beq .L36
 585:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****     acc = SWAP_BYTES_IN_WORD(acc);
 949              	 .loc 1 585 0
 950 007c 7B69     	 ldr r3,[r7,#20]
 951 007e 1B02     	 lsls r3,r3,#8
 952 0080 9AB2     	 uxth r2,r3
 953 0082 7B69     	 ldr r3,[r7,#20]
 954 0084 03F47F43 	 and r3,r3,#65280
 955 0088 1B0A     	 lsrs r3,r3,#8
 956 008a 1343     	 orrs r3,r3,r2
 957 008c 7B61     	 str r3,[r7,#20]
 958              	.L36:
 586:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   }
 587:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c ****   return (u16_t)~(acc & 0xffffUL);
 959              	 .loc 1 587 0
 960 008e 7B69     	 ldr r3,[r7,#20]
 961 0090 9BB2     	 uxth r3,r3
 962 0092 DB43     	 mvns r3,r3
 963 0094 9BB2     	 uxth r3,r3
 588:../Dave/Generated/ETH_LWIP/lwip/core/inet_chksum.c **** }
 964              	 .loc 1 588 0
 965 0096 1846     	 mov r0,r3
 966 0098 1837     	 adds r7,r7,#24
 967              	.LCFI44:
 968              	 .cfi_def_cfa_offset 8
 969 009a BD46     	 mov sp,r7
 970              	.LCFI45:
 971              	 .cfi_def_cfa_register 13
 972              	 
 973 009c 80BD     	 pop {r7,pc}
 974              	 .cfi_endproc
 975              	.LFE141:
 977 009e 00BF     	 .text
 978              	.Letext0:
 979              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 980              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 981              	 .file 4 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/arch.h"
 982              	 .file 5 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/pbuf.h"
 983              	 .file 6 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/ip4_addr.h"
 984              	 .file 7 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Dave/Generated/ETH_LWIP/lwip/include/lwip/ip_addr.h"
 985              	 .file 8 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Libraries/CMSIS/Include/cmsis_gcc.h"
 986              	 .file 9 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/ScpiRelax/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 inet_chksum.c
    {standard input}:20     .text.lwip_standard_chksum:00000000 $t
    {standard input}:25     .text.lwip_standard_chksum:00000000 lwip_standard_chksum
    {standard input}:168    .text.inet_cksum_pseudo_base:00000000 $t
    {standard input}:172    .text.inet_cksum_pseudo_base:00000000 inet_cksum_pseudo_base
    {standard input}:323    .text.inet_chksum_pseudo:00000000 $t
    {standard input}:328    .text.inet_chksum_pseudo:00000000 inet_chksum_pseudo
    {standard input}:418    .text.ip_chksum_pseudo:00000000 $t
    {standard input}:423    .text.ip_chksum_pseudo:00000000 ip_chksum_pseudo
    {standard input}:469    .text.inet_cksum_pseudo_partial_base:00000000 $t
    {standard input}:473    .text.inet_cksum_pseudo_partial_base:00000000 inet_cksum_pseudo_partial_base
    {standard input}:650    .text.inet_chksum_pseudo_partial:00000000 $t
    {standard input}:655    .text.inet_chksum_pseudo_partial:00000000 inet_chksum_pseudo_partial
    {standard input}:751    .text.ip_chksum_pseudo_partial:00000000 $t
    {standard input}:756    .text.ip_chksum_pseudo_partial:00000000 ip_chksum_pseudo_partial
    {standard input}:810    .text.inet_chksum:00000000 $t
    {standard input}:815    .text.inet_chksum:00000000 inet_chksum
    {standard input}:857    .text.inet_chksum_pbuf:00000000 $t
    {standard input}:862    .text.inet_chksum_pbuf:00000000 inet_chksum_pbuf
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
lwip_htons
